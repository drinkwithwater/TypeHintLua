

const debug = {}

(@let.DebugInfo = Struct {
    namewhat=String,
    isvararg=Boolean,
    ntransfer=Integer,
    nups=Integer,
    currentline=Integer,
    func=AnyFunction,
    nparams=Integer,
    short_src=String,
    ftransfer=Integer,
    istailcall=Boolean,
    lastlinedefined=Integer,
    linedefined=Integer,
    source=String,
    what=String,
    name=OrNil(String),
})

function.nocheck debug.debug()
end

function.nocheck debug.gethook(co:OrNil(Thread))
end


(@let.WhatOrNil = OrNil("n", "S", "l", "t", "u", "f", "r", "L", String))
const function.nocheck _getinfo(f:Union(Integer, AnyFunction), what:WhatOrNil):Ret(DebugInfo) end
function.open debug.getinfo(coOrF, ...)
    if type(coOrF) == "thread" then
        return _getinfo(...)
    else
        return _getinfo(coOrF, ...)
    end
end

const function.nocheck _getlocal(f:Union(Integer, AnyFunction), local_:Integer):Ret(Nil):Ret(String, Any) end
function.open debug.getlocal(coOrF, ...)
    if type(coOrF) == "thread" then
        return _getlocal(...)
    else
        return _getlocal(coOrF, ...)
    end
end

function.nocheck debug.getmetatable(value:Any):Ret(Any)
end

function.nocheck debug.getregistry():Ret(Any)
end

function.nocheck debug.getupvalue(f:AnyFunction, up:Integer):Ret(String, Any)
end

function.nocheck debug.getuservalue(u:Any, n:OrNil(Integer)):Ret(Any, Boolean)
end

const function.nocheck _sethook(hook:AnyFunction, mask:String, count:OrNil(Integer)) end
function.open debug.sethook(coOrF,...)
    if type(coOrF) == "thread" then
        return _sethook(...)
    else
        return _sethook(coOrF, ...)
    end
end

const function.nocheck _setlocal(level:Integer, local_:Integer, value:Any) end
function.open debug.setlocal(coOrLevel, ...)
    if type(coOrLevel) == "thread" then
        return _setlocal(...)
    else
        return _setlocal(coOrLevel, ...)
    end
end

function.nocheck debug.setmetatable(t:Any, v:OrNil(Any)):Ret(Any)
end

function.nocheck debug.setupvalue(f:AnyFunction, up:Integer, value:Any):Ret(String)
end

const function.nocheck _traceback(message:OrNil(String), level:OrNil(Integer)):Ret(String) end
function.open debug.traceback(coOrMsg, ...)
    if type(coOrMsg) == "thread" then
        return _traceback(...)
    else
        return _traceback(coOrMsg, ...)
    end
end

function.open debug.upvalueid(f:AnyFunction, n:Integer)
    (@print("debug.upvalueid TODO"))
end

function.open debug.upvaluejoin(f1:AnyFunction, n1:Integer, f2:AnyFunction, n2:Integer)
    (@print("debug.upvaluejoin TODO"))
end

_ENV.debug = debug

