
const string = {}

-- Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j].
function.nocheck string.byte(s:String, i:OrNil(Integer), j:OrNil(Integer)):RetDots(Integer)
end

-- Receives zero or more integers. Returns a string with length equal to the number of arguments
function.nocheck string.char(...:Integer):RetDots(String)
    -- TODO, maybe use open function ?
end

-- Returns a string containing a binary representation (a binary chunk) of the given function.
function.nocheck string.dump(fn:AnyFunction, strip:OrNil(Boolean)):Ret(String)
end

-- Looks for the first match of pattern in the string s.
function.nocheck string.find(s:String, pattern:String, init:OrNil(Integer), plain:OrNil(Boolean)):RetDots(Integer, Integer, String):Ret(Nil)
end

-- Returns a formatted version of its variable number of arguments following the description given in its first argument, which must be a string. The format string follows the same rules as the ISO C function sprintf. The only differences are that the conversion specifiers and modifiers F, n, *, h, L, and l are not supported and that there is an extra specifier, q. Both width and precision, when present, are limited to two digits.
function.nocheck string.format(s:String, ...:Any):Ret(String)
    -- TODO, use open function to check formatstring matching
end

-- Returns an iterator function that, each time it is called, returns the next captures from pattern over the string s.
function.nocheck string.gmatch(s:String, pattern:String, init:OrNil(Integer)):Ret(Fn():RetDots(String))
end

-- Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have been replaced by a replacement string specified by repl,
function.nocheck string.gsub(
    s:String,
    pattern:String,
    repl:Union(String, Fn(String):Dots(String):Ret(String), Dict(String, String)),
    n:OrNil(Integer)
):Ret(String, Integer)
end

-- Receives a string and returns its length.
function.nocheck string.len(s:String):Ret(Integer)
end

-- Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.
function.nocheck string.lower(s:String):Ret(String)
end

-- Looks for the first match of the pattern in the string s.
function.nocheck string.match(s:String, pattern:String, init:OrNil(Integer)):RetDots(String)
end

-- Returns a binary string containing the values v1, v2.
function.nocheck string.pack(fmt:String, ...:Union(String, Number)):Ret(String)
    -- TODO use open function?
end

-- Returns the size of a string resulting from string.pack with the given format.
function.nocheck string.packsize(fmt:String):Ret(Integer)
end

-- Returns a string that is the concatenation of n copies of the string s separated by the string sep.
function.nocheck string.rep(s:String, n:Integer, sep:OrNil(String)):Ret(String)
end

-- Returns a string that is the string s reversed.
function.nocheck string.reverse(s:String):Ret(String)
end

-- Returns the substring of s that starts at i and continues until j; i and j can be negative.
function.nocheck string.sub(s:String, i:Integer, j:OrNil(Integer)):Ret(String)
end

-- Returns the values packed in string s (see string.pack) according to the format string fmt.
function.nocheck string.unpack(fmt:String, s:Integer, pos:OrNil(Integer)):RetDots(Union(String, Number))
    -- TODO use open function?
end

-- Receives a string and returns a copy of this string with all lowercase letters changed to uppercase.
function.nocheck string.upper(s:String):Ret(String)
end

_ENV.string = string

return string

