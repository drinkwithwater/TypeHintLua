{
  "firstLineMatch": "\\A#!.*?\\blua(\\d+(\\.\\d+)?)?\\b|\\A--\\s+-\\*-\\s*lua\\s*-\\*-",
  "name": "TypeHintLua",
  "patterns": [
    {
      "begin": "\\b(?:(local|const)\\s+)?(function)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:([\\.:])[a-zA-Z_][a-zA-Z0-9_]*)?)\\s*)?(\\()",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.local.thlua"
        },
        "2": {
          "name": "keyword.control.thlua"
        },
        "3": {
          "name": "entity.name.function.thlua"
        },
        "4": {
          "name": "punctuation.separator.parameter.thlua"
        },
        "5": {
          "name": "punctuation.definition.parameters.begin.thlua"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.thlua"
        }
      },
      "name": "meta.function.thlua",
      "patterns": [
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.parameter.function.thlua"
        },
        {
          "match": ",",
          "name": "punctuation.separator.arguments.thlua"
        }
      ]
    },
    {
      "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
      "name": "constant.numeric.integer.hexadecimal.thlua"
    },
    {
      "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
      "name": "constant.numeric.float.hexadecimal.thlua"
    },
    {
      "match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
      "name": "constant.numeric.integer.thlua"
    },
    {
      "match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
      "name": "constant.numeric.float.thlua"
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.thlua"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.thlua"
        }
      },
      "name": "string.quoted.single.thlua",
      "patterns": [
        {
          "include": "#escaped_char"
        }
      ]
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.thlua"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.thlua"
        }
      },
      "name": "string.quoted.double.thlua",
      "patterns": [
        {
          "include": "#escaped_char"
        }
      ]
    },
    {
      "begin": "(?<!--)\\[(=*)\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.thlua"
        }
      },
      "end": "\\]\\1\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.thlua"
        }
      },
      "name": "string.quoted.other.multiline.thlua"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.thlua"
        }
      },
      "match": "\\A(#!).*$\\n?",
      "name": "comment.line.shebang.thlua"
    },
    {
      "begin": "(^[ \\t]+)?(?=--)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.thlua"
        }
      },
      "end": "(?!\\G)((?!^)[ \\t]+\\n)?",
      "endCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.trailing.thlua"
        }
      },
      "patterns": [
        {
          "begin": "--\\[(=*)\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.thlua"
            }
          },
          "end": "\\]\\1\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.thlua"
            }
          },
          "name": "comment.block.thlua"
        },
        {
          "begin": "--",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.thlua"
            }
          },
          "end": "\\n",
          "name": "comment.line.double-dash.thlua"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.goto.thlua"
        },
        "2": {
          "name": "constant.other.placeholder.thlua"
        }
      },
      "match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.label.begin.thlua"
        },
        "2": {
          "name": "punctuation.definition.label.end.thlua"
        }
      },
      "match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
      "name": "constant.other.placeholder.thlua"
    },
    {
      "match": "\\b(continue|break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in|const|let)\\b",
      "name": "keyword.control.thlua"
    },
    {
      "match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
      "name": "constant.language.thlua"
    },
    {
      "match": "(?<![^.]\\.|:)\\b(self)\\b",
      "name": "variable.language.self.thlua"
    },
    {
      "match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=\\s*(?:[({\"']|\\[\\[))",
      "name": "support.function.thlua"
    },
    {
      "match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))",
      "name": "support.function.library.thlua"
    },
    {
      "match": "\\b(and|or|not)\\b",
      "name": "keyword.operator.thlua"
    },
    {
      "match": "(?<=(function)[.:])\\b([a-zA-Z_][a-zA-Z0-9_]*)",
      "name": "keyword.control.thlua"
    },
    {
      "match": "(?<=(do)[.:])\\b([a-zA-Z_][a-zA-Z0-9_]*)",
      "name": "keyword.control.thlua"
    },
    {
      "match": "(?<=[{][.:])\\b([a-zA-Z_][a-zA-Z0-9_]*)",
      "name": "keyword.control.thlua"
    },
    {
      "match": "@[?>!]?",
      "name": "keyword.control.thlua"
    },
    {
      "match": "[$!]",
      "name": "keyword.control.thlua"
    },
    {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
      "name": "support.function.any-method.thlua"
    },
    {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)",
      "name": "variable.other.thlua"
    },
    {
      "match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
      "name": "keyword.operator.thlua"
    }
  ],
  "repository": {
    "escaped_char": {
      "patterns": [
        {
          "match": "\\\\[abfnrtvz\\\\\"'\\n]",
          "name": "constant.character.escape.thlua"
        },
        {
          "match": "\\\\\\d{1,3}",
          "name": "constant.character.escape.byte.thlua"
        },
        {
          "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
          "name": "constant.character.escape.byte.thlua"
        },
        {
          "match": "\\\\u\\{[0-9A-Fa-f]+\\}",
          "name": "constant.character.escape.unicode.thlua"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.character.escape.thlua"
        }
      ]
    }
  },
  "scopeName": "source.thlua"
}
