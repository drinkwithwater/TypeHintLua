
-- 1.2 use @ for type cast

-- 1) use '@' for covariance cast, this is safe
local castToA = 321 @ Integer

-- 2) use '@!' for ignore nil cast, this is unsafe
castToA = nil @! Integer

-- 3) use '@>' for contravariance cast, this is unsafe
const contraCast:Union(1,2) = castToA @> Literal(1)

-- 4) use '@?' for force cast, this is very unsafe
const forceCast:Union(1,2) = "fdsfs" @? Literal(1)

-- 5) use '@<' '>' for poly function
const function dosth@<T>(a:T):Ret(T)
	return a
end

const t:Integer = dosth@<Integer>(321)

-- 6) use '!' to ignore symbol or index's nil case
const i2s:Dict(Integer,String) = {}
const s:String = i2s[1]!


-- define an auto table, and cast it to a struct
const dataA:Struct {fds=123, rew="fds"} = const {
	fds=123,
	rew="fds",
}

-- define a class function
const function:class(let.Hello) make(a:Integer, b:String)
	-- declare self table with .class
	return {.class
		a=a,
		b=b,
	}
end
