
const function test()
	const t:Fn(Integer) = function(a)
	end
end

const function test()
	(@do
		let.A = Struct {
			tag = "a",
			fds = Fn(Integer):Ret(String)
		}
		let.B = Struct {
			tag = "b",
			fds = Fn(Integer):Ret(String)
		}
	end)

	const right:A = {
		tag = "a",
		fds = function(a)
			return "fds"
		end
	}

	local right:Union(A,B) = {
		tag = "a",
		fds = function(a)
			return "fds"
		end
	}

	const wrong:A = {
		tag = "a",
		fds = function(a)
			return "fds"
		end
	}
end

const function test()
	(@do
		let.A = Struct {
			tag = "a",
			fds = Fn(Integer):Ret(String),
			b = let.B
		}
		let.B = Struct {
			tag = "b",
			fds = Fn(Integer):Ret(String)
		}
	end)

	const right:A = {
		tag = "a",
		fds = function(a)
			return "fds"
		end,
		b = {
			tag = "b",
			fds = function(a)
				ttprint(a)
				return "fdsfs"
			end
		}
	}

end
