
(@do
	let.class = import("thlua.type.TypeClass").class
	let.node = import("thlua.code.Node").node
end)

local Exception = {}
Exception.__index=Exception
Exception.__tostring=function(t)
	return "Exception:"..tostring(t.node)..":"..t.msg
end

function Exception.new(vMsg:String, vNode:OrNil(class.IAstNode, False))::RetClass(class.Exception)
	--[[if Exception.is(vMsg) then
		vMsg = vMsg.msg
	end]]
	return setmetatable({::Self()
		msg=tostring(vMsg), -- ..debug.traceback()
		node=vNode,
	}, Exception)
end

function Exception:fixNode(vNode:node.IAstNode)
	if not self.node then
		self.node = vNode
	end
end

function Exception.is(v)::isguard(class.Exception)
	return getmetatable(v) == Exception
end

return Exception
