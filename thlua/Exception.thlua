
(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

local Exception = {}
Exception.__index=Exception
Exception.__tostring=function(t)
	return "Exception:"..tostring(t.node)..":"..t.msg
end

function:class(clazz.Exception) Exception.new(vMsg:String, vNode:OrNil(clazz.IAstNode, False))
	--[[if Exception.is(vMsg) then
		vMsg = vMsg.msg
	end]]
	return setmetatable({.class
		msg=tostring(vMsg), -- ..debug.traceback()
		node=vNode,
	}, Exception)
end

function Exception:fixNode(vNode:node.IAstNode)
	if not self.node then
		self.node = vNode
	end
end

function.open Exception.is(v):isguard(clazz.Exception)
	return getmetatable(v) == Exception
end

return Exception
