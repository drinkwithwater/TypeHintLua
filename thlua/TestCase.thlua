
const Runtime = require "thlua.runtime.CodeRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const SplitCode = require "thlua.code.SplitCode"
(@do
	let.test = namespace()
	let.clazz = import("thlua.class").clazz
end)

const TestCase = {}
TestCase.__index = TestCase

function:class(test.Case) TestCase.new(vScript:String)
	const nLineToResult:Dict(Integer, Union(String, Integer)) = {}
	const nLineList:List(String) = {}
	for nLine in string.gmatch(vScript, "([^\n]*)") do
		nLineList[#nLineList + 1] = nLine
		if nLine:match("--E$") then
			nLineToResult[#nLineList] = 0
		end
	end
	const self = setmetatable({.class
		_runtime = nil @! clazz.CodeRuntime,
		_script = vScript,
		_lineToResult = nLineToResult,
	}, TestCase)
	self._runtime = Runtime.new({
		searchPath=function(vPrefix, vPath)
			error("test case can't search path")
		end,
		parseFile=function(vFileName)
			if vFileName == "[test]" then
				const ok, nCodeEnv = pcall(CodeEnv.new, self._script, vFileName)
				if not ok then
					error(nCodeEnv)
				end
				return nCodeEnv
			else
				error("test case can only parse its script")
			end
		end,
		parseGlobal=function.nocheck(vPackage)
			local nContent:String = require("thlua.global."..vPackage)
			const nFileName = "@virtual-file:"..vPackage
			const nCodeEnv = CodeEnv.new(nContent, nFileName)
			return nCodeEnv, nFileName
		end,
		createAsync=function.nocheck(fn)
			error("create async TODO in test case")
		end
	})
	return self
end

function TestCase:getRuntime()
	return self._runtime
end

function TestCase.go(vScript:String, vName:OrNil(String))
	if not vName then
		const nInfo = debug.getinfo(2)
		print(nInfo.source..":"..nInfo.currentline..":")
	else
		print(vName)
	end
	const case = TestCase.new(vScript)
	const nRuntime = case:getRuntime()
	const oldprint = print
	do.nocheck
		print = function(...)
		end
	end
	nRuntime:promiseMain("[test]"):next@<Nil>(function(_)
		print = oldprint
		const nLineToResult = case._lineToResult
		for _, nDiaList in pairs(nRuntime:getAllDiagnostic()) do
			for _, nDiagnostic in pairs(nDiaList) do
				const nLine = nDiagnostic.node.l
				const nResult = nLineToResult[nLine]
				if type(nResult) == "number" then
					nLineToResult[nLine] = nResult + 1
				else
					nLineToResult[nLine] = nDiagnostic.msg
				end
			end
		end
		const l:List(Struct {Integer, Union(Integer, String)}) = {}
		for nLine, nResult in pairs(nLineToResult) do
			l[#l + 1] = {nLine, nResult}
		end
		for _, nPair in pairs(l) do
			const nLine, nResult = nPair[1], nPair[2]
			if nResult == 0 then
				print(nLine, "fail: no diagnostic")
			elseif type(nResult) == "string" then
				print(nLine, "fail: diagnostic unexpected", nResult)
			else
				print(nLine, "ok")
			end
		end
	end)
end


return TestCase
