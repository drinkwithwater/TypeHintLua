
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoHolder = {}
AutoHolder.__index = AutoHolder
AutoHolder.__tostring = function(self:clazz.AutoHolder)
	return "auto"
end

function:class(clazz.AutoHolder) AutoHolder.new()
	const self = setmetatable({.class
		_term=false@OrFalse(clazz.RefineTerm)
	}, AutoHolder)
	return self
end

function AutoHolder:checkRefineTerm(vContext:clazz.Context):Ret(clazz.RefineTerm)
	const nTerm = self._term
	if nTerm then
		return nTerm
	else
		error(Exception.new("undeduced auto param is used", vContext:getNode()))
	end
end

function AutoHolder:setAutoCastType(vContext:clazz.Context, vType:clazz.UAllType):Ret(clazz.RefineTerm)
	const nTerm = vContext:RefineTerm(vType)
	self._term = nTerm
	return nTerm
end

function AutoHolder:getRefineTerm():Ret(OrFalse(clazz.RefineTerm))
	return self._term
end

function AutoHolder:getType():Ret(OrFalse(clazz.UAtomUnion))
	const nTerm = self._term
	return nTerm and nTerm:getType()
end

function.open AutoHolder.is(t):isguard(clazz.AutoHolder)
	return getmetatable(t) == AutoHolder
end

return AutoHolder
