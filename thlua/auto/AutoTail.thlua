
const AutoHolder = require "thlua.auto.AutoHolder"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoTail = {}
AutoTail.__index = AutoTail

function:class(clazz.AutoTail) AutoTail.new(vManager:clazz.TypeManager)
	const self = setmetatable({.class
		_manager=vManager,
		_holderList={}@List(clazz.UAutoTerm),
		_sealTail=false@OrFalse(True, clazz.AutoTail, clazz.DotsTail),
		_typeTuple=false@OrFalse(clazz.UTypeTuple)
	}, AutoTail)
	return self
end

function AutoTail:getMore(vContext:clazz.Context, vMore:Integer):Ret(clazz.UAutoTerm)
	const nList = self._holderList
	const nHolder = nList[vMore]
	if nHolder then
		return nHolder
	else
		for i=#nList + 1, vMore do
			nList[i] = AutoHolder.new()
		end
		return nList[vMore]!
	end
end

function AutoTail:setMore(vContext:clazz.Context, vMore:Integer, vAutoTerm:clazz.UAutoTerm)
	const nList = self._holderList
	nList[vMore] = vAutoTerm
end

function AutoTail:setAutoCastTuple(vTuple:clazz.UTypeTuple)
	self._typeTuple = vTuple
end

function AutoTail:getTypeTuple():Ret(OrFalse(clazz.UTypeTuple))
	return self._typeTuple
end

function.open AutoTail.is(t):isguard(clazz.AutoTail)
	return getmetatable(t) == AutoTail
end

return AutoTail
