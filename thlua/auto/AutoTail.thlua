
const AutoHolder = require "thlua.auto.AutoHolder"
const DotsTail = require "thlua.tuple.DotsTail"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoTail = {}
AutoTail.__index = AutoTail

function:class(clazz.AutoTail) AutoTail.new(vManager:clazz.TypeManager, vInit:OrNil(List(clazz.AutoHolder)))
	const self = setmetatable({.class
		_manager=vManager,
		_holderList=vInit or {}@List(clazz.AutoHolder),
		_sealTail=false@OrFalse(True, clazz.AutoTail, clazz.DotsTail),
	}, AutoTail)
	return self
end

function AutoTail:getMore(vContext:clazz.Context, vMore:Integer):Ret(clazz.UAutoTerm)
	const nList = self._holderList
	const nHolder = nList[vMore]
	if nHolder then
		return nHolder
	else
		const nSealTail = self._sealTail
		if not nSealTail then
			for i=#nList + 1, vMore do
				nList[i] = AutoHolder.new()
			end
			return nList[vMore]!
		else
			if nSealTail == true then
				return vContext:NilTerm()
			else
				return nSealTail:getMore(vContext, vMore - #nList)
			end
		end
	end
end

function AutoTail:openTailFrom(vContext:clazz.Context, vFrom:Integer):Ret(clazz.AutoTail)
	if vFrom == 1 then
		return self
	elseif vFrom > 1 then
		const nSelfHolderList = self._holderList
		const nSelfLen = #nSelfHolderList
		const nNewHolderList:List(clazz.AutoHolder) = {}
		for i=vFrom, nSelfLen do
			nNewHolderList[#nNewHolderList + 1] = nSelfHolderList[i]
			nSelfHolderList[i] = nil
		end
		const nNewAutoTail = AutoTail.new(self._manager, nNewHolderList)
		self._sealTail = nNewAutoTail
		return nNewAutoTail
	else
		error("openTailFrom must take from > 0")
	end
end

function AutoTail:sealTailFrom(vContext:clazz.Context, vFrom:Integer, vSealTail:Union(True, clazz.UAllType))
	if vSealTail == true then
		self._sealTail = true
	else
		self._sealTail = DotsTail.new(vContext, vSealTail)
	end
end

-- false means has auto part, true or type means seal success
function AutoTail:_recurPutType(vList:List(clazz.UAllType)):Ret(OrFalse(True, clazz.UAllType))
	for i,v in ipairs(self._holderList) do
		const nType = v:getType()
		if nType then
			vList[#vList + 1] = nType
		else
			return false
		end
	end
	const nTail = self._sealTail
	if not nTail then
		return false
	elseif nTail == true then
		return true
	elseif AutoTail.is(nTail) then
		return nTail:_recurPutType(vList)
	else
		return nTail:getRepeatType()
	end
end

function AutoTail:checkTypeTuple(vContext:clazz.Context):Ret(OrFalse(clazz.UTypeTuple))
	const nList:List(clazz.UAllType) = {}
	const nDotsType = self:_recurPutType({})
	if not nDotsType then
		return false
	else
		const nType = self._manager:TypeTuple(vContext:getNode(), table.unpack(nList))
		if nDotsType == true then
			return nType
		else
			return nType:Dots(nDotsType)
		end
	end
end

function.open AutoTail.is(t):isguard(clazz.AutoTail)
	return getmetatable(t) == AutoTail
end

return AutoTail
