
const AutoFlag = require "thlua.auto.AutoFlag"
const AutoFunction = require "thlua.refer.AutoFunction"
const Reference = require "thlua.refer.Reference"
const Exception = require "thlua.Exception"
const Enum = require "thlua.Enum"
const MetaObject = require "thlua.object.MetaObject"
const AutoHolder = require "thlua.auto.AutoHolder"
const ClassFactory = require "thlua.refer.ClassFactory"
const TermTuple = require "thlua.tuple.TermTuple"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node

	clazz.AutoFlag = $AutoFlag
	clazz.UBodyFunction = Union(clazz.AutoFunction, clazz.ClassFactory, clazz.OpenFunction)
	clazz.ULuaInnerFn = Union(clazz.UBodyFunction, clazz.PolyFunction, clazz.MemberFunction)

	clazz.GenParam = Fn(OrFalse(clazz.UTermTuple)):Ret(List(clazz.UAutoTerm), OrFalse(clazz.UTermTuple))
	clazz.GenMaker = Fn(clazz.UBodyFunction, OrFalse(clazz.VariableCase), clazz.BodyContext, List(clazz.UAllType), OrFalse(clazz.UAllType)):Ret(clazz.GenParam, clazz.TLongHintInfo(clazz.FnSuffixHint), clazz.GenFunc)
	clazz.GenFunc = Fn():Ret(clazz.FixedTermTuple)

	clazz.FnPrefixHint = Struct {
		class=Fn(clazz.FnPrefixHint, Any):Ret(clazz.FnPrefixHint),
	}

	clazz.FnSuffixHint = Struct {
		impl=Fn(clazz.FnSuffixHint, clazz.UAllType):Ret(clazz.FnSuffixHint),
		Ret=Fn(clazz.FnSuffixHint):Dots(clazz.UAllType):Ret(clazz.FnSuffixHint),
		RetDots=Fn(clazz.FnSuffixHint, clazz.UAllType):Dots(clazz.UAllType):Ret(clazz.FnSuffixHint),
		isguard=Fn(clazz.FnSuffixHint, clazz.UAllType):Ret(clazz.FnSuffixHint),
	}

	clazz.ParHintStruct = Struct ({
		[Integer]=Union(clazz.AutoFlag, clazz.UAllType),
		dots=OrNil(Union(clazz.AutoFlag, clazz.UAllType)),
	}, {
		__next=Integer,
		__len=Integer,
	})

	clazz.FuncNewInfo = Struct ({
		_prefixHint=clazz.TLongHintInfo(clazz.FnPrefixHint),
		_hasRetSome=Boolean,
		_hasSuffixHint=Boolean,
		_polyParNum=Integer,
		_parNum=Integer,
		_parFullHint=Boolean,
		_member=Boolean,
	}, {
		__next=KeyOf(clazz.FuncNewInfo)
	})
end)

const FunctionBuilder = {}
FunctionBuilder.__index=FunctionBuilder

function:class(clazz.FunctionBuilder) FunctionBuilder.new(
	vManager:clazz.TypeManager,
	vContext:clazz.BodyContext,
	vNode:clazz.IAstNode,
	vUpValueCase:OrFalse(clazz.VariableCase),
	vInfo:clazz.FuncNewInfo,
	vParRetMaker:clazz.GenMaker
)
	const self = {.class
		_manager=vManager,
		_context=vContext,
		_node=vNode,
		_uvCase=vUpValueCase,
		_pass=vInfo._prefixHint.attrSet.pass and true or false,
		_parRetMaker=vParRetMaker,
	}
	for k,v in pairs(vInfo) do
		self[k] = v
	end
	setmetatable(self, FunctionBuilder)
	return self
end

function FunctionBuilder:error(...:Truth)
	if not self._pass then
		self._context:getRuntime():nodeError(self._node, ...)
	end
end

function FunctionBuilder:_makeRetTuples(
	vSuffixHint:clazz.TLongHintInfo(clazz.FnSuffixHint),
	vTypeList:List(clazz.UAllType),
	vSelfType:OrFalse(clazz.UAllType)
):Ret(OrFalse(clazz.RetTuples))
	local nFakeFn:OrFalse(clazz.TypeFunction) = false
	const ok, err = pcall(vSuffixHint.caller, {
		impl=function(vHint, _)
			error("impl can only be used with function:class")
			return vHint
		end,
		RetDots=function(vHint, vFirst, ...)
			const nFn = nFakeFn or self._manager:buildFn(self._node)
			nFn:RetDots(vFirst, ...)
			nFakeFn = nFn
			return vHint
		end,
		Ret=function(vHint, ...)
			const nFn = nFakeFn or self._manager:buildFn(self._node)
			nFn:Ret(...)
			nFakeFn = nFn
			return vHint
		end,
		isguard=function(vHint, vType)
			error("isguard can only be used with function.open")
			return vHint
		end,
	})
	if not ok then
		error(Exception.new(tostring(err), self._node))
	end
	const nRetTuples = nFakeFn and nFakeFn:getRetTuples()
	if not self._hasRetSome then
		if nRetTuples and not self._pass then
			local hasVoid = false
			local hasSome = false
			nRetTuples:foreachWithFirst(function(vTypeTuple, _)
				if #vTypeTuple > 0 then
					hasSome = true
				else
					hasVoid = true
				end
			end)
			if hasSome and not hasVoid then
				self:error("hint return something but block has no RetStat")
			end
		end
	end
	return nRetTuples
end

function FunctionBuilder:_buildInnerFn():Ret(OrFalse(clazz.AutoFunction, clazz.MemberFunction, clazz.PolyFunction))
	const nPolyParNum = self._polyParNum
	const nFnMaker = function(vPolyParList:List(clazz.UAllType), vSelfType:OrFalse(clazz.UAllType)):Ret(clazz.AutoFunction)
		const nNewContext = self._context:newSealContext(self._node)
		const nAutoFn = self._manager:SealReference(nNewContext):setAutoFunction(self._node, function(vAutoFn, vCastTypeFn)
			const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(vAutoFn, self._uvCase, nNewContext, vPolyParList, vSelfType)
			-- make par
			const nCastArgs = vCastTypeFn and vCastTypeFn:getParTuple():makeTermTuple(nNewContext)
			const nParTermTuple = nNewContext:UTermTupleByAppend(nGenParam(nCastArgs))
			const nParTuple = nParTermTuple:checkTypeTuple()
			-- make ret
			const nCastRet = vCastTypeFn and vCastTypeFn:getRetTuples()
			const nHintRetTuples = self:_makeRetTuples(nSuffixHint, vPolyParList, vSelfType)
			if nHintRetTuples and nCastRet then
				if not nCastRet:includeTuples(nHintRetTuples) then
					nNewContext:error("hint return not match when cast")
				end
			end
			const nRetTuples = nHintRetTuples or nCastRet or (not self._hasRetSome and self._manager:VoidRetTuples())
			const nPreTypeFn = nParTuple and nRetTuples and self._manager:TypeFunction(self._node, nParTuple, nRetTuples) or false
			return nPreTypeFn, function()
				if self._pass then
					if not nParTuple or not nRetTuples then
						error("pass function can't take auto return or auto parameter")
					end
					return nPreTypeFn or self._manager:TypeFunction(self._node, nParTuple, nRetTuples)
				else
					const nRetTermTuple = nGenFunc()
					const nParTuple = nParTuple or nParTermTuple:checkTypeTuple()
					if not nParTuple then
						nNewContext:error("auto parameter deduce failed")
						error("auto parameter deduce failed")
					end
					const nRetTuples = nRetTuples or self._manager:SingleRetTuples(nRetTermTuple:checkTypeTuple())
					if not nRetTuples then
						nNewContext:error("auto return deduce failed")
						error("auto return deduce failed")
					end
					return nPreTypeFn or self._manager:TypeFunction(self._node, nParTuple, nRetTuples)
				end
			end
		end)
		self._context:recordAutoFunction(nAutoFn)
		return nAutoFn
	end
	if not self._member then
		if nPolyParNum <= 0 then
			return nFnMaker({}, false)
		else
			return self._manager:PolyFunction(self._node, function(...:clazz.UAllType)
				return nFnMaker({...}, false)
			end, nPolyParNum)
		end
	else
		const nPolyFn = self._manager:PolyFunction(self._node, function(self:clazz.UAllType, ...:clazz.UAllType)
			return nFnMaker({...}, self)
		end, nPolyParNum + 1)
		return self._manager:MemberFunction(self._node, nPolyFn)
	end
end

function FunctionBuilder:_buildOpen():Ret(clazz.OpenFunction)
	const nMakerContext = self._context:newOpenContext(self._node)
	if self._hasSuffixHint then
		const nGuardFn = self._manager:OpenFunction()
		local nSetted = false
		const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(nGuardFn, self._uvCase, nMakerContext, {}, false)
		const ok, err = pcall(nSuffixHint.caller, {
			impl=function(vHint, _)
				return vHint
			end,
			RetDots=function(vHint, vFirst, ...)
				error("open table can't take RetDots")
				return vHint
			end,
			Ret=function(vHint, ...)
				error("open table can't take Ret")
				return vHint
			end,
			isguard=function(vHint, vType)
				assert(not nSetted, "isguard can only use once here")
				nGuardFn:lateInitFromGuard(vType)
				return vHint
			end,
		})
		if not ok then
			error(Exception.new(tostring(err), self._node))
		end
		return nGuardFn
	else
		return self._manager:OpenFunction():lateInitFromBuilder(self._polyParNum, function(vOpenFn, vContext, vPolyArgs, vTermTuple)
			const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(vOpenFn, self._uvCase, vContext, vPolyArgs, false)
			nGenParam(vTermTuple)
			return nGenFunc()
		end)
	end
end

function FunctionBuilder:_buildClass():Ret(Union(clazz.ClassFactory, clazz.PolyFunction))
	const nPrefixHint = self._prefixHint
	local nReferOrNil:OrNil(clazz.Reference) = nil
	const ok, err = pcall(nPrefixHint.caller, {
		class=function(vHint, vRefer)
			assert(vRefer and Reference.is(vRefer), Exception.new("impl's first arg must be a Reference"))
			nReferOrNil = vRefer
			return vHint
		end,
	})
	if not ok then
		error(Exception.new(tostring(err), self._node))
	end
	const nRefer = assert(nReferOrNil, "reference not setted when function:class")
	const nPolyParNum = self._polyParNum
	const nFnMaker = function(vPolyParList:List(clazz.UAllType)):Ret(clazz.ClassFactory)
		const nInterfaceGetter = function(vSuffixHint:clazz.TLongHintInfo(clazz.FnSuffixHint)):Ret(clazz.MetaObject)
			local nStruct:OrNil(clazz.UAllType) = nil
			const ok, err = pcall(vSuffixHint.caller, {
				impl=function(vHint, vStruct)
					nStruct = vStruct
					return vHint
				end,
				Ret=function(vHint, ...)
					error("class function can't take Ret")
					return vHint
				end,
				RetDots=function(vHint, vFirst, ...)
					error("class function can't take Ret")
					return vHint
				end,
				isguard=function(vHint, vType)
					return vHint
				end,
			})
			if not ok then
				error(Exception.new(tostring(err), self._node))
			end
			local nImplType = nStruct
			if Reference.is(nImplType) then
				nImplType = nImplType:waitTypeCom():getTypeAwait()
				assert(not nImplType:isUnion(), "interface can't be union")
			end
			local nInterface = self._manager.type.AnyObject
			if nImplType then
				assert(MetaObject.is(nImplType), "implement type must be MetaObject")
				nInterface = nImplType
			end
			return nInterface
		end
		const nNewContext = self._context:newSealContext(self._node)
		const nClassRefer = self._manager:SealReference(nNewContext)
		const nFactory = nClassRefer:setClassFactory(self._node, function(vFactory)
			const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(vFactory, self._uvCase, nNewContext, vPolyParList, false)
			return nInterfaceGetter(nSuffixHint), function()
				const nParTermTuple = nNewContext:UTermTupleByAppend(nGenParam(false))
				const nRetTuples = self._manager:SingleRetTuples(self._manager:TypeTuple(self._node, nClassRefer))
				const nParTuple = nParTermTuple:checkTypeTuple()
				const nPreTypeFn = nParTuple and self._manager:TypeFunction(self._node, nParTuple, nRetTuples) or false
				return nPreTypeFn, function(vLuaTable)
					nNewContext:setClassTable(vLuaTable)
					nGenFunc()
					const nParTuple = nParTuple or nParTermTuple:checkTypeTuple()
					if not nParTuple then
						nNewContext:error("auto parameter deduce failed")
						error("auto parameter deduce failed")
					end
					return nPreTypeFn or self._manager:TypeFunction(self._node, nParTuple, nRetTuples)
				end
			end
		end)
		self._context:recordClassFactory(nFactory)
		return nFactory
	end
	if nPolyParNum <= 0 then
		const nFactory = nFnMaker({})
		nRefer:setAssignAsync(self._node, function()
			return nFactory:getTypeAwait()
		end)
		return nFactory
	else
		const nPolyFn = self._manager:PolyFunction(self._node, function(...:clazz.UAllType)
			return nFnMaker({...})
		end, nPolyParNum)
		nRefer:setTemplateAsync(self._node, function(...:clazz.UAllType)
			const nFactory = nPolyFn:noCtxCastPoly({...})
			assert(ClassFactory.is(nFactory), "class factory's poly must return factory type")
			return nFactory:getTypeAwait()
		end, nPolyParNum)
		return nPolyFn
	end
end

function FunctionBuilder:build():Ret(clazz.LuaFunction)
	const nLuaFunc = self._manager:LuaFunction()
	const nAttrSet = self._prefixHint.attrSet
	if nAttrSet.open then
		nLuaFunc:lateInit(self._node, self, self:_buildOpen())
	elseif nAttrSet.class then
		if self._member then
			error(Exception.new("class factory can't be member-function-like", self._node))
		end
		nLuaFunc:lateInit(self._node, self, self:_buildClass())
	else
		if self._member then
			nLuaFunc:setMember()
		end
		nLuaFunc:lateInit(self._node, self, self:_buildInnerFn())
	end
	return nLuaFunc
end

return FunctionBuilder
