
local Reference = require "thlua.type.Reference"
local LuaFunction = require "thlua.func.LuaFunction"
local Variable = require "thlua.func.Variable"
local TermCase = require "thlua.term.TermCase"
local FunctionBuilder = {}

(@var.class = import("thlua.type.TypeClass").class)

FunctionBuilder.__index=FunctionBuilder

function FunctionBuilder.new(vContext:class.Context,
	vNode:class.AstNode, vAutoArgs:class.AutoArguments, vRunFunc:class.GenFunc)::RetNew(class.FunctionBuilder)
	local nManager = vContext._manager
	local nLuaFunc = nManager:LuaFunction()
	nLuaFunc:init(vContext, vNode)
	return setmetatable({::New()
		_context=vContext,
		_manager=nManager,
		_retTuples=false,
		_runFunc=vRunFunc,
		_newTypeRefer=false,
		_newTypeImpl=false,
		_luaFunc=nLuaFunc,
		_autoArgs=vAutoArgs,
		_guardFunc=false,
		_tag=LuaFunction.DEFAULT,
	}, FunctionBuilder)
end

function FunctionBuilder.newLongHint(self)
	local function setTag(vTag)
		if self._tag == vTag then
			error(self._tag.."-fn can only be set once")
		end
		assert(self._tag == LuaFunction.DEFAULT, self._tag.."-fn can't set "..vTag)
		self._tag = vTag
	end
	return {
		RetNew=function(vLongHint, vRefer, vStruct)
			vRefer:setTypeCtor(self._luaFunc)
			setTag(LuaFunction.DEFINE)
			self._newTypeRefer = vRefer
			self._newTypeImpl = vStruct
			assert(not self._retTuples, "define function can't return other")
			self._retTuples = self._manager:EmptyRetTuples():Add(self._manager:Tuple(vRefer))
			return vLongHint
		end,
		Ret=function(vLongHint, ...)
			local nRetTuples = self._retTuples
			if not nRetTuples then
				nRetTuples = self._manager:EmptyRetTuples()
			end
			self._retTuples = nRetTuples:Add(self._manager:Tuple(...))
			return vLongHint
		end,
		nocheck=function(vLongHint)
			setTag(LuaFunction.NOCHECK)
			return vLongHint
		end,
		open=function(vLongHint)
			setTag(LuaFunction.OPEN)
			return vLongHint
		end,
		isguard=function(vLongHint, vType)
			setTag(LuaFunction.OPEN)
			local nTrue = self._manager.type.True
			local nFalse = self._manager.type.False
			self._guardFunc=function(vLongHint, vTermTuple)
				-- TODO isguard add refinement
				local nTerm = vTermTuple:get(1)
				local caseTrue = TermCase.new()
				caseTrue:put_and(nTerm, vType)
				local nTypeCaseList = {
					{nTrue, caseTrue},
					{nFalse, TermCase.new()},
				}
				return self._manager:mergeToUnionTerm(nTypeCaseList)
			end
			return vLongHint
		end,
	}
end

function FunctionBuilder:build()
	local nTag = self._tag
	if nTag == LuaFunction.OPEN then
		assert(not self._retTuples, "native function can't set ret")
		self._luaFunc:setUnionFn({
			tag=nTag,
			fn=self._manager:NativeFunction(self._guardFunc or self._runFunc),
			isGuard=self._guardFunc and true,
		})
	elseif nTag == LuaFunction.NOCHECK then
		if not self._retTuples then
			error("nocheck-fn must set ret")
		end
		self._luaFunc:setUnionFn({
			tag=nTag,
			fn=self._manager:Function(self._autoArgs:checkWhenNocheck(self._context), self._retTuples)
		})
	elseif nTag == LuaFunction.DEFINE then
		self._luaFunc:setUnionFn({
			tag=nTag,
			fn=self._manager:Function(self._autoArgs:checkWhenNocheck(self._context), self._retTuples),
			retTuples=self._retTuples,
			autoArgs=self._autoArgs,
			runFunc=self._runFunc,
			newTypeRefer=self._newTypeRefer,
			newTypeImpl=self._newTypeImpl,
			once=false,
		})
		self._context:getRuntime():recordDefineLuaFunction(self._luaFunc)
	elseif nTag == LuaFunction.DEFAULT then
		local nRetTuples = self._retTuples
		self._luaFunc:setUnionFn({
			tag=nTag,
			fn=false,
			autoArgs=self._autoArgs,
			runFunc=self._runFunc,
			retTuples=nRetTuples,
			once=false,
		})
		if (not self._autoArgs:hasVariable()) then
			self._context:getRuntime():recordLateLuaFunction(self._luaFunc)
		end
	end
	return self._luaFunc
end


return FunctionBuilder
