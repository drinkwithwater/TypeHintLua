
const Node = require "thlua.code.Node"
const AutoFlag = require "thlua.auto.AutoFlag"
const AutoFunction = require "thlua.type.func.AutoFunction"
const NameReference = require "thlua.space.NameReference"
const Exception = require "thlua.Exception"
const Enum = require "thlua.Enum"
const Interface = require "thlua.type.object.Interface"
const AutoHolder = require "thlua.auto.AutoHolder"
const ClassFactory = require "thlua.type.func.ClassFactory"
const ClassTable = require "thlua.type.object.ClassTable"
const TermTuple = require "thlua.tuple.TermTuple"
const RetBuilder = require "thlua.tuple.RetBuilder"
const SpaceValue = require "thlua.space.SpaceValue"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	let.node = import("thlua.code.Node").node

	clazz.AutoFlag = $AutoFlag
	clazz.UBodyFunction = Union(clazz.AutoFunction, clazz.ClassFactory, clazz.OpenFunction)

	clazz.GenParam = Fn(OrFalse(clazz.UTermTuple)):Ret(clazz.UTermTuple)
	clazz.GenMaker = Fn(clazz.BaseStack, Union(List(clazz.UMustType), clazz.USpaceTuple), OrFalse(clazz.UMustType)):Ret(clazz.GenParam, clazz.TLongHintInfo(clazz.FnSuffixHint), clazz.GenFunc)
	clazz.GenFunc = Fn():Ret(clazz.FixedTermTuple, clazz.UAtomUnion)

	clazz.FnPrefixHint = Struct {
		class=Fn(clazz.FnPrefixHint, Any):Ret(clazz.FnPrefixHint),
	}

	clazz.FnSuffixHint = Struct {
		extends=Fn(clazz.FnSuffixHint, clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		implements=Fn(clazz.FnSuffixHint, clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		Ret=Fn(clazz.FnSuffixHint):Dots(clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		Err=Fn(clazz.FnSuffixHint, clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		RetDots=Fn(clazz.FnSuffixHint, clazz.USpaceAny):Dots(clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		isguard=Fn(clazz.FnSuffixHint, clazz.USpaceAny):Ret(clazz.FnSuffixHint),
		mapguard=Fn(clazz.FnSuffixHint, clazz.USpaceDict):Ret(clazz.FnSuffixHint),
	}

	clazz.FuncNewInfo = Struct ({
		_hasRetSome=Boolean,
		_hasSuffixHint=Boolean,
		_polyParNum=Integer,
		_parNum=Integer,
		_member=Boolean,
	}, {
		__Next=KeyOf(clazz.FuncNewInfo)
	})
end)

const FunctionBuilder = {}
FunctionBuilder.__index=FunctionBuilder

function:class(clazz.FunctionBuilder) FunctionBuilder.new(
	vStack:clazz.BaseStack,
	vNode:Union(node.Chunk, node.Function),
	vUpState:clazz.LexCapture,
	vInfo:clazz.FuncNewInfo,
	vPrefixHint:clazz.TLongHintInfo(clazz.FnPrefixHint),
	vParRetMaker:clazz.GenMaker
)
	const nManager = vStack:getTypeManager()
	const self = {.class
		_stack=vStack,
		_manager=nManager,
		_node=vNode,
		_lexCapture=vUpState,
		_prefixHint=vPrefixHint,
		_pass=vPrefixHint.attrSet.pass and true or false,
		_parRetMaker=vParRetMaker,
	}
	for k,v in pairs(vInfo) do
		self[k] = v
	end
	setmetatable(self, FunctionBuilder)
	return self
end

function FunctionBuilder:_makeRetTuples(
	vSuffixHint:clazz.TLongHintInfo(clazz.FnSuffixHint),
	vTypeList:List(clazz.UMustType),
	vSelfType:OrFalse(clazz.UMustType)
):Ret(False):Ret(clazz.RetTuples)
	const nRetBuilder:clazz.RetBuilder = RetBuilder.new(self._manager, self._node)
	const ok, err = pcall(vSuffixHint.caller, {
		extends=function(vHint, _)
			error(self._node:toExc("extends can only be used with function:class"))
			return vHint
		end,
		implements=function(vHint, _)
			error(self._node:toExc("impl can only be used with function:class"))
			return vHint
		end,
		isguard=function(vHint, vType)
			error(self._node:toExc("isguard can only be used with function.open"))
			return vHint
		end,
		mapguard=function(vHint, vType)
			error(self._node:toExc("mapguard can only be used with function.open"))
			return vHint
		end,
		RetDots=function(vHint, vFirst, ...)
			nRetBuilder:chainRetDots(self._node, vFirst, ...)
			return vHint
		end,
		Ret=function(vHint, ...)
			nRetBuilder:chainRet(self._node, ...)
			return vHint
		end,
		Err=function(vHint, vErrType)
			nRetBuilder:chainErr(self._node, vErrType)
			return vHint
		end,
	})
	if not ok then
		error(self._node:toExc(tostring(err)))
	end
	if nRetBuilder:isEmpty() then
		return false
	end
	const nRetTuples = nRetBuilder:build()
	if not self._hasRetSome then
		if nRetTuples and not self._pass then
			local hasVoid = false
			local hasSome = false
			nRetTuples:foreachWithFirst(function(vTypeTuple, _)
				if #vTypeTuple > 0 then
					hasSome = true
				else
					hasVoid = true
				end
			end)
			if hasSome and not hasVoid then
				if not self._pass then
					self._stack:getRuntime():nodeError(self._node, "hint return something but block has no RetStat")
				end
			end
		end
	end
	return nRetTuples
end

function FunctionBuilder:_buildInnerFn():Ret(Union(clazz.AutoFunction, clazz.AutoMemberFunction, clazz.SealPolyFunction))
	const nNode = self._node
	assert(nNode.tag == "Function", nNode:toExc("node must be function here"))
	const nPolyParNum = self._polyParNum
	const nFnMaker = function(vPolyTuple:OrFalse(clazz.TupleBuilder), vSelfType:OrFalse(clazz.UMustType)):Ret(clazz.AutoFunction)
		const nAutoFn = self._stack:newAutoFunction(nNode, self._lexCapture)
		const nNewStack = nAutoFn:getBuildStack()
		nAutoFn:initAsync(function()
			const nPolyArgList:List(clazz.UMustType) = vPolyTuple and vPolyTuple:buildPolyArgs() or {}
			const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(nNewStack, nPolyArgList, vSelfType)
			const nCastTypeFn = nAutoFn:pickCastTypeFn()
			-- make par
			const nCastArgs = nCastTypeFn and nCastTypeFn:getParTuple():makeTermTuple(nNewStack:inplaceOper())
			const nParTermTuple = nGenParam(nCastArgs)
			const nParTuple = nParTermTuple:checkTypeTuple()
			-- make ret
			const nCastRet = nCastTypeFn and nCastTypeFn:getRetTuples()
			const nHintRetTuples = self:_makeRetTuples(nSuffixHint, nPolyArgList, vSelfType)
			if nHintRetTuples and nCastRet then
				if not nCastRet:includeTuples(nHintRetTuples) then
					nNewStack:inplaceOper():error("hint return not match when cast")
				end
			end
			const nRetTuples = nHintRetTuples or nCastRet or (not self._hasRetSome and self._manager:VoidRetTuples(self._node))
			return nParTuple, nRetTuples, function()
				if self._pass then
					if not nParTuple or not nRetTuples then
						error(self._node:toExc("pass function can't take auto return or auto parameter"))
					end
					return nParTuple, nRetTuples
				else
					const nRetTermTuple, nErrType = nGenFunc()
					const nParTuple = nParTuple or nParTermTuple:checkTypeTuple(true)
					if not nParTuple then
						nNewStack:inplaceOper():error("auto parameter deduce failed")
						error(self._node:toExc("auto parameter deduce failed"))
					end
					const nRetTuples = nRetTuples or self._manager:SingleRetTuples(self._node, nRetTermTuple:checkTypeTuple(), nErrType)
					if not nRetTuples then
						-- TODO, this case never happen, thinking how return deduce failed?
						nNewStack:inplaceOper():error("auto return deduce failed")
						error(self._node:toExc("auto return deduce failed"))
					end
					return nParTuple, nRetTuples
				end
			end
		end)
		return nAutoFn
	end
	if not self._member then
		if nPolyParNum <= 0 then
			const ret = nFnMaker(false, false)
			self._stack:getSealStack():scheduleSealType(ret)
			return ret
		else
			return self._manager:SealPolyFunction(self._node, function(...:clazz.USpaceAny)
				const nTuple = self._manager:spacePack(self._node, ...)
				return nFnMaker(nTuple, false)
			end, nPolyParNum, self._stack)
		end
	else
		const nPolyFn = self._manager:SealPolyFunction(self._node, function(selfType:clazz.UMustType, ...:clazz.USpaceAny)
			const nTuple = self._manager:spacePack(self._node, ...)
			return nFnMaker(nTuple, selfType)
		end, nPolyParNum + 1, self._stack)
		return self._manager:AutoMemberFunction(self._node, nPolyFn)
	end
end

function FunctionBuilder:_buildOpen():Ret(clazz.OpenFunction)
	if self._hasSuffixHint then
		const nGuardFn = self._stack:newOpenFunction(self._node, self._lexCapture)
		const nMakerStack = nGuardFn:newStack(self._node, self._stack)
		local nSetted = false
		const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(nMakerStack, {}, false)
		const ok, err = pcall(nSuffixHint.caller, {
			extends=function(vHint, _)
				error(self._node:toExc("extends can only be used with function:class"))
				return vHint
			end,
			implements=function(vHint, _)
				error(self._node:toExc("impl can only be used with function:class"))
				return vHint
			end,
			RetDots=function(vHint, vFirst, ...)
				error(self._node:toExc("open function can't take RetDots"))
				return vHint
			end,
			Ret=function(vHint, ...)
				error(self._node:toExc("open function can't take Ret"))
				return vHint
			end,
			Err=function(vHint, _)
				error(self._node:toExc("open function can't take Err"))
				return vHint
			end,
			isguard=function(vHint, vType)
				assert(not nSetted, self._node:toExc("isguard can only use once here"))
				nGuardFn:lateInitFromIsGuard(vType)
				return vHint
			end,
			mapguard=function(vHint, vDict)
				const nMapObject = self._manager:buildInterface(self._node, vDict)
				assert(not nSetted, self._node:toExc("isguard can only use once here"))
				nGuardFn:lateInitFromMapGuard(nMapObject)
				return vHint
			end,
		})
		if not ok then
			error(Exception.new(tostring(err), self._node))
		end
		return nGuardFn
	else
		return self._stack:newOpenFunction(self._node, self._lexCapture):lateInitFromBuilder(self._polyParNum, function(vOpenFn, vContext, vPolyTuple, vTermTuple)
			const ok, runRet, runErr = xpcall(function()
				const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(vContext, vPolyTuple and vPolyTuple:buildOpenPolyArgs() or {} @ List(clazz.UMustType), false)
				nGenParam(vTermTuple)
				return nGenFunc()
			end, function(err:Any):Ret(clazz.Exception)
				if Exception.is(err) then
					return err
				else
					return Node.newDebugNode(4):toExc(tostring(err))
				end
			end)
			if ok then
				return runRet, runErr
			else
				error(runRet)
			end
		end)
	end
end

function FunctionBuilder:_buildClass():Ret(Union(clazz.ClassFactory, clazz.SealPolyFunction))
	const nNode = self._node
	assert(nNode.tag == "Function", nNode:toExc("node must be function here"))
	const nPrefixHint = self._prefixHint
	local nReferOrNil:OrNil(clazz.NameReference) = nil
	const ok, err = pcall(nPrefixHint.caller, {
		class=function(vHint, vSpaceAny)
			const nRefer = SpaceValue.checkRefer(vSpaceAny)
			assert(nRefer and NameReference.is(nRefer), self._node:toExc("class's first arg must be a Reference"))
			nReferOrNil = nRefer
			return vHint
		end,
	})
	if not ok then
		error(self._node:toExc(tostring(err)))
	end
	const nRefer = assert(nReferOrNil, self._node:toExc("reference not setted when function:class"))
	const nPolyParNum = self._polyParNum
	const nFnMaker = function(vPolyTuple:OrFalse(clazz.TupleBuilder)):Ret(clazz.ClassFactory)
		const nInterfaceGetter = function(vSuffixHint:clazz.TLongHintInfo(clazz.FnSuffixHint)):Ret(OrFalse(clazz.ClassTable), clazz.Interface)
			local nImplementsArg:OrNil(clazz.UMustType) = nil
			local nExtendsArg:OrNil(clazz.UMustType) = nil
			-- local nErrType:OrNil(clazz.UMustType) = nil
			const ok, err = pcall(vSuffixHint.caller, {
				implements=function(vHint, vInterface)
					nImplementsArg = self._manager:easyToMustType(self._node, vInterface)
					return vHint
				end,
				extends=function(vHint, vBaseClass)
					nExtendsArg = self._manager:easyToMustType(self._node, vBaseClass)
					return vHint
				end,
				Ret=function(vHint, ...)
					error(self._node:toExc("class function can't take Ret"))
					return vHint
				end,
				RetDots=function(vHint, vFirst, ...)
					error(self._node:toExc("class function can't take RetDots"))
					return vHint
				end,
				Err=function(vHint, vErrType)
					-- class take Err TODO
					-- nErrType = self._manager:easyToMustType(self._node, vErrType)
					return vHint
				end,
				isguard=function(vHint, vType)
					error(self._node:toExc("isguard can only be used with function.open"))
					return vHint
				end,
				mapguard=function(vHint, vType)
					error(self._node:toExc("mapguard can only be used with function.open"))
					return vHint
				end,
			})
			if not ok then
				error(Exception.new(tostring(err), self._node))
			end
			local nExtendsTable:OrFalse(clazz.ClassTable) = false
			if nExtendsArg then
				const nType = nExtendsArg:checkAtomUnion()
				if nType:isUnion() then
					error(self._node:toExc("base class can't be union"))
				end
				if ClassTable.is(nType) then
					nExtendsTable = nType
				else
					if nType == self._manager.type.False or nType == self._manager.type.Nil then
						-- false or nil means no base class
					else
						error(self._node:toExc("base class type must be ClassTable"))
					end
				end
			end
			local nImplementsInterface = nExtendsTable and nExtendsTable:getInterface() or self._manager.type.AnyObject
			if nImplementsArg then
				const nType = nImplementsArg:checkAtomUnion()
				if nType:isUnion() then
					error(self._node:toExc("interface can't be union"))
				end
				if Interface.is(nType) then
					nImplementsInterface = nType
				else
					if nType == self._manager.type.False or nType == self._manager.type.Nil then
						-- false or nil means no interface
					else
						self._stack:getRuntime():nodeError(self._node, "implements must take Interface or false value")
					end
				end
			end
			return nExtendsTable, nImplementsInterface
		end
		const nFactory = self._stack:newClassFactory(nNode, self._lexCapture)
		const nNewStack = nFactory:getBuildStack()
		-- 1. build suffixhint from poly args
		const nPolyArgList:List(clazz.UMustType) = vPolyTuple and vPolyTuple:buildPolyArgs() or {}
		const nGenParam, nSuffixHint, nGenFunc = self._parRetMaker(nNewStack, nPolyArgList, false)
		-- 2. init class
		nFactory:initClassTableAsync(function()
			const nExtends, nImplements = nInterfaceGetter(nSuffixHint)
			return nExtends, nImplements
		end)
		-- 3. init factory
		nFactory:initAsync(function()
			const nClassTable = nFactory:waitClassTable()
			const nParTermTuple = nGenParam(false)
			const nParTuple = nParTermTuple:checkTypeTuple()
			const nRetTuples = self._manager:SingleRetTuples(self._node, self._manager:TypeTuple(self._node, {nClassTable}), nil)
			return nParTuple, nRetTuples, function()
				nGenFunc()
				const nParTuple = nParTuple or nParTermTuple:checkTypeTuple(true)
				if not nParTuple then
					nNewStack:inplaceOper():error("auto parameter deduce failed")
					error(self._node:toExc("auto parameter deduce failed"))
				end
				nClassTable:onBuildFinish()
				return nParTuple, nRetTuples
			end
		end)
		return nFactory
	end
	if nPolyParNum <= 0 then
		const nFactory = nFnMaker(false)
		nRefer:setAssignAsync(self._node, function()
			return nFactory:waitClassTable()
		end)
		self._stack:getSealStack():scheduleSealType(nFactory)
		return nFactory
	else
		const nPolyFn = self._manager:SealPolyFunction(self._node, function(...:clazz.USpaceAny)
			const nTuple = self._manager:spacePack(self._node, ...)
			return nFnMaker(nTuple)
		end, nPolyParNum, self._stack)
		const nTemplateCom = self._manager:buildTemplateWithParNum(self._node, function(...:clazz.UMustType)
			const nFactory = nPolyFn:noCtxCastPoly(self._node, {...})
			assert(ClassFactory.is(nFactory), self._node:toExc("class factory's poly must return factory type"))
			return nFactory:waitClassTable()
		end, nPolyParNum)
		nRefer:setAssignAsync(self._node, function()
			return nTemplateCom
		end)
		return nPolyFn
	end
end

function FunctionBuilder:build():Ret(clazz.BaseFunction)
	const nAttrSet = self._prefixHint.attrSet
	if nAttrSet.open then
		return self:_buildOpen()
	elseif nAttrSet.class then
		if self._member then
			error(self._node:toExc("class factory can't be member-function-like"))
		end
		return self:_buildClass()
	else
		return self:_buildInnerFn()
	end
end

return FunctionBuilder
