
const RefineTerm = require "thlua.term.RefineTerm"
const TableBuilder = {}

(@let.class = import("thlua.type.TypeClass").class)

(@do
	let.Pair = Struct {
		[1]=class.RefineTerm,
		[2]=class.RefineTerm,
	}
	let.PairMaker = Fn():Ret(List(Pair), Number, class.TermTuple)
end)

TableBuilder.__index=TableBuilder

function TableBuilder.new(vContext:class.Context, vNode:class.IAstNode, vPairMaker:PairMaker)::RetClass(class.TableBuilder)
	return setmetatable({::Self()
		_context=vContext,
		_node=vNode,
		_pairMaker=vPairMaker,
		_selfClassFnCom=false@Union(False, class.ClassFnCom),
		_selfInitDict=false@Union(False, Dict(class.UAllType, class.UAllType)),
	}, TableBuilder)
end

function TableBuilder.makeLongHint(self:class.TableBuilder)::RetClass(class.TableLongHint)
	return {::Self()
		Self=function(vLongHint:class.TableLongHint, vInitDict:OrNil(Dict(class.UAllType, class.UAllType)))::Ret(class.TableLongHint)
			const nFnCom = assert(self._context:getRegion(), "region must existed when table::Self()"):getFnCom()
			self._selfClassFnCom = nFnCom
			if vInitDict then
				self._selfInitDict = vInitDict
			end
			return vLongHint
		end,
	}
end

function TableBuilder:_build(vNewTable:class.LuaTable)
	const nContext = self._context
	const nManager = nContext:getTypeManager()
	vNewTable:setName("("..tostring(self._node)..")")
	const vList, vDotsStart, vDotsTuple = self._pairMaker()
	const nTypePairList:List(Struct {class.UAtomUnion, class.UAtomUnion}) = {}
	for i, nPair in ipairs(vList) do
		const nKey = nPair[1]:getType()
		local nValue = nPair[2]:getType()
		if nKey:isUnion() or not nKey:isSingleton() then
			nValue = nManager:checkedUnion(nValue, nManager.type.Nil)
		end
		nTypePairList[i] = {nKey, nValue}
	end
	if vDotsTuple then
		const nTypeTuple = vDotsTuple:getTypeTuple()
		const nRepeatType = nTypeTuple:getRepeatType()
		if nRepeatType then
			nTypePairList[#nTypePairList + 1] = {
				nManager.type.Number, nManager:checkedUnion(nRepeatType, nManager.type.Nil)
			}
		else
			for i=1, #nTypeTuple do
				nTypePairList[#nTypePairList + 1] = {
					nManager:Literal(vDotsStart + i - 1), nTypeTuple:get(i):checkAtomUnion()
				}
			end
		end
	end
	const nSelfInitDict = self._selfInitDict
	if nSelfInitDict then
		for nKey, nValue in pairs(nSelfInitDict) do
			nKey:foreach(function(vSubKey)
				nTypePairList[#nTypePairList + 1] = {
					vSubKey, nManager:checkedUnion(nValue, nManager.type.Nil)
				}
			end)
		end
	end
	const nKeyUnion, nTypeDict = nManager:mergePairList(nTypePairList)
	vNewTable:getDefaultCom():initByKeyValue(nKeyUnion, nTypeDict)
end

function TableBuilder:build()::Ret(class.LuaTable)
	const nContext = self._context
	const nManager = nContext:getTypeManager()
	const nClassFnCom = self._selfClassFnCom
	if nClassFnCom then
		return nClassFnCom:regionTableSelf(self._context, self._node, function(vNewTable)
			self:_build(vNewTable)
		end)
	else
		const nNewTable = nManager:LuaTable()
		self:_build(nNewTable)
		return nNewTable
	end
end

return TableBuilder
