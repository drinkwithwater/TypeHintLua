
const OpenTable = require "thlua.object.OpenTable"
const AutoTable = require "thlua.object.AutoTable"
const RefineTerm = require "thlua.term.RefineTerm"
const Exception = require "thlua.Exception"
const TableBuilder = {}

(@let.clazz = import("thlua.type.TypeClass").clazz)

(@do
	let.Pair = Struct {
		[1]=clazz.RefineTerm,
		[2]=clazz.RefineTerm,
	}
	let.PairMaker = Fn():Ret(List(Pair), Integer, clazz.FixedTermTuple)
end)

TableBuilder.__index=TableBuilder

function:class(let.TableBuilder) TableBuilder.new(vStack:clazz.BaseStack,
	vNode:clazz.IAstNode,
	vHintInfo:clazz.TLongHintInfo(clazz.TableLongHint),
	vPairMaker:PairMaker
)
	return setmetatable({.class
		_stack=vStack,
		_node=vNode,
		_hintInfo=vHintInfo,
		_pairMaker=vPairMaker,
		_selfInitDict=false@Union(False, Dict(clazz.UAllType, clazz.UAllType)),
	}, TableBuilder)
end

function:class(clazz.TableLongHint) TableBuilder._makeLongHint(self:TableBuilder)
	return {.class
		Init=function(vLongHint:clazz.TableLongHint, vInitDict:Dict(clazz.UAllType, clazz.UAllType)):Ret(clazz.TableLongHint)
			self._selfInitDict = vInitDict
			return vLongHint
		end,
	}
end

function TableBuilder:_build(vNewTable:Union(clazz.SealTable, clazz.OpenTable))
	-- TODO better code for open table
	const nStack = self._stack
	const nManager = nStack:getTypeManager()
	const vList, vDotsStart, vDotsTuple = self._pairMaker()
	const nTermDict:Dict(clazz.IAtomType, clazz.RefineTerm) = {}
	const nTypePairList:List(Struct {clazz.UAtomUnion, clazz.UAtomUnion}) = {}
	for i, nPair in ipairs(vList) do
		const nKey = nPair[1]:getType()
		const nTerm = nPair[2]
		local nValue = nTerm:getType()
		if nKey:isUnion() or not nKey:isSingleton() then
			nValue = nManager:checkedUnion(nValue, nManager.type.Nil)
			if OpenTable.is(vNewTable) then
				self._stack:getRuntime():nodeError(self._node, "open table can only take singleton type as key")
			end
		else
			nTermDict[nKey] = nPair[2]
		end
		nTypePairList[i] = {nKey, nValue}
	end
	if vDotsTuple then
		const nTypeTuple = vDotsTuple:checkTypeTuple()
		const nRepeatType = nTypeTuple:getRepeatType()
		if nRepeatType then
			nTypePairList[#nTypePairList + 1] = {
				nManager.type.Integer, nManager:checkedUnion(nRepeatType, nManager.type.Nil)
			}
			if OpenTable.is(vNewTable) then
				self._stack:getRuntime():nodeError(self._node, "open table can only take singleton type as key")
			end
		else
			for i=1, #nTypeTuple do
				const nKey = nManager:Literal(vDotsStart + i - 1)
				const nTerm = assert(vDotsTuple:rawget(i))
				nTypePairList[#nTypePairList + 1] = {
					nKey, nTerm:getType()
				}
				nTermDict[nKey] = nTerm
			end
		end
	end
	const nSelfInitDict = self._selfInitDict
	if nSelfInitDict then
		for nKey, nValue in pairs(nSelfInitDict) do
			nKey:checkAtomUnion():foreach(function(vSubKey)
				nTypePairList[#nTypePairList + 1] = {
					vSubKey, nManager:checkedUnion(nValue, nManager.type.Nil)
				}
			end)
		end
	end
	if OpenTable.is(vNewTable) then
		const nCollection = nManager:TypeCollection()
		for k,v in pairs(nTermDict) do
			nCollection:put(k)
		end
		vNewTable:initByKeyValueTerm(self._node, self._stack:topBranch(), nCollection:mergeToAtomUnion(), nTermDict)
	else
		const nKeyUnion, nTypeDict = nManager:typeMapReduce@<clazz.UAtomUnion>(nTypePairList, function(vList)
			return nManager:unionReduceType(vList)
		end)
		vNewTable:initByKeyValue(self._node, nKeyUnion, nTypeDict)
	end
end

function TableBuilder:build():Ret(clazz.BaseObject)
	const nLongHint = self:_makeLongHint()
	const ok, err = pcall(self._hintInfo.caller, nLongHint)
	if not ok then
		error(Exception.new(tostring(err), self._node))
	end
	const nStack = self._stack
	const nManager = nStack:getTypeManager()
	const nAttrSet = self._hintInfo.attrSet
	if nAttrSet.class then
		const nNewTable = assert(nStack:getClassTable(), "only function:class(clazz.) can build table hint with {.class")
		self:_build(nNewTable)
		return nNewTable
	else
		if nAttrSet.open then
			if self._selfInitDict then
				self._selfInitDict = false
				self._stack:getRuntime():nodeError(self._node, "open table can't use Init()")
			end
			const nNewTable = OpenTable.new(nManager, self._node, self._stack)
			self:_build(nNewTable)
			return nNewTable
		else
			const nNewTable = AutoTable.new(nManager, self._node, self._stack)
			self:_build(nNewTable)
			return nNewTable
		end
	end
end

return TableBuilder
