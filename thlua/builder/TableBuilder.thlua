
const OpenTable = require "thlua.type.object.OpenTable"
const AutoTable = require "thlua.type.object.AutoTable"
const RefineTerm = require "thlua.term.RefineTerm"
const Exception = require "thlua.Exception"
const class = require "thlua.class"
const TableBuilder = {}

(@do
	let.clazz = import($class).clazz
	let.node = import("thlua.code.Node").node
end)

(@do
	let.TermPair = Struct {
		node=node.IAstNode,
		autoPrimitive=Boolean,
		key=clazz.RefineTerm,
		value=clazz.RefineTerm,
	}
	let.PairMaker = Fn():Ret(List(TermPair), Integer, clazz.FixedTermTuple)
end)

TableBuilder.__index=TableBuilder

function:class(let.TableBuilder) TableBuilder.new(vStack:clazz.BaseStack,
	vNode:node.Table,
	vHintInfo:clazz.TLongHintInfo(clazz.TableLongHint),
	vPairMaker:PairMaker
)
	return setmetatable({.class
		_stack=vStack,
		_node=vNode,
		_isConst=vNode.isConst,
		_hintInfo=vHintInfo,
		_pairMaker=vPairMaker,
		_selfInitDict=false@Union(False, Dict(clazz.UMustType, clazz.UMustType)),
	}, TableBuilder)
end

function:class(clazz.TableLongHint) TableBuilder._makeLongHint(self:TableBuilder)
	const nManager = self._stack:getTypeManager()
	return {.class
		Init=function(vLongHint:clazz.TableLongHint, vInitDict:clazz.USpaceDict):Ret(clazz.TableLongHint)
			const t:Dict(clazz.UMustType, clazz.UMustType) = {}
			for k,v in pairs(vInitDict) do
				t[nManager:easyToMustType(self._node, k)] = nManager:easyToMustType(self._node, v)
			end
			self._selfInitDict = t
			return vLongHint
		end,
	}
end

function TableBuilder:_build(vNewTable:Union(clazz.SealTable, clazz.OpenTable))
	-- TODO better code for open table
	const nStack = self._stack
	const nManager = nStack:getTypeManager()
	const vList, vDotsStart, vDotsTuple = self._pairMaker()
	const nHashableTypeSet = nManager:HashableTypeSet()
	const nTypeDict:Dict(clazz.IAtomType, clazz.UAtomUnion) = {}
	for i, nPair in ipairs(vList) do
		const nKey = nPair.key:getType()
		const nTerm = nPair.value
		local nValue = nTerm:getType()
		if nPair.autoPrimitive and not self._isConst then
			-- nValue = self._stack:getTypeManager():literal2Primitive(nValue)
		end
		if nKey:isUnion() or not nKey:isSingleton() then
			nValue = nManager:checkedUnion(nValue, nManager.type.Nil)
			if OpenTable.is(vNewTable) then
				self._stack:getRuntime():nodeError(self._node, "open table can only take singleton type as key")
				continue
			end
		end
		nKey:foreach(function(vAtomType)
			if nHashableTypeSet:putAtom(vAtomType) then
				nTypeDict[vAtomType] = nValue
			else
				if vAtomType:isSingleton() then
					self._stack:getRuntime():nodeError(self._node, "key conflict when table build")
				else
					nTypeDict[vAtomType] = nManager:checkedUnion(nValue, nTypeDict[vAtomType]!)
				end
			end
		end)
	end
	if vDotsTuple then
		const nTypeTuple = vDotsTuple:checkTypeTuple()
		local nRepeatType = nTypeTuple:getRepeatType()
		if nRepeatType then
			if OpenTable.is(vNewTable) then
				self._stack:getRuntime():nodeError(self._node, "open table can only take singleton type as key")
			else
				const nInteger = nManager.type.Integer:checkAtomUnion()
				if nHashableTypeSet:putAtom(nInteger) then
					nTypeDict[nInteger] = nManager:checkedUnion(nRepeatType, nManager.type.Nil)
				else
					nTypeDict[nInteger] = nManager:checkedUnion(nRepeatType, nManager.type.Nil, nTypeDict[nInteger]!)
				end
			end
		else
			for i=1, #nTypeTuple do
				const nKey = nManager:Literal(vDotsStart + i - 1)
				const nTerm = vDotsTuple:rawget(i)
				if not nTerm then
					error(self._node:toExc("tuple index error"))
				end
				const nValueType = nTerm:getType()
				if nHashableTypeSet:putAtom(nKey) then
					nTypeDict[nKey] = nValueType
				else
					self._stack:getRuntime():nodeError(self._node, "key conflict when table build")
				end
			end
		end
	end
	const nSelfInitDict = self._selfInitDict
	if nSelfInitDict then
		for nKey, nValue in pairs(nSelfInitDict) do
			nKey:foreachAwait(function(vSubKey)
				if nHashableTypeSet:putAtom(vSubKey) then
					nTypeDict[vSubKey] = nManager:checkedUnion(nValue, nManager.type.Nil)
				else
					nTypeDict[vSubKey] = nManager:checkedUnion(nValue, nManager.type.Nil, nTypeDict[vSubKey]!)
				end
			end)
		end
	end
	if OpenTable.is(vNewTable) then
		vNewTable:initByBranchKeyValue(self._node, self._stack:topBranch(), nManager:unifyAndBuild(nHashableTypeSet), nTypeDict)
	else
		vNewTable:initByKeyValue(self._node, nTypeDict)
	end
end

function TableBuilder:build():Ret(clazz.BaseObject)
	const nLongHint = self:_makeLongHint()
	const ok, err = pcall(self._hintInfo.caller, nLongHint)
	if not ok then
		error(Exception.new(tostring(err), self._node))
	end
	const nStack = self._stack
	const nManager = nStack:getTypeManager()
	const nAttrSet = self._hintInfo.attrSet
	if nAttrSet.class then
		const nNewTable = assert(nStack:getClassTable(), self._node:toExc("only function:class(xxx) can build table hint with {.class"))
		self:_build(nNewTable)
		return nNewTable
	else
		if nAttrSet.open then
			if self._selfInitDict then
				self._selfInitDict = false
				self._stack:getRuntime():nodeError(self._node, "open table can't use Init()")
			end
			const nNewTable = OpenTable.new(nManager, self._node, self._stack)
			self:_build(nNewTable)
			return nNewTable
		else
			const nNewTable = self._stack:newAutoTable(self._node)
			self:_build(nNewTable)
			return nNewTable
		end
	end
end

return TableBuilder
