
local UnionTerm = require "thlua.term.UnionTerm"
local TableBuilder = {}

(@let.class = import("thlua.type.TypeClass").class)

(@do
	let.Pair = Struct {
		[1]=class.UAllType,
		[2]=class.UAllType,
	}
	let.PairMaker = Fn():Ret(List(Pair), Number, class.TermTuple)
end)

TableBuilder.__index=TableBuilder

function TableBuilder.new(vContext:class.UContext, vNode:class.AstNode, vPairMaker:PairMaker)::RetClass(class.TableBuilder)
	return setmetatable({::Self()
		_context=vContext,
		_node=vNode,
		_pairMaker=vPairMaker,
		_selfTable=false@Union(False, class.LuaTable),
	}, TableBuilder)
end

function TableBuilder.makeLongHint(self:class.TableBuilder)::RetClass(class.TableLongHint)
	return {::Self()
		Self=function(vLongHint:class.TableLongHint)::Ret(class.TableLongHint)
			local nFnCom = assert(self._context:getRegion(), "region must existed when table::Self()"):getFnCom()
			self._selfTable = nFnCom:regionTableSelf(self._context, self._node)
			return vLongHint
		end,
	}
end

function TableBuilder:build()::Ret(class.LuaTable)
	local nContext = self._context
	local nManager = nContext._manager
	local nTableType = self._selfTable or nManager:LuaTable()
	nTableType:setName("("..tostring(self._node)..")")
	local vList, vDotsStart, vDotsTuple = self._pairMaker()
	local nTypePairList = {}
	for i, nPair in ipairs(vList) do
		local nKey = nPair[1]:getType()
		local nValue = nPair[2]:getType()
		if not nKey:isSingleton() then
			nValue = nManager:Union(nValue, nManager.type.Nil)
		end
		nTypePairList[i] = {nKey, nValue}
	end
	if vDotsTuple then
		local nTypeTuple = vDotsTuple:getTypeTuple()
		local nRepeatType = nTypeTuple:getRepeatType()
		if nRepeatType then
			nTypePairList[#nTypePairList + 1] = {
				nManager.type.Number, nManager:Union(nRepeatType, nManager.type.Nil)
			}
		else
			for i=1, #nTypeTuple do
				nTypePairList[#nTypePairList + 1] = {
					nManager:Literal(vDotsStart + i - 1),nTypeTuple:get(i)
				}
			end
		end
	end
	local nKeyUnion, nTypeDict = nManager:mergePairList(nTypePairList)
	nTableType:getDefaultCom():initByKeyValue(nKeyUnion, nTypeDict)
	return nTableType
end

return TableBuilder
