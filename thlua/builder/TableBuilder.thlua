
const RefineTerm = require "thlua.term.RefineTerm"
const Exception = require "thlua.Exception"
const TableBuilder = {}

(@let.class = import("thlua.type.TypeClass").class)

(@do
	let.Pair = Struct {
		[1]=class.RefineTerm,
		[2]=class.RefineTerm,
	}
	let.PairMaker = Fn():Ret(List(Pair), Integer, class.TermTuple)
end)

TableBuilder.__index=TableBuilder

function:class(let.TableBuilder) TableBuilder.new(vContext:class.Context,
	vNode:class.IAstNode,
	vHintInfo:class.TLongHintInfo(class.TableLongHint),
	vPairMaker:PairMaker
)
	return setmetatable({.class
		_context=vContext,
		_node=vNode,
		_hintInfo=vHintInfo,
		_pairMaker=vPairMaker,
		_selfInitDict=false@Union(False, Dict(class.UAllType, class.UAllType)),
	}, TableBuilder)
end

function:class(class.TableLongHint) TableBuilder._makeLongHint(self:let.TableBuilder)
	return {.class
		Init=function(vLongHint:class.TableLongHint, vInitDict:Dict(class.UAllType, class.UAllType)):Ret(class.TableLongHint)
			self._selfInitDict = vInitDict
			return vLongHint
		end,
	}
end

function TableBuilder:_build(vNewTable:class.LuaTable)
	const nContext = self._context
	const nManager = nContext:getTypeManager()
	vNewTable:setName("("..tostring(self._node)..")")
	const vList, vDotsStart, vDotsTuple = self._pairMaker()
	const nTypePairList:List(Struct {class.UAtomUnion, class.UAtomUnion}) = {}
	for i, nPair in ipairs(vList) do
		const nKey = nPair[1]:getType()
		local nValue = nPair[2]:getType()
		if nKey:isUnion() or not nKey:isSingleton() then
			nValue = nManager:checkedUnion(nValue, nManager.type.Nil)
		end
		nTypePairList[i] = {nKey, nValue}
	end
	if vDotsTuple then
		const nTypeTuple = vDotsTuple:getTypeTuple()
		const nRepeatType = nTypeTuple:getRepeatType()
		if nRepeatType then
			nTypePairList[#nTypePairList + 1] = {
				nManager.type.Number, nManager:checkedUnion(nRepeatType, nManager.type.Nil)
			}
		else
			for i=1, #nTypeTuple do
				nTypePairList[#nTypePairList + 1] = {
					nManager:Literal(vDotsStart + i - 1), nTypeTuple:get(i):checkAtomUnion()
				}
			end
		end
	end
	const nSelfInitDict = self._selfInitDict
	if nSelfInitDict then
		for nKey, nValue in pairs(nSelfInitDict) do
			nKey:foreach(function(vSubKey)
				nTypePairList[#nTypePairList + 1] = {
					vSubKey, nManager:checkedUnion(nValue, nManager.type.Nil)
				}
			end)
		end
	end
	const nKeyUnion, nTypeDict = nManager:mergePairList(nTypePairList)
	vNewTable:getDefaultCom():initByKeyValue(nKeyUnion, nTypeDict)
end

function TableBuilder:build():Ret(class.LuaTable)
	const nLongHint = self:_makeLongHint()
	const ok, err = pcall(self._hintInfo.caller, nLongHint)
	if not ok then
		error(Exception.new(tostring(result), self._node))
	end
	const nContext = self._context
	const nManager = nContext:getTypeManager()
	const nAttrSet = self._hintInfo.attrSet
	if nAttrSet.class then
		const nNewTable = assert(nContext:getClassTable(), "only function:class(class.) can build table hint with {.class")
		self:_build(nNewTable)
		return nNewTable
	else
		const nNewTable = nManager:LuaTable()
		self:_build(nNewTable)
		return nNewTable
	end
end

return TableBuilder
