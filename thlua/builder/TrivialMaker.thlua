
local TypeMaker = require "thlua.builder.TypeMaker"
local Reference = require "thlua.type.Reference"
local TrivialMaker = TypeMaker()

(@let.class = import("thlua.type.TypeClass").class)

function TrivialMaker.new(vManager:class.TypeManager, vSomething:Truth)::RetClass(class.TrivialMaker)
	local self = setmetatable({::Self()
		_manager=vManager,
		_type=false,
	}, TrivialMaker)
	self._initFunc=function()
		self._type = self:_toType(vSomething)
	end
	return self
end

function TrivialMaker:_toType(vData)
	local t = type(vData)
	if t == "table" then
		if self._manager:isValueType(vSomething) then
			return t
		end
	elseif t == "number" or t == "string" then
		return self._manager:Literal(vData)
	elseif t == "boolean" then
		return self._manager:Boolean(vData)
	else
		error("_toType("..t..") todo")
	end
end

function TrivialMaker:foreach(vFunc)
	for k,v in pairs(self._typeList) do
		vFunc(v)
	end
end

function TrivialMaker.is(vType)::isguard(class.TrivialMaker)
	return getmetatable(vType) == TrivialMaker
end

return TrivialMaker
