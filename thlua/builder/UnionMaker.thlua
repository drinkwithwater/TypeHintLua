
local TypeMaker = require "thlua.builder.TypeMaker"
local Reference = require "thlua.type.Reference"
local UnionMaker = TypeMaker()

(@let.class = import("thlua.type.TypeClass").class)

function UnionMaker.new(vManager:class.TypeManager, vReferList:List(class.Reference))::RetClass(class.UnionMaker)
	local self = setmetatable({::Self()
		_manager=vManager,
		_typeList={},
	}, UnionMaker)
	self._initFunc=function()
		for i,v in ipairs(vReferList) do
			self._typeList[i] = v:getMakerAwait()
		end
	end
	return self
end

function UnionMaker:foreach(vFunc)
	for k,v in pairs(self._typeList) do
		vFunc(v)
	end
end

function UnionMaker.is(vType)::isguard(class.UnionMaker)
	return getmetatable(vType) == UnionMaker
end

return UnionMaker
