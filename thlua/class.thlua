const class2meta={}
const meta2class={}

const pairs = pairs
const setmetatable = setmetatable
const getmetatable = getmetatable

(@do
	let.clazz = namespace()
	let.open2type = easymap()
	open2type[False] = False
	open2type[Nil] = False
end)

const META_FIELD = {.open
	__call=1,
	__tostring=1,
	__len=1,
	__bor=1,
	__band=1,
	__pairs=1,
	-- TODO, other meta action
}

const function.open recursiveCreate(obj, cls, ...)
	const super = cls.super
	if super then
		recursiveCreate(obj, super, ...)
	end
	const ctor = cls.ctor
	if ctor then
		ctor(obj, ...)
	end
end

const function.open class@<$C, $I>(super)
	const class_type={.open}
	(@open2type[$class_type] = C)
	class_type.ctor=false
	class_type.super=super
	class_type.new=function:class(C) (...):extends(Cond($super, open2type[$super], False)):implements(I)
			const obj={.class}
			recursiveCreate(obj, class_type, ...)
			setmetatable(obj, class_type.meta)
			return obj
		end
	const vtbl={.open}
	const meta={.open
		__index=vtbl
	}
	class_type.isDict = setmetatable({}, {
		__index=function.pass(type2is:Dict(Truth, Boolean), if_type:Truth):Ret(Boolean)
			local cur_type = class_type
			while cur_type do
				if cur_type == if_type then
					type2is[if_type] = true
					return true
				else
					cur_type = cur_type.super
				end
			end
			type2is[if_type] = false
			return false
		end
	}) @? Dict(Truth, Boolean)
	class_type.is=function.open(v):isguard(C)
		const nClassType = meta2class[getmetatable(v) or 1]
		const nIsDict = nClassType and nClassType.isDict
		return nIsDict and nIsDict[class_type] or false
	end
	class_type.meta=meta
	class2meta[class_type]=meta
	meta2class[meta]=class_type

	setmetatable(class_type,{__newindex=
		function.open(t,k,v)
			if META_FIELD[k] then
				meta[k] = v
			else
				vtbl[k]=v
			end
		end
	})

	if super then
		const super_meta = class2meta[super]
		for k,v in pairs(super_meta.__index) do
			vtbl[k] = v
		end
		for k,v in pairs(super_meta) do
			if k ~= "__index" then
				meta[k] = v
			end
		end
	end

	return class_type
end

return class
