const _class={}

(@do
	let.clazz = namespace()
end)

const META_FIELD = {.open
	__tostring=1,
	__len=1,
}

const function.open class@<C, I>(super)
	const class_type={.open}
	class_type.ctor=false
	class_type.super=super
	class_type.new=function:class(C) (...):impl(Cond(I, I, AnyObject))
			const obj={.class}
			do
				const function.open create(c,...)
					if c.super then
						create(c.super,...)
					end
					if c.ctor then
						c.ctor(obj,...)
					end
				end

				create(class_type,...)
			end
			setmetatable(obj, class_type.meta)
			return obj
		end
	const vtbl={.open}
	const meta={.open
		__index=vtbl
	}
	class_type.is=function.open(v):isguard(C)
		return getmetatable(vType) == vtbl
	end
	class_type.meta=meta
	_class[class_type]=meta

	setmetatable(class_type,{__newindex=
		function.open(t,k,v)
			if META_FIELD[k] then
				meta[k] = v
			else
				vtbl[k]=v
			end
		end
	})

	if super then
		const super_meta = _class[super]
		for k,v in pairs(super_meta.__index) do
			vtbl[k] = v
		end
		for k,v in pairs(super_meta) do
			if k ~= "__index" then
				meta[k] = v
			end
		end
	end

	return class_type
end

return class
