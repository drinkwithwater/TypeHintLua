
const ParseEnv = require "thlua.code.ParseEnv"
const Node = require "thlua.code.Node"
const Exception = require "thlua.Exception"
const VisitorExtend = require "thlua.code.VisitorExtend"
const SymbolVisitor = require "thlua.code.SymbolVisitor"
const HintGener = require "thlua.code.HintGener"
const SplitCode = require "thlua.code.SplitCode"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
	let.TypingFn = Fn(List(clazz.IAstNode), clazz.BaseStack, clazz.RefineTerm):Ret(clazz.OpenFunction)
end)

const CodeEnv = class@<clazz.CodeEnv, false>(SplitCode)

function.open CodeEnv:ctor(vContent:String, vChunkName:String, vVersion:Integer)
	self._chunkName = vChunkName
	self._astTree = nil@!node.Chunk
	self._nodeList = {}@List(node.IAstNode)
	self._identList = {}@List(node.Ident_def)
	self._version = vVersion or -1
	self._typingCode = false@OrFalse(String)
	self._typingFn = nil@!TypingFn
end

function CodeEnv:lateInit()
	const nAst, nErr = ParseEnv.parse(self._content)
	if not nAst then
		self:_prepareNode(nErr, false)
		error(Exception.new(nErr[1], nErr))
	end
	self._astTree = nAst
	self._typingFn = self:_buildTypingFn(false) @> TypingFn
end

function.pass CodeEnv:_prepareNode(vNode:node.IAstNode, vParent:OrFalse(node.IAstNode))
	const nNodeList = self._nodeList
	const nIndex = #nNodeList + 1
	nNodeList[nIndex] = vNode
	vNode.index = nIndex
	vNode.parent = vParent
	vNode.path = self._chunkName
	vNode.l, vNode.c = self:fixupPos(vNode.pos, vNode)
	Node.bind(vNode)
end

function CodeEnv:prepare()
	assert(#self._nodeList == 0, "node list has been setted")
	-- 1. set line & column, parent
	const nStack:List(node.IAstNode) = {}
	self:visit(function(visitor, vNode)
		-- 1. prepare
		self:_prepareNode(vNode, nStack[#nStack] or false)
		nStack[#nStack + 1] = vNode
		visitor:rawVisit(vNode)
		nStack[#nStack] = nil
		-- 2. put record ident
		if vNode.tag == "Ident" then
			table.insert(self._identList, vNode)
		end
	end)
	table.sort(self._identList, function(a:node.Ident, b:node.Ident)
		return a.pos < b.pos
	end)
end

function.pass CodeEnv:visit(vFunc:Fn(node.IVisitor, node.IAstNode))
	const visitor = VisitorExtend(vFunc)
	visitor:realVisit(self._astTree)
end

function.pass CodeEnv:_buildTypingFn(vIsInject:Boolean):Ret(AnyFunction)
	const nAst = self._astTree
	self:prepare()
	const nSymbolVisitor = SymbolVisitor.new()
	nSymbolVisitor:realVisit(nAst)
	const gener = HintGener.new(nAst, vIsInject)
	const nTypingCode = gener:genCode()
	self._typingCode = nTypingCode
	local nFunc, nInfo = load(nTypingCode, self._chunkName, "t", setmetatable({}, {
		__index=function(t,k)
			-- TODO, give node pos
			error("indexing global is fatal error, name="..k)
		end
	}))
	if not nFunc then
		error(Exception.new(tostring(nInfo), self._astTree))
	end
	assert(type(nFunc) == "function", Exception.new("typing code must return function", self._astTree))
	if not nFunc then
		-- TODO, give node pos
		error(Exception.new(tostring(nInfo), self._astTree))
	end
	return nFunc
end

function CodeEnv:getNodeList():Ret(List(clazz.IAstNode))
	return self._nodeList
end

function CodeEnv:getAstTree()
	return self._astTree
end

function CodeEnv:getTypingCode()
	return self._typingCode
end

function CodeEnv:getTypingFn():Ret(TypingFn)
	return self._typingFn
end

function CodeEnv:traceBlock(vTraceList:node.InjectTrace):Ret(node.Block, List(node.Function))
	local nRetBlock:node.Block = self._astTree[3]
	for i=1,#vTraceList-1 do
		const nTrace = vTraceList[i]!
		const nNextBlock = nRetBlock.subBlockList[nTrace]!
		if not nNextBlock then
			break
		else
			nRetBlock = nNextBlock
		end
	end
	const nList:List(node.Function) = {}
	local nCurFunc:OrNil(node.IAstNode) = nRetBlock
	while nCurFunc do
		if nCurFunc.tag == "Function" then
			nList[#nList + 1] = nCurFunc @> node.Function
		end
		nCurFunc = nCurFunc.parent
	end
	return nRetBlock, nList
end

function CodeEnv:searchIdent(vPos:Integer):Ret(OrNil(node.Ident))
	const nIndex, nNode = self:binSearch@<node.Ident_def>(self._identList, vPos)
	if not nIndex then
		return nil
	end
	if vPos >= nNode.pos + #nNode[1] or vPos > nNode.posEnd then
		return nil
	end
	return nNode
end

function CodeEnv:getVersion():Ret(Integer)
	return self._version
end

function CodeEnv:getChunkName():Ret(String)
	return self._chunkName
end

return CodeEnv
