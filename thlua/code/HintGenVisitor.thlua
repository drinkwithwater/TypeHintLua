
const VisitorExtend = require "thlua.code.VisitorExtend"

(@do

let.node = import("thlua.code.Node").node
let.class = import("thlua.type.TypeClass").class

let.RealTraverser = Struct((function()
	local t = {}
	foreachPair(node.TagToNodeType, function(vTag, vNodeType)
		t[vTag] = OrNil(Fn(let.HintGenVisitor, vNodeType))
	end)
	return t
end)())

end)

local TagToVisiting:RealTraverser = {
	Chunk=function(visitor, node)
		visitor:print('local ____rt, ____ctx, ____nodes=... ')
		-- chunk _ENV
		visitor:print("local ____s__ENV"..node[1].index.."=____rt:makeSymbol_ENV(",visitor:codeNode(node[1]),") ")
		-- function begin
		local nLongHintPrint = " function(____longHint) return ____longHint:open() end"
		local nParPrint = visitor:formatParListInFuncHead(node[2])
		visitor:print("local ____fn,____uv ____fn,____uv=____ctx:FUNC_NEW(", visitor:codeNode(node), ",", nLongHintPrint, ",", nParPrint, ",", tostring(node.retFlag), ", function(____newCtx, vArgTuple) ")
		-- region begin
		visitor:print("local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", visitor:codeNode(node), ", ____fn,____uv) ")
		-- chunk vDots
		visitor:print("local vDOTS=____ctx:TUPLE_UNPACK(", visitor:codeNode(node),",vArgTuple,0,true)")
		visitor:realVisit(node[3])
		visitor:print("end) return ____fn")
	end,
	Block=function(visitor, node)
		visitor.indent_count = visitor.indent_count + 1
		const nParent = node.parent!
		const nParentTag = nParent.tag
		visitor:fixLinePrint(node)
		for i=1, #node do
			visitor:indent()
			visitor:realVisit(node[i]!)
			visitor:print(" ")
		end
		if nParentTag == "Function" or nParentTag == "Chunk" then
			visitor:indent()
			visitor:print("return ", visitor:codeRgn(node, "END"), ") ")
		end
		visitor.indent_count = visitor.indent_count - 1
	end,
	Do=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("do ")
		visitor:realVisit(node[1])
		visitor:indent()
		visitor:print("end")
	end,
	Set=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("local ")
		visitor:printn("set_a", #node[1])
		visitor:print("=", visitor:codeCtx(node, "EXPLIST_UNPACK"), ","..#node[1]..",")
		visitor:realVisit(node[2])
		visitor:print(") ")
		const nVarList = node[1]
		for i=1, #nVarList do
			visitor:indent()
			const var = nVarList[i]!
			if var.tag == "Ident" then
				visitor:print(visitor:codeRgn(var, "SYMBOL_SET"), ",", var, ",")
			else
				visitor:print(visitor:codeCtx(node, "META_SET"), ",")
				visitor:print(var[1])
				visitor:print(", ")
				visitor:print(var[2])
				visitor:print(", ")
			end
			if i == #node[1] then
				visitor:print("set_a", i, ",", tostring(node.override or false), ")")
			else
				visitor:print("set_a", i, ",", tostring(node.override or false), ")")
			end
		end
	end,
	While=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:indent()
		visitor:print("local while_a=")
		visitor:print(node[1])
		visitor:print(" ")
		visitor:indent()
		visitor:print(visitor:codeRgn(node, "WHILE"), ",while_a, function() ")
		visitor:print(node[2])
		visitor:indent()
		visitor:print("end) ")
	end,
	Repeat=function(visitor, node)
		print("TODO repeat not implement")
	end,
	If=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("--[[ if begin ]]")
		const function put(exprNode:node.Expr, blockNode:node.Block, nextIndex:Integer, level:Integer)
			visitor:indent()
			visitor:print("local if_a"..level.."=")
			visitor:print(exprNode)
			visitor:print(" ")
			visitor:indent()
			visitor:print(visitor:codeRgn(node, "IF"), ",if_a"..level..", function() ")
			visitor:print(blockNode)
			const nNext1Node, nNext2Node = node[nextIndex], node[nextIndex + 1]
			if nNext1Node then
				visitor:indent()
				visitor:print("end,function() ")
				if nNext2Node then
					assert(nNext1Node.tag ~= "Block" and nNext2Node.tag == "Block", "if statement error")
					visitor.indent_count = visitor.indent_count + 1
					put(nNext1Node, nNext2Node, nextIndex + 2, level + 1)
					visitor.indent_count = visitor.indent_count - 1
				else
					assert(nNext1Node.tag == "Block")
					visitor:print(nNext1Node)
				end
				visitor:indent()
				visitor:print("end) ")
			else
				visitor:indent()
				visitor:print("end) ")
			end
		end
		const nExpr, nBlock = node[1]!, node[2]!
		assert(nExpr.tag ~= "Block" and nBlock.tag == "Block", "if statement error")
		put(nExpr, nBlock, 3, 1)
		visitor:indent()
		visitor:print("--[[ if end ]]")
	end,
	Fornum=function(visitor, node)
		visitor:fixLinePrint(node)
		local nBlockNode = node[5]
		visitor:print("local fornum_r1, fornum_r2, fornum_r3 = ")
		if nBlockNode then
			visitor:print(node[2], ", ", node[3], ", ", node[4], " ")
		else
			visitor:print(node[2], ", ", node[3], " ")
			const nSubNode = node[4]
			assert(nSubNode.tag == "Block", "node must be block here")
			nBlockNode = nSubNode
		end
		visitor:print(visitor:codeRgn(node, "FOR_NUM"), ",function(fornum_i) ")
		visitor:printSymbolNew(node[1], "fornum_i")
		visitor:print(nBlockNode)
		visitor:indent()
		visitor:print("end, fornum_r1, fornum_r2, fornum_r3) ")
	end,
	Forin=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:indent()
		visitor:print("local forin_next, forin_self, forin_init = ", visitor:codeCtx(node, "EXPLIST_UNPACK"), ",3,", node[2], ") ")
		visitor:print(visitor:codeRgn(node, "FOR_IN"), ",function(vIterTuple) ")
		visitor:indent()
		visitor:print("\tlocal ")
		visitor:printn("forin_gen", #node[1])
		visitor:print("=", visitor:codeCtx(node, "TUPLE_UNPACK"), ",vIterTuple,", #node[1], ",false) ")
		visitor:indent()
		const nIdentList = node[1]
		for i=1, #nIdentList do
			visitor:printSymbolNew(nIdentList[i]!, "forin_gen"..i)
		end
		visitor:print(node[3])
		visitor:indent()
		visitor:print("end, forin_next, forin_self, forin_init) ")
	end,
	Local=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("local ")
		visitor:printn("local_a", #node[1])
		if #node[2]>0 then
			visitor:print("=", visitor:codeCtx(node, "EXPLIST_UNPACK"), ","..#node[1]..",")
			visitor:print(node[2])
			visitor:print(")")
		end
		visitor:print(" ")
		local nIdentList = node[1]
		for i=1, #nIdentList do
			visitor:printSymbolNew(nIdentList[i]!, "local_a"..i)
		end
	end,
	Localrec=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:printSymbolNew(node[1], node[2])
	end,
	Goto=function()
		print("--goto TODO")
	end,
	Label=function()
		print("--label TODO")
	end,
	Return=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print(visitor:codeRgn(node, "RETURN"), ",", visitor:codeCtx(node, "EXPLIST_PACK"), ",false, {")
		visitor:print(node[1])
		visitor:print("}))")
	end,
	Break=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print(" ", visitor:codeRgn(node, "BREAK"), ") ")
	end,
	Call=function(visitor, node)
		visitor:fixLinePrint(node)
		if visitor:autoUnpack(node) then
			visitor:print(visitor:codeCtx(node, "EXPLIST_UNPACK"), ",1,")
		end
		visitor:print(visitor:codeCtx(node, "META_CALL"), ",")
		visitor:print(node[1], ",")
		visitor:print(visitor:codeCtx(node, "EXPLIST_PACK"), ",true, {")
		if #node[2] > 0 then
			visitor:print(node[2])
		end
		visitor:print("}))")
		if visitor:autoUnpack(node) then
			visitor:print(")")
		end
	end,
	Invoke=function(visitor, node)
		visitor:fixLinePrint(node)
		if visitor:autoUnpack(node) then
			visitor:print(visitor:codeCtx(node, "EXPLIST_UNPACK"), ",1,")
		end
		visitor:print(visitor:codeCtx(node, "META_INVOKE"), ",")
		visitor:print(node[1])
		visitor:print(",\"")
		visitor:print(node[2][1])
		visitor:print("\"")
		if #node[3] > 0 then
			visitor:print(",")
			visitor:print(visitor:codeCtx(node, "EXPLIST_PACK"), ",false, {")
			visitor:print(node[3])
			visitor:print("})")
		else
			visitor:print(",", visitor:codeCtx(node, "EXPLIST_PACK"), ",false, {})")
		end
		visitor:print(")")
		if visitor:autoUnpack(node) then
			visitor:print(")")
		end
	end,
	HintStat=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:indent()
		-- visitor:print("local block = function(self) ", node[1], " end block(self)\n")
		visitor:print(" ",node[1], " ")
		visitor:fixLong(node[1])
	end,
	Nil=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("____ctx:NilTerm()")
	end,
	Dots=function(visitor, node)
		visitor:fixLinePrint(node)
		if not visitor:autoUnpack(node) then
			visitor:print("vDOTS")
		else
			visitor:print(visitor:codeCtx(node, "EXPLIST_UNPACK"), ",1, vDOTS)")
		end
	end,
	True=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("____ctx:BooleanTerm(true)")
	end,
	False=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("____ctx:BooleanTerm(false)")
	end,
	Number=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("____ctx:LiteralTerm")
		visitor:print("("..tostring(node[1])..")")
	end,
	String=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print("____ctx:LiteralTerm")
		local s = node[1]
		if node.isLong then
			visitor:print('([[' .. s .. ']])')
		else
			visitor:print('(' .. string.format("%q", s) .. ')')
		end
	end,
	Function=function(visitor, node)
		visitor:fixLinePrint(node)
		const nParList = node[1]
		const nParInHead = visitor:formatParListInFuncHead(nParList)
		local nLongHintPrint = " function(____longHint) return ____longHint" .. (node.hintLong or "") .. " end "
		visitor:fixLong(node.hintLong or "")
		visitor:print(" ____ctx:RefineTerm((function() local ____fn,____uv ____fn,____uv=____ctx:FUNC_NEW(", visitor:codeNode(node), ",", nLongHintPrint, ",", nParInHead, ",", tostring(node.retFlag), ", function(____newCtx, vArgTuple) ")
		visitor:print(" local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", visitor:codeNode(node), ",____fn,____uv) ")
		if #nParList > 0 then
			visitor:print(" local ", node[1], "=", visitor:codeCtx(node, "TUPLE_UNPACK"))
			if nParList[#nParList]!.tag == "Dots" then
				visitor:print(", vArgTuple, ",tostring(#nParList-1),", true) ")
			else
				visitor:print(", vArgTuple, ",tostring(#nParList),", false) ")
			end
			for i=1, #nParList do
				local par = nParList[i]!
				if par.tag ~= "Dots" then
					visitor:printSymbolNew(par, "v_"..par[1]..par.index, true)
				end
			end
		end
		visitor:print(node[2])
		visitor:indent()
		visitor:print("end) return ____fn end)())")
	end,
	Table=function(visitor, node)
		visitor:fixLinePrint(node)
		local nLongHintPrint = " function(____longHint) return ____longHint" .. (node.hintLong or "") .. " end "
		visitor:print("____ctx:RefineTerm(____ctx:TABLE_NEW(", visitor:codeNode(node), ",", nLongHintPrint, ", function() return {")
		visitor:fixLong(node.hintLong or "")
		local count = 0
		local tailDots:OrNil(node.UTupleExpr) = nil
		for i=1, #node do
			const nTableItem = node[i]!
			if nTableItem.tag == "Pair" then
				visitor:print("{", nTableItem[1], ",", nTableItem[2], "}")
			else
				count = count + 1
				const nExprTag = nTableItem.tag
				if i==#node and (nExprTag == "Dots" or nExprTag == "Invoke" or nExprTag == "Call") then
					tailDots = nTableItem
				else
					local key = "____ctx:LiteralTerm("..count..")"
					visitor:print("{", key, ",", nTableItem, "}")
				end
			end
			visitor:print(i < #node and "," or "")
		end
		if not tailDots then
			visitor:print("}, 0, nil end)) ")
		else
			visitor:print("}, ", count, ", ")
			visitor:print(tailDots, " end)) ")
		end
	end,
	Op=function(visitor, node)
		visitor:fixLinePrint(node)
		const nLogicOpSet:Dict(String, Integer) = {["or"]=1,["not"]=1,["and"]=1}
		const nOper = node[1]
		if nLogicOpSet[nOper] then
			if nOper == "not" then
				visitor:print(visitor:codeRgn(node, "LOGIC_NOT"), ",", node[2], ")")
			else
				visitor:print(visitor:codeRgn(node, "LOGIC_"..node[1]:upper()),
				",", node[2], ", function() return ", node[3]!, " end)")
			end
		else
			const nRight = node[3]
			if not nRight then
				visitor:print(visitor:codeCtx(node, "META_UOP"), ",\"", node[1], "\",", node[2], ")")
			elseif node[1] == "==" then
				visitor:print(visitor:codeCtx(node, "META_EQ_NE"), ",true,", node[2], ",", nRight, ")")
			elseif node[1] == "~=" then
				visitor:print(visitor:codeCtx(node, "META_EQ_NE"), ",false,", node[2], ",", nRight, ")")
			else
				visitor:print(visitor:codeCtx(node, "META_BOP_SOME"), ",\"", node[1], "\",", node[2], ",", nRight, ")")
			end
		end
	end,
	Paren=function(visitor, node)
		visitor:fixLinePrint(node)
		local nHintShort = node.hintShort
		if nHintShort then
			visitor:print("____ctx:HINT(", visitor:codeNode(node), ",")
		end
		visitor:print("(")
		visitor:realVisit(node[1])
		visitor:print(")")
		if nHintShort then
			visitor:print(",", visitor:fixShort(nHintShort), ")")
		end
	end,
	Ident=function(visitor, node)
		visitor:fixLinePrint(node)
		assert(node.kind ~= "def")
		const nDefineId = node.defineIdent
		const symbol = "____s_"..nDefineId[1]..nDefineId.index
		if node.isSet then
			visitor:print(symbol)
		else
			const nParent = node.parent!
			const nParentTag = nParent.tag
			const nParentParentTag = nParent.parent!.tag
			if nParentTag == "ExprList" and (nParentParentTag == "Invoke" or nParentParentTag == "Call") then
				visitor:print(" function() return ")
			end
			visitor:print(visitor:codeRgn(node, "SYMBOL_GET"), ",", symbol,")")
			if nParentTag == "ExprList" and (nParentParentTag == "Invoke" or nParentParentTag == "Call") then
				visitor:print(" end ")
			end
		end
	end,
	Index=function(visitor, node)
		visitor:fixLinePrint(node)
		visitor:print(visitor:codeCtx(node, "META_GET"), ",")
		visitor:realVisit(node[1])
		visitor:print(",")
		visitor:realVisit(node[2])
		visitor:print(",", tostring(node.notnil or false), ")")
	end,
	ExprList=function(visitor, node)
		visitor:fixLinePrint(node)
		for i=1, #node do
			visitor:realVisit(node[i]!)
			visitor:print(i < #node and "," or "")
		end
	end,
	ParList=function(visitor, node)
		visitor:fixLinePrint(node)
		const l:List(String) = {}
		for i=1, #node do
			const nParNode = node[i]!
			if nParNode.tag == "Ident" then
				l[#l+1] = "v_"..nParNode[1]..nParNode.index
			else
				l[#l+1] = "vDOTS"
			end
			-- visitor:print(node[i])
			-- visitor:print(i < #node and "," or "")
		end
		visitor:print(table.concat(l, ","))
	end,
	VarList=function(visitor, node)
		visitor:fixLinePrint(node)
		for i=1, #node do
			visitor:realVisit(node[i]!)
			visitor:print(i < #node and "," or "")
		end
	end,
	IdentList=function(visitor, node)
		visitor:fixLinePrint(node)
		for i=1, #node do
			visitor:realVisit(node[i]!)
			visitor:print(i < #node and "," or "")
		end
	end
}

const HintGenVisitor = VisitorExtend(TagToVisiting)

function HintGenVisitor:indent()
	-- indent logic TODO
	table.insert(self.buffer_list, string.rep("\t", self.indent_count - 1))
end

function HintGenVisitor:autoUnpack(vNode:node.UTupleExpr)::Ret(Boolean)
	local nParent = vNode.parent!
	if nParent.tag == "ExprList" or nParent.tag == "ParList" or nParent.tag == "Block" then
		-- block is for function-Call-statement
		return false
	else
		-- table tail not autoUnpack
		if nParent.tag == "Table" and nParent[#nParent] == vNode then
			return false
		end
		return true
	end
end

function HintGenVisitor:fixShort(vShortHint:String)::Ret(String)
	return (vShortHint:gsub("\n", " "))
end

function HintGenVisitor:fixLong(vLongHint:String)
	const _, count = vLongHint:gsub("\n", "\n")
	self.line = self.line + count
end

function HintGenVisitor:fixLinePrint(vNode:node.IAstNode)
	while self.line < vNode.l do
		self:print("\n")
		self.line = self.line + 1
	end
end

(@do
	let.UFormatList = List(Union(Integer, String, node.IAstNode, Fn():Ret(let.UFormatList)))
end)

function HintGenVisitor:print(...:Union(Integer, String, node.IAstNode))
	for i=1, select("#", ...) do
		local obj = select(i, ...)
		if type(obj) == "table" then
			self:realVisit(obj)
		else
			table.insert(self.buffer_list, obj)
		end
	end
end

function HintGenVisitor:codeNode(vNode:node.IAstNode)::Ret(String)
	return "____nodes["..vNode.index.."]"
end

function HintGenVisitor:codeRgn(vNode:node.IAstNode, vName:String)::Ret(String)
	return "____rgn:"..vName.."("..self:codeNode(vNode)
end

function HintGenVisitor:formatIdentDef(vIdentNode:node.Ident_def)::Ret(String)
	return "____s_"..vIdentNode[1]..vIdentNode.index
end

function HintGenVisitor:printSymbolNew(vIdentNode:node.Ident_def, vValue:Union(String, node.Function), vNoHint:OrNil(True))
	if type(vValue) == "string" then
		self:print(
		" local ", self:formatIdentDef(vIdentNode), "=____rgn:SYMBOL_NEW(",
			self:codeNode(vIdentNode), ",",
			string.format("%q", vIdentNode.immutKind), ",",
			vValue, ",",
			vNoHint and "nil" or (vIdentNode.hintShort or "nil"),
		")")
	else
		const nIdentFormat = self:formatIdentDef(vIdentNode)
		self:print(
		" local ", nIdentFormat, " ", nIdentFormat, "=____rgn:SYMBOL_NEW(",
			self:codeNode(vIdentNode), ",",
			string.format("%q", vIdentNode.immutKind), ","
		)
		self:realVisit(vValue)
		self:print(")")
	end
end

function HintGenVisitor:codeCtx(vNode:node.IAstNode, vName:String)::Ret(String)
	return "____ctx:"..vName.."("..self:codeNode(vNode)
end

function HintGenVisitor:formatParListInFuncHead(vParList:node.ParList)::Ret(String)
	const nParHintList:List(String) = {}
	local nDotsHintScript:OrFalse(String) = false
	for i=1, #vParList do
		local nParNode = vParList[i]!
		const nHintShort = nParNode.hintShort
		if nParNode.tag == "Dots" then
			if nHintShort then
				nDotsHintScript = self:fixShort(nHintShort)
			else
				nDotsHintScript = "____ctx:Variable(false)"
			end
		else
			if nHintShort then
				nParHintList[#nParHintList + 1] = self:fixShort(nHintShort)
			elseif nParNode.isSelf then
				nParHintList[#nParHintList + 1] = "____ctx:Variable(true)"
			else
				nParHintList[#nParHintList + 1] = "____ctx:Variable(false)"
			end
		end
	end
	local nParPrint = "____ctx:AutoArguments("..self:codeNode(vParList)..",{" .. table.concat(nParHintList, ",")
	if not nDotsHintScript then
		nParPrint = nParPrint .. "})"
	else
		nParPrint = nParPrint .. "},"..nDotsHintScript..") "
	end
	--[[if #vParList > 0 then
		const l:List(String) = {}
		for i=1, #vParList do
			const nParNode = vParList[i]!
			if nParNode.tag == "Ident" then
				l[#l+1] = "v_"..nParNode[1]..nParNode.index
			else
				l[#l+1] = "vDOTS"
			end
		end
		const nHasDots = vParList[#vParList]!.tag == "Dots"
		const l = {
			" local ", table.concat(l), "=", self:codeCtx(vParList, "TUPLE_UNPACK"), ", vArgTuple, ",
			nHasDots and tostring(#vParList-1) or tostring(#vParList),
			nHasDots and ", true)" or ", false)",
		}
	end]]
	return nParPrint
end

function HintGenVisitor:printFunc(vFunc:node.URegionNode, vParList:node.ParList,
	vLongHint:String, vRetFlag:Boolean, vBlockNode:node.Block)
	const nParPrint = ""
	const nParPrint = "____ctx:AutoArguments("..self:codeNode(vParList)..",{}, ____ctx:Variable(false))"
	const nLongHintPrint = " function(____longHint) return ____longHint:open() end"
	self:print(
	" local ____fn,____uv ",
	" ____fn,____uv=____ctx:FUNC_NEW(", self:codeNode(vFunc), ",", nLongHintPrint, ",", nParPrint, ",", tostring(vRetFlag), ", function(____newCtx, vArgTuple) ",
	"local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", self:codeNode(vBlockNode), ", ____fn,____uv) ", vBlockNode,
	"end) return ____fn"
	)
end

function HintGenVisitor:printn(c:String, n:Integer)
	for i=1, n do
		self:print(c..i)
		if i < n then
			self:print(",")
		end
	end
end

function HintGenVisitor.new()::RetClass(let.HintGenVisitor)
	const self = setmetatable({::Self()
		buffer_list = {} @List(String),
		indent_count = 0 @Integer,
		line = 1 @ Integer,
	}, HintGenVisitor)
	return self
end

function HintGenVisitor:getCode()::Ret(String)
	return table.concat(self.buffer_list)
end

return HintGenVisitor
