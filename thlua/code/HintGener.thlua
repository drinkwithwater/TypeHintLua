
(@do

let.node = import("thlua.code.Node").node
let.clazz = import("thlua.type.TypeClass").clazz

let.GenResult = Struct ({
	line = OrNil(True, Integer), -- if line is true, add new line after finish
	[Integer] = let.UGenResult,
}, {
	__len=Integer
})

let.UGenResult = Union(String, let.GenResult)

let.RealTraverser = Struct((function()
	local t = {}
	foreachPair(node.TagToNodeType, function(vTag, vNodeType)
		t[vTag] = OrNil(Fn(let.HintGener, vNodeType):Ret(let.UGenResult))
	end)
	return t
end)())

end)

local TagToVisiting:RealTraverser = {
	Chunk=function(self, node)
		return {
			'local ____rt, ____ctx, ____nodes=... ',
			"local ____s__ENV"..node[1].index.."=____rt:makeSymbol_ENV(",self:codeNode(node[1]),") ",
			self:visitFunc(node)
		}
	end,
	Block=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, vStatNode)
			return self:visit(vStatNode)
		end, " ")
	end,
	Do=function(self, node)
		return self:rgnWrap(node).DO(
			self:visitLongHint(node.hintLong),
			self:fnWrap()(self:visit(node[1]))
		)
	end,
	Set=function(self, node)
		return {
			" local ", self:concatList@<node.IAstNode>(node[1], function(i,v)
				return "____set_a"..i
			end, ","),
			"=", self:ctxWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), self:visit(node[2])),
			self:concatList@<node.Lhs>(node[1], function(i, vVarNode)
				if vVarNode.tag == "Ident" then
					return self:rgnWrap(vVarNode).SYMBOL_SET(
						self:formatIdent(vVarNode),
						"____set_a"..i
					)
				else
					return self:ctxWrap(node).META_SET(
						self:visit(vVarNode[1]),
						self:visit(vVarNode[2]),
						"____set_a"..i
					)
				end
			end, " ")
		}
	end,
	While=function(self, node)
		return self:rgnWrap(node).WHILE(
			self:visit(node[1]),
			self:fnWrap()(self:visit(node[2]))
		)
	end,
	Repeat=function(self, node)
		print("RepeatStat TODO")
		return {}
	end,
	If=function(self, node)
		const function put(exprNode:node.Expr, blockNode:node.Block, nextIndex:Integer, level:Integer):Ret(let.UGenResult)
			const nNext1Node, nNext2Node = node[nextIndex], node[nextIndex + 1]
			if nNext1Node then
				if nNext2Node then
					assert(nNext1Node.tag ~= "Block" and nNext2Node.tag == "Block", "if statement error")
					return self:rgnWrap(node).IF(
						self:visit(exprNode),
						self:fnWrap()(self:visit(blockNode)),
						self:fnWrap()(put(nNext1Node, nNext2Node, nextIndex + 2, level + 1))
					)
				else
					assert(nNext1Node.tag == "Block")
					return self:rgnWrap(node).IF(
						self:visit(exprNode),
						self:fnWrap()(self:visit(blockNode)),
						self:fnWrap()(self:visit(nNext1Node))
					)
				end
			else
				return self:rgnWrap(node).IF(
					self:visit(exprNode),
					self:fnWrap()(self:visit(blockNode))
				)
			end
		end
		const nExpr, nBlock = node[1]!, node[2]!
		assert(nExpr.tag ~= "Block" and nBlock.tag == "Block", "if statement error")
		return put(nExpr, nBlock, 3, 1)
	end,
	Fornum=function(self, node)
		const nHasStep = node[5] and true or false
		const nBlockNode = node[5] or node[4]
		assert(nBlockNode.tag == "Block", "4th or 5th node must be block")
		return self:rgnWrap(node).FOR_NUM(
			self:visit(node[2]), self:visit(node[3]), nHasStep and self:visit(node[4]) or "nil",
			self:fnWrap("____fornum")(
				self:visitIdentDef(node[1], "____fornum"),
				self:visit(nBlockNode)
			)
		)
	end,
	Forin=function(self, node)
		return {
			"local ____n_t_i=", self:ctxWrap(node).EXPRLIST_REPACK("false", self:listWrap(self:visit(node[2]))),
			self:rgnWrap(node).FOR_IN(self:fnWrap("____iterTuple")(
				"local ", self:concatList@<Truth>(node[1], function(i, vNode)
					return "____forin"..i
				end, ","),
				"=", self:ctxWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), "____iterTuple"),
				self:concatList@<node.Ident_def>(node[1], function(i, vIdent)
					return self:visitIdentDef(vIdent, "____forin"..i)
				end, " "),
				self:visit(node[3])
			), "____n_t_i")
		}
	end,
	Local=function(self, node)
		return {
			line=node.l,
			"local ", self:concatList@<Truth>(node[1], function(i, vNode)
				return "____lo"..i
			end, ","), "=",
			#node[2] > 0 and self:ctxWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), self:visit(node[2])) or "nil ",
			self:concatList@<node.Ident_def>(node[1], function(i, vIdent)
				return self:visitIdentDef(vIdent, "____lo"..i)
			end, " ")
		}
	end,
	Localrec=function(self, node)
		-- recursive function
		const nIdentNode = node[1]
		const nIdentFormat = self:formatIdent(nIdentNode)
		return {
			line=node.l,
			" local ", nIdentFormat, " ", nIdentFormat, "=", self:rgnWrap(nIdentNode).SYMBOL_NEW(
				string.format("%q", nIdentNode.symbolKind), tostring(nIdentNode.symbolModify or false),
				self:visit(node[2])
			)
		}
	end,
	Goto=function(self, node)
		print("--goto TODO")
		return {}
	end,
	Label=function(self, node)
		print("--label TODO")
		return {}
	end,
	Return=function(self, node)
		return self:rgnWrap(node).RETURN(
			self:ctxWrap(node).EXPRLIST_REPACK(
				"false",
				self:listWrap(self:visit(node[1]))
			)
		)
	end,
	Break=function(self, node)
		return self:rgnWrap(node).BREAK()
	end,
	Call=function(self, node)
		return self:ctxAutoUnpack(node,
			self:ctxWrap(node).META_CALL(
				self:visit(node[1]),
				self:ctxWrap(node).EXPRLIST_REPACK(
					"true",
					self:listWrap(#node[2] > 0 and self:visit(node[2]) or "")
				)
			)
		)
	end,
	Invoke=function(self, node)
		const nHintPolyArgs = node.hintPolyArgs
		return self:ctxAutoUnpack(node,
			self:ctxWrap(node).META_INVOKE(
				self:visit(node[1]),
				"\""..node[2][1].."\"",
				self:listWrap(nHintPolyArgs and self:fixIHintInfo(nHintPolyArgs) or ""),
				self:ctxWrap(node).EXPRLIST_REPACK(
					"false",
					self:listWrap(#node[3] > 0 and self:visit(node[3]) or "")
				)
			)
		)
	end,
	HintInfo=function(self, node)
		-- self:print("local block = function(self) ", node[1], " end block(self)\n")
		return {
			line = node.l,
			self:fixIHintInfo(node)
		}
	end,
	Nil=function(self, node)
		return "____ctx:NilTerm()"
	end,
	Dots=function(self, node)
		return self:ctxAutoUnpack(node, "____vDOTS")
	end,
	True=function(self, node)
		return "____ctx:BooleanTerm(true)"
	end,
	False=function(self, node)
		return "____ctx:BooleanTerm(false)"
	end,
	Number=function(self, node)
		return {
			"____ctx:LiteralTerm(", tostring(node[1]), ")"
		}
	end,
	String=function(self, node)
		const s = node[1]
		return {
			"____ctx:LiteralTerm",
			node.isLong and '([[' .. s .. ']])' or '(' .. string.format("%q", s),
			')'
		}
	end,
	Function=function(self, node)
		-- TODO
		return {
			"____ctx:RefineTerm((", self:fnWrap()(
				self:visitFunc(node)
			), ")())",
		}
	end,
	Table=function(self, node)
		local count = 0
		const i2i:Dict(Integer, Integer) = {}
		local tailDots:OrNil(node.UTupleExpr) = nil
		for i, nItem in ipairs(node) do
			if nItem.tag ~= "Pair" then
				count = count + 1
				i2i[i] = count
				const nExprTag = nItem.tag
				if i==#node and (nExprTag == "Dots" or nExprTag == "Invoke" or nExprTag == "Call") then
					tailDots = nItem
				end
			end
		end
		return {
			"____ctx:RefineTerm(", self:ctxWrap(node).TABLE_NEW(
				self:visitLongHint(node.hintLong),
				self:fnRetWrap(self:listWrap(self:concatList@<Union(node.Pair, node.Expr)>(node, function(i, vTableItem)
					if vTableItem.tag ~= "Pair" then
						if i==#node and tailDots then
							return "nil"
						else
							return self:listWrap("____ctx:LiteralTerm("..i2i[i]!..")", self:visit(vTableItem))
						end
					else
						return self:listWrap(self:visit(vTableItem[1]), self:visit(vTableItem[2]))
					end
				end, ",")), tostring(count), tailDots and self:visit(tailDots) or "nil")
			), ")"
		}
	end,
	Op=function(self, node)
		const nLogicOpSet:Dict(String, Integer) = {["or"]=1,["not"]=1,["and"]=1}
		const nOper = node[1]
		if nLogicOpSet[nOper] then
			if nOper == "not" then
				return self:rgnWrap(node).LOGIC_NOT(
					self:visit(node[2])
				)
			elseif nOper == "or" then
				return self:rgnWrap(node).LOGIC_OR(
					self:visit(node[2]), self:fnRetWrap(self:visit(node[3]!))
				)
			elseif nOper == "and" then
				return self:rgnWrap(node).LOGIC_AND(
					self:visit(node[2]), self:fnRetWrap(self:visit(node[3]!))
				)
			else
				error("invalid case branch")
			end
		else
			const nRight = node[3]
			if not nRight then
				return self:ctxWrap(node).META_UOP(
					"\""..node[1].."\"",
					self:visit(node[2])
				)
			elseif node[1] == "==" then
				return self:ctxWrap(node).META_EQ_NE(
					"true",
					self:visit(node[2]),
					self:visit(nRight)
				)
			elseif node[1] == "~=" then
				return self:ctxWrap(node).META_EQ_NE(
					"false",
					self:visit(node[2]),
					self:visit(nRight)
				)
			else
				return self:ctxWrap(node).META_BOP_SOME(
					"\""..node[1].."\"",
					self:visit(node[2]),
					self:visit(nRight)
				)
			end
		end
	end,
	Paren=function(self, node)
		local nHintShort = node.hintShort
		if nHintShort then
			return self:ctxWrap(node).CAST_HINT(
				{"(", self:visit(node[1]), ")"},
				string.format("%q", nHintShort.castKind),
				self:fixIHintInfo(nHintShort)
			)
		else
			return {"(", self:visit(node[1]), ")"}
		end
	end,
	Ident=function(self, node)
		assert(node.kind ~= "def")
		const symbol = self:formatIdent(node)
		if node.isSet then
			return symbol
		else
			local nParent = node.parent!
			while nParent.tag == "Paren" and not nParent.hintShort do
				nParent = nParent.parent!
			end
			const nParentTag = nParent.tag
			const nParentParentTag = nParent.parent!.tag
			if nParentTag == "ExprList" then
				const nSymbolGet = self:rgnWrap(node).SYMBOL_GET(symbol, "true")
				if nParentParentTag == "Invoke" or nParentParentTag == "Call" then
					-- lazy eval
					return self:fnRetWrap(nSymbolGet)
				else
					return nSymbolGet
				end
			else
				const nSymbolGet = self:rgnWrap(node).SYMBOL_GET(symbol, "false")
				return nSymbolGet
			end
		end
	end,
	Index=function(self, node)
		return self:ctxWrap(node).META_GET(
			self:visit(node[1]), self:visit(node[2]),
			tostring(node.notnil or false)
		)
	end,
	ExprList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, expr)
			return self:visit(expr)
		end, ",")
	end,
	ParList=function(self, node)
		error("implement in other way")
		return self:concatList@<Union(node.Ident_def, node.Dots)>(node, function(i, vParNode)
			return vParNode.tag == "Ident" and "____v_"..vParNode[1]..vParNode.index or "____vDOTS"
		end, ",")
	end,
	VarList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, varNode)
			return self:visit(varNode)
		end, ",")
	end,
	IdentList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, identNode)
			return self:visit(identNode)
		end, ",")
	end,
}

const HintGener = {}
HintGener.__index = HintGener

function HintGener:visit(vNode:node.IAstNode):Ret(let.UGenResult)
	const nUnionNode = vNode @ node.UNodeType
	const nFunc = TagToVisiting[nUnionNode.tag]
	if nFunc then
		return nFunc(self, nUnionNode)
	else
		return ""
	end
end

function HintGener:fixIHintInfo(vHintInfo:node.IHintInfo):Ret(let.GenResult)
	const nResult:let.GenResult = {}
	for k,v in ipairs(vHintInfo) do
		if v.tag == "HintScript" then
			local nLast:OrNil(let.GenResult) = nil
			for s in string.gmatch(v[1], "[^\n]*") do
				nLast = {
					line = true,
					" ", s, " "
				}
				nResult[#nResult + 1] = nLast
			end
			if nLast then
				nLast.line = nil
			end
		else
			nResult[#nResult + 1] = self:ctxWrap(v).EVAL(self:visit(v[1]))
		end
	end
	return nResult
end

(@do
	let.UFormatList = List(Union(Integer, String, node.IAstNode, Fn():Ret(let.UFormatList)))
end)

function HintGener:codeNode(vNode:node.IAstNode):Ret(String)
	return "____nodes["..vNode.index.."]"
end

function HintGener:formatIdent(vIdentNode:node.Ident):Ret(String)
	if vIdentNode.kind == "use" then
		const nDefineId = vIdentNode.defineIdent
		return "____s_"..nDefineId[1]..nDefineId.index
	else
		return "____s_"..vIdentNode[1]..vIdentNode.index
	end
end

function HintGener:visitIdentDef(vIdentNode:node.Ident_def, vValue:String, vFixedHint:OrNil(String)):Ret(let.UGenResult)
	const nHintShort = vIdentNode.hintShort
	return {
		line=vIdentNode.l,
		" local ", self:formatIdent(vIdentNode), "=", self:rgnWrap(vIdentNode).SYMBOL_NEW(
			string.format("%q", vIdentNode.symbolKind), tostring(vIdentNode.symbolModify or false),
			vValue, vFixedHint or (nHintShort and self:fixIHintInfo(nHintShort) or "nil")
		)
	}
end

function HintGener:fnWrap(...:String):Ret(Fn():Dots(let.UGenResult):Ret(let.GenResult))
	const nArgsString = table.concat({...}, ",")
	return function(...)
		const nList:let.GenResult = {...}
		const nResult:let.GenResult = { " function(", nArgsString, ") " }
		for i=1, #nList do
			nResult[#nResult+1] = nList[i]
			nResult[#nResult+1] = " "
		end
		nResult[#nResult+1] = " end "
		return nResult
	end
end

function HintGener:fnRetWrap(...:let.UGenResult):Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = { " function() return " }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = " end "
	return nResult
end

function HintGener:dictWrap(vDict:Dict(String, let.UGenResult)):Ret(let.GenResult)
	const nList:let.GenResult = {}
	nList[#nList + 1] = "{"
	for k,v in pairs(vDict) do
		nList[#nList + 1] = k
		nList[#nList + 1] = "="
		nList[#nList + 1] = v
		nList[#nList + 1] = ","
	end
	nList[#nList + 1] = "}"
	return nList
end

function HintGener:listWrap(...:let.UGenResult):Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = { "{" }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = "}"
	return nResult
end

(@do
	let.CtxNameEnum = Union(
		"AUTO",
		"FUNC_NEW",
		"TABLE_NEW",

		"EXPRLIST_UNPACK",
		"EXPRLIST_REPACK",

		"CAST_HINT",
		"EVAL",

		"META_EQ_NE",
		"META_UOP",
		"META_BOP_SOME",

		"META_CALL",
		"META_INVOKE",
		"META_GET",
		"META_SET"
	)
end)
function.pass HintGener:ctxWrap(vNode:node.IAstNode):Ret(Dict(let.CtxNameEnum, Fn():Dots(let.UGenResult):Ret(let.GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____ctx", vName, vNode, ...)
			end
		end,
	})
end

(@do
	let.RgnNameEnum = Union(
		"BEGIN",
		"RETURN",
		"END",
		"WHILE",
		"DO",
		"FOR_IN",
		"FOR_NUM",
		"IF",
		"BREAK",
		"PARLIST_UNPACK",
		"SYMBOL_NEW",
		"SYMBOL_GET",
		"SYMBOL_SET",
		"LOGIC_NOT",
		"LOGIC_OR",
		"LOGIC_AND"
	)
end)
function.pass HintGener:rgnWrap(vNode:node.IAstNode):Ret(Dict(let.RgnNameEnum, Fn():Dots(let.UGenResult):Ret(let.GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____rgn", vName, vNode, ...)
			end
		end,
	})
end

function HintGener:prefixInvoke(vPrefix:String, vName:String, vNode:node.IAstNode, ...:let.UGenResult):Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = {
		line=vNode.l,
		vPrefix, ":", vName, "(", self:codeNode(vNode),
	}
	for i=1, #nList do
		nResult[#nResult+1] = ","
		nResult[#nResult+1] = nList[i]
	end
	nResult[#nResult+1] = ")"
	return nResult
end

function HintGener:ctxAutoUnpack(vNode:node.UTupleExpr, vInner:let.UGenResult):Ret(let.UGenResult)
	const nParent = vNode.parent!
	local nAutoUnpack = true
	if nParent.tag == "ExprList" or nParent.tag == "ParList" or nParent.tag == "Block" then
		nAutoUnpack = false
	elseif nParent.tag == "Table" and nParent[#nParent] == vNode then
		-- table tail not autoUnpack
		nAutoUnpack = false
	end
	if nAutoUnpack then
		return self:ctxWrap(vNode).EXPRLIST_UNPACK("1", vInner)
	else
		return vInner
	end
end

function HintGener:chunkLongHint():Ret(let.GenResult)
	return self:dictWrap({
		attrSet="{open=1}",
		caller="function(____longHint) return ____longHint end"
	})
end

function HintGener:visitLongHint(vHintInfo:OrNil(node.LongHintInfo)):Ret(let.GenResult)
	const nCallGen:let.UGenResult = (vHintInfo and #vHintInfo > 0) and {
		":", self:fixIHintInfo(vHintInfo)
	} or ""
	const nAttrList = vHintInfo and vHintInfo.attrList or ({} @ List(String))
	const l:List(String) = {}
	for i=1, #nAttrList do
		l[#l + 1] = nAttrList[i]! .. "=1"
	end
	return self:dictWrap({
		attrSet=self:listWrap(table.unpack(l)),
		caller=self:fnWrap("____longHint")("return ____longHint", nCallGen)
	})
end

function HintGener:visitFunc(vNode:Union(node.Function, node.Chunk)):Ret(let.UGenResult)
	const nIsChunk = vNode.tag == "Chunk"
	const nHintPrefix = nIsChunk and self:chunkLongHint() or self:visitLongHint(vNode.hintPrefix)
	const nHintSuffix = nIsChunk and self:chunkLongHint() or self:visitLongHint(vNode.hintSuffix)
	const nParList = nIsChunk and vNode[2] or vNode[1]
	const nBlockNode = nIsChunk and vNode[3] or vNode[2]
	const nLastNode = nParList[#nParList]
	const nLastDots = (nLastNode and nLastNode.tag == "Dots") and nLastNode
	local nDotsHint:OrFalse(let.UGenResult) = false
	if nLastDots then
		const nHint = nLastDots.hintShort
		nDotsHint = nHint and self:fixIHintInfo(nHint) or false
	end
	const nParamNum = nLastDots and #nParList-1 or #nParList
	const nIsVararg = nLastDots and true or false
	const nParInBody:let.GenResult = {
		#nParList > 0 and {
			" local ____vList,____vDOTS=" ,
			self:rgnWrap(nParList).PARLIST_UNPACK("____termArgs", "____openParHint", tostring(nParamNum), tostring(nIsVararg)),
			self:concatList@<Union(node.Ident_def, node.Dots)>(nParList, function(i, vParNode)
				if vParNode.tag ~= "Dots" then
					return self:visitIdentDef(vParNode, "____vList["..i.."]", "nil")
				else
					return ""
				end
			end, " ")
		} or "",
	}
	const nPolyParList = vNode.hintPolyParList
	local nPolyUnpack:let.GenResult = {}
	const nPolyParNum = nPolyParList and #nPolyParList or 0
	if nPolyParList and nPolyParNum > 0 then
		nPolyUnpack = {
			" local ", self:concatList@<String>(nPolyParList, function(_, vPolyPar)
				return vPolyPar
			end, ","), "=", self:concatList@<String>(nPolyParList, function(i, vPolyPar)
				return "____polyArgs["..tostring(i).."]"
			end, ",")
		}
	end
	const nFirstPar = nParList[1]
	const nIsMember = nFirstPar and nFirstPar.tag == "Ident" and nFirstPar.isSelf or false
	const nSelf = nIsMember and "Self" or "____self"
	return {
		"local ____fn,____uv ",
		"____fn,____uv=", self:ctxWrap(vNode).FUNC_NEW(self:dictWrap({
			_prefixHint=nHintPrefix,
			_hasRetSome=tostring(vNode.retFlag or false),
			_hasSuffixHint=tostring((not nIsChunk and vNode.hintSuffix) and true or false),
			_isvararg=tostring(nIsVararg),
			_polyParNum=tostring(nPolyParNum),
			_parNum=tostring(nParamNum),
			_parFullHint=tostring(vNode.parFullHint or false),
			_member=tostring(nIsMember),
		}),
		-- par ret maker
			self:fnWrap("____newCtx","____polyArgs", nSelf)(
				"local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:REGION(____ctx,", self:codeNode(vNode), ",____uv) ",
				nPolyUnpack,
				"return ",
				self:listWrap(self:concatList@<Union(node.Ident_def, node.Dots)>(nParList, function(i, vParNode)
					const nHintShort = vParNode.hintShort
					if vParNode.tag == "Dots" then
						return {
							"dots=",
							nHintShort and self:fixIHintInfo(nHintShort) or self:ctxWrap(vParNode).AUTO()
						}
					else
						if i == 1 and nIsMember then
							return "Self"
						else
							return nHintShort and self:fixIHintInfo(nHintShort) or self:ctxWrap(vParNode).AUTO()
						end
					end
				end, ", ")),
				",",
				nHintSuffix,
				",",
				self:fnWrap("____bodyFn", "____oldCtx", "____termArgs", "____openParHint", "____polyArgs", nSelf)(
					self:rgnWrap(vNode).BEGIN("____bodyFn"),
					nParInBody,
					self:visit(nBlockNode),
					" return ",
					self:rgnWrap(vNode).END()
				)
			)
		-- gen function
		),
		"return ____fn ",
	}
end

function HintGener:concatList@<T>(
	vList:IList(T),
	vFunc:Fn(Integer, T):Ret(let.UGenResult),
	vSep:String
):Ret(let.GenResult)
	const nResult:let.GenResult = {}
	const nLen = #vList
	for i=1,nLen do
		nResult[#nResult + 1] = vFunc(i, vList[i]!)
		nResult[#nResult + 1] = i~=nLen and vSep or nil
	end
	return nResult
end

function:class(let.HintGener) HintGener.new()
	const self = setmetatable({.class
	}, HintGener)
	return self
end

function HintGener:genCode(vNode:node.IAstNode):Ret(String)
	const nBufferList:List(String) = {}
	local nLineCount = 1
	const function recurAppend(vResult:let.UGenResult, vDepth:Integer):Ret()
		if type(vResult) == "table" then
			const nLine = vResult.line
			if type(nLine) == "number" then
				while nLineCount < nLine do
					nBufferList[#nBufferList+1] = "\n"
					nLineCount = nLineCount + 1
				end
			end
			for _, v in ipairs(vResult) do
				recurAppend(v, vDepth+1)
			end
			if nLine == true then
				nBufferList[#nBufferList+1] = "\n"
				nLineCount = nLineCount + 1
			end
		else
			nBufferList[#nBufferList+1] = tostring(vResult)
		end
	end
	recurAppend(self:visit(vNode), 0)
	const re = table.concat(nBufferList)
	return re
end

return HintGener
