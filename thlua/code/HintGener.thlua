
(@do

let.node = import("thlua.code.Node").node
let.clazz = import("thlua.type.TypeClass").clazz

let.GenResult = Struct ({
	line = OrNil(True, Integer), -- if line is true, add new line after finish
	[Integer] = let.UGenResult,
}, {
	__len=Integer
})

let.UGenResult = Union(String, let.GenResult)

let.RealTraverser = Struct((function()
	local t = {}
	foreachPair(node.TagToNodeType, function(vTag, vNodeType)
		t[vTag] = OrNil(Fn(let.HintGener, vNodeType):Ret(let.UGenResult))
	end)
	return t
end)())

end)

const function autoPrimitive(vExpr:node.Expr):Ret(Boolean)
	const nTag = vExpr.tag
	if nTag == "String" or nTag == "Number" or nTag == "True" or nTag == "False" then
		return not vExpr.isConst
	else
		return false
	end
end

local TagToVisiting:RealTraverser = {
	Chunk=function(self, node)
		const nInjectNode = node.injectNode
		if not nInjectNode then
			return {
				'local ____nodes,____stk,____globalTerm=... ',
				self:visitIdentDef(node[1], "____globalTerm"),
				" return ", self:stkWrap(node).CHUNK_TYPE(self:visitFunc(node))
			}
		else
			if nInjectNode.tag ~= "HintSpace" then
				return {
					'local ____nodes,____stk,____injectGetter=... ',
					"local let, _ENV, _G = ____stk:INJECT_BEGIN() ",
					" return ", self:visit(nInjectNode),
				}
			else
				return {
					'local ____nodes,____stk,____injectGetter=... ',
					"local let, _ENV, _G = ____stk:INJECT_BEGIN() ",
					" return ", self:fixIHintSpace(nInjectNode),
				}
			end
		end
	end,
	HintTerm=function(self, node)
		return self:stkWrap(node).HINT_TERM(self:fixIHintSpace(node[1]))
	end,
	Block=function(self, node)
		return self:concatList@<node.Stat>(node, function(i, vStatNode)
			return self:visit(vStatNode)
		end, " ")
		-- RUN_AFTER_IF is not usefull
		--[[const nStatUntilIf:List(node.Stat) = {}
		const nStatAfterIf:List(node.Stat) = {}
		local nMeetIf = false
		for i, nStatNode in ipairs(node) do
			if not nMeetIf then
				nStatUntilIf[#nStatUntilIf + 1] = nStatNode
			else
				nStatAfterIf[#nStatAfterIf + 1] = nStatNode
			end
			if nStatNode.tag == "If" then
				nMeetIf = true
			end
		end]]
		--if #nStatAfterIf == 0 then
		--[[else
			return {
				self:concatList@<node.Stat>(nStatUntilIf, function(i, vStatNode)
						return self:visit(vStatNode)
				end, " "),
				self:rgnWrap(nStatAfterIf[1]!).RUN_AFTER_IF(self:fnWrap()(
					self:concatList@<node.Stat>(nStatAfterIf, function(i, vStatNode)
							return self:visit(vStatNode)
					end, " ")
				))
			}
		end]]
	end,
	Do=function(self, node)
		return self:rgnWrap(node).DO(
			self:visitLongHint(node.hintLong),
			self:fnWrap()(self:visit(node[1]))
		)
	end,
	Set=function(self, node)
		return {
			" local ", self:concatList@<node.IAstNode>(node[1], function(i,v)
				return "____set_a"..i
			end, ","),
			"=", self:stkWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), self:visit(node[2])),
			self:concatList@<node.Lhs>(node[1], function(i, vVarNode)
				if vVarNode.tag == "Ident" then
					const nDefineIdent = vVarNode.defineIdent
					if nDefineIdent then
						return self:stkWrap(vVarNode).SYMBOL_SET(
							self:codeNode(nDefineIdent),
							"____set_a"..i
						)
					else
						const nIdentENV = vVarNode.isGetFrom
						if self._chunk.injectNode and nIdentENV == self._chunk[1] then
							-- INJECT_SET donothing, so just ignore
							return ""
						else
							return self:stkWrap(vVarNode).GLOBAL_SET(
								self:codeNode(nIdentENV @> node.Ident_def),
								"____set_a"..i
							)
						end
					end
				else
					return self:stkWrap(vVarNode).META_SET(
						self:visit(vVarNode[1]),
						self:visit(vVarNode[2]),
						"____set_a"..i
					)
				end
			end, " ")
		}
	end,
	While=function(self, node)
		return self:rgnWrap(node).WHILE(
			self:visit(node[1]),
			self:fnWrap()(self:visit(node[2]))
		)
	end,
	Repeat=function(self, node)
		return self:rgnWrap(node).REPEAT(
			self:fnWrap()(self:visit(node[1])),
			self:fnWrap()(self:visit(node[2]))
		)
	end,
	If=function(self, node)
		const function put(exprNode:node.Expr, blockNode:node.Block, nextIndex:Integer, level:Integer):Ret(UGenResult)
			const nNext1Node, nNext2Node = node[nextIndex], node[nextIndex + 1]
			if nNext1Node then
				if nNext2Node then
					assert(nNext1Node.tag ~= "Block" and nNext2Node.tag == "Block", "if statement error")
					return self:rgnWrap(node).IF_TWO(
						self:visit(exprNode),
						self:fnWrap()(self:visit(blockNode)), self:codeNode(blockNode),
						self:fnWrap()(put(nNext1Node, nNext2Node, nextIndex + 2, level + 1))
					)
				else
					assert(nNext1Node.tag == "Block")
					return self:rgnWrap(node).IF_TWO(
						self:visit(exprNode),
						self:fnWrap()(self:visit(blockNode)), self:codeNode(blockNode),
						self:fnWrap()(self:visit(nNext1Node)), self:codeNode(nNext1Node)
					)
				end
			else
				return self:rgnWrap(node).IF_ONE(
					self:visit(exprNode),
					self:fnWrap()(self:visit(blockNode)), self:codeNode(blockNode)
				)
			end
		end
		const nExpr, nBlock = node[1]!, node[2]!
		assert(nExpr.tag ~= "Block" and nBlock.tag == "Block", "if statement error")
		return put(nExpr, nBlock, 3, 1)
	end,
	Fornum=function(self, node)
		const nHasStep = node[5] and true or false
		const nBlockNode = node[5] or node[4]
		assert(nBlockNode.tag == "Block", "4th or 5th node must be block")
		return self:rgnWrap(node).FOR_NUM(
			self:visit(node[2]), self:visit(node[3]), nHasStep and self:visit(node[4]) or "nil",
			self:fnWrap("____fornum")(
				self:visitIdentDef(node[1], "____fornum"),
				self:visit(nBlockNode)
			),
			self:codeNode(nBlockNode)
		)
	end,
	Forin=function(self, node)
		return {
			"local ____n_t_i=", self:stkWrap(node).EXPRLIST_REPACK("false", self:listWrap(self:visit(node[2]))),
			self:rgnWrap(node).FOR_IN(self:fnWrap("____iterTuple")(
				"local ", self:concatList@<Truth>(node[1], function(i, vNode)
					return "____forin"..i
				end, ","),
				"=", self:stkWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), "____iterTuple"),
				self:concatList@<node.Ident_def>(node[1], function(i, vIdent)
					return self:visitIdentDef(vIdent, "____forin"..i)
				end, " "),
				self:visit(node[3])
			), "____n_t_i")
		}
	end,
	Local=function(self, node)
		const nExprList = node[2]
		return {
			line=node.l,
			"local ", self:concatList@<node.Ident_def>(node[1], function(i, vNode)
				return "____lo"..i
			end, ","), "=",
			#node[2] > 0
				and self:stkWrap(node).EXPRLIST_UNPACK(tostring(#node[1]), self:visit(node[2]))
				or self:concatList@<node.Ident_def>(node[1], function(i, vNode)
					-- return self:stkWrap(vNode).NIL_TERM()
					return "nil"
				end, ", "),
			self:concatList@<node.Ident_def>(node[1], function(i, vIdent)
				const nCurExpr = nExprList[i]
				return self:visitIdentDef(vIdent, "____lo"..i, nil, nCurExpr and autoPrimitive(nCurExpr) or nil)
			end, " ")
		}
	end,
	Localrec=function(self, node)
		-- recursive function
		return self:visitIdentDef(node[1], self:visit(node[2]), true)
	end,
	Goto=function(self, node)
		-- print("--goto TODO")
		return {}
	end,
	Continue=function(self, node)
		-- print("--goto TODO")
		return {}
	end,
	Label=function(self, node)
		-- print("--label TODO")
		return {}
	end,
	Return=function(self, node)
		return self:rgnWrap(node).RETURN(
			self:stkWrap(node).EXPRLIST_REPACK(
				"false",
				self:listWrap(self:visit(node[1]))
			)
		)
	end,
	Break=function(self, node)
		return self:rgnWrap(node).BREAK()
	end,
	Call=function(self, node)
		return self:stkAutoUnpack(node,
			self:stkWrap(node).META_CALL(
				self:visit(node[1]),
				self:stkWrap(node).EXPRLIST_REPACK(
					"true",
					self:listWrap(#node[2] > 0 and self:visit(node[2]) or "")
				)
			)
		)
	end,
	Invoke=function(self, node)
		const nHintPolyArgs = node.hintPolyArgs
		return self:stkAutoUnpack(node,
			self:stkWrap(node).META_INVOKE(
				self:visit(node[1]),
				"\""..node[2][1].."\"",
				self:listWrap(nHintPolyArgs and self:fixIHintSpace(nHintPolyArgs) or ""),
				self:stkWrap(node).EXPRLIST_REPACK(
					"false",
					self:listWrap(#node[3] > 0 and self:visit(node[3]) or "")
				)
			)
		)
	end,
	HintSpace=function(self, node)
		if node.kind == "StatHintSpace" then
			-- self:print("local block = function(self) ", node[1], " end block(self)\n")
			return {
				line = node.l,
				" local ____hintStat=function() ",
				self:fixIHintSpace(node),
				" end ____hintStat() "
			}
		else
			error("visit long space or short space in other function")
			return {}
		end
	end,
	Dots=function(self, node)
		return self:stkAutoUnpack(node, "____vDOTS")
	end,
	Nil=function(self, node)
		return self:stkWrap(node).NIL_TERM()
	end,
	True=function(self, node)
		return self:stkWrap(node).LITERAL_TERM("true")
	end,
	False=function(self, node)
		return self:stkWrap(node).LITERAL_TERM("false")
	end,
	Number=function(self, node)
		return self:stkWrap(node).LITERAL_TERM(self:codeNodeValue(node))
	end,
	String=function(self, node)
		return self:stkWrap(node).LITERAL_TERM(self:codeNodeValue(node))
	end,
	Function=function(self, node)
		return self:visitFunc(node)
	end,
	Table=function(self, node)
		local count = 0
		const i2i:Dict(Integer, Integer) = {}
		local tailDots:OrNil(node.UTupleExpr) = nil
		for i, nItem in ipairs(node) do
			if nItem.tag ~= "Pair" then
				count = count + 1
				i2i[i] = count
				const nExprTag = nItem.tag
				if i==#node and (nExprTag == "Dots" or nExprTag == "Invoke" or nExprTag == "Call") then
					tailDots = nItem
				end
			end
		end
		return self:stkWrap(node).TABLE_NEW(
			self:visitLongHint(node.hintLong),
			self:fnRetWrap(self:listWrap(self:concatList@<Union(node.Pair, node.Expr)>(node, function(i, vTableItem)
				if vTableItem.tag ~= "Pair" then
					if i==#node and tailDots then
						return "nil"
					else
						return self:dictWrap({
							node=self:codeNode(vTableItem),
							autoPrimitive=tostring(autoPrimitive(vTableItem)),
							key=self:stkWrap(vTableItem).LITERAL_TERM(tostring(i2i[i])),
							value=self:visit(vTableItem)
						})
					end
				else
					return self:dictWrap({
						node=self:codeNode(vTableItem),
						autoPrimitive=tostring(autoPrimitive(vTableItem[2])),
						key=self:visit(vTableItem[1]),
						value=self:visit(vTableItem[2])
					})
				end
			end, ",")), tostring(count), tailDots and self:visit(tailDots) or "nil")
		)
	end,
	Op=function(self, node)
		const nLogicOpSet:Dict(String, Integer) = {["or"]=1,["not"]=1,["and"]=1}
		const nOper = node[1]
		if nLogicOpSet[nOper] then
			if nOper == "not" then
				return self:rgnWrap(node).LOGIC_NOT(
					self:visit(node[2])
				)
			elseif nOper == "or" then
				return self:rgnWrap(node).LOGIC_OR(
					self:visit(node[2]), self:fnRetWrap(self:visit(node[3]!))
				)
			elseif nOper == "and" then
				return self:rgnWrap(node).LOGIC_AND(
					self:visit(node[2]), self:fnRetWrap(self:visit(node[3]!))
				)
			else
				error("invalid case branch")
			end
		else
			const nRight = node[3]
			if not nRight then
				return self:stkWrap(node).META_UOP(
					"\""..node[1].."\"",
					self:visit(node[2])
				)
			elseif node[1] == "==" then
				return self:stkWrap(node).META_EQ_NE(
					"true",
					self:visit(node[2]),
					self:visit(nRight)
				)
			elseif node[1] == "~=" then
				return self:stkWrap(node).META_EQ_NE(
					"false",
					self:visit(node[2]),
					self:visit(nRight)
				)
			else
				return self:stkWrap(node).META_BOP_SOME(
					"\""..node[1].."\"",
					self:visit(node[2]),
					self:visit(nRight)
				)
			end
		end
	end,
	HintAt=function(self, node)
		const nHintShort = node.hintShort
		return self:stkWrap(node).CAST_HINT(
			{"(", self:visit(node[1]), ")"},
			string.format("%q", nHintShort.castKind),
			self:fixIHintSpace(nHintShort)
		)
	end,
	Paren=function(self, node)
		return self:visit(node[1])
	end,
	Ident=function(self, node)
		assert(node.kind ~= "def")
		const nDefineIdent = node.defineIdent
		if nDefineIdent then
			const symbol = self:codeNode(nDefineIdent)
			local nParent = node.parent!
			while nParent.tag == "Paren" do
				nParent = nParent.parent!
			end
			const nParentTag = nParent.tag
			const nParentParentTag = nParent.parent!.tag
			if nParentTag == "ExprList" then
				const nSymbolGet = self:stkWrap(node).SYMBOL_GET(symbol, "true")

				if nParentParentTag == "Invoke" or nParentParentTag == "Call" then
					-- lazy eval
					return self:fnRetWrap(nSymbolGet)
				else
					return nSymbolGet
				end
			else
				return self:stkWrap(node).SYMBOL_GET(symbol, "false")
			end
		else
			const nIdentENV = node.isGetFrom
			if self._chunk.injectNode and nIdentENV == self._chunk[1] then
				return self:stkWrap(node).INJECT_GET(
					"____injectGetter"
				)
			else
				return self:stkWrap(node).GLOBAL_GET(
					self:codeNode(nIdentENV @> node.Ident_def)
				)
			end
		end
	end,
	Index=function(self, node)
		return self:stkWrap(node).META_GET(
			self:visit(node[1]), self:visit(node[2]),
			tostring(node.notnil or false)
		)
	end,
	ExprList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, expr)
			return self:visit(expr)
		end, ",")
	end,
	ParList=function(self, node)
		error("implement in other way")
		return self:concatList@<Union(node.Ident_def, node.Dots)>(node, function(i, vParNode)
			return vParNode.tag == "Ident" and "____v_"..vParNode[1]..vParNode.index or "____vDOTS"
		end, ",")
	end,
	VarList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, varNode)
			return self:visit(varNode)
		end, ",")
	end,
	IdentList=function(self, node)
		return self:concatList@<node.IAstNode>(node, function(i, identNode)
			return self:visit(identNode)
		end, ",")
	end,
}

const HintGener = {}
HintGener.__index = HintGener

function.pass HintGener:visit(vNode:node.IAstNode):Ret(UGenResult)
	const nUnionNode = vNode
	const nFunc = TagToVisiting[nUnionNode.tag]
	if nFunc then
		return nFunc(self, nUnionNode)
	else
		return ""
	end
end

function HintGener:fixIHintSpace(vHintSpace:node.IHintSpace):Ret(GenResult)
	const nResult:GenResult = {}
	for k,v in ipairs(vHintSpace.evalScriptList) do
		if v.tag == "HintScript" then
			local nLast:OrNil(GenResult) = nil
			for s in string.gmatch(v[1], "[^\n]*") do
				nLast = {
					line = true,
					" ", s, " "
				}
				nResult[#nResult + 1] = nLast
			end
			if nLast then
				nLast.line = nil
			end
		else
			nResult[#nResult + 1] = self:stkWrap(v).EVAL(self:visit(v[1]))
			nResult[#nResult + 1] = {
				line=v.endLine, " "
			}
		end
	end
	return nResult
end

function HintGener:codeNodeValue(vNode:Union(node.String, node.Number)):Ret(String)
	return "____nodes["..vNode.index.."][1]"
end

function HintGener:codeNode(vNode:node.IAstNode):Ret(String)
	return "____nodes["..vNode.index.."]"
end

function HintGener:visitIdentDef(vIdentNode:node.Ident_def, vValue:UGenResult, vIsParamOrRec:OrNil(True), vAutoPrimitive:OrNil(True)):Ret(UGenResult)
	const nHintShort = vIdentNode.hintShort
	return {
		line=vIdentNode.l,
		" ", self:stkWrap(vIdentNode).SYMBOL_NEW(
			string.format("%q", vIdentNode.symbolKind), tostring(vIdentNode.symbolModify or false),
			vValue, vIsParamOrRec and "nil" or (nHintShort and self:fixIHintSpace(nHintShort) or "nil"),
			tostring(vAutoPrimitive)
		)
	}
end

function HintGener:fnWrap(...:String):Ret(Fn():Dots(UGenResult):Ret(GenResult))
	const nArgsString = table.concat({...}, ",")
	return function(...)
		const nList:GenResult = {...}
		const nResult:GenResult = { " function(", nArgsString, ") " }
		for i=1, #nList do
			nResult[#nResult+1] = nList[i]
			nResult[#nResult+1] = " "
		end
		nResult[#nResult+1] = " end "
		return nResult
	end
end

function HintGener:fnRetWrap(...:UGenResult):Ret(GenResult)
	const nList:GenResult = {...}
	const nResult:GenResult = { " function() return " }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = " end "
	return nResult
end

function HintGener:dictWrap(vDict:Dict(String, UGenResult)):Ret(GenResult)
	const nList:GenResult = {}
	nList[#nList + 1] = "{"
	for k,v in pairs(vDict) do
		nList[#nList + 1] = k
		nList[#nList + 1] = "="
		nList[#nList + 1] = v
		nList[#nList + 1] = ","
	end
	nList[#nList + 1] = "}"
	return nList
end

function HintGener:listWrap(...:UGenResult):Ret(GenResult)
	const nList:GenResult = {...}
	const nResult:GenResult = { "{" }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = "}"
	return nResult
end

(@do
	let.StkNameEnum = Union(
		"AUTO", -- just a flag

		"CHUNK_TYPE",
		"FUNC_NEW",
		"TABLE_NEW",
		"NIL_TERM",
		"LITERAL_TERM",
		"HINT_TERM",

		"EXPRLIST_UNPACK",
		"EXPRLIST_REPACK",

		"META_EQ_NE",
		"META_UOP",
		"META_BOP_SOME",

		"META_CALL",
		"META_INVOKE",
		"META_GET",
		"META_SET",

		"SYMBOL_NEW",
		"SYMBOL_GET",
		"SYMBOL_SET",

		"GLOBAL_SET",
		"GLOBAL_GET",
		"INJECT_GET",

		"CAST_HINT",
		"EVAL"
	)
end)
function.pass HintGener:stkWrap(vNode:node.IAstNode):Ret(Dict(StkNameEnum, Fn():Dots(UGenResult):Ret(GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____stk", vName, vNode, ...)
			end
		end,
	})
end

(@do
	let.RgnNameEnum = Union(
		"PARAM_UNPACK",
		"PARAM_DOTS_UNPACK",
		"PARAM_NODOTS_UNPACK",
		"PARAM_PACKOUT",
		"BEGIN",
		"RETURN",
		"END",
		"WHILE",
		"REPEAT",
		"DO",
		"FOR_IN",
		"FOR_NUM",
		"IF_ONE",
		"IF_TWO",
		"BREAK",
		"LOGIC_NOT",
		"LOGIC_OR",
		"LOGIC_AND"
	)
end)
function.pass HintGener:rgnWrap(vNode:node.IAstNode):Ret(Dict(RgnNameEnum, Fn():Dots(UGenResult):Ret(GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____stk", vName, vNode, ...)
			end
		end,
	})
end

function HintGener:prefixInvoke(vPrefix:String, vName:String, vNode:node.IAstNode, ...:UGenResult):Ret(GenResult)
	const nList:GenResult = {...}
	const nResult:GenResult = {
		line=vNode.l,
		vPrefix, ":", vName, "(", self:codeNode(vNode),
	}
	for i=1, #nList do
		nResult[#nResult+1] = ","
		nResult[#nResult+1] = nList[i]
	end
	nResult[#nResult+1] = ")"
	return nResult
end

function HintGener:stkAutoUnpack(vNode:node.UTupleExpr, vInner:UGenResult):Ret(UGenResult)
	const nParent = vNode.parent!
	local nAutoUnpack = true
	if nParent.tag == "ExprList" or nParent.tag == "ParList" or nParent.tag == "Block" then
		nAutoUnpack = false
	elseif nParent.tag == "Table" then
		const nTableNode = nParent @> node.Table
		if nTableNode[#nTableNode] == vNode then
			-- table tail not autoUnpack
			nAutoUnpack = false
		end
	end
	if nAutoUnpack then
		return self:stkWrap(vNode).EXPRLIST_UNPACK("1", vInner)
	else
		return vInner
	end
end

function HintGener:chunkLongHint():Ret(GenResult)
	return self:dictWrap({
		attrSet="{open=1}",
		caller="function(____longHint) return ____longHint end"
	})
end

function HintGener:visitLongHint(vHintSpace:OrNil(node.LongHintSpace)):Ret(GenResult)
	const nCallGen:UGenResult = (vHintSpace and #vHintSpace.evalScriptList > 0) and {
		":", self:fixIHintSpace(vHintSpace)
	} or ""
	const nAttrList = vHintSpace and vHintSpace.attrList or ({} @ List(String))
	const l:List(String) = {}
	for i=1, #nAttrList do
		l[#l + 1] = nAttrList[i]! .. "=1"
	end
	return self:dictWrap({
		attrSet=self:listWrap(table.unpack(l)),
		caller=self:fnWrap("____longHint")("return ____longHint", nCallGen)
	})
end

function HintGener:visitFunc(vNode:Union(node.Function, node.Chunk)):Ret(UGenResult)
	const nIsChunk = vNode.tag == "Chunk"
	const nHintPrefix = nIsChunk and self:chunkLongHint() or self:visitLongHint(vNode.hintPrefix)
	const nHintSuffix = nIsChunk and self:chunkLongHint() or self:visitLongHint(vNode.hintSuffix)
	const nParList = nIsChunk and vNode[2] or vNode[1]
	const nBlockNode = nIsChunk and vNode[3] or vNode[2]
	const nLastNode = nParList[#nParList]
	const nLastDots = (nLastNode and nLastNode.tag == "Dots") and nLastNode
	const nParamNum = nLastDots and #nParList-1 or #nParList
	const nFirstPar = nParList[1]
	const nIsMember = nFirstPar and nFirstPar.tag == "Ident" and nFirstPar.isSelf or false
	const nPolyParList = vNode.hintPolyParList
	local nPolyUnpack:GenResult = {}
	const nPolyParNum = nPolyParList and #nPolyParList or 0
	if nPolyParList and nPolyParNum > 0 then
		nPolyUnpack = {
			" local ", self:concatList@<String>(nPolyParList, function(_, vPolyPar)
				return vPolyPar
			end, ","), "=", self:concatList@<String>(nPolyParList, function(i, vPolyPar)
				return "____polyArgs["..tostring(i).."]"
			end, ",")
		}
	end
	return self:stkWrap(vNode).FUNC_NEW(self:dictWrap({
		_hasRetSome=tostring(vNode.retFlag or false),
		_hasSuffixHint=tostring((not nIsChunk and vNode.hintSuffix) and true or false),
		_polyParNum=tostring(nPolyParNum),
		_parNum=tostring(nParamNum),
		_member=tostring(nIsMember),
	}), nHintPrefix,
	-- par ret maker
		self:fnWrap("____newStk","____polyArgs", "____self")(
			"local ____stk,let,_ENV,_G=____newStk,____newStk:BEGIN(____stk,", self:codeNode(nBlockNode), ") ",
			nPolyUnpack,
			-- pre declare param
			" local ____vDOTS=false ",
			-- check param when function building
			" return ", self:fnWrap("____termArgs")(
				self:concatList@<Union(node.Ident_def, node.Dots)>(nParList, function(i, vParNode)
					const nHintShort = vParNode.hintShort
					local nHintType = nHintShort and self:fixIHintSpace(nHintShort) or self:stkWrap(vParNode).AUTO()
					if vParNode.tag ~= "Dots" then
						if i == 1 then
							-- if i == 1 then use ____self as first type if setted
							nHintType = {
								"(____self or ", nHintType, ")"
							}
						end
						return {
							"local ____tempv"..i.."=",
							self:rgnWrap(vParNode).PARAM_UNPACK("____termArgs", tostring(i), nHintType),
							self:visitIdentDef(vParNode, "____tempv"..i, true)
						}
					else
						return {
							"____vDOTS=",
							self:rgnWrap(vParNode).PARAM_DOTS_UNPACK("____termArgs", tostring(nParamNum), nHintType)
						}
					end
				end, " "),
				nLastDots and "" or self:rgnWrap(nParList).PARAM_NODOTS_UNPACK("____termArgs", tostring(nParamNum)),
				" return ", self:rgnWrap(nParList).PARAM_PACKOUT(
					self:listWrap(self:concatList@<Union(node.Ident_def, node.Dots)>(nParList, function(i, vParNode)
						if vParNode.tag ~= "Dots" then
							return "____tempv"..i
						end
					end, ",")),
					(nLastDots) and "____vDOTS" or tostring(false)
				)
			), ",", nHintSuffix, ",",
			self:fnWrap()(
				self:visit(nBlockNode),
				" return ",
				self:rgnWrap(vNode).END()
			)
		)
	-- gen function
	)
end

function HintGener:concatList@<T>(
	vList:IList(T),
	vFunc:Fn(Integer, T):Ret(UGenResult),
	vSep:String
):Ret(GenResult)
	const nResult:GenResult = {}
	const nLen = #vList
	for i=1,nLen do
		nResult[#nResult + 1] = vFunc(i, vList[i]!)
		nResult[#nResult + 1] = i~=nLen and vSep or nil
	end
	return nResult
end

function:class(let.HintGener) HintGener.new(vChunk:node.Chunk)
	const self = setmetatable({.class
		_chunk=vChunk,
	}, HintGener)
	return self
end

function HintGener:genCode():Ret(String)
	const nBufferList:List(String) = {}
	local nLineCount = 1
	const function recurAppend(vResult:UGenResult, vDepth:Integer):Ret()
		if type(vResult) == "table" then
			const nLine = vResult.line
			if type(nLine) == "number" then
				while nLineCount < nLine do
					nBufferList[#nBufferList+1] = "\n"
					nLineCount = nLineCount + 1
				end
			end
			for _, v in ipairs(vResult) do
				recurAppend(v, vDepth+1)
			end
			if nLine == true then
				nBufferList[#nBufferList+1] = "\n"
				nLineCount = nLineCount + 1
			end
		else
			nBufferList[#nBufferList+1] = tostring(vResult)
		end
	end
	recurAppend(self:visit(self._chunk), 0)
	const re = table.concat(nBufferList)
	return re
end

return HintGener
