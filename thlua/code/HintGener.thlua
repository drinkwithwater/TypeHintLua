
(@do

let.node = import("thlua.code.Node").node
let.class = import("thlua.type.TypeClass").class

let.GenResult = Struct {
	node = OrNil(node.IAstNode),
	[Integer] = let.UGenResult,
}

let.UGenResult = Union(String, let.GenResult)

let.RealTraverser = Struct((function()
	local t = {}
	foreachPair(node.TagToNodeType, function(vTag, vNodeType)
		t[vTag] = OrNil(Fn(let.HintGener, vNodeType):Ret(let.UGenResult))
	end)
	return t
end)())

end)

local TagToVisiting:RealTraverser = {
	Chunk=function(self, node)
		-- region begin
		-- chunk vDots
		const nLongHintPrint = " function(____longHint) return ____longHint:open() end"
		const nParPrint = self:formatParListInFuncHead(node[2])
		return {
			"local ____ctx, ____nodes=... ",
			"local ____s__ENV"..node[1].index, "=____ctx:makeSymbol_ENV(", self:codeNode(node[1]),") ",
			"local ____fn,____uv ____fn,____uv=____ctx:FUNC_NEW(", self:codeNode(node), ",", nLongHintPrint, ",", nParPrint, ",", tostring(node.retFlag), ", function(____newCtx, vArgTuple) ",
			"local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", self:codeNode(node), ", ____fn,____uv) ",
			"local vDOTS=____ctx:TUPLE_UNPACK(", self:codeNode(node),",vArgTuple,0,true)",
			--self:visit(node[3]),
			"end) return ____fn",
		}
	end,
	Block=function(self, node)
		const nParentTag = node.parent!.tag
		const nAppendReturn = nParentTag == "Function" or nParentTag == "Chunk"
		return {
			self:forList(node, function(i, vStatNode)
				return self:visit(vStatNode)
			end, " "),
			nAppendReturn and "return "..self:codeRgn(node, "END")..") " or nil,
		}
	end,
	Do=function(self, node)
		return {
			node=node,
			" do ", self:visit(node[1]), " end "
		}
	end,
	Set=function(self, node)
		return {
			node=node,
			" local ", self:forList(node[1], function(i,v)
				return "set_a"..i
			end),
		}
	end,
	While=function(self, node)
		return {
			"local while_a=", self:visit(node[1]), " ",
			self:codeRgn(node, "WHILE"), ",while_a, function() ",
			self:visit(node[2]),
			"end) "
		}
	end,
	Repeat=function(self, node)
		print("RepeatStat TODO")
		return {}
	end,
	If=function(self, node)
		self:fixLinePrint(node)
		self:print("--[[ if begin ]]")
		const function put(exprNode:node.Expr, blockNode:node.Block, nextIndex:Integer, level:Integer)
			self:indent()
			self:print("local if_a"..level.."=")
			self:print(exprNode)
			self:print(" ")
			self:indent()
			self:print(self:codeRgn(node, "IF"), ",if_a"..level..", function() ")
			self:print(blockNode)
			const nNext1Node, nNext2Node = node[nextIndex], node[nextIndex + 1]
			if nNext1Node then
				self:indent()
				self:print("end,function() ")
				if nNext2Node then
					assert(nNext1Node.tag ~= "Block" and nNext2Node.tag == "Block", "if statement error")
					self.indent_count = self.indent_count + 1
					put(nNext1Node, nNext2Node, nextIndex + 2, level + 1)
					self.indent_count = self.indent_count - 1
				else
					assert(nNext1Node.tag == "Block")
					self:print(nNext1Node)
				end
				self:indent()
				self:print("end) ")
			else
				self:indent()
				self:print("end) ")
			end
		end
		const nExpr, nBlock = node[1]!, node[2]!
		assert(nExpr.tag ~= "Block" and nBlock.tag == "Block", "if statement error")
		put(nExpr, nBlock, 3, 1)
		self:indent()
		self:print("--[[ if end ]]")
	end,
	Fornum=function(self, node)
		self:fixLinePrint(node)
		local nBlockNode = node[5]
		self:print("local fornum_r1, fornum_r2, fornum_r3 = ")
		if nBlockNode then
			self:print(node[2], ", ", node[3], ", ", node[4], " ")
		else
			self:print(node[2], ", ", node[3], " ")
			const nSubNode = node[4]
			assert(nSubNode.tag == "Block", "node must be block here")
			nBlockNode = nSubNode
		end
		self:print(self:codeRgn(node, "FOR_NUM"), ",function(fornum_i) ")
		self:printSymbolNew(node[1], "fornum_i")
		self:print(nBlockNode)
		self:indent()
		self:print("end, fornum_r1, fornum_r2, fornum_r3) ")
	end,
	Forin=function(self, node)
		self:fixLinePrint(node)
		self:indent()
		self:print("local forin_next, forin_self, forin_init = ", self:codeCtx(node, "EXPLIST_UNPACK"), ",3,", node[2], ") ")
		self:print(self:codeRgn(node, "FOR_IN"), ",function(vIterTuple) ")
		self:indent()
		self:print("\tlocal ")
		self:printn("forin_gen", #node[1])
		self:print("=", self:codeCtx(node, "TUPLE_UNPACK"), ",vIterTuple,", #node[1], ",false) ")
		self:indent()
		const nIdentList = node[1]
		for i=1, #nIdentList do
			self:printSymbolNew(nIdentList[i]!, "forin_gen"..i)
		end
		self:print(node[3])
		self:indent()
		self:print("end, forin_next, forin_self, forin_init) ")
	end,
	Local=function(self, node)
		return {
			"local ", self:forList(node[1], function(i, vNode)
				return "local_a"..i
			end),
			"=", self:codeCtx(node, "EXPLIST_UNPACK"), ","..#node[1]..",",
			#node[2] > 0 and self:visit(node[2]) or "nil",
			") ",
			self:forList(node[1], function(i, vNode)
				const nIdent = vNode @ node.Ident_def
				return self:visitSymbolNew(nIdent, "local_a"..i)
			end)
		}
	end,
	Localrec=function(self, node)
		self:fixLinePrint(node)
		return self:visitSymbolNew(node[1], node[2])
	end,
	Goto=function()
		print("--goto TODO")
		return {}
	end,
	Label=function()
		print("--label TODO")
		return {}
	end,
	Return=function(self, node)
		return {
			self:codeRgn(node, "RETURN"), ",", self:codeCtx(node, "EXPLIST_PACK"), ",false, {",
				self:visit(node[1]),
			"}))"
		}
	end,
	Break=function(self, node)
		return {
			" ", self:codeRgn(node, "BREAK"), ") "
		}
	end,
	Call=function(self, node)
		self:fixLinePrint(node)
		const nAutoUnpack = self:autoUnpack(node)
		return {
			nAutoUnpack and self:codeCtx(node, "EXPLIST_UNPACK")..",1," or "",
			self:codeCtx(node, "META_CALL"), ",",
			self:visit(node[1]), ",",
			self:codeCtx(node, "EXPLIST_PACK"), ",true, {",
				#node[2] > 0 and self:visit(node[2]) or "",
			"}))",
			nAutoUnpack and ")" or "",
		}
	end,
	Invoke=function(self, node)
		if self:autoUnpack(node) then
			self:print(self:codeCtx(node, "EXPLIST_UNPACK"), ",1,")
		end
		self:print(self:codeCtx(node, "META_INVOKE"), ",")
		self:print(node[1])
		self:print(",\"")
		self:print(node[2][1])
		self:print("\"")
		if #node[3] > 0 then
			self:print(",")
			self:print(self:codeCtx(node, "EXPLIST_PACK"), ",false, {")
			self:print(node[3])
			self:print("})")
		else
			self:print(",", self:codeCtx(node, "EXPLIST_PACK"), ",false, {})")
		end
		self:print(")")
		if self:autoUnpack(node) then
			self:print(")")
		end
	end,
	HintStat=function(self, node)
		-- self:print("local block = function(self) ", node[1], " end block(self)\n")
		return {
			" ", node[1].script, " "
		}
	end,
	Nil=function(self, node)
		return "____ctx:NilTerm()"
	end,
	Dots=function(self, node)
		const nAutoUnpack = self:autoUnpack(node)
		return nAutoUnpack and self:codeCtx(node, "EXPLIST_UNPACK")..",1, vDOTS)" or "vDOTS"
	end,
	True=function(self, node)
		return "____ctx:BooleanTerm(true)"
	end,
	False=function(self, node)
		return "____ctx:BooleanTerm(false)"
	end,
	Number=function(self, node)
		return {
			"____ctx:LiteralTerm(", tostring(node[1]), ")"
		}
	end,
	String=function(self, node)
		const s = node[1]
		return {
			"____ctx:LiteralTerm",
			node.isLong and '([[' .. s .. ']])' or '(' .. string.format("%q", s),
			')'
		}
	end,
	Function=function(self, node)
		self:fixLinePrint(node)
		const nParList = node[1]
		const nParInHead = self:formatParListInFuncHead(nParList)
		local nLongHintPrint = " function(____longHint) return ____longHint" .. (node.hintLong or "") .. " end "
		self:fixLong(node.hintLong or "")
		self:print(" ____ctx:RefineTerm((function() local ____fn,____uv ____fn,____uv=____ctx:FUNC_NEW(", self:codeNode(node), ",", nLongHintPrint, ",", nParInHead, ",", tostring(node.retFlag), ", function(____newCtx, vArgTuple) ")
		self:print(" local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", self:codeNode(node), ",____fn,____uv) ")
		if #nParList > 0 then
			self:print(" local ", node[1], "=", self:codeCtx(node, "TUPLE_UNPACK"))
			if nParList[#nParList]!.tag == "Dots" then
				self:print(", vArgTuple, ",tostring(#nParList-1),", true) ")
			else
				self:print(", vArgTuple, ",tostring(#nParList),", false) ")
			end
			for i=1, #nParList do
				local par = nParList[i]!
				if par.tag ~= "Dots" then
					self:printSymbolNew(par, "v_"..par[1]..par.index, true)
				end
			end
		end
		self:print(node[2])
		self:indent()
		self:print("end) return ____fn end)())")
	end,
	Table=function(self, node)
		self:fixLinePrint(node)
		local nLongHintPrint = " function(____longHint) return ____longHint" .. (node.hintLong or "") .. " end "
		self:print("____ctx:RefineTerm(____ctx:TABLE_NEW(", self:codeNode(node), ",", nLongHintPrint, ", function() return {")
		self:fixLong(node.hintLong or "")
		local count = 0
		local tailDots:OrNil(node.UTupleExpr) = nil
		for i=1, #node do
			const nTableItem = node[i]!
			if nTableItem.tag == "Pair" then
				self:print("{", nTableItem[1], ",", nTableItem[2], "}")
			else
				count = count + 1
				const nExprTag = nTableItem.tag
				if i==#node and (nExprTag == "Dots" or nExprTag == "Invoke" or nExprTag == "Call") then
					tailDots = nTableItem
				else
					local key = "____ctx:LiteralTerm("..count..")"
					self:print("{", key, ",", nTableItem, "}")
				end
			end
			self:print(i < #node and "," or "")
		end
		if not tailDots then
			self:print("}, 0, nil end)) ")
		else
			self:print("}, ", count, ", ")
			tailDots.table_tail = true
			self:print(tailDots, " end)) ")
		end
	end,
	Op=function(self, node)
		self:fixLinePrint(node)
		const nLogicOpSet:Dict(String, Integer) = {["or"]=1,["not"]=1,["and"]=1}
		const nOper = node[1]
		if nLogicOpSet[nOper] then
			if nOper == "not" then
				return {
					self:codeRgn(node, "LOGIC_NOT"), ",",
					self:visit(node[2]), ")"
				}
			else
				return {
					self:codeRgn(node, "LOGIC_"..node[1]:upper()), ",",
					self:visit(node[2]), ",",
					"function() return ", self:visit(node[3]!), " end)"
				}
			end
		else
			const nRight = node[3]
			if not nRight then
				return {
					self:codeCtx(node, "META_UOP"), ",\"", node[1], "\",",
					self:visit(node[2]), ")"
				}
			elseif node[1] == "==" then
				return {
					self:codeCtx(node, "META_EQ_NE"), ",true,",
					self:visit(node[2]), ",",
					self:visit(nRight), ")"
				}
			elseif node[1] == "~=" then
				return {
					self:codeCtx(node, "META_EQ_NE"), ",false,",
					self:visit(node[2]), ",",
					self:visit(nRight), ")"
				}
			else
				return {
					self:codeCtx(node, "META_BOP_SOME"), ",\"", node[1], "\",",
					self:visit(node[2]), ",",
					self:visit(nRight), ")"
				}
			end
		end
	end,
	Paren=function(self, node)
		self:fixLinePrint(node)
		local nHintShort = node.hintShort
		if nHintShort then
			self:print("____ctx:HINT(", self:codeNode(node), ",")
		end
		self:print("(")
		self:visit(node[1])
		self:print(")")
		if nHintShort then
			self:print(",", self:fixShort(nHintShort), ")")
		end
	end,
	Ident=function(self, node)
		assert(node.kind ~= "def")
		const nDefineId = node.defineIdent
		const symbol = "____s_"..nDefineId[1]..nDefineId.index
		if node.isSet then
			return symbol
		else
			const nParent = node.parent!
			const nParentTag = nParent.tag
			const nParentParentTag = nParent.parent!.tag
			const nLazyEval = nParentTag == "ExprList" and (nParentParentTag == "Invoke" or nParentParentTag == "Call")
			return {
				nLazyEval and " function() return " or "",
				self:codeRgn(node, "SYMBOL_GET"), ",", symbol, ")",
				nLazyEval and " end " or "",
			}
		end
	end,
	Index=function(self, node)
		self:fixLinePrint(node)
		return {
			self:codeCtx(node, "META_GET"), ",",
			self:visit(node[1]), ",",
			self:visit(node[2]), ",",
			tostring(node.notnil or false),
			")"
		}
	end,
	ExprList=function(self, node)
		return self:forList(node, function(i, expr)
			return self:visit(expr)
		end, ",")
	end,
	ParList=function(self, node)
		return self:forList(node, function(i, vNode)
			const nParNode = vNode @ Union(node.Ident_use, node.Dots)
			return nParNode.tag == "Ident" and "v_"..nParNode[1]..nParNode.index or "vDOTS"
		end, ",")
	end,
	VarList=function(self, node)
		return self:forList(node, function(i, varNode)
			return self:visit(varNode)
		end, ",")
	end,
	IdentList=function(self, node)
		return self:forList(node, function(i, identNode)
			return self:visit(identNode)
		end, ",")
	end,
}

const HintGener = {}
HintGener.__index = HintGener

function HintGener:visit(vNode:node.IAstNode)::Ret(let.UGenResult)
	const nUnionNode = vNode @ node.UNodeType
	const fn = TagToVisiting[nUnionNode.tag]
	if fn then
		return fn(self, nUnionNode)
	else
		return ""
	end
end

function HintGener:indent()
	-- indent logic TODO
	table.insert(self.buffer_list, string.rep("\t", self.indent_count - 1))
end

function HintGener:autoUnpack(vNode:node.UTupleExpr)::Ret(Boolean)
	local nParent = vNode.parent!
	if nParent.tag == "ExprList" or nParent.tag == "ParList" or nParent.tag == "Block" then
		-- block is for function-Call-statement
		return false
	elseif vNode.table_tail then
		return false
	else
		return true
	end
end

function HintGener:fixShort(vShortHint:String)::Ret(String)
	return (vShortHint:gsub("\n", " "))
end

function HintGener:fixLong(vLongHint:String)
	const _, count = vLongHint:gsub("\n", "\n")
	self.line = self.line + count
end

function HintGener:fixLinePrint(vNode:node.IAstNode)
	while self.line < vNode.l do
		self:print("\n")
		self.line = self.line + 1
	end
end

(@do
	let.UFormatList = List(Union(Integer, String, node.IAstNode, Fn():Ret(let.UFormatList)))
end)

function HintGener:print(...:Union(Integer, String, node.IAstNode))
	for i=1, select("#", ...) do
		local obj = select(i, ...)
		if type(obj) == "table" then
			self:visit(obj)
		else
			table.insert(self.buffer_list, obj)
		end
	end
end

function HintGener:codeNode(vNode:node.IAstNode)::Ret(String)
	return "____nodes["..vNode.index.."]"
end

function HintGener:codeRgn(vNode:node.IAstNode, vName:String)::Ret(String)
	return "____rgn:"..vName.."("..self:codeNode(vNode)
end

function HintGener:formatIdentDef(vIdentNode:node.Ident_def)::Ret(String)
	return "____s_"..vIdentNode[1]..vIdentNode.index
end

function HintGener:visitSymbolNew(vIdentNode:node.Ident_def, vValue:Union(String, node.Function), vNoHint:OrNil(True))::Ret(let.UGenResult)
	if type(vValue) == "string" then
		const nHintShort = vIdentNode.hintShort
		return {
			" local ", self:formatIdentDef(vIdentNode), "=____rgn:SYMBOL_NEW(",
				self:codeNode(vIdentNode), ",",
				string.format("%q", vIdentNode.symbolKind), ",",
				vValue, ",",
				vNoHint and "nil" or (nHintShort and nHintShort.script or "nil"),
			")"
		}
	else
		const nIdentFormat = self:formatIdentDef(vIdentNode)
		return {
			" local ", nIdentFormat, " ", nIdentFormat, "=____rgn:SYMBOL_NEW(",
				self:codeNode(vIdentNode), ",",
				string.format("%q", vIdentNode.symbolKind), ",",
				self:visit(vValue),
			")"
		}
	end
end

function HintGener:printSymbolNew(vIdentNode:node.Ident_def, vValue:Union(String, node.Function), vNoHint:OrNil(True))
	if type(vValue) == "string" then
		self:print(
		" local ", self:formatIdentDef(vIdentNode), "=____rgn:SYMBOL_NEW(",
			self:codeNode(vIdentNode), ",",
			string.format("%q", vIdentNode.symbolKind), ",",
			vValue, ",",
			vNoHint and "nil" or (vIdentNode.hintShort or "nil"),
		")")
	else
		const nIdentFormat = self:formatIdentDef(vIdentNode)
		self:print(
		" local ", nIdentFormat, " ", nIdentFormat, "=____rgn:SYMBOL_NEW(",
			self:codeNode(vIdentNode), ",",
			string.format("%q", vIdentNode.symbolKind), ","
		)
		self:visit(vValue)
		self:print(")")
	end
end

function HintGener:codeCtx(vNode:node.IAstNode, vName:String)::Ret(String)
	return "____ctx:"..vName.."("..self:codeNode(vNode)
end

function HintGener:formatParListInFuncHead(vParList:node.ParList)::Ret(String)
	const nParHintList:List(String) = {}
	local nDotsHintScript:OrFalse(String) = false
	for i=1, #vParList do
		local nParNode = vParList[i]!
		const nHintShort = nParNode.hintShort
		if nParNode.tag == "Dots" then
			if nHintShort then
				nDotsHintScript = self:fixShort(nHintShort)
			else
				nDotsHintScript = "____ctx:Variable(false)"
			end
		else
			if nHintShort then
				nParHintList[#nParHintList + 1] = self:fixShort(nHintShort)
			elseif nParNode.isSelf then
				nParHintList[#nParHintList + 1] = "____ctx:Variable(true)"
			else
				nParHintList[#nParHintList + 1] = "____ctx:Variable(false)"
			end
		end
	end
	local nParPrint = "____ctx:AutoArguments("..self:codeNode(vParList)..",{" .. table.concat(nParHintList, ",")
	if not nDotsHintScript then
		nParPrint = nParPrint .. "})"
	else
		nParPrint = nParPrint .. "},"..nDotsHintScript..") "
	end
	--[[if #vParList > 0 then
		const l:List(String) = {}
		for i=1, #vParList do
			const nParNode = vParList[i]!
			if nParNode.tag == "Ident" then
				l[#l+1] = "v_"..nParNode[1]..nParNode.index
			else
				l[#l+1] = "vDOTS"
			end
		end
		const nHasDots = vParList[#vParList]!.tag == "Dots"
		const l = {
			" local ", table.concat(l), "=", self:codeCtx(vParList, "TUPLE_UNPACK"), ", vArgTuple, ",
			nHasDots and tostring(#vParList-1) or tostring(#vParList),
			nHasDots and ", true)" or ", false)",
		}
	end]]
	return nParPrint
end

function HintGener:formatParListInFuncBody(vParList:node.ParList)
end

function HintGener:printFunc(vFunc:node.URegionNode, vParList:node.ParList,
	vLongHint:String, vRetFlag:Boolean, vBlockNode:node.Block)
	const nParPrint = ""
	const nParPrint = "____ctx:AutoArguments("..self:codeNode(vParList)..",{}, ____ctx:Variable(false))"
	const nLongHintPrint = " function(____longHint) return ____longHint:open() end"
	self:print(
	" local ____fn,____uv ",
	" ____fn,____uv=____ctx:FUNC_NEW(", self:codeNode(vFunc), ",", nLongHintPrint, ",", nParPrint, ",", tostring(vRetFlag), ", function(____newCtx, vArgTuple) ",
	"local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", self:codeNode(vBlockNode), ", ____fn,____uv) ", vBlockNode,
	"end) return ____fn"
	)
end

function HintGener:forList(
	vList:IList(node.IAstNode),
	vFunc:Fn(Integer, node.IAstNode):Ret(let.UGenResult),
	vSep:OrNil(String)
	)::Ret(let.GenResult)
	const nResult:let.GenResult = {}
	const nLen = #vList
	for i=1,nLen do
		nResult[#nResult + 1] = vFunc(i, vList[i]!)
		nResult[#nResult + 1] = i~=nLen and vSep or nil
	end
	return nResult
end

function HintGener:printn(c:String, n:Integer)
	for i=1, n do
		self:print(c..i)
		if i < n then
			self:print(",")
		end
	end
end

function HintGener.new()::RetClass(let.HintGener)
	const self = setmetatable({::Self()
		buffer_list = {} @List(String),
		indent_count = 0 @Integer,
		line = 1 @ Integer,
	}, HintGener)
	return self
end

function HintGener:genCode(vNode:node.IAstNode)::Ret(String)
	const l:List(String) = {}
	const function recurAppend(vResult:let.UGenResult)
		if type(vResult) == "table" then
			for _, v in ipairs(vResult) do
				recurAppend(v)
			end
		else
			l[#l+1] = vResult
		end
	end
	recurAppend(self:visit(vNode))
	return table.concat(l)
end

return HintGener
