
(@do

let.node = import("thlua.code.Node").node
let.class = import("thlua.type.TypeClass").class

let.GenResult = Struct ({
	line = OrNil(True, Integer),
	[Integer] = let.UGenResult,
}, {
	__len=Integer
})

let.UGenResult = Union(String, let.GenResult)

let.RealTraverser = Struct((function()
	local t = {}
	foreachPair(node.TagToNodeType, function(vTag, vNodeType)
		t[vTag] = OrNil(Fn(let.HintGener, vNodeType):Ret(let.UGenResult))
	end)
	return t
end)())

end)

local TagToVisiting:RealTraverser = {
	Chunk=function(self, node)
		const nOpenHint = {script=":open()"} @ node.IHintInfo
		return {
			'local ____rt, ____ctx, ____nodes=... ',
			"local ____s__ENV"..node[1].index.."=____rt:makeSymbol_ENV(",self:codeNode(node[1]),") ",
			self:visitFunc(node)
		}
	end,
	Block=function(self, node)
		return self:forList(node, function(i, vStatNode)
			return self:visit(vStatNode)
		end, " ")
	end,
	Do=function(self, node)
		return self:rgnWrap(node).DO(
			self:visitLongHint(node.hintLong),
			self:visit(node[1])
		)
	end,
	Set=function(self, node)
		return {
			" local ", self:forList(node[1], function(i,v)
				return "set_a"..i
			end, ","),
			"=", self:ctxWrap(node).EXPLIST_UNPACK(tostring(#node[1]), self:visit(node[2])),
			self:forList(node[1], function(i, vNode)
				const nVarNode = vNode @ node.Lhs
				if nVarNode.tag == "Ident" then
					return self:rgnWrap(nVarNode).SYMBOL_SET(
						self:formatIdent(nVarNode),
						"set_a"..i,
						tostring(node.override or false)
					)
				else
					return self:ctxWrap(node).META_SET(
						self:visit(nVarNode[1]),
						self:visit(nVarNode[2]),
						"set_a"..i,
						tostring(node.override or false)
					)
				end
			end, " ")
		}
	end,
	While=function(self, node)
		return self:rgnWrap(node).WHILE(
			self:visit(node[1]),
			self:Fn()(self:visit(node[2]))
		)
	end,
	Repeat=function(self, node)
		print("RepeatStat TODO")
		return {}
	end,
	If=function(self, node)
		const function put(exprNode:node.Expr, blockNode:node.Block, nextIndex:Integer, level:Integer)::Ret(let.UGenResult)
			const nNext1Node, nNext2Node = node[nextIndex], node[nextIndex + 1]
			if nNext1Node then
				if nNext2Node then
					assert(nNext1Node.tag ~= "Block" and nNext2Node.tag == "Block", "if statement error")
					return self:rgnWrap(node).IF(
						self:visit(exprNode),
						self:Fn()(self:visit(blockNode)),
						self:Fn()(put(nNext1Node, nNext2Node, nextIndex + 2, level + 1))
					)
				else
					assert(nNext1Node.tag == "Block")
					return self:rgnWrap(node).IF(
						self:visit(exprNode),
						self:Fn()(self:visit(blockNode)),
						self:Fn()(self:visit(nNext1Node))
					)
				end
			else
				return self:rgnWrap(node).IF(
					self:visit(exprNode),
					self:Fn()(self:visit(blockNode))
				)
			end
		end
		const nExpr, nBlock = node[1]!, node[2]!
		assert(nExpr.tag ~= "Block" and nBlock.tag == "Block", "if statement error")
		return put(nExpr, nBlock, 3, 1)
	end,
	Fornum=function(self, node)
		const nHasStep = node[5] and true or false
		const nBlockNode = node[5] or node[4]
		assert(nBlockNode.tag == "Block", "4th or 5th node must be block")
		return {
			"local fornum_r1, fornum_r2, fornum_r3 = ",
			self:visit(node[2]), ",", self:visit(node[3]), ",", nHasStep and self:visit(node[4]) or "nil", " ",
			self:rgnWrap(node).FOR_NUM(
				self:Fn("fornum_i")(
					self:visitIdentDef(node[1], "fornum_i"),
					self:visit(nBlockNode)
				), "fornum_r1", "fornum_r2", "fornum_r3")
		}
	end,
	Forin=function(self, node)
		return {
			"local forin_next,forin_self,forin_init=",
			self:ctxWrap(node).EXPLIST_UNPACK("3", self:visit(node[2])),
			self:rgnWrap(node).FOR_IN(self:Fn("vIterTuple")(
			"local ", self:forList(node[1], function(i, vNode)
				return "forin_gen"..i
			end, ","),
			"=", self:ctxWrap(node).TUPLE_UNPACK("vIterTuple", tostring(#node[1]), tostring(false)),
			self:forList(node[1], function(i, vNode)
				const nIdent = vNode @ node.Ident_def
				return self:visitIdentDef(nIdent, "forin_gen"..i)
			end, " "),
			self:visit(node[3])
			), "forin_next", "forin_self", "forin_init")
		}
	end,
	Local=function(self, node)
		return {
			line=node.l,
			"local ", self:forList(node[1], function(i, vNode)
				return "local_a"..i
			end, ","), "=",
			#node[2] > 0 and self:ctxWrap(node).EXPLIST_UNPACK(tostring(#node[1]), self:visit(node[2])) or "nil ",
			self:forList(node[1], function(i, vNode)
				const nIdent = vNode @ node.Ident_def
				return self:visitIdentDef(nIdent, "local_a"..i)
			end, " ")
		}
	end,
	Localrec=function(self, node)
		-- recursive function
		const nIdentNode = node[1]
		const nIdentFormat = self:formatIdent(nIdentNode)
		return {
			" local ", nIdentFormat, " ", nIdentFormat, "=", self:rgnWrap(nIdentNode).SYMBOL_NEW(
				string.format("%q", nIdentNode.symbolKind), tostring(nIdentNode.symbolModify or false),
				self:visit(node[2])
			)
		}
	end,
	Goto=function()
		print("--goto TODO")
		return {}
	end,
	Label=function()
		print("--label TODO")
		return {}
	end,
	Return=function(self, node)
		return self:rgnWrap(node).RETURN(
			self:ctxWrap(node).EXPLIST_PACK(
				"false",
				self:Table(self:visit(node[1]))
			)
		)
	end,
	Break=function(self, node)
		return self:rgnWrap(node).BREAK()
	end,
	Call=function(self, node)
		return self:ctxAutoUnpack(node,
			self:ctxWrap(node).META_CALL(
				self:visit(node[1]),
				self:ctxWrap(node).EXPLIST_PACK(
					"true",
					self:Table(#node[2] > 0 and self:visit(node[2]) or "")
				)
			)
		)
	end,
	Invoke=function(self, node)
		return self:ctxAutoUnpack(node,
			self:ctxWrap(node).META_INVOKE(
				self:visit(node[1]),
				"\""..node[2][1].."\"",
				self:ctxWrap(node).EXPLIST_PACK(
					"false",
					self:Table(#node[3] > 0 and self:visit(node[3]) or "")
				)
			)
		)
	end,
	HintStat=function(self, node)
		-- self:print("local block = function(self) ", node[1], " end block(self)\n")
		return {
			line = node.l,
			self:fixHintScript(node[1].script)
		}
	end,
	Nil=function(self, node)
		return "____ctx:NilTerm()"
	end,
	Dots=function(self, node)
		return self:ctxAutoUnpack(node, "vDOTS")
	end,
	True=function(self, node)
		return "____ctx:BooleanTerm(true)"
	end,
	False=function(self, node)
		return "____ctx:BooleanTerm(false)"
	end,
	Number=function(self, node)
		return {
			"____ctx:LiteralTerm(", tostring(node[1]), ")"
		}
	end,
	String=function(self, node)
		const s = node[1]
		return {
			"____ctx:LiteralTerm",
			node.isLong and '([[' .. s .. ']])' or '(' .. string.format("%q", s),
			')'
		}
	end,
	Function=function(self, node)
		-- TODO
		return {
			"____ctx:RefineTerm((", self:Fn()(
				self:visitFunc(node)
			), ")())",
		}
	end,
	Table=function(self, node)
		local count = 0
		const i2i:Dict(Integer, Integer) = {}
		local tailDots:OrNil(node.UTupleExpr) = nil
		for i, nItem in ipairs(node) do
			if nItem.tag ~= "Pair" then
				count = count + 1
				i2i[i] = count
				const nExprTag = nItem.tag
				if i==#node and (nExprTag == "Dots" or nExprTag == "Invoke" or nExprTag == "Call") then
					tailDots = nItem
				end
			end
		end
		return {
			"____ctx:RefineTerm(", self:ctxWrap(node).TABLE_NEW(
				self:visitLongHint(node.hintLong),
				self:FnRet(self:Table(self:forList(node, function(i, vNode)
					const nTableItem = vNode @ Union(node.Pair, node.Expr)
					if nTableItem.tag ~= "Pair" then
						if i==#node and tailDots then
							return "nil"
						else
							return self:Table("____ctx:LiteralTerm("..i2i[i]!..")", self:visit(nTableItem))
						end
					else
						return self:Table(self:visit(nTableItem[1]), self:visit(nTableItem[2]))
					end
				end, ",")), tostring(count), tailDots and self:visit(tailDots) or "nil")
			), ")"
		}
	end,
	Op=function(self, node)
		const nLogicOpSet:Dict(String, Integer) = {["or"]=1,["not"]=1,["and"]=1}
		const nOper = node[1]
		if nLogicOpSet[nOper] then
			if nOper == "not" then
				return self:rgnWrap(node).LOGIC_NOT(
					self:visit(node[2])
				)
			elseif nOper == "or" then
				return self:rgnWrap(node).LOGIC_OR(
					self:visit(node[2]), self:FnRet(self:visit(node[3]!))
				)
			elseif nOper == "and" then
				return self:rgnWrap(node).LOGIC_AND(
					self:visit(node[2]), self:FnRet(self:visit(node[3]!))
				)
			else
				error("invalid case branch")
			end
		else
			const nRight = node[3]
			if not nRight then
				return self:ctxWrap(node).META_UOP(
					"\""..node[1].."\"",
					self:visit(node[2])
				)
			elseif node[1] == "==" then
				return self:ctxWrap(node).META_EQ_NE(
					"true",
					self:visit(node[2]),
					self:visit(nRight)
				)
			elseif node[1] == "~=" then
				return self:ctxWrap(node).META_EQ_NE(
					"false",
					self:visit(node[2]),
					self:visit(nRight)
				)
			else
				return self:ctxWrap(node).META_BOP_SOME(
					"\""..node[1].."\"",
					self:visit(node[2]),
					self:visit(nRight)
				)
			end
		end
	end,
	Paren=function(self, node)
		local nHintShort = node.hintShort
		if nHintShort then
			return self:ctxWrap(node).HINT(
				{"(", self:visit(node[1]), ")"},
				self:fixHintScript(nHintShort.script)
			)
		else
			return {"(", self:visit(node[1]), ")"}
		end
	end,
	Ident=function(self, node)
		assert(node.kind ~= "def")
		const symbol = self:formatIdent(node)
		if node.isSet then
			return symbol
		else
			const nParent = node.parent!
			const nParentTag = nParent.tag
			const nParentParentTag = nParent.parent!.tag
			const nLazyEval = nParentTag == "ExprList" and (nParentParentTag == "Invoke" or nParentParentTag == "Call")
			return {
				nLazyEval and " function() return " or "",
				self:rgnWrap(node).SYMBOL_GET(symbol),
				nLazyEval and " end " or "",
			}
		end
	end,
	Index=function(self, node)
		return self:ctxWrap(node).META_GET(
			self:visit(node[1]), self:visit(node[2]),
			tostring(node.notnil or false)
		)
	end,
	ExprList=function(self, node)
		return self:forList(node, function(i, expr)
			return self:visit(expr)
		end, ",")
	end,
	ParList=function(self, node)
		error("implement in other way")
		return self:forList(node, function(i, vNode)
			const nParNode = vNode @ Union(node.Ident_use, node.Dots)
			return nParNode.tag == "Ident" and "v_"..nParNode[1]..nParNode.index or "vDOTS"
		end, ",")
	end,
	VarList=function(self, node)
		return self:forList(node, function(i, varNode)
			return self:visit(varNode)
		end, ",")
	end,
	IdentList=function(self, node)
		return self:forList(node, function(i, identNode)
			return self:visit(identNode)
		end, ",")
	end,
}

const HintGener = {}
HintGener.__index = HintGener

function HintGener:visit(vNode:node.IAstNode)::Ret(let.UGenResult)
	const nUnionNode = vNode @ node.UNodeType
	const fn = TagToVisiting[nUnionNode.tag]
	if fn then
		return fn(self, nUnionNode)
	else
		return ""
	end
end

function HintGener:fixHintScript(vScript:String)::Ret(let.GenResult)
	const nResult:let.GenResult = {}
	for s in string.gmatch(vScript, "[^\n]*") do
		nResult[#nResult + 1] = {
			line = true,
			" ", s, " "
		}
	end
	return nResult
end

(@do
	let.UFormatList = List(Union(Integer, String, node.IAstNode, Fn():Ret(let.UFormatList)))
end)

function HintGener:codeNode(vNode:node.IAstNode)::Ret(String)
	return "____nodes["..vNode.index.."]"
end

function HintGener:formatIdent(vIdentNode:node.Ident)::Ret(String)
	if vIdentNode.kind == "use" then
		const nDefineId = vIdentNode.defineIdent
		return "____s_"..nDefineId[1]..nDefineId.index
	else
		return "____s_"..vIdentNode[1]..vIdentNode.index
	end
end

function HintGener:visitIdentDef(vIdentNode:node.Ident_def, vValue:String, vNoHint:OrNil(True))::Ret(let.UGenResult)
	const nHintShort = vIdentNode.hintShort
	return {
		" local ", self:formatIdent(vIdentNode), "=", self:rgnWrap(vIdentNode).SYMBOL_NEW(
			string.format("%q", vIdentNode.symbolKind), tostring(vIdentNode.symbolModify or false),
			vValue, vNoHint and "nil" or (nHintShort and nHintShort.script or "nil")
		)
	}
end

function HintGener:Fn(...:String)::Ret(Fn():Dots(let.UGenResult):Ret(let.GenResult))
	const nArgsString = table.concat({...}, ",")
	return function(...)
		const nList:let.GenResult = {...}
		const nResult:let.GenResult = { " function(",nArgsString,") " }
		for i=1, #nList do
			nResult[#nResult+1] = nList[i]
			nResult[#nResult+1] = " "
		end
		nResult[#nResult+1] = " end "
		return nResult
	end
end

function HintGener:FnRet(...:let.UGenResult)::Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = { " function() return " }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = " end "
	return nResult
end

function HintGener:Table(...:let.UGenResult)::Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = { "{" }
	for i=1, #nList do
		nResult[#nResult+1] = nList[i]
		if i~=#nList then
			nResult[#nResult+1] = ","
		end
	end
	nResult[#nResult+1] = "}"
	return nResult
end

(@do
	let.CtxNameEnum = Union(
		"FUNC_NEW",
		"TABLE_NEW",

		"AutoArguments",

		"TUPLE_UNPACK",
		"EXPLIST_UNPACK",
		"EXPLIST_PACK",

		"HINT",

		"META_EQ_NE",
		"META_UOP",
		"META_BOP_SOME",

		"META_CALL",
		"META_INVOKE",
		"META_GET",
		"META_SET"
	)
end)
function HintGener:ctxWrap(vNode:node.IAstNode)::pass():Ret(Dict(let.CtxNameEnum, Fn():Dots(let.UGenResult):Ret(let.GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____ctx", vName, vNode, ...)
			end
		end,
	})
end

(@do
	let.RgnNameEnum = Union(
		"RETURN",
		"END",
		"WHILE",
		"DO",
		"FOR_IN",
		"FOR_NUM",
		"IF",
		"BREAK",
		"SYMBOL_NEW",
		"SYMBOL_GET",
		"SYMBOL_SET",
		"LOGIC_NOT",
		"LOGIC_OR",
		"LOGIC_AND"
	)
end)
function HintGener:rgnWrap(vNode:node.IAstNode)::pass():Ret(Dict(let.RgnNameEnum, Fn():Dots(let.UGenResult):Ret(let.GenResult)))
	return setmetatable({}, {
		__index=function(t,vName)
			return function(...)
				return self:prefixInvoke("____rgn", vName, vNode, ...)
			end
		end,
	})
end

function HintGener:prefixInvoke(vPrefix:String, vName:String, vNode:node.IAstNode, ...:let.UGenResult)::Ret(let.GenResult)
	const nList:let.GenResult = {...}
	const nResult:let.GenResult = {
		line=vNode.l,
		vPrefix, ":", vName, "(", self:codeNode(vNode),
	}
	for i=1, #nList do
		nResult[#nResult+1] = ","
		nResult[#nResult+1] = nList[i]
	end
	nResult[#nResult+1] = ")"
	return nResult
end

function HintGener:ctxAutoUnpack(vNode:node.UTupleExpr, vInner:let.UGenResult)::Ret(let.UGenResult)
	const nParent = vNode.parent!
	local nAutoUnpack = true
	if nParent.tag == "ExprList" or nParent.tag == "ParList" or nParent.tag == "Block" then
		nAutoUnpack = false
	elseif nParent.tag == "Table" and nParent[#nParent] == vNode then
		-- table tail not autoUnpack
		nAutoUnpack = false
	end
	if nAutoUnpack then
		return self:ctxWrap(vNode).EXPLIST_UNPACK("1", vInner)
	else
		return vInner
	end
end

function HintGener:visitLongHint(vHintInfo:OrNil(node.IHintInfo))::Ret(let.GenResult)
	return self:Fn("____longHint")("return ____longHint", (vHintInfo and self:fixHintScript(vHintInfo.script) or ""))
end

function HintGener:visitFunc(vNode:Union(node.Function, node.Chunk))::Ret(let.UGenResult)
	const nIsChunk = vNode.tag == "Chunk"
	const nHintString = nIsChunk and self:Fn("h")("return h:open()") or self:visitLongHint(vNode.hintLong)
	const nParList = nIsChunk and vNode[2] or vNode[1]
	const nBlockNode = nIsChunk and vNode[3] or vNode[2]
	const nLastNode = nParList[#nParList]
	const nLastDots = (nLastNode and nLastNode.tag == "Dots") and nLastNode
	local nDotsHint:OrFalse(let.UGenResult) = false
	if nLastDots then
		const nHint = nLastDots.hintShort
		nDotsHint = nHint and self:fixHintScript(nHint.script) or "____ctx:Variable(false)"
	end
	const nParInHead = self:ctxWrap(nParList).AutoArguments(
		self:Table(self:forList(nParList, function(i, vNode)
			const nParNode = vNode @ Union(node.Dots, node.Ident_def)
			const nHintShort = nParNode.hintShort
			if nParNode.tag == "Dots" then
				return "nil"
			else
				return nHintShort and self:fixHintScript(nHintShort.script)
					or (nParNode.isSelf and "____ctx:Variable(true)" or "____ctx:Variable(false)")
			end
		end, ", ")),
		nDotsHint or "false"
	)
	const nParInBody:let.GenResult = {
		#nParList > 0 and {
			" local ", self:forList(nParList, function(i, vNode)
				const nParNode = vNode @ Union(node.Ident_use, node.Dots)
				return nParNode.tag == "Ident" and "v_"..nParNode[1]..nParNode.index or "vDOTS"
			end, ","),
			"=" ,
			self:ctxWrap(nParList).TUPLE_UNPACK("vArgTuple",
				tostring(nLastDots and #nParList-1 or #nParList), tostring(nLastDots and true or false)),
			self:forList(nParList, function(i, vNode)
				const nParNode = vNode @ Union(node.Dots, node.Ident_def)
				if nParNode.tag ~= "Dots" then
					return self:visitIdentDef(nParNode, "v_"..nParNode[1]..nParNode.index, true)
				end
			end, " ")
		} or "",
	}
	return {
		"local ____fn,____uv ",
		"____fn,____uv=", self:ctxWrap(vNode).FUNC_NEW(
			nHintString,
			nParInHead,
			tostring(vNode.retFlag or false),
			self:Fn("____newCtx", "vArgTuple")(
				"local ____ctx,____rgn,let,_ENV=____newCtx,____newCtx:BEGIN(____ctx,", self:codeNode(vNode), ", ____fn,____uv) ",
				nParInBody,
				self:visit(nBlockNode),
				" return ",
				self:rgnWrap(vNode).END()
			)
		),
		"return ____fn ",
	}
end

function HintGener:forList(
	vList:IList(node.IAstNode),
	vFunc:Fn(Integer, node.IAstNode):Ret(let.UGenResult),
	vSep:String
	)::Ret(let.GenResult)
	const nResult:let.GenResult = {}
	const nLen = #vList
	for i=1,nLen do
		nResult[#nResult + 1] = vFunc(i, vList[i]!)
		nResult[#nResult + 1] = i~=nLen and vSep or nil
	end
	return nResult
end

function HintGener.new()::RetClass(let.HintGener)
	const self = setmetatable({::Self()
	}, HintGener)
	return self
end

function HintGener:genCode(vNode:node.IAstNode)::Ret(String)
	const nBufferList:List(String) = {}
	local nLineCount = 1
	const function recurAppend(vResult:let.UGenResult, vDepth:Integer)
		if type(vResult) == "table" then
			const nLine = vResult.line
			if type(nLine) == "number" then
				while nLineCount < nLine do
					nBufferList[#nBufferList+1] = "\n"
					nLineCount = nLineCount + 1
				end
			end
			for _, v in ipairs(vResult) do
				recurAppend(v, vDepth+1)
			end
			if nLine == true then
				nBufferList[#nBufferList+1] = "\n"
				nLineCount = nLineCount + 1
			end
		else
			nBufferList[#nBufferList+1] = tostring(vResult)
		end
	end
	recurAppend(self:visit(vNode), 0)
	return table.concat(nBufferList)
end

return HintGener
