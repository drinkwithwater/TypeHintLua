
const CodeEnv = require "thlua.code.CodeEnv"

(@let.clazz=import("thlua.class").clazz)

const NoServerLoader = {}
NoServerLoader.__index=NoServerLoader

function:class(clazz.NoServerLoader) NoServerLoader.new(vRuntime:clazz.BaseRuntime):implements(clazz.ILoader)
    const self = setmetatable({.class
        _runtime = vRuntime,
    }, NoServerLoader)
    return self
end

function NoServerLoader:thluaSearch(vPath)
    local fileName, err1 = package.searchpath(vPath, self._runtime:getSearchPath() or "./?.thlua;./?.d.thlua")
    if not fileName then
        return false, err1
    end
    return true, fileName
end

function.pass NoServerLoader:thluaParseFile(vFileName)
    local file, err = io.open(vFileName, "r")
    if not file then
        error(err)
    end
    local nContent = assert(file:read("*a"), "file "..vFileName.. " read fail")
    file:close()
    const nCodeEnv = CodeEnv.new(nContent, vFileName)
    return nCodeEnv
end

return NoServerLoader
