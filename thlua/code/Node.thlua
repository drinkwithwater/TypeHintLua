

const Enum = require "thlua.Enum"
const Exception = require "thlua.Exception"

(@do

let.Exception = import($Exception).clazz.Exception
let.node = namespace()

let.IBaseNode = Interface {
	tag=String,
	path=String,
	pos=Integer,
	posEnd=Integer,
	l=Integer,
	c=Integer,
	toExc=Fn(let.IBaseNode,String):Ret(Exception),
}

let.IAstNode = ExtendInterface(let.IBaseNode, Interface {
	index=Integer,
	parent=OrNil(node.IAstNode),
})

let.IVirtualNode = ExtendInterface(let.IBaseNode, Interface {
	parent=Nil,
})

let.ILen = Interface({}, {
	__len=Integer,
})

local __node = {}

__node.Chunk = ExtendStruct({
	tag = "Chunk",
	symbol_dots = OrNil(node.Dots),
	retFlag = OrNil(True),
	hintPolyParList = Nil,
	parFullHint = Nil,
	letNode = node.Ident_def,
	hintEnvNode = node.Ident_def,
	injectNode = OrFalse(node.ShortHintSpace, node.Expr),
	[1] = node.Ident_def,
	[2] = node.ParList,
	[3] = node.Block,
}, let.IAstNode, let.ILen)

__node.Block = ExtendStruct({
	tag = "Block",
	symbolTable = Dict(String, node.Ident_def),
	subBlockList = List(node.Block),
	[Integer] = node.Stat,
}, let.IAstNode, let.ILen)

node.Stat = Union (
	node.Do,
	node.Set,
	node.While,
	node.Repeat,
	node.If,
	node.Fornum,
	node.Forin,
	node.Local,
	node.Localrec,
	node.Goto,
	node.Label,
	node.Return,
	node.Continue,
	node.Break,
	node.Apply,
	node.StatHintSpace
)

__node.HintScript = ExtendStruct({
	tag = "HintScript",
	[1] = String,
}, let.IAstNode)

__node.HintEval = ExtendStruct({
	tag = "HintEval",
	endLine=Integer,
	[1] = Union(node.HintTerm, node.Expr),
}, let.IAstNode)

node.IHintSpace = ExtendInterface(Interface {
	tag="HintSpace",
	kind=String,
	evalScriptList = List(Union(node.HintEval, node.HintScript)),
}, let.IAstNode)

node.LongHintSpace = ExtendStruct({
	kind="LongHintSpace",
	attrList = List(String),
	[Integer] = Union(node.String, node.ExprList),
}, node.IHintSpace, let.ILen)

node.ShortHintSpace = ExtendStruct({
	kind="ShortHintSpace",
	castKind = OrFalse(node.CastKindEnum), -- if is false, then not hint
	[Integer] = node.Expr,
}, node.IHintSpace, let.ILen)

node.StatHintSpace = ExtendStruct({
	kind="StatHintSpace",
	[1] = Union(node.Do, node.Apply, node.Set),
}, node.IHintSpace)

__node.HintSpace = Union(node.ShortHintSpace, node.LongHintSpace, node.StatHintSpace)

__node.HintTerm = ExtendStruct({
	tag="HintTerm",
	[1]=node.ShortHintSpace
}, node.IAstNode)

__node.Do = ExtendStruct({
	tag = "Do",
	hintLong = OrNil(node.LongHintSpace),
	[1] = node.Block,
}, let.IAstNode)

__node.Set = ExtendStruct({
	tag = "Set",
	[1] = node.VarList,
	[2] = node.ExprList,
}, let.IAstNode)

__node.While = ExtendStruct({
	tag = "While",
	hintLong = OrNil(node.LongHintSpace),
	[1] = node.Expr,
	[2] = node.Block,
}, let.IAstNode)

__node.Repeat = ExtendStruct({
	tag = "Repeat",
	[1] = node.Block,
	[2] = node.Expr,
}, let.IAstNode)

__node.If = ExtendStruct({
	tag = "If",
	[Integer] = Union(node.Block, node.Expr),
}, let.IAstNode, let.ILen)

__node.Fornum = ExtendStruct({
	tag = "Fornum",
	hintLong = OrNil(node.LongHintSpace),
	[1] = node.Ident_def,
	[2] = node.Expr,
	[3] = node.Expr,
	[4] = Union(node.Expr, node.Block),
	[5] = Union(node.Block, Nil),
}, let.IAstNode)

__node.Forin = ExtendStruct({
	tag = "Forin",
	hintLong = OrNil(node.LongHintSpace),
	[1] = node.IdentList,
	[2] = node.ExprList,
	[3] = node.Block,
}, let.IAstNode)

__node.Local = ExtendStruct({
	tag = "Local",
	isConst = OrNil(True),
	[1] = node.IdentList,
	[2] = node.ExprList,
}, let.IAstNode)

__node.Localrec = ExtendStruct({
	tag = "Localrec",
	isConst = OrNil(True),
	[1] = node.Ident_def,
	[2] = node.Function,
}, let.IAstNode)

__node.Goto = ExtendStruct({
	tag = "Goto",
	[1] = String,
}, let.IAstNode)

__node.Label = ExtendStruct({
	tag = "Label",
	[1] = String,
}, let.IAstNode)

__node.Return = ExtendStruct({
	tag = "Return",
	[1] = node.ExprList,
}, let.IAstNode)

__node.Continue = ExtendStruct({
	tag = "Continue",
}, let.IAstNode)

__node.Break = ExtendStruct({
	tag = "Break",
}, let.IAstNode)

node.Apply = Union (
	node.Call,
	node.Invoke
)

__node.Call = ExtendStruct({
	tag = "Call",
	[1] = node.Expr,
	[2] = node.ExprList,
}, let.IAstNode)

__node.Invoke = ExtendStruct({
	tag = "Invoke",
	hintPolyArgs = OrNil(node.ShortHintSpace),
	notnil=OrNil(Boolean),
	[1] = node.Expr,
	[2] = node.String,
	[3] = node.ExprList,
}, let.IAstNode)

node.Lhs = Union (
	node.Ident_use,
	node.Index
)

__node.Index = ExtendStruct({
	tag = "Index",
	notnil = OrNil(Boolean),
	[1] = node.Expr,
	[2] = node.Expr,
}, let.IAstNode)

node.Ident_use = ExtendStruct({ -- local symbol
	tag = "Ident",
	kind = "use",
	isGetFrom = OrFalse(True, node.Ident_def), -- false for set, true for get, Ident_def for global
	notnil = OrNil(Boolean),
	defineIdent=OrFalse(node.Ident_def),
	[1] = String,
}, let.IAstNode)

node.Ident_def = ExtendStruct({
	tag = "Ident",
	kind = "def",
	-- effectPos = Integer,
	symbolKind=node.SymbolKindEnum,
	symbolModify=Boolean,
	symbolGetted=OrNil(True), -- is used and used by get
	isHidden=OrNil(True),
	hintShort=OrNil(node.ShortHintSpace),
	lookupIdent = OrNil(node.Ident_def),
	[1] = String,
}, let.IAstNode)

__node.Ident = Union(node.Ident_use, node.Ident_def)

node.Expr = Union (
	node.Nil,
	node.False,
	node.True,
	node.Number,
	node.String,
	node.Function,
	node.Table,
	node.Dots,
	node.Op,
	node.Paren,
	node.HintAt,
	node.Call,
	node.Invoke,
	node.Lhs
)

__node.Nil = ExtendStruct({
	tag = "Nil"
},let.IAstNode)

__node.False = ExtendStruct({
	tag = "False",
	isConst = OrNil(Boolean),
},let.IAstNode)

__node.True = ExtendStruct({
	tag = "True",
	isConst = OrNil(Boolean),
},let.IAstNode)

__node.Number = ExtendStruct({
	tag = "Number",
	isConst = OrNil(Boolean),
	[1] = Number,
},let.IAstNode)

__node.String = ExtendStruct({
	tag = "String",
	isConst = OrNil(Boolean),
	isLong = OrNil(True),
	[1] = String,
},let.IAstNode)

__node.Function = ExtendStruct({
	tag = "Function",
	symbol_dots = OrNil(node.Dots),
	hintPrefix = OrNil(node.LongHintSpace),
	hintPolyParList = OrNil(List(String)),
	hintSuffix = OrNil(node.LongHintSpace),
	retFlag = OrNil(True),
	parFullHint = Boolean,
	letNode = OrFalse(node.Ident_def), -- false means function in hint space
	hintEnvNode = OrFalse(node.Ident_def), -- false means function in hint space
	[1] = node.ParList,
	[2] = node.Block,
},let.IAstNode)

__node.Table = ExtendStruct({
	tag = "Table",
	isConst=Boolean,
	hintLong = OrNil(node.LongHintSpace),
	[Integer] = Union(node.Pair, node.Expr)
},let.IAstNode, let.ILen)

__node.Pair = ExtendStruct({
	tag = "Pair",
	[1] = node.Expr,
	[2] = node.Expr,
},let.IAstNode)

__node.Op = ExtendStruct({
	tag = "Op",
	[1] = String,
	[2] = node.Expr,
	[3] = Union(node.Expr, Nil),
},let.IAstNode)

__node.Dots = ExtendStruct({
	tag = "Dots",
	hintShort = OrNil(node.ShortHintSpace),
},let.IAstNode)

__node.Paren = ExtendStruct({
	tag = "Paren",
	[1] = node.Expr
},let.IAstNode)

__node.HintAt = ExtendStruct({
	tag = "HintAt",
	hintShort = node.ShortHintSpace,
	[1] = node.Expr,
},let.IAstNode)

__node.ParList = ExtendStruct({
	tag = "ParList",
	[Integer] = Union(node.Ident_def, node.Dots),
},let.IAstNode, let.ILen)

__node.ExprList = ExtendStruct({
	tag = "ExprList",
	[Integer] = node.Expr,
},let.IAstNode, let.ILen)

__node.VarList = ExtendStruct({
	tag = "VarList",
	[Integer] = node.Lhs,
},let.IAstNode, let.ILen)

__node.IdentList = ExtendStruct({
	tag = "IdentList",
	[Integer] = node.Ident_def,
},let.IAstNode, let.ILen)

local nodeTypeList = {}
for k,v in _G.pairs(__node) do
	node[k] = v
	nodeTypeList[#nodeTypeList + 1] = v
end

node.IAstNode = let.IAstNode

node.IVirtualNode = let.IVirtualNode

node.IBaseNode = let.IBaseNode

node.UTupleExpr = Union(node.Call, node.Invoke, node.Dots)

node.TagToNodeType = Struct(__node)

-- node.UNodeType = Union(table.unpack(nodeTypeList))

node.URegionNode = Union(node.Chunk, node.Function)

node.InjectTrace = Struct {
	pos=Integer,
	capture=node.Chunk, -- chunk for non-hint space capture, index & ident_use for hint space capture
	traceList=List(Integer),
	script=String,
}

node.Error = ExtendStruct({
	tag = "Error",
	[1] = String,
	[2] = OrNil(node.InjectTrace),
}, let.IVirtualNode)

node.Debug = ExtendStruct({
	tag = "Debug",
}, let.IVirtualNode)

node.Root = ExtendStruct ({
	tag="Root",
}, let.IVirtualNode)

node.LspPos = Interface {
	line=Integer,
	character=Integer,
}

end)

const Node = {}

(@do

node.SymbolKindEnum = Union(
	$Enum.SymbolKind_CONST,
	$Enum.SymbolKind_LOCAL,
	$Enum.SymbolKind_PARAM,
	$Enum.SymbolKind_ITER
)

node.CastKindEnum = Union(
	$Enum.CastKind_COVAR,
	$Enum.CastKind_CONTRA,
	$Enum.CastKind_CONIL,
	$Enum.CastKind_POLY,
	$Enum.CastKind_FORCE)

end)

Node.__index=Node

function Node.__tostring(self:node.IAstNode):Ret(String)
	local before = self.path..":".. self.l ..(self.c > 0 and ("," .. self.c) or "")
	return before
end

function Node.toExc(vNode:node.IBaseNode, vMsg:String):Ret(Exception)
	return Exception.new(vMsg, vNode)
end

function.pass Node.newRootNode(vFileName:String):Ret(node.Root)
	return setmetatable({tag = "Root", pos=1, posEnd=1, l=1, c=1, path=vFileName}, Node)
end

function.pass Node.newDebugNode(vDepth:OrNil(Integer)):Ret(node.Debug)
	-- TODO, fix pos & posEnd
	local nInfo = debug.getinfo(vDepth or 3)
	return setmetatable({tag = "Debug", pos=1, posEnd=1, l=nInfo.currentline, c=1, path=nInfo.source}, Node)
end

function.pass Node.bind(vRawNode:AnyObject):Ret(node.IAstNode)
	return setmetatable(vRawNode, Node)
end

function.open Node.is(v):isguard(node.IBaseNode)
	return getmetatable(v) == Node
end

return Node

