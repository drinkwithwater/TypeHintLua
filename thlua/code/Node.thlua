

(@do

let.node = namespace()

let.IAstNode = Interface {
	path=String,
	pos=Number,
	l=Number,
	c=Number,
}

local __node = {}

__node.Chunk = StructExtend({
	tag = "Chunk",
	region_refer = Integer,
	symbol_dots = OrNil(node.Dots),
	uv_list = List(node.Id),
	[1] = node.Id,
	[2] = node.ParList,
	[3] = node.Block,
}, let.IAstNode)

__node.Block = StructExtend({
	tag = "Block",
	scope_refer = Integer,
	is_region = OrNil(True),
	region_node = node.URegionNode,
	symbol_ident_dict = Dict(String, node.Id),
	scope_children = List(node.Block),
	[Number] = node.Stat,
}, let.IAstNode)

__node.Stat = Union (
	node.Do,
	node.Set,
	node.While,
	node.Repeat,
	node.If,
	node.Fornum,
	node.Forin,
	node.Local,
	node.Localrec,
	node.Goto,
	node.Label,
	node.Return,
	node.Break,
	node.Apply,
	node.HintStat
)

__node.Do = StructExtend({
	tag = "Do",
	[1] = node.Block,
}, let.IAstNode)

__node.Set = StructExtend({
	tag = "Set",
	[1] = node.VarList,
	[2] = node.ExpList,
}, let.IAstNode)

__node.While = StructExtend({
	tag = "While",
	[1] = node.Expr,
	[2] = node.Block,
}, let.IAstNode)

__node.Repeat = StructExtend({
	tag = "Repeat",
	[1] = node.Block,
	[2] = node.Expr,
}, let.IAstNode)

__node.If = StructExtend({
	tag = "Repeat",
	[Number] = Union(node.Block, node.Expr),
}, let.IAstNode)

__node.Fornum = StructExtend({
	tag = "Fornum",
	[1] = node.Id,
	[2] = node.Expr,
	[3] = node.Expr,
	[4] = Union(node.Expr, node.Block),
	[5] = Union(node.Block, Nil),
}, let.IAstNode)

__node.Forin = StructExtend({
	tag = "Forin",
	[1] = node.NameList,
	[2] = node.ExpList,
	[3] = node.Block,
}, let.IAstNode)

__node.Local = StructExtend({
	tag = "Local",
	isConst = OrNil(True),
	[1] = node.NameList,
	[2] = node.ExpList,
}, let.IAstNode)

__node.Localrec = StructExtend({
	tag = "Localrec",
	isConst = OrNil(True),
	[1] = node.Id,
	[2] = node.Expr,
}, let.IAstNode)

__node.Goto = StructExtend({
	tag = "Goto",
	[1] = String,
}, let.IAstNode)

__node.Label = StructExtend({
	tag = "Label",
	[1] = String,
}, let.IAstNode)

__node.Return = StructExtend({
	tag = "Return",
	[1] = node.ExpList,
}, let.IAstNode)

__node.Break = StructExtend({
	tag = "Break",
}, let.IAstNode)

__node.HintStat = StructExtend({
	tag = "HintStat",
	[1] = String,
}, let.IAstNode)

__node.Apply = Union (
	node.Call,
	node.Invoke
)

__node.Call = StructExtend({
	tag = "Call",
	[1] = node.Expr,
	[2] = node.ExpList,
}, let.IAstNode)

__node.Invoke = StructExtend({
	tag = "Invoke",
	[1] = node.Expr,
	[2] = node.String,
	[3] = node.ExpList,
}, let.IAstNode)

__node.Lhs = Union (
	node.Id,
	node.Index
)

__node.Index = StructExtend({
	tag = "Index",
	[1] = node.Expr,
	[2] = node.Expr,
}, let.IAstNode)

__node.Id = StructExtend({
	tag = "Id",
	isConst = OrNil(True),
	isSet = OrNil(True),
	ident_refer = Integer,
	scope_refer = Integer,
	is_define = OrNil(True),
	isMutable = OrNil(True),
	isUpValue = OrNil(True),
	lookup_ident = OrNil(node.Id),
	[1] = String,
}, let.IAstNode)

__node.Expr = Union (
	node.Nil,
	node.False,
	node.True,
	node.Number,
	node.String,
	node.Lhs
)

__node.Nil = StructExtend({
	tag = "Nil"
},let.IAstNode)

__node.False = StructExtend({
	tag = "False"
},let.IAstNode)

__node.True = StructExtend({
	tag = "True"
},let.IAstNode)

__node.Number = StructExtend({
	tag = "Number",
	[1] = Number,
},let.IAstNode)

__node.String = StructExtend({
	tag = "String",
	[1] = String,
},let.IAstNode)

__node.Function = StructExtend({
	tag = "Function",
	region_refer = Integer,
	symbol_dots = OrNil(node.Dots),
	uv_list = List(node.Id),
	[1] = node.ParList,
	[2] = node.Block,
},let.IAstNode)

__node.Table = StructExtend({
	tag = "Table",
	[Number] = Union(node.Pair, node.Expr)
},let.IAstNode)

__node.Pair = StructExtend({
	tag = "Pair",
	[1] = node.Expr,
	[2] = node.Expr,
},let.IAstNode)

__node.Op = StructExtend({
	tag = "Op",
	[1] = String,
	[2] = node.Expr,
	[3] = Union(node.Expr, Nil),
},let.IAstNode)

__node.Dots = StructExtend({
	tag = "Dots"
},let.IAstNode)

__node.Paren = StructExtend({
	tag = "Paren",
	[1] = node.Expr
},let.IAstNode)

__node.ParList = StructExtend({
	tag = "ParList",
	[Number] = Union(node.Id, node.Dots),
},let.IAstNode)

__node.ExpList = StructExtend({
	tag = "ExpList",
	[Number] = node.Expr,
},let.IAstNode)

__node.VarList = StructExtend({
	tag = "VarList",
	[Number] = node.Lhs,
},let.IAstNode)

__node.NameList = StructExtend({
	tag = "NameList",
	[Number] = node.Id,
},let.IAstNode)

for k,v in pairs(__node) do
	node[k] = v
end

node.IAstNode = let.IAstNode

node.AllNodeType = Struct(__node)

node.URegionNode = Union(node.Chunk, node.Function)

node.Error = StructExtend({
	tag = "Error",
	[1] = String,
	[2] = OrNil(node.Id, node.Paren, node.Invoke, node.Call, node.Index),
	[3] = OrNil(List(Integer)),
}, let.IAstNode)


end)

local Node = {}

Node.__index=Node

function Node.newRootNode(vMainFileName:String)::Ret(node.IAstNode):nocheck()
end

function Node.getDebugNode(vDepth:Number)::Ret(node.IAstNode):nocheck()
end

function Node.is(vNode)::isguard(node.IAstNode)
end

return Node

