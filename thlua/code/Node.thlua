

(@do

let.node = namespace()

let.IAstNode = Interface {
	path=String,
	pos=Number,
	l=Number,
	c=Number,
}

node.IAstNode = let.IAstNode

node.Error = StructExtend({
	tag = "Error",
	[1] = String,
}, let.IAstNode)

node.Chunk = StructExtend({
	tag = "Chunk",
	[1] = node.Id,
	[2] = node.ParList,
	[3] = node.Block,
}, let.IAstNode)

node.Block = StructExtend({
	tag = "Block",
	[Number] = node.Stat,
}, let.IAstNode)

node.Stat = Union (
	node.Do,
	node.Set,
	node.While,
	node.Repeat,
	node.If,
	node.Fornum,
	node.Forin,
	node.Local,
	node.Localrec,
	node.Goto,
	node.Label,
	node.Return,
	node.Break,
	node.Apply,
	node.HintStat
)

node.Do = StructExtend({
	tag = "Do",
	[1] = node.Block,
}, let.IAstNode)

node.Set = StructExtend({
	tag = "Set",
	[1] = node.VarList,
	[2] = node.ExpList,
}, let.IAstNode)

node.While = StructExtend({
	tag = "While",
	[1] = node.Expr,
	[2] = node.Block,
}, let.IAstNode)

node.Repeat = StructExtend({
	tag = "Repeat",
	[1] = node.Block,
	[2] = node.Expr,
}, let.IAstNode)

node.If = StructExtend({
	tag = "Repeat",
	[Number] = Union(node.Block, node.Expr),
}, let.IAstNode)

node.Fornum = StructExtend({
	tag = "Fornum",
	[1] = node.Id,
	[2] = node.Expr,
	[3] = node.Expr,
	[4] = Union(node.Expr, node.Block),
	[5] = Union(node.Block, Nil),
}, let.IAstNode)

node.Forin = StructExtend({
	tag = "Forin",
	[1] = node.NameList,
	[2] = node.ExpList,
	[3] = node.Block,
}, let.IAstNode)

node.Local = StructExtend({
	tag = "Local",
	[1] = node.NameList,
	[2] = node.ExpList,
}, let.IAstNode)

node.Localrec = StructExtend({
	tag = "Localrec",
	[1] = node.Id,
	[2] = node.Expr,
}, let.IAstNode)

node.Goto = StructExtend({
	tag = "Goto",
	[1] = String,
}, let.IAstNode)

node.Label = StructExtend({
	tag = "Label",
	[1] = String,
}, let.IAstNode)

node.Return = StructExtend({
	tag = "Return",
	[1] = node.ExpList,
}, let.IAstNode)

node.Break = StructExtend({
	tag = "Break",
}, let.IAstNode)

node.HintStat = StructExtend({
	tag = "HintStat",
	[1] = String,
}, let.IAstNode)

node.Apply = Union (
	node.Call,
	node.Invoke
)

node.Call = StructExtend({
	tag = "Call",
	[1] = node.Expr,
	[2] = node.ExpList,
}, let.IAstNode)

node.Invoke = StructExtend({
	tag = "Invoke",
	[1] = node.Expr,
	[2] = node.String,
	[3] = node.ExpList,
}, let.IAstNode)

node.Lhs = Union (
	node.Id,
	node.Index
)

node.Index = StructExtend({
	tag = "Index",
	[1] = node.Expr,
	[2] = node.Expr,
}, let.IAstNode)

node.Id = StructExtend({
	tag = "Id",
	[1] = String,
}, let.IAstNode)

node.Expr = Union (
	node.Nil,
	node.False,
	node.True,
	node.Number,
	node.String,
	node.Lhs
)

node.Nil = StructExtend({
	tag = "Nil"
},let.IAstNode)

node.False = StructExtend({
	tag = "False"
},let.IAstNode)

node.True = StructExtend({
	tag = "True"
},let.IAstNode)

node.Number = StructExtend({
	tag = "Number",
	[1] = Number,
},let.IAstNode)

node.String = StructExtend({
	tag = "String",
	[1] = String,
},let.IAstNode)

node.Function = StructExtend({
	tag = "Function",
	[1] = node.ParList,
	[2] = node.Block,
},let.IAstNode)

node.Table = StructExtend({
	tag = "Table",
	[Number] = Union(node.Pair, node.Expr)
},let.IAstNode)

node.Pair = StructExtend({
	tag = "Pair",
	[1] = node.Expr,
	[2] = node.Expr,
},let.IAstNode)

node.Op = StructExtend({
	tag = "Op",
	[1] = String,
	[2] = node.Expr,
	[3] = Union(node.Expr, Nil),
},let.IAstNode)

node.Dots = StructExtend({
	tag = "Dots"
},let.IAstNode)

node.Paren = StructExtend({
	tag = "Paren",
	[1] = node.Expr
},let.IAstNode)

node.ParList = StructExtend({
	tag = "ParList",
	[Number] = Union(node.Id, node.Dots),
},let.IAstNode)

node.ExpList = StructExtend({
	tag = "ExpList",
	[Number] = node.Expr,
},let.IAstNode)

node.VarList = StructExtend({
	tag = "VarList",
	[Number] = node.Lhs,
},let.IAstNode)

node.NameList = StructExtend({
	tag = "NameList",
	[Number] = node.Id,
},let.IAstNode)

end)

local Node = {}

Node.__index=Node

function Node.newRootNode(vMainFileName:String)::Ret(node.IAstNode):nocheck()
end

function Node.getDebugNode(vDepth:Number)::Ret(node.IAstNode):nocheck()
end

function Node.is(vNode)::isguard(node.IAstNode)
end

return Node

