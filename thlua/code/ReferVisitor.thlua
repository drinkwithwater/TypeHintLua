
local VisitorExtend = require "thlua.code.VisitorExtend"

local CodeEnv = require "thlua.code.CodeEnv"

local TagToVisiting = {
	Do=function(self, stm)
		self:scopeBegin(stm[1])
		self:rawVisit(stm)
		self:scopeEnd()
	end,
	While=function(self, stm)
		self:scopeBegin(stm[2])
		self:rawVisit(stm)
		self:scopeEnd()
	end,
	Repeat=function(self, stm)
		self:scopeBegin(stm[1])
		self:rawVisit(stm)
		self:scopeEnd()
	end,
	-- some complicate node
	Fornum=function(self, stm)
		local block_node
		self:realVisit(stm[2])
		self:realVisit(stm[3])
		if stm[5] then
			self:realVisit(stm[4])
			block_node = stm[5]
		else
			block_node = stm[4]
		end
		self:scopeBegin(block_node)
		self.define_pos = true
		self:realVisit(stm[1])
		self.define_pos = false
		self:realVisit(block_node)
		self:scopeEnd()
	end,
	Forin=function(self, stm)
		local block_node = stm[3]
		self:realVisit(stm[2])
		self:scopeBegin(block_node)
		self.define_pos = true
		self:realVisit(stm[1])
		self.define_pos = false
		self:realVisit(block_node)
		self:scopeEnd()
	end,
	Function=function(self, func)
		self:scopeBegin(func)
		self.define_pos = true
		self:realVisit(func[1])
		self.define_pos = false
		self:realVisit(func[2])
		self:scopeEnd()
	end,
	If=function(self, node)
		for i, subNode in ipairs(node) do
			if subNode.tag == "Block" then
				self:scopeBegin(subNode)
				self:realVisit(subNode)
				self:scopeEnd()
			else
				self:realVisit(subNode)
			end
		end
	end,
	Block=function(self, stm)
		local nCurScope = self.scope_stack[#self.scope_stack]
		stm.scope_refer = nCurScope.scope_refer
		self:rawVisit(stm)
	end,
	Local=function(self, stm)
		self:realVisit(stm[2])
		self.define_pos = true
		self:realVisit(stm[1])
		self.define_pos = false
	end,
	Localrec=function(self, stm)
		self.define_pos = true
		self:realVisit(stm[1])
		self.define_pos = false
		self:realVisit(stm[2])
	end,
	Dots=function(self, node)
		if self.define_pos then
			self:identDefine(node)
		else
			self:identUse(node)
		end
	end,
	Id=function(self, node)
		if self.define_pos then
			self:identDefine(node)
		else
			self:identUse(node)
		end
	end,
	Chunk=function(self, chunk)
		local block_node = chunk[3]
		self.define_pos = true
		self:realVisit(chunk[1])
		self.define_pos = false
		self:scopeBegin(chunk)
		self.define_pos = true
		self:realVisit(chunk[2])
		self.define_pos = false
		self:realVisit(block_node)
		self:scopeEnd()
	end,
}

local ReferVisitor = VisitorExtend(setmetatable({}, {
	__index=function(t, tag)
		local nTraverse = TagToVisiting[tag]
		local nFunc
		if nTraverse then
			nFunc = function(self, node)
				nTraverse(self, node)
			end
		else
			nFunc = function(self, node)
				self:rawVisit(node)
			end
		end
		t[tag] = nFunc
		return nFunc
	end
}))

ReferVisitor.__index=ReferVisitor

function ReferVisitor:scopeBegin(vNode, vIsRegion)
	local nCurScope = self.scope_stack[#self.scope_stack]
	local nNextScope = nil
	-- if function or chunk then create region
	if vNode.tag == "Function" or vNode.tag == "Chunk" then
		nNextScope = self._env:create_region(nCurScope, vNode)
	-- else create scope
	else
		assert(vNode.tag == "Block", "node tag must be Block but get "..tostring(vNode.tag))
		nNextScope = self._env:create_scope(nCurScope, vNode)
	end
	vNode.scope_refer = nNextScope.scope_refer
	table.insert(self.scope_stack, nNextScope)
	return nNextScope
end

function ReferVisitor:scopeEnd()
	local nScope = table.remove(self.scope_stack)
end

function ReferVisitor:identDefine(vIdentNode)
	-- create and set ident_refer
	local nCurScope = self.scope_stack[#self.scope_stack]
	self._env:recordIdent(nCurScope, vIdentNode)
end

function ReferVisitor:idToIndex(vIdentNode)
	local e1 = {tag="Id", pos=vIdentNode.pos, posEnd=vIdentNode.pos, "_ENV"}
	e1.ident_refer = 1
	local e2 = {tag="String", pos=vIdentNode.pos, posEnd=vIdentNode.posEnd, vIdentNode[1]}
	vIdentNode.tag = "Index"
	vIdentNode[1] = e1
	vIdentNode[2] = e2
end

function ReferVisitor:identUse(vIdentNode)
	assert(not vIdentNode.ident_refer, "ident_refer has been setted")
	local nCurScope = self.scope_stack[#self.scope_stack]
	if vIdentNode.tag == "Id" then
		local nName = vIdentNode[1]
		local nIdentRefer = nCurScope.record_dict[nName]
		if nIdentRefer then
			vIdentNode.ident_refer = nIdentRefer
		else
			self:idToIndex(vIdentNode)
		end
	elseif vIdentNode.tag == "Dots" then
		local nName = "..."
		local nRefer = nCurScope.record_dict[nName]
		if not nRefer then
			error(self._env:makeErrNode(vIdentNode.pos, "cannot use '...' outside a vararg function"))
		end
		vIdentNode.ident_refer = nRefer
	else
		error("ident refer error tag"..tostring(vIdentNode.tag))
	end
end

function ReferVisitor.new(vFileEnv)
	local self = setmetatable({
		_env = vFileEnv,
		scope_stack = {
			vFileEnv.root_scope
		},
		stack = {},
		define_pos=false,
	}, ReferVisitor)
	return self
end

return ReferVisitor
