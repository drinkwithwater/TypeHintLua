
const class = require@<let.clazz> "thlua.class"

(@do
	let.node = import("thlua.code.Node").node
	node.LinePos = Struct{
		pos=Integer,
		posEnd=Integer
	}
end)

const SplitCode = class@<clazz.SplitCode, false>()

const function split(vContent:String):Ret(List(String), List(node.LinePos))
	const nLineList:List(String) = {}
	const nLinePosList:List(node.LinePos) = {}
	local nLineCount = 0
	local nStartPos = 1
	local nFinishPos:OrNil(Integer) = 0
	while true do
		nLineCount = nLineCount + 1
		nFinishPos = vContent:find("\n", nStartPos)
		if not nFinishPos then
			if nStartPos <= #vContent then
				nLinePosList[#nLinePosList + 1] = {
					pos=nStartPos,
					posEnd=#vContent
				}
				nLineList[#nLineList + 1] = vContent:sub(nStartPos)
			end
			break
		else
			--[[if vContent:sub(nFinishPos, nFinishPos + 1) == "\r\n" then
				nFinishPos = nFinishPos + 1
			end]]
			nLinePosList[#nLinePosList + 1] = {
				pos=nStartPos,
				posEnd=nFinishPos
			}
			nLineList[#nLineList + 1] = vContent:sub(nStartPos, nFinishPos)
			nStartPos = nFinishPos + 1
		end
	end
	return nLineList, nLinePosList
end

function.open SplitCode:ctor(vContent:String, ...)
	self._content = vContent
	self._lineList, self._linePosList = split(vContent)
end

function SplitCode:binSearch@<TValue>(vList:List(TValue), vPos:Integer):Ret(False):Ret(Integer, TValue)
	if #vList <= 0 then
		return false
	end
	if vPos < vList[1]!.pos then
		return false
	end
	local nLeft = 1
	local nRight = #vList
	local count = 0
	while nRight > nLeft do
		count = count + 1
		local nMiddle = (nLeft + nRight) // 2
		local nMiddle1 = nMiddle + 1
		if vPos < vList[nMiddle]!.pos then
			nRight = nMiddle - 1
		elseif vPos >= vList[nMiddle1]!.pos then
			nLeft = nMiddle1
		else
			nLeft = nMiddle
			nRight = nMiddle
		end
	end
	return nLeft, vList[nLeft]!
end

function SplitCode:lspToPos(vLspPos:node.LspPos):Ret(Integer)
	const nLineOffset = vLspPos.line + 1
	const nLinePos = self._linePosList[nLineOffset]
	if nLinePos then
		const nLineStr = self._lineList[nLineOffset]!
		const nCharOffset = utf8.offset(nLineStr, vLspPos.character + 1)
		if nCharOffset <= 1 then
			return nLinePos.pos
		else
			return nLinePos.pos + nCharOffset - 1
		end
	else
		if nLineOffset + 1 > #self._linePosList then
			return #self._content + 1
		else
			return 1
		end
	end
end

function SplitCode:matchLineForDiff(vDiffCode:clazz.SplitCode, vTargetLineIndex:Integer):Ret(OrFalse(Integer))
	const nNewLineList = vDiffCode._lineList
	const nLineContent = nNewLineList[vTargetLineIndex]
	if not nLineContent then
		return false
	end
	const nMatchIndexList:List(Integer) = {}
	const nOldLineList = self._lineList
	for i=1, #nOldLineList do
		if nOldLineList[i] == nLineContent then
			nMatchIndexList[#nMatchIndexList + 1] = i
		end
	end
	if #nMatchIndexList < 1 then
		return false
	elseif #nMatchIndexList == 1 then
		return nMatchIndexList[1]!
	else
		-- calculate edit distance
		const nLastIndex = nMatchIndexList[#nMatchIndexList]!
		const editDist:List(List(Integer)) = {}
		for i=0, vTargetLineIndex-1 do
			editDist[i] = {[0]=i}
		end
		for j=0, nLastIndex-1 do
			editDist[0]![j] = j
		end
		for i=1, vTargetLineIndex-1 do
			const editDistI = editDist[i]!
			const editDistI_1 = editDist[i-1]!
			for j=1, nLastIndex-1 do
				const d_i_j_1 = editDistI[j-1]!
				const d_i_1_j = editDistI_1[j]!
				const d_i_1_j_1 = editDistI_1[j-1]!
				if nNewLineList[i] == nOldLineList[j] then
					editDistI[j] = math.min(math.min(d_i_j_1, d_i_1_j) + 1, d_i_1_j_1) @> Integer
				else
					editDistI[j] = (math.min(d_i_j_1, d_i_1_j) + 1) @> Integer
				end
			end
		end
		local nMinDist = nLastIndex + vTargetLineIndex
		local nMinIndex = nMatchIndexList[1]!
		for _, nMatchIndex in ipairs(nMatchIndexList) do
			const editDist = editDist[vTargetLineIndex-1]![nMatchIndex-1]!
			if editDist < nMinDist then
				nMinIndex = nMatchIndex
				nMinDist = editDist
			end
		end
		return nMinIndex
	end
end

function SplitCode:fixupPos(vPos:Integer):Ret(Integer, Integer)
	local line, lineInfo = self:binSearch@<node.LinePos>(self._linePosList, vPos)
	if not line or not lineInfo then
		if vPos > #self._content then
			return #self._linePosList + 1, 1
		else
			return 1, 1
		end
	else
		return line, vPos - lineInfo.pos + 1
	end
end

function SplitCode:getContent()
	return self._content
end

function SplitCode:getLine(vLine:Integer):Ret(OrNil(String))
	return self._lineList[vLine]
end

function SplitCode:getLineNum()
	return #self._lineList
end

return SplitCode
