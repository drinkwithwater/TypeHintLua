
const Node = require "thlua.code.Node"
local Exception = require "thlua.Exception"

(@do

let.node = import("thlua.code.Node").node

node.IVisitor = Struct {
	realVisit=Mfn(node.IAstNode),
	rawVisit=Mfn(node.IAstNode),
}

let.RawTraverser = Struct((function()
	local t = {}
	foreachPair(node.AllNodeType, function(vTag, vNodeType)
		if not vNodeType:getResultType():isUnion() then
			t[vTag] = Fn(node.IVisitor, vNodeType)
		end
	end)
	return t
end)())

end)

const TagToTraverse:let.RawTraverser = {
	Error=function(self, node)
		error(Exception.new(node[1], node))
	end,
	Chunk=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
		self:realVisit(node[3])
	end,
	Block=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,

	-- expr
	Do=function(self, node)
		self:realVisit(node[1])
	end,
	Set=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	While=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Repeat=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	If=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,
	Forin=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
		self:realVisit(node[3])
	end,
	Fornum=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
		self:realVisit(node[3])
		self:realVisit(node[4])
		local last = node[5]
		if last then
			self:realVisit(last)
		end
	end,
	Local=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Localrec=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Goto=function(self, node)
	end,
	Return=function(self, node)
		self:realVisit(node[1])
	end,
	Break=function(self, node)
	end,
	Label=function(self, node)
	end,
	HintStat=function(self, node)
	end,

	-- apply
	Call=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Invoke=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
		self:realVisit(node[3])
	end,

	-- expr
	Nil=function(self, node)
	end,
	False=function(self, node)
	end,
	True=function(self, node)
	end,
	Number=function(self, node)
	end,
	String=function(self, node)
	end,
	Function=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Table=function(self, node)
		for i=1, #node do
			self:realVisit(node[i]!)
		end
	end,
	Op=function(self, node)
		self:realVisit(node[2])
		local right = node[3]
		if right then
			self:realVisit(right)
		end
	end,
	Paren=function(self, node)
		self:realVisit(node[1])
	end,
	Dots=function(self, node)
	end,

	-- lhs
	Index=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
	Id=function(self, node)
	end,

	-- list
	ParList=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,
	ExpList=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,
	VarList=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,
	NameList=function(self, node)
		for i=1,#node do
			self:realVisit(node[i]!)
		end
	end,
	Pair=function(self, node)
		self:realVisit(node[1])
		self:realVisit(node[2])
	end,
}

const function VisitorExtend(vDictOrFunc)::open()
	local t = {}
	t.__index = t
	const nType = type(vDictOrFunc)
	if nType == "table" then
		function t:realVisit(node)::nocheck()
			local tag = node.tag
			local f = vDictOrFunc[tag] or TagToTraverse[tag]
			if not f then
				error("tag="..tostring(tag).."not existed")
			end
			f(self, node)
		end
	elseif nType == "function" then
		function t:realVisit(node)
			vDictOrFunc(self, node)
		end
	else
		error("VisitorExtend must take a function or dict for override")
	end
	function t:rawVisit(node)::nocheck()
		TagToTraverse[node.tag](self, node)
	end
	return t
end

return VisitorExtend
