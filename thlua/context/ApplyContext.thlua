
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const AssignContext = require "thlua.context.AssignContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const ApplyContext = class@<clazz.ApplyContext, false>(AssignContext)

(@let.FirstRetCaseList= List(Struct {clazz.UAtomUnion, clazz.UTypeTuple, clazz.VariableCase}))
function.open ApplyContext:ctor(
	...
)
	self._openForbid = false@Boolean
	self._openReturn = false@clazz.UTermTuple
	self._retMaxLength = 0@Integer
	self._retRepCollection = self._manager:TypeCollection()
	self._retList = {} @FirstRetCaseList
end

function ApplyContext:_putRetTuples(vRetTuples:clazz.RetTuples, vCase:clazz.VariableCase)
	vRetTuples:foreachWithFirst(function(vTypeTuple, vFirst)
		local nLength = #vTypeTuple
		if nLength > self._retMaxLength then
			self._retMaxLength = nLength
		end
		self._retList[#self._retList + 1] = {
			vFirst:checkAtomUnion(), vTypeTuple, VariableCase.new() & vCase
		}
		const nRepeatType = vTypeTuple:getRepeatType()
		if nRepeatType then
			self._retRepCollection:put(nRepeatType)
		end
	end)
end

function ApplyContext:applyCall(
	vFunc:Union(clazz.BaseFunction, clazz.Truth),
	vArgTuple:clazz.UTermTuple,
	vCase:clazz.VariableCase
)
	if OpenFunction.is(vFunc) then
		if self._openReturn or self._openForbid then
			error(Exception.new("can't mix use open table", self._node))
		end
		self._openReturn = vFunc:meta_open_call(self, vArgTuple)
	else
		if self._openReturn then
			error(Exception.new("can't mix use open table", self._node))
		end
		self._openForbid = true
		const nRetTuples = vFunc:meta_call(self, vArgTuple)
		self:_putRetTuples(nRetTuples, vCase)
	end
end

function ApplyContext:applyInvoke(
	vFunc:Union(clazz.BaseFunction, clazz.Truth),
	vArgTuple:clazz.UTermTuple,
	vCase:clazz.VariableCase,
	vPolyArgs:List(clazz.UAllType),
	vSelfType:clazz.IAtomType
)
	if OpenFunction.is(vFunc) then
		if self._openReturn or self._openForbid then
			error(Exception.new("can't mix use open table", self._node))
		end
		self._openReturn = vFunc:meta_open_call(self, vArgTuple)
	else
		if self._openReturn then
			error(Exception.new("can't mix use open table", self._node))
		end
		self._openForbid = true
		const nRetTuples = vFunc:meta_invoke(self, vSelfType, vPolyArgs, vArgTuple)
		self:_putRetTuples(nRetTuples, vCase)
	end
end

function ApplyContext:mergeReturn():Ret(clazz.UTermTuple)
	const nOpenReturn = self._openReturn
	if nOpenReturn then
		return nOpenReturn
	end
	-- merge seal call return
	const nRetList = self._retList
	const nMaxLength = self._retMaxLength
	const nRepeatType = self._retRepCollection:mergeToAtomUnion()
	const nRepeatType = (not nRepeatType:isNever()) and nRepeatType or false
	if nMaxLength <= 0 then
		return self:FixedTermTuple({}, nRepeatType)
	end
	const nTermList:List(clazz.RefineTerm) = {}
	-- step 3. merge 2 ~ nMaxLength
	for i=2,nMaxLength do
		const nCollection = self._manager:TypeCollection()
		for _, nType1TupleCase in pairs(nRetList) do
			nCollection:put(nType1TupleCase[2]:get(i))
		end
		const nTypeI = nCollection:mergeToAtomUnion()
		nTermList[i] = self:RefineTerm(nTypeI)
	end
	-- step 4. merge 1
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	for _, nType1TupleCase in pairs(nRetList) do
		const nType1 = nType1TupleCase[1]
		const nTypeTuple = nType1TupleCase[2]
		const nCase = nType1TupleCase[3]
		for i=2,nMaxLength do
			nCase:put_and(nTermList[i]!:attachImmutVariable(), nTypeTuple:get(i):checkAtomUnion())
		end
		nTypeCaseList[#nTypeCaseList + 1] = {
			nType1, nCase
		}
	end
	nTermList[1] = self:mergeToRefineTerm(nTypeCaseList)
	return self:FixedTermTuple(nTermList, nRepeatType)
end

return ApplyContext
