
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const AssignContext = require "thlua.context.AssignContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const ApplyContext = class@<clazz.ApplyContext, false>(AssignContext)

function ApplyContext:pushNothing()
	error("push nothing not implement in ApplyContext")
end

function ApplyContext:pushOpenReturn(vTermTuple:clazz.UTermTuple)
	error("push return not implement in ApplyContext")
end

function ApplyContext:pushNormalReturn(vFirstType:clazz.UAtomUnion, vTypeTuple:OrNil(clazz.UTypeTuple))
	error("push return not implement in ApplyContext")
end

function ApplyContext:pushRetTuples(vRetTuples:clazz.RetTuples)
	error("push return not implement in ApplyContext")
end

return ApplyContext
