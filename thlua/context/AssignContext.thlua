
const class = require "thlua.class"

const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const AutoHolder = require "thlua.auto.AutoHolder"
const TypeFunction = require "thlua.func.TypeFunction"
const AutoTable = require "thlua.object.AutoTable"
const AutoFunction = require "thlua.func.AutoFunction"

const TermTuple = require "thlua.tuple.TermTuple"
const AutoFlag = require "thlua.auto.AutoFlag"
const AutoHolder = require "thlua.auto.AutoHolder"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"

const OperContext = require "thlua.context.OperContext"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

const AssignContext = class@<clazz.AssignContext, false>(OperContext)

function.open AssignContext:ctor(...)
	self._finish = false @ Boolean
end

function AssignContext:castLuaType(vRawSrcType:clazz.UAllType, vRawDstType:clazz.UAllType):Ret(OrFalse(clazz.UAtomUnion))
	const nSrcType = vRawSrcType:checkAtomUnion()
	const nDstType = vRawDstType:checkAtomUnion()
	if AutoFunction.is(nSrcType) then
		const nFnPartType = nDstType:fnPartType()
		if TypeFunction.is(nFnPartType) then
			nSrcType:checkWhenCast(self, nFnPartType)
			return nFnPartType
		end
	else
		const nSrcTable = nSrcType:objectPartType()
		const nDstObjectPart = nDstType:objectPartType()
		if AutoTable.is(nSrcTable) and not nDstObjectPart:isNever() then
			const nCastResult = nSrcTable:cast(self, nDstType:objectPartType())
			if nCastResult then
				return self._manager:checkedUnion(nSrcTable, nCastResult)
			else
				return false
			end
		end
	end
	return false
end

function AssignContext:matchArgsToTypeDots(
	vNode:clazz.IAstNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer,
	vHintDots:clazz.UAllType
):Ret(clazz.UTermTuple)
	const nTailTermList:List(clazz.UAutoTerm) = {}
	for i=vParNum + 1, #vTermTuple do
		const nTerm = vTermTuple:get(self, i)
		nTailTermList[#nTailTermList + 1] = self:assignTermToType(nTerm, vHintDots)
	end
	const nTermTail = vTermTuple:getTail()
	if AutoTail.is(nTermTail) then
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			nTermTail:sealTailFrom(self, 1, vHintDots)
		else
			nTermTail:sealTailFrom(self, nMore + 1, vHintDots)
		end
	end
	return self:UTermTupleByTail({}, DotsTail.new(self, vHintDots))
end

function AssignContext:matchArgsToAutoDots(
	vNode:clazz.IAstNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer
):Ret(clazz.UTermTuple)
	const nTailTermList:List(clazz.UAutoTerm) = {}
	for i=vParNum + 1, #vTermTuple do
		nTailTermList[#nTailTermList + 1] = vTermTuple:get(self, i)
	end
	const nTermTail = vTermTuple:getTail()
	if not AutoTail.is(nTermTail) then
		if nTermTail then
			return self:UTermTupleByTail(nTailTermList, DotsTail.new(self, nTermTail:getRepeatType()))
		else
			return self:UTermTupleByTail(nTailTermList)
		end
	else
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			return self:UTermTupleByTail(nTailTermList, nTermTail)
		else
			return self:UTermTupleByTail(nTailTermList, nTermTail:openTailFrom(self, nMore + 1))
		end
	end
end

function AssignContext:matchArgsToNoDots(
	vNode:clazz.IAstNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer
)
	const nTailTermList:List(clazz.UAutoTerm) = {}
	for i=vParNum + 1, #vTermTuple do
		nTailTermList[#nTailTermList + 1] = vTermTuple:get(self, i)
	end
	const nTermTail = vTermTuple:getTail()
	if AutoTail.is(nTermTail) then
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			nTermTail:sealTailFrom(self, 1, true)
		else
			nTermTail:sealTailFrom(self, nMore + 1, true)
		end
	end
end

function AssignContext:matchArgsToTypeTuple(
	vNode:clazz.IAstNode,
	vTermTuple:clazz.UTermTuple,
	vTypeTuple:clazz.UTypeTuple
)
	const nParNum = #vTypeTuple
	for i=1, #vTermTuple do
		const nAutoTerm = vTermTuple:get(self, i)
		const nHintType = vTypeTuple:get(i)
		self:assignTermToType(nAutoTerm, nHintType)
	end
	for i=#vTermTuple + 1, nParNum do
		const nAutoTerm = vTermTuple:get(self, i)
		const nHintType = vTypeTuple:get(i)
		self:assignTermToType(nAutoTerm, nHintType)
	end
	const nDotsType = vTypeTuple:getRepeatType()
	if nDotsType then
		self:matchArgsToTypeDots(vNode, vTermTuple, nParNum, nDotsType)
	else
		self:matchArgsToNoDots(vNode, vTermTuple, nParNum)
	end
end

function AssignContext:assignTermToType(vAutoTerm:clazz.UAutoTerm, vDstType:clazz.UAllType):Ret(clazz.RefineTerm)
	const nSrcType = vAutoTerm:getType()
	if not nSrcType then
		vAutoTerm:setAutoCastType(self, vDstType)
	else
		if not self:castLuaType(nSrcType, vDstType) and not vDstType:includeAll(nSrcType) then
			self:error("assign but type not match")
		end
	end
	-- TODO, maybe add some case here?
	return self:RefineTerm(vDstType)
end

function AssignContext:finish()
	assert(not self._finish, "context finish can only called once")
	self._finish = true
end

return AssignContext
