
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoFlag = require "thlua.auto.AutoFlag"
const TermTuple = require "thlua.tuple.TermTuple"
const Region = require "thlua.context.Region"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const Node = require "thlua.code.Node"
const Enum = require "thlua.Enum"

const LuaFunction = require "thlua.func.LuaFunction"
const TypeFunction = require "thlua.func.TypeFunction"
const OpenFunction = require "thlua.func.OpenFunction"
const PolyFunction = require "thlua.func.PolyFunction"
const AnyFunction = require "thlua.func.AnyFunction"
const LuaTable = require "thlua.object.LuaTable"
const MetaObject = require "thlua.object.MetaObject"
const Truth = require "thlua.type.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"
const class = require "thlua.class"

const OperContext = require "thlua.context.OperContext"
const ApplyContext = require "thlua.context.ApplyContext"
const BaseContext = require "thlua.context.BaseContext"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

const BodyContext = class@<clazz.BodyContext, false>(BaseContext)

function.open BodyContext:ctor(
	vRuntime:clazz.Runtime,
	vNode:clazz.IAstNode,
	...
)
	self._region=false@OrFalse(clazz.Region)
	self._classTable=false @ OrFalse(clazz.LuaTable)
	self._namespace=false@OrFalse(clazz.Namespace)
	self._headOper=OperContext.new(vRuntime, vNode, self)
	self._tailOper=OperContext.new(vRuntime, vNode, self)
end

--[[
function.pass Context:testLine(vNode:clazz.IAstNode, vName:String):Ret(clazz.IAstNode)
	local nInfo = debug.getinfo(2)
	if nInfo.currentline ~= vNode.l then
		print(nInfo.currentline, vNode.l, vName, vNode.tag, vNode.kind)
	end
	return vNode
end]]

function BodyContext:AUTO(vNode:clazz.IAstNode):Ret(clazz.AutoFlag)
	return AutoFlag
end

function BodyContext:setClassTable(vClassTable:clazz.LuaTable)
	self._classTable = vClassTable
end

function BodyContext:getClassTable():Ret(OrFalse(clazz.LuaTable))
	return self._classTable
end

function BodyContext:rootSetNamespace(vRootSpace:clazz.Namespace)
	assert(not self._namespace, "namespace has been setted")
	self._namespace = vRootSpace
end

function BodyContext:BEGIN(vLexContext:clazz.BodyContext, vRegionNode:clazz.IAstNode, vBodyFn:clazz.UBodyFunction, vUpCase:OrFalse(clazz.VariableCase)
):Ret(clazz.Region, clazz.SpaceTable, clazz.SpaceTable)
	assert(not self._region, "context can only begin once")
	const nRegion = Region.new(self, vBodyFn, vUpCase or VariableCase.new())
	self._region = nRegion
	const nSpace = self._runtime:LetNamespace(vLexContext:getNamespace(), vRegionNode)
	self._namespace = nSpace
	return nRegion, nSpace.localExport, nSpace.globalExport
end

-- pack explist to termtuple or lazyfunc
function BodyContext:EXPRLIST_REPACK(
	vNode:clazz.IAstNode,
	vLazy:Boolean,
	l:List(Union(clazz.UTermTuple, clazz.UAutoTerm, Fn():Ret(clazz.UAutoTerm)))
):Ret(clazz.UTermTuple):Ret(Fn():Ret(clazz.UTermTuple))
	const nPackContext = self:newOperContext(vNode)
	local reFunc:OrNil(Fn():Ret(clazz.UTermTuple))
	const nLastIndex = #l
	const nLast = l[nLastIndex]
	if not nLast then
		reFunc = function()
			return nPackContext:FixedTermTuple({})
		end
	else
		const repackWithoutLast = function():Ret(List(clazz.UAutoTerm))
			const nTermList:List(clazz.UAutoTerm) = {}
			for i=1, #l-1 do
				const cur = l[i]
				if TermTuple.is(cur) then
					if #cur ~= 1 then
						-- self._runtime:nodeWarn(vNode, "tuple expect 1 value but get "..#cur)
					end
					nTermList[i] = cur:get(nPackContext, 1)
				elseif RefineTerm.is(cur) or AutoHolder.is(cur) then
					nTermList[i] = cur
				elseif type(cur) == "function" then
					nTermList[i] = cur()
				else
					error("unexcept branch")
				end
			end
			return nTermList
		end
		-- force cast
		if TermTuple.is(nLast) then
			reFunc = function()
				return nPackContext:UTermTupleByAppend(repackWithoutLast(), nLast)
			end
		else
			reFunc = function()
				const nTermList = repackWithoutLast()
				if RefineTerm.is(nLast) or AutoHolder.is(nLast) then
					nTermList[#nTermList + 1] = nLast
				elseif type(nLast) == "function" then
					nTermList[#nTermList + 1] = nLast()
				else
					error("unexcept branch")
				end
				return nPackContext:UTermTupleByAppend(nTermList, false)
			end
		end
	end
	if vLazy then
		return reFunc
	else
		return reFunc()
	end
end

-- unpack explist to vNum term | termtuple
function BodyContext:EXPRLIST_UNPACK(
	vNode:clazz.IAstNode,
	vNum:Number,
	...:Union(clazz.RefineTerm, clazz.FixedTermTuple)
):RetDots(clazz.RefineTerm)
	const nUnpackContext = self:newOperContext(vNode)
	const l:List(Union(clazz.RefineTerm, clazz.FixedTermTuple)) = {...}
	const re:List(clazz.RefineTerm) = {}
	for i=1, vNum do
		if i > #l then
			local last = l[#l]
			if TermTuple.is(last) then
				local value = last:get(nUnpackContext, i - #l + 1)
				if not value then
					self._runtime:nodeError(vNode, "exprlist_unpack but right tuple value not enough")
					re[i] = self:RefineTerm(self._manager.type.Nil)
				else
					re[i] = value
				end
			else
				self._runtime:nodeError(vNode, "exprlist_unpack but right value not enough")
				re[i] = self:RefineTerm(self._manager.type.Nil)
			end
		else
			local cur = l[i]
			if TermTuple.is(cur) then
				if (i < #l and #cur ~= 1) then
					self._runtime:nodeWarn(vNode, "exprlist_unpack except 1 value but has "..#cur)
				end
				re[i] = cur:get(nUnpackContext, 1)
			else
				re[i] = cur
			end
		end
	end
	return table.unpack(re)
end

-- meta items
function BodyContext:META_GET(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vNotnil:Boolean
):Ret(clazz.RefineTerm)
	const nGetContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	const nOkay = self:nodePcall(vNode, function()
		vSelfTerm:foreach(function(vType, vVariableCase)
			vKeyTerm:foreach(function(vKeyType, vKeyVariableCase)
				local nReType = vType:meta_get(nGetContext, vKeyType)
				if vNotnil then
					nReType = nReType:notnilType()
				end
				nTypeCaseList[#nTypeCaseList + 1] = {nReType, vVariableCase & vKeyVariableCase}
			end)
		end)
	end)
	if nOkay then
		return self:mergeToRefineTerm(nTypeCaseList)
	else
		return self:TruthTerm()
	end
end

function BodyContext:META_SET(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vValueTerm:clazz.RefineTerm
)
	const nSetContext = self:newOperContext(vNode)
	self:nodePcall(vNode, function()
		local nNil = self._manager.type.Nil
		vSelfTerm:foreach(function(vType, _)
			vKeyTerm:foreach(function(vKeyType, _)
				vType:meta_set(nSetContext, vKeyType, vValueTerm:getType())
			end)
		end)
	end)
end

(@let.OpenPair = Struct {Union(clazz.OpenFunction, clazz.LuaFunction), clazz.UTermTuple})
function BodyContext:_applyOpen(vNode:clazz.IAstNode, vOpenPair:OpenPair, vPolyArgs:OrNil(List(clazz.UAllType))):Ret(clazz.UTermTuple)
	const nOpenPair = vOpenPair
	return nOpenPair[1]:meta_open_call(self:newOpenContext(vNode), nOpenPair[2])
end

function BodyContext:META_CALL(
	vNode:clazz.IAstNode,
	vFuncTerm:clazz.RefineTerm,
	vLazyFunc:Fn():Ret(clazz.UTermTuple)
):Ret(clazz.UTermTuple)
	local nOpenPair:OrNil(OpenPair) = nil
	local nHasSeal = false
	const nNil = self._manager.type.Nil
	const nRegion = assert(self._region, "region not setted")
	const nCallContext = self:newApplyContext(vNode)
	vFuncTerm:foreach(function(vFuncType, vVariableCase)
		local nArgTermTuple:OrNil(clazz.UTermTuple) = nil
		nRegion:withBranch(vVariableCase, function()
			nArgTermTuple = vLazyFunc()
		end)
		assert(nArgTermTuple, "must be true here")
		if vFuncType == nNil then
			self._runtime:nodeWarn(vNode, "nil as call func")
		elseif Truth.is(vFuncType) or TypeFunction.is(vFuncType) or OpenFunction.is(vFuncType) or LuaFunction.is(vFuncType) or PolyFunction.is(vFuncType) or AnyFunction.is(vFuncType) then
			if vFuncType:isOpen() then
				if not nOpenPair then
					if not nHasSeal then
						nOpenPair = {vFuncType, nArgTermTuple}
					else
						error("can't mix open function & type function")
					end
				else
					error("can't mix use open function")
				end
			else
				nCallContext:applyCall(vFuncType, nArgTermTuple, vVariableCase)
			end
		else
			self._runtime:nodeError(vNode, "TODO call by a not-function value, type="..tostring(vFuncType))
		end
	end)
	if nOpenPair then
		return self:_applyOpen(vNode, nOpenPair)
	else
		return nCallContext:mergeReturn()
	end
end

function BodyContext:META_INVOKE(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vName:String,
	vPolyArgs:List(clazz.UAllType),
	vArgTuple:clazz.FixedTermTuple
):Ret(clazz.UTermTuple)
	assert(vPolyArgs, "poly args can't be nil here")
	const nInvokeContext = self:newApplyContext(vNode)
	local nOpenPair:OrNil(OpenPair) = nil
	local nHasSeal = false
	const nNil = self._manager.type.Nil
	vSelfTerm:foreach(function(vSelfType, vVariableCase)
		if vSelfType == nNil then
			self._runtime:nodeWarn(vNode, "nil as invoke self")
		else
			const nNewArgTuple = nInvokeContext:UTermTupleByAppend({self:RefineTerm(vSelfType)}, vArgTuple)
			const nFuncType = vSelfType:meta_get_invoke(nInvokeContext, self:Literal(vName))
			nFuncType:foreach(function(vSingleFuncType)
				if vSingleFuncType == nNil then
					self._runtime:nodeWarn(vNode, "nil as invoke func")
				elseif Truth.is(vSingleFuncType) or TypeFunction.is(vSingleFuncType) or OpenFunction.is(vSingleFuncType) or LuaFunction.is(vSingleFuncType) or PolyFunction.is(vSingleFuncType) or AnyFunction.is(vSingleFuncType) then
					if vSingleFuncType:isOpen() then
						if not nOpenPair then
							if not nHasSeal then
								nOpenPair = {vSingleFuncType, nNewArgTuple}
							else
								error("can't mix open function & type function")
							end
						else
							error("can't mix use native function")
						end
					else
						nInvokeContext:applyInvoke(vSingleFuncType, nNewArgTuple, vVariableCase, vPolyArgs, vSelfType)
					end
				else
					self._runtime:nodeError(vNode, "TODO non-function-call TODO"..tostring(vSingleFuncType))
				end
			end)
		end
	end)
	if nOpenPair then
		return self:_applyOpen(vNode, nOpenPair, vPolyArgs)
	else
		-- const nRetList:FirstRetCaseList = {}
		-- const nMaxLength, nRepeatType = self:_applySeal(vNode, nFuncArgCaseList, vPolyArgs, nRetList)
		return nInvokeContext:mergeReturn()
	end
end

function BodyContext:META_EQ_NE(
	vNode:clazz.IAstNode,
	vIsEq:Boolean,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
		vRightTerm:foreach(function(vRightType, vRightVariableCase)
			local nReType:OrNil(clazz.UAtomUnion) = nil
			if vLeftType:isSingleton() and vRightType:isSingleton() then
				-- TODO check for named type
				const nTypeIsEq = vLeftType == vRightType
				if vIsEq == nTypeIsEq then
					nReType = self._manager.type.True
				else
					nReType = self._manager.type.False
				end
			elseif not (vLeftType & vRightType):isNever() then
				nReType = self._manager.type.Boolean:checkAtomUnion()
			else
				if vIsEq then
					nReType = self._manager.type.False
				else
					nReType = self._manager.type.True
				end
			end
			nTypeCaseList[#nTypeCaseList + 1] = {nReType, vLeftVariableCase & vRightVariableCase}
		end)
	end)
	return self:mergeToRefineTerm(nTypeCaseList)
end

function BodyContext:META_BOP_SOME(
	vNode:clazz.IAstNode,
	vOper:String,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nBopContext = self:newOperContext(vNode)
	const nCollection = self._manager:TypeCollection()
	vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
		const nLeftHigh, nLeftFunc = vLeftType:meta_bop_func(nBopContext, vOper)
		if nLeftHigh then
			const nRightType = vRightTerm:getType()
			const nTermTuple = nBopContext:FixedTermTuple({vLeftTerm:filter(vLeftType), vRightTerm})
			const nRetTuples = nLeftFunc:meta_call(nBopContext, nTermTuple)
			nCollection:put(nRetTuples:getFirstType())
		else
			vRightTerm:foreach(function(vRightType, vRightVariableCase)
				const nRightHigh, nRightFunc = vRightType:meta_bop_func(nBopContext, vOper)
				if nRightHigh then
					const nTermTuple = nBopContext:FixedTermTuple({vLeftTerm:filter(vLeftType), vRightTerm:filter(vRightType)})
					const nRetTuples = nRightFunc:meta_call(nBopContext, nTermTuple)
					nCollection:put(nRetTuples:getFirstType())
				else
					if nLeftFunc and nRightFunc and nLeftFunc == nRightFunc then
						const nTermTuple = nBopContext:FixedTermTuple({vLeftTerm:filter(vLeftType), vRightTerm:filter(vRightType)})
						const nRetTuples = nLeftFunc:meta_call(nBopContext, nTermTuple)
						nCollection:put(nRetTuples:getFirstType())
					else
						self._runtime:nodeError(vNode, "invalid bop:"..vOper)
					end
				end
			end)
		end
	end)
	return self:RefineTerm(nCollection:mergeToAtomUnion())
end

function BodyContext:META_UOP(
	vNode:clazz.IAstNode,
	vOper:String,
	vData:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nUopContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	if vOper == "#" then
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_len(nUopContext),
				vVariableCase
			}
		end)
	else
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_uop_some(nUopContext, vOper),
				vVariableCase
			}
		end)
	end
	return self:mergeToRefineTerm(nTypeCaseList)
end

function.open BodyContext:nodePcall(vNode:clazz.IAstNode, vFunc, ...)
	const ok, err = xpcall(vFunc, function(exc:Union(String, clazz.Exception)):Ret(clazz.Exception)
		if Exception.is(exc) then
			return exc
		else
			print("[ERROR] "..tostring(vNode), tostring(exc))
			print(debug.traceback())
			return Exception.new("[FATAL]"..tostring(exc), vNode)
		end
	end, ...)
	if not ok then
		error(err)
	end
	return ok, err
end

function BodyContext:getRegion():Ret(clazz.Region)
	return (assert(self._region, "region not create when context getRegion"))
end

function BodyContext:FUNC_NEW(vNode:clazz.IAstNode,
	vFnNewInfo:clazz.FuncNewInfo,
	vPrefixHint:clazz.TLongHintInfo(clazz.FnPrefixHint),
	vParRetMaker:clazz.GenMaker
):Ret(clazz.LuaFunction)
	const nRegion = self._region
	const nUpValueCase = nRegion and nRegion:topBranch():getCase()
	return FunctionBuilder.new(self, vNode, nUpValueCase, vFnNewInfo, vPrefixHint, vParRetMaker):build()
end

(@let.PairMaker = import("thlua.builder.TableBuilder").PairMaker)
function BodyContext:TABLE_NEW(vNode:clazz.IAstNode, vHintInfo:clazz.TLongHintInfo(clazz.TableLongHint), vPairMaker:PairMaker):Ret(clazz.LuaTable)
	local nBuilder = TableBuilder.new(self, vNode, vHintInfo, vPairMaker)
	return nBuilder:build()
end

function BodyContext:EVAL(vNode:clazz.IAstNode, vTerm:Truth):Ret(clazz.UAtomUnion)
	if RefineTerm.is(vTerm) then
		return vTerm:getType()
	else
		self:getRuntime():nodeError(vNode, "hint eval fail")
		error("hint eval fail")
	end
end

function BodyContext:CAST_HINT(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vCastKind:node.CastKindEnum, ...:Any):Ret(clazz.RefineTerm)
	const nCastContext = self:newOperContext(vNode)
	-- TODO check cast valid
	if vCastKind == Enum.CastKind_POLY then
		const nTypeCaseList:List(clazz.TypeCasePair) = {}
		const nTemplateList:List(clazz.UAllType) = self._manager:easyToTypeList(...)
		vTerm:foreach(function(vType, vVariableCase)
			const nAfterType = vType:castPoly(nCastContext, nTemplateList)
			if nAfterType then
				nTypeCaseList[#nTypeCaseList + 1] = {nAfterType, vVariableCase}
			else
				nTypeCaseList[#nTypeCaseList + 1] = {vType, vVariableCase}
			end
		end)
		return self:mergeToRefineTerm(nTypeCaseList)
	else
		if not vCastKind then
			vContext:error("unexcepted castkind:"..tostring(vCastKind))
		end
		const nDst = assert(..., "hint type can't be nil")
		const nDstType = self._manager:easyToType(nDst)
		if not nDstType:includeAll(vTerm:getType()) then
			-- self:getRuntime():nodeError(vNode, "@ cast fail")
		end
		return self:RefineTerm(nDstType)
	end
end

function BodyContext:newAutoFunction(vNode:clazz.IAstNode):Ret(clazz.AutoFunction)
	const nAutoFn = self._runtime:AutoFunction(vNode, self)
	self:getSealContext():recordAutoFunction(nAutoFn)
	return nAutoFn
end

function BodyContext:newClassFactory(vNode:clazz.IAstNode):Ret(clazz.ClassFactory)
	const nFactory = self._runtime:ClassFactory(vNode, self)
	self:getSealContext():recordClassFactory(nFactory)
	return nFactory
end

function BodyContext:newOpenContext(vNode:clazz.IAstNode):Ret(clazz.OpenContext)
	return self._runtime:OpenContext(vNode, self)
end

function BodyContext:newApplyContext(vNode:clazz.IAstNode):Ret(clazz.ApplyContext)
	return ApplyContext.new(self._runtime, vNode, self)
end

function BodyContext:newOperContext(vNode:clazz.IAstNode):Ret(clazz.OperContext)
	return OperContext.new(self._runtime, vNode, self)
end

function.pass BodyContext:getSealContext():Ret(clazz.SealContext)
	error("use body context")
end

function BodyContext:seal()
end

function BodyContext:getHeadContext():Ret(clazz.OperContext)
	return self._headOper
end

function BodyContext:getTailContext():Ret(clazz.OperContext)
	return self._tailOper
end

function BodyContext:getNamespace():Ret(clazz.Namespace)
	local nSpace = self._namespace
	return assert(nSpace, "space is false when get")
end

return BodyContext
