
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const ApplyContext = require "thlua.context.ApplyContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const NoPushContext = class@<clazz.NoPushContext, false>(ApplyContext)

function.open NoPushContext:ctor(
	...
)
	self._openForbid = false@Boolean
	self._openCalled = false@Boolean
end

function NoPushContext:pushNothing()
	if self._openCalled then
		error(Exception.new("can't mix use open function or open table and other type", self._node))
	end
	self._openForbid = true
end

function NoPushContext:openPushReturn(vTermTuple:clazz.UOpenReturn)
	if self._openForbid then
		error(Exception.new("can't mix use open function or open table and other type ", self._node))
	end
	self._openCalled = true
	self._openForbid = true
end

function NoPushContext:pushFirstAndTuple(vFirstType:clazz.UAtomUnion, vTuple:OrNil(clazz.UTypeTuple))
	self:pushNothing()
end

function NoPushContext:pushRetTuples(vRetTuples:clazz.RetTuples)
	self:pushNothing()
end

return NoPushContext
