
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const ApplyContext = require "thlua.context.ApplyContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const NoPushContext = class@<clazz.NoPushContext, false>(ApplyContext)

function NoPushContext:pushFirstAndTuple(vFirstType:clazz.UAtomUnion, vTuple:OrNil(clazz.UTypeTuple), vCase:OrNil(clazz.VariableCase))
	self:pushNothing()
end

function NoPushContext:pushRetTuples(vRetTuples:clazz.RetTuples)
	self:raiseError(vRetTuples:getErrType())
	self:pushNothing()
end

return NoPushContext
