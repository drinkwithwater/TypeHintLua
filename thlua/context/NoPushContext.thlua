
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const ApplyContext = require "thlua.context.ApplyContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const NoPushContext = class@<clazz.NoPushContext, false>(ApplyContext)

function.open NoPushContext:ctor(
	...
)
	self._openForbid = false@Boolean
	self._openReturn = false@clazz.UTermTuple
end

function NoPushContext:pushOpenReturn(vTermTuple:clazz.UTermTuple)
end

function NoPushContext:pushNormalReturn(vFirstType:clazz.UAtomUnion, vTypeTuple:OrNil(clazz.UTypeTuple))
end

function NoPushContext:pushRetTuples(vRetTuples:clazz.RetTuples)
end

return NoPushContext
