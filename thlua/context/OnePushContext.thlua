
const RefineTerm = require "thlua.term.RefineTerm"
const TermTuple = require "thlua.tuple.TermTuple"
const class = require "thlua.class"
const OpenFunction = require "thlua.type.func.OpenFunction"
const ApplyContext = require "thlua.context.ApplyContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.basic.TypeClass").clazz
end)

const OnePushContext = class@<clazz.OnePushContext, false>(ApplyContext)

function.open OnePushContext:ctor(
	_,_,_,vNotnil:Boolean
)
	self._retList = {} @ List(clazz.TypeCasePair)
	self._notnil = vNotnil
end

function OnePushContext:pushFirstAndTuple(vFirstType:clazz.UAtomUnion, vTuple:OrNil(clazz.UTypeTuple), vCase:OrNil(clazz.VariableCase))
	const nCurCase = assert(self._curCase, "[FATAL] OnePushContext push value without case")
	self._retList[#self._retList + 1] = {
		self._notnil and vFirstType:notnilType() or vFirstType, vCase and (vCase & nCurCase) or nCurCase
	}
end

function OnePushContext:pushRetTuples(vRetTuples:clazz.RetTuples)
	self:raiseError(vRetTuples:getErrType())
	self:pushFirstAndTuple(vRetTuples:getFirstType())
end

function OnePushContext:mergeFirst():Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	for _, nType1TupleCase in pairs(self._retList) do
		const nType1 = nType1TupleCase[1]
		const nCase = nType1TupleCase[2]
		nTypeCaseList[#nTypeCaseList + 1] = {
			nType1, nCase
		}
	end
	return self:mergeToRefineTerm(nTypeCaseList)
end

return OnePushContext
