
const class = require "thlua.class"
const OpenFunction = require "thlua.func.OpenFunction"
const ApplyContext = require "thlua.context.ApplyContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const OnePushContext = class@<clazz.OnePushContext, false>(ApplyContext)

(@let.TypeCaseTupleList = List(Struct {clazz.UAtomUnion, clazz.VariableCase, OrNil(clazz.UTypeTuple)}))
function.open OnePushContext:ctor(
	...
)
	self._openForbid = false@Boolean
	self._openReturn = false@clazz.UTermTuple
	self._retList = {} @ List(clazz.TypeCasePair)
	self._curCase = false @ OrFalse(clazz.VariableCase)
end

function OnePushContext:pushNothing()
	if self._openReturn then
		error(Exception.new("can't mix use open function or open table", self._node))
	end
end

function OnePushContext:withCase(vCase:OrNil(clazz.VariableCase), vFunc:Fn())
	assert(not self._curCase, "apply context case in case error")
	self._curCase = vCase or VariableCase.new()
	vFunc()
	self._curCase = false
	self._openForbid = true
end

function OnePushContext:pushOpenReturn(vTermTuple:clazz.UTermTuple)
	assert(self._curCase, "[FATAL] OnePushContext push value without case")
	if self._openForbid or self._openReturn then
		error(Exception.new("can't mix use open function or open table", self._node))
	end
	self._openReturn = vTermTuple
end

function OnePushContext:pushNormalReturn(vFirstType:clazz.UAtomUnion, vTypeTuple:OrNil(clazz.UTypeTuple))
	if self._openReturn then
		error(Exception.new("can't mix use open function or open table", self._node))
	end
	const nCase = assert(self._curCase, "[FATAL] OnePushContext push value without case")
	self._retList[#self._retList + 1] = {
		vFirstType, nCase
	}
end

function OnePushContext:pushRetTuples(vRetTuples:clazz.RetTuples)
	self:pushNormalReturn(vRetTuples:getFirstType():checkAtomUnion())
end

function OnePushContext:_mergeFirstIfNotnil(vNotnil:Boolean):Ret(clazz.RefineTerm)
	const nOpenReturn = self._openReturn
	if nOpenReturn then
		return nOpenReturn:checkFixed(self, 1)
	end
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	for _, nType1TupleCase in pairs(self._retList) do
		const nType1 = nType1TupleCase[1]
		const nCase = nType1TupleCase[2]
		nTypeCaseList[#nTypeCaseList + 1] = {
			vNotnil and nType1:notnilType() or nType1, nCase
		}
	end
	return self:mergeToRefineTerm(nTypeCaseList)
end

function OnePushContext:mergeFirst():Ret(clazz.RefineTerm)
	return self:_mergeFirstIfNotnil(false)
end

function OnePushContext:mergeFirstNotnil():Ret(clazz.RefineTerm)
	return self:_mergeFirstIfNotnil(true)
end

return OnePushContext
