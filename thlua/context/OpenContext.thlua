
const class = require "thlua.class"
const BodyContext = require "thlua.context.BodyContext"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const OpenContext = class@<clazz.OpenContext, false>(BodyContext)

function.open OpenContext:ctor(
	vRuntime:clazz.Runtime,
	vApplyNode:clazz.IAstNode,
	vParentContext:clazz.BodyContext
)
	self._inplaceOperContext = false @ OrFalse(clazz.OperContext)
	self._parentContext = vParentContext
end

function OpenContext:getSealContext():Ret(clazz.SealContext)
	return self._parentContext:getSealContext()
end

function OpenContext:operContext():Ret(clazz.OperContext)
	local nInplace = self._inplaceOperContext
	if not nInplace then
		nInplace = self:newOperContext(self._node)
		self._inplaceOperContext = nInplace
	end
	return nInplace
end

function OpenContext:getParentContext():Ret(clazz.BodyContext)
	return self._parentContext
end

return OpenContext
