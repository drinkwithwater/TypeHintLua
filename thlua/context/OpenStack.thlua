
const class = require "thlua.class"
const BaseStack = require "thlua.context.BaseStack"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const OpenStack = class@<clazz.OpenStack, false>(BaseStack)

function.open OpenStack:ctor(
	vRuntime:clazz.Runtime,
	vApplyNode:clazz.IAstNode,
	vParentContext:clazz.BaseStack
)
	self._inplaceOperContext = false @ OrFalse(clazz.OperContext)
	self._parentContext = vParentContext
end

function OpenStack:getSealStack():Ret(clazz.SealStack)
	return self._parentContext:getSealStack()
end

function OpenStack:operContext():Ret(clazz.OperContext)
	local nInplace = self._inplaceOperContext
	if not nInplace then
		nInplace = self:newOperContext(self._node)
		self._inplaceOperContext = nInplace
	end
	return nInplace
end

function OpenStack:getParentContext():Ret(clazz.BaseStack)
	return self._parentContext
end

return OpenStack
