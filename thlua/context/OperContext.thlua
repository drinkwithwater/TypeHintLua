
const class = require "thlua.class"

const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const AutoHolder = require "thlua.auto.AutoHolder"
const TypedFunction = require "thlua.func.TypedFunction"
const AutoTable = require "thlua.object.AutoTable"
const AutoFunction = require "thlua.func.AutoFunction"

const TermTuple = require "thlua.tuple.TermTuple"
const AutoFlag = require "thlua.auto.AutoFlag"
const AutoHolder = require "thlua.auto.AutoHolder"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

const OperContext = class@<clazz.OperContext, false>()

function.open OperContext:ctor(
	vNode:clazz.IAstNode,
	vStack:clazz.BaseStack,
	vManager:clazz.TypeManager,
	...
)
	self._node=vNode
	self._manager=vManager
	self._stack = vStack
end

function OperContext:UTermTupleByAppend(vTermList:List(clazz.UAutoTerm), vTermTuple:OrNil(False, clazz.UOpenReturn)):Ret(clazz.UTermTuple)
	if TermTuple.is(vTermTuple) then
		for i=1, #vTermTuple do
			const nTerm = vTermTuple:rawget(i)
			vTermList[#vTermList + 1] = nTerm
		end
		return self:UTermTupleByTail(vTermList, vTermTuple:getTail())
	else
		if vTermTuple then
			vTermList[#vTermList + 1] = vTermTuple
		end
		return self:UTermTupleByTail(vTermList, false)
	end
end

function OperContext:UTermTupleByTail(vTermList:List(clazz.UAutoTerm), vTail:OrNil(False, clazz.DotsTail, clazz.AutoTail)):Ret(clazz.UTermTuple)
	if AutoTail.is(vTail) then
		vTail = vTail:recurPutTermWithTail(vTermList)
	end
	if AutoTail.is(vTail) then
		return TermTuple.new@<true>(self, true, vTermList, vTail or false, false)
	end
	local nHasAuto = false
	if not nHasAuto then
		for i=1, #vTermList do
			const nAuto = vTermList[i]!
			if AutoHolder.is(nAuto) then
				const nTerm = nAuto:getRefineTerm()
				if not nTerm then
					nHasAuto = true
					break
				else
					vTermList[i] = nAuto
				end
			end
		end
	end
	if nHasAuto then
		return TermTuple.new@<true>(self, true, vTermList, vTail or false, false)
	else
		return TermTuple.new@<false>(self, false, vTermList @ List(clazz.RefineTerm), vTail or false, false)
	end
end

function OperContext:FixedTermTuple(vTermList:List(clazz.RefineTerm), vDotsType:OrNil(False, clazz.UAllType), vTypeTuple:OrNil(clazz.UTypeTuple)):Ret(clazz.FixedTermTuple)
	if vDotsType then
		const nTail = DotsTail.new(self, vDotsType)
		return TermTuple.new@<false>(self, false, vTermList, nTail, vTypeTuple or false)
	else
		return TermTuple.new@<false>(self, false, vTermList, false, vTypeTuple or false)
	end
end

function OperContext:AutoHolder():Ret(clazz.AutoHolder)
	return AutoHolder.new(self)
end

function OperContext:RefineTerm(vType:clazz.UAllType):Ret(clazz.RefineTerm)
	return RefineTerm.new(self._node, vType:checkAtomUnion())
end

function OperContext:NeverTerm():Ret(clazz.RefineTerm)
	return RefineTerm.new(self._node, self._manager.type.Never)
end

function OperContext:mergeToRefineTerm(vTypeCasePairList:List(clazz.TypeCasePair)):Ret(clazz.RefineTerm)
	const nKeyUnion, nTypeDict = self._manager:mergePairList@<clazz.VariableCase>(vTypeCasePairList)
	return RefineTerm.new(self._node, nKeyUnion, nTypeDict)
end

function OperContext:NilTerm():Ret(clazz.RefineTerm)
	return RefineTerm.new(self._node, self._manager.type.Nil)
end

function OperContext:error(...:Truth)
	self._stack:getRuntime():nodeError(self._node, ...)
end

function OperContext:warn(...:Truth)
	self._stack:getRuntime():nodeWarn(self._node, ...)
end

function OperContext:info(...:Truth)
	self._stack:getRuntime():nodeInfo(self._node, ...)
end

function OperContext:getNode():Ret(clazz.IAstNode)
	return self._node
end

function OperContext:getRuntime():Ret(clazz.Runtime)
	return self._stack:getRuntime()
end

function OperContext:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function OperContext:getStack()
	return self._stack
end

function OperContext:getInstStack()
	return self._stack @> clazz.InstStack
end

return OperContext
