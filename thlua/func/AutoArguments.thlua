
local Variable = require "thlua.func.Variable"

(@do
	let.class = import("thlua.type.TypeClass").class
	let.VariableOrType = Union(class.Variable, class.UAllType)
end)

local AutoArguments = {}
AutoArguments.__index=AutoArguments


function AutoArguments.new(vManager:class.TypeManager, vNode:class.IAstNode,
	vArgList:List(VariableOrType), vArgDots:VariableOrType)::RetClass(class.AutoArguments)
	if Variable.is(vArgDots) then
		-- auto TODO
		vArgDots = vManager.type.Truth
	end
	return setmetatable({::Self()
		_manager=vManager,
		_node=vNode,
		_argList=vArgList,
		_argDots=vArgDots,
	}, AutoArguments)
end

function AutoArguments:setSelf(vContext)
	local nFirst = self._argList[1]
	if Variable.is(nFirst) then
		nFirst:setSelf()
	else
		vContext:error("member function's first arg can't has hint type")
		self._argList[1] = Variable.new(self._manager, true)
	end
end

function AutoArguments:hasSelf()::Ret(Boolean)
	local nArgList = self._argList
	if #nArgList <= 0 then
		return false
	end
	local nFirst = nArgList[1]
	if Variable.is(nFirst) then
		return nFirst:isSelf()
	end
	return false
end

function AutoArguments:hasVariable()::Ret(Boolean)
	for k,v in pairs(self._argList) do
		if Variable.is(v) then
			return true
		end
	end
	return false
end

function AutoArguments:checkByFirst(vContext:class.Context, vFirst:class.UAllType)::Ret(class.UTypeTuple)
	const l:List(class.UAllType) = {}
	const nArgList = self._argList
	const nFirstArg = nArgList[1]
	if not nFirstArg then
		vContext:error("an argument maybe required here?")
		l[1] = vFirst
	else
		if Variable.is(nFirstArg) then
			l[1] = vFirst
		else
			l[1] = nFirstArg
			if not nFirstArg:containAll(vFirst) then
				vContext:error("first argument not match when cast")
			end
		end
	end
	for i=2,#nArgList do
		const nArg = nArgList[i]!
		if Variable.is(nArg) then
			l[i] = self._manager.type.Truth
		else
			l[i] = nArg
		end
	end
	const nTuple = self._manager:Tuple(table.unpack(l))
	const nArgDots = self._argDots
	if nArgDots then
		return nTuple:Dots(nArgDots)
	else
		return nTuple
	end
end

function AutoArguments:checkByDefault()::Ret(class.UTypeTuple)
	local l:List(class.UAllType) = {}
	for i, nArg in ipairs(self._argList) do
		if Variable.is(nArg) then
			l[i] = self._manager.type.Truth
		else
			l[i] = nArg
		end
	end
	local nTuple = self._manager:Tuple(table.unpack(l))
	local nArgDots = self._argDots
	if nArgDots then
		return nTuple:Dots(nArgDots)
	else
		return nTuple
	end
end

function AutoArguments:checkWhenLate(vContext)::Ret(class.UTypeTuple)
	for i, nArg in ipairs(self._argList) do
		if Variable.is(nArg) then
			error("define-fn must hint args type,"..tostring(nArg))
		end
	end
	local nTuple = self._manager:Tuple(table.unpack(self._argList))
	local nArgDots = self._argDots
	if nArgDots then
		return nTuple:Dots(nArgDots)
	else
		return nTuple
	end
end

function AutoArguments:checkWhenApply(vContext:class.UContext, vTypeTuple:class.UTypeTuple)::Ret(class.UTypeTuple)
	local l:List(class.UAllType) = {}
	if #vTypeTuple ~= #self._argList then
		vContext:getRuntime():nodeError(self._node, "arguments num not match when specification")
	end
	for i, nArg in ipairs(self._argList) do
		local nInputType = vTypeTuple:get(i)
		if Variable.is(nArg) then
			l[i] = nInputType
		else
			l[i] = nArg
			if not nArg:containAll(nInputType) then
				vContext:getRuntime():nodeError(self._node, "arguments type not match when checkout")
			end
		end
	end
	local nDotsType = self._argDots
	local nArgTuple = self._manager:Tuple(table.unpack(l))
	if nDotsType then
		return nArgTuple:Dots(nDotsType)
	else
		return nArgTuple
	end
end

return AutoArguments
