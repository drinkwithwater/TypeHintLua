
local Variable = require "thlua.func.Variable"

(@do
	var.class = import("thlua.type.TypeClass").class
	var.VariableOrType = Union(class.Variable, class.IValueType)
end)

local AutoArguments = {}
AutoArguments.__index=AutoArguments

function AutoArguments.new(vManager:class.TypeManager,
	vArgList:List(VariableOrType), vArgDots:VariableOrType)::RetNew(class.AutoArguments)
	if Variable.is(vArgDots) then
		-- auto TODO
		vArgDots = vManager.type.Truth
	end
	return setmetatable({::New()
		_manager=vManager,
		_argList=vArgList,
		_argDots=vArgDots,
	}, AutoArguments)
end

function AutoArguments:hasVariable()
	for k,v in pairs(self._argList) do
		if Variable.is(v) then
			return true
		end
	end
	return false
end

function AutoArguments:checkWhenNocheck(vContext)
	for i, nArg in ipairs(self._argList) do
		if Variable.is(nArg) then
			self._argList[i] = self._manager.type.Truth
		end
	end
	local nTuple = self._manager:Tuple(table.unpack(self._argList))
	local nArgDots = self._argDots
	if nArgDots then
		return nTuple:Dots(nArgDots)
	else
		return nTuple
	end
end

function AutoArguments:checkWhenLate(vContext)
	for i, nArg in ipairs(self._argList) do
		if Variable.is(nArg) then
			error("define-fn must hint args type,"..tostring(arg))
		end
	end
	local nTuple = self._manager:Tuple(table.unpack(self._argList))
	local nArgDots = self._argDots
	if nArgDots then
		return nTuple:Dots(nArgDots)
	else
		return nTuple
	end
end

function AutoArguments:checkWhenApply(vContext, vTypeTuple)
	local nConvertList = {}
	for i, nArg in ipairs(self._argList) do
		local nInputType = vTypeTuple:get(i)
		if Variable.is(nArg) then
			-- generic TODO
			self._argList[i] = nInputType
		end
	end
	local nDotsType = self._argDots
	local nArgTuple = self._manager:Tuple(table.unpack(self._argList))
	if nDotsType then
		return nArgTuple:Dots(nDotsType)
	else
		return nArgTuple
	end
end

return AutoArguments
