
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local FnComClass = require "thlua.func.FnComClass"

local AutoRetFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function AutoRetFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetClass(class.AutoRetFnCom, class.IFnCom)
	local self = setmetatable({::Self()
		tag=LuaFunction.AUTO_RET,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_once=false,
		_autoArgs=vLuaFunction._autoArgs,
		_argTuple=false,
		_retTuples=false,
	}, AutoRetFnCom)
	vLuaFunction:setFnCom(self)
	if not self._autoArgs:hasVariable() then
		self._argTuple = self._autoArgs:checkWhenLate(self._luaFunction._context)
	end
	return self
end

function AutoRetFnCom:checkLateRun()
	if self._once then
		return
	end
	local nArgTuple = self._argTuple
	if nArgTuple then
		local nTermTuple = nArgTuple:makeTermTuple()
		self._once = true
		self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nTermTuple)
		local nRetTuples = self._retTuples
		if not self._typeFunction then
			self._typeFunction=self._manager:Function(nArgTuple, nRetTuples)
		end
	end
end

function AutoRetFnCom:meta_call(vContext, vTypeTuple)
	local nTypeFn = self._typeFunction
	if not nTypeFn then
		local nArgTuple = self._argTuple
		if not nArgTuple then
			nArgTuple = self._autoArgs:checkWhenApply(vContext, vTypeTuple)
			self._argTuple = nArgTuple
		end
		if self._once then
			vContext:error("recursive function must set Ret")
			self._retTuples = self._manager:VoidRetTuples()
		else
			self._once = true
			self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nArgTuple:makeTermTuple())
			if not self._retTuples then
				vContext:error("set rettuples void for unexpected error")
				self._retTuples = self._manager:VoidRetTuples()
			end
		end
		nTypeFn = self._manager:Function(nArgTuple, self._retTuples)
		self._typeFunction = nTypeFn
	end
	return nTypeFn:meta_call(vContext, vTypeTuple)
end

function AutoRetFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() then
		vContext:getRuntime():nodeError(vNode, "return dots type is invalid")
	end
	local nRetTuples = self._retTuples
	if nRetTuples then
		local nOneOkay = false
		nRetTuples:foreach(function(vDstTuple)
			if vTypeTuple:castOrIn(vContext, vDstTuple) then
				nOneOkay = true
			end
		end)
		if not nOneOkay then
			vContext:getRuntime():nodeError(vNode, "return check failed")
		end
	end
end

function AutoRetFnCom:regionEnd(vContext, vNode, vTermTupleList)
	-- assert(not self._retTuples, "region end but _retTuples has been setted")
	local nRetTuples = self._retTuples
	if nRetTuples then
		return
	end
	if #vTermTupleList == 0 then
		nRetTuples = self._manager:VoidRetTuples()
	else
		nRetTuples = self._manager:SingleRetTuples(vTermTupleList[1]:getTypeTuple())
		for i=2, #vTermTupleList do
			local nTypeTuple = vTermTupleList[i]:getTypeTuple()
			nRetTuples = nRetTuples:Add(nTypeTuple)
		end
	end
	self._retTuples = nRetTuples
end

function AutoRetFnCom:cast(vContext, vDstTypeFn)::Ret(Boolean)
	if not self._typeFunction then
		assert(not self._retTuples, "TODO,cast function after called once")
		local nArgTuple = self._argTuple
		if not nArgTuple then
			nArgTuple = self._autoArgs:checkWhenApply(vContext, vDstTypeFn:getArgTuple())
			self._argTuple = nArgTuple
		end
		if not vDstTypeFn:getArgTuple():castOrIn(vContext, nArgTuple) then
			vContext:error("auto function's args not match when casting")
		end
		self._retTuples = vDstTypeFn:getRetTuples()
		-- self:meta_call(vContext, vDstTypeFn:getArgTuple())
		self._typeFunction = self._manager:Function(nArgTuple, self._retTuples)
	end
	return vDstTypeFn:contain(self._typeFunction) and true
end

return AutoRetFnCom
