
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const BaseAtomType = require "thlua.type.BaseAtomType"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const BaseFunction = class@<clazz.BaseFunction, false>(BaseAtomType)

function.open BaseFunction:ctor(vManager:clazz.TypeManager, ...)
	self.bits=TYPE_BITS.FUNCTION
end

function BaseFunction:isOpen():Ret(False)
	return false
end

function BaseFunction:native_type()
	return self._manager:Literal("function")
end

function BaseFunction:detailString(vToStringCache, vVerbose)
	return "BaseFunction"
end

function.pass BaseFunction:meta_call(vContext, vTermTuple)
	error("base function can't call meta_call")
end

function BaseFunction:fnPartType()
	return self
end

function BaseFunction:isSingleton()
	return false
end

return BaseFunction
