
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const ClassFactory = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

ClassFactory.STEP_IDLE = 1
ClassFactory.STEP_START = 2
ClassFactory.STEP_PRE_SELF = 3
ClassFactory.STEP_IN_SELF = 4
ClassFactory.STEP_POST_SELF = 5
ClassFactory.STEP_RETURN = 6

function.class ClassFactory.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction):RetClass(class.ClassFactory, class.IFnCom)
	local self = setmetatable({.class
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_refer=nil@class.Reference,
		_typeFunction=false@class.TypeFunction,
		_startSid=vManager:genSessionId(),
		_waitCoToSid={}@OrFalse(Dict(Thread, Integer)),
		_buildStep=ClassFactory.STEP_IDLE@Integer,
		_interface=false@OrFalse(class.MetaObject),
		_luaTable=false@OrFalse(class.LuaTable),
	}, ClassFactory)
	vLuaFunction:setFnCom(self)
	return self
end

function ClassFactory:createLuaTable(vContext:class.Context, vAutoArgs:class.AutoArguments, vRefer:class.Reference, vInterface:class.MetaObject):Ret(class.LuaTable)
	assert(not self._interface, "interface has beed setted")
	assert(not self._luaTable, "lua table has beed setted")
	-- 1. create lua table
	self._refer = vRefer
	self._interface = vInterface
	const nNewTable = self._manager:LuaTable()
	nNewTable:initByClassCom(self, vInterface)
	self._luaTable = nNewTable
	-- 2. create type function
	const nArgTuple = vAutoArgs:checkWhenLate(vContext)
	const nRetTuples = self._manager:SingleRetTuples(self._manager:Tuple(nNewTable))
	self._typeFunction = self._manager:Function(nArgTuple, nRetTuples)
	return nNewTable
end

function ClassFactory:tranStep(vNextStep:Integer)
	const nCurStep = self._buildStep
	if vNextStep == ClassFactory.STEP_START then
		assert(nCurStep == ClassFactory.STEP_IDLE, "class build step must be IDLE->PRE_SELF")
	elseif vNextStep == ClassFactory.STEP_PRE_SELF then
		assert(nCurStep == ClassFactory.STEP_START, "class build step must be IDLE->PRE_SELF")
	elseif vNextStep == ClassFactory.STEP_IN_SELF then
		assert(nCurStep == ClassFactory.STEP_PRE_SELF, "class build step must be PRE_SELF->IN_SELF")
	elseif vNextStep == ClassFactory.STEP_POST_SELF then
		assert(nCurStep == ClassFactory.STEP_IN_SELF, "class build step must be IN_SELF->POST_SELF")
	elseif vNextStep == ClassFactory.STEP_RETURN then
		assert(nCurStep == ClassFactory.STEP_POST_SELF, "class build step must be POST_SELF->RETURN or SELF->RETURN")
	end
	self._buildStep = vNextStep
end

function ClassFactory:runBuild()
	const co = coroutine.running()
	self._manager:coWait(co, self._startSid)
	local nContext = self._luaFunction:newInplaceOpenContext()
	local nTypeTuple = self._typeFunction:getArgTuple()
	self:tranStep(ClassFactory.STEP_PRE_SELF)
	self._luaFunction:getGenFunc()(nContext, {}, nTypeTuple:makeTermTuple())
	self:_wakeupBuild()
	self:tranStep(ClassFactory.STEP_RETURN)
end

function ClassFactory:waitBuild()
	self:startBuild()
	const nCurCo = coroutine.running()
	const nSelfCo = self._refer:getSelfCo()
	if nCurCo ~= nSelfCo then
		const nWaitCoToSid = self._waitCoToSid
		if nWaitCoToSid then
			const nSessionId = self._manager:genSessionId()
			nWaitCoToSid[nCurCo] = nSessionId
			self._manager:coWait(nCurCo, nSessionId, nSelfCo)
		end
	else
		assert(self._buildStep >= ClassFactory.STEP_POST_SELF)
	end
end

function ClassFactory:startBuild()
	if self._buildStep == ClassFactory.STEP_IDLE then
		self:tranStep(ClassFactory.STEP_START)
		const co = self._refer:getSelfCo()
		self._manager:coWakeup(co, self._startSid)
	end
end

function ClassFactory:onSetMetaTable()
	self:_wakeupBuild()
end

function ClassFactory:_wakeupBuild()
	assert(coroutine.running() == self._refer:getSelfCo(), "can only setmetatable in constructor thread")
	const nWaitCoToSid = self._waitCoToSid
	if nWaitCoToSid then
		for co, sid in pairs(nWaitCoToSid) do
			self._manager:coWakeup(co, sid)
		end
		self._waitCoToSid = false
	end
end

function ClassFactory:matchTypeFn(vContext, vTypeTuple)
	return self._typeFunction
end

function ClassFactory:regionTableSelf(vContext, vNode, vCallback)
	const nLuaTable = self:getLuaTable()
	self:tranStep(ClassFactory.STEP_IN_SELF)
	vCallback(nLuaTable)
	self:tranStep(ClassFactory.STEP_POST_SELF)
	return nLuaTable
end

function ClassFactory:getLuaTable():Ret(class.LuaTable)
	return (assert(self._luaTable, "lua table not setted"))
end

function ClassFactory:getInterface():Ret(class.MetaObject)
	return (assert(self._interface, "lua table's interface not setted"))
end

function ClassFactory:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() or #vTypeTuple~=1 then
		vContext:getRuntime():nodeError(vNode, "return tuple not match")
	else
		local aType = vTypeTuple:get(1):checkAtomUnion()
		local bType = self:getLuaTable()
		if aType ~= bType then
			vContext:getRuntime():nodeError(vNode, "return type not match")
		end
	end
end

function ClassFactory:regionEnd(vContext, vNode, vTermTupleList:List(class.TermTuple))
	if #vTermTupleList <= 0 then
		vContext:getRuntime():nodeError(vNode, "return statement not found")
	end
end

function.open ClassFactory.is(v):RetIs(class.ClassFactory)
	return getmetatable(v) == ClassFactory
end

return ClassFactory
