
const ClassTable = require "thlua.object.ClassTable"
const SealFunction = require "thlua.func.SealFunction"
const Exception = require "thlua.Exception"

const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const ClassFactory = class@<clazz.ClassFactory, false>(SealFunction)
function ClassFactory.__tostring(self:clazz.ClassFactory)
	return "class@"..tostring(self._node)
end

function.open ClassFactory:ctor(...)
	const nTask = self._task
	self._classBuildEvent=nTask:makeEvent()
	self._classTable=ClassTable.new(self._manager, self._node, self)
end

function ClassFactory:getClassTable(vWaitInit:OrNil(True)):Ret(clazz.ClassTable)
	const nTable = self._classTable
	if vWaitInit then
		nTable:waitInit()
	end
	return nTable
end

function ClassFactory:wakeupTableBuild()
	self._classBuildEvent:wakeup()
end

function ClassFactory:waitTableBuild()
	self:startTask()
	if coroutine.running() ~= self._task:getSelfCo() then
		self._classBuildEvent:wait()
	end
end

return ClassFactory
