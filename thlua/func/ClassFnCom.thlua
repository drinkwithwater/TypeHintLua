
local Reference = require "thlua.type.Reference"
local TermCase = require "thlua.term.TermCase"
local FnComClass = require "thlua.func.FnComClass"

local ClassFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function ClassFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetClass(class.ClassFnCom)
	local self = setmetatable({::Self()
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_newTypeRefer=false,
		_once=false,
		_onceHintNew=false,
	}, ClassFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function ClassFnCom:initByRetClass(vContext, vRefer)
	self._newTypeRefer = vRefer
	local nAutoArgs = self._luaFunction._autoArgs
	local nArgTuple = nAutoArgs:checkWhenLate(vContext)
	local nRetTuples = self._manager:SingleRetTuples(self._manager:Tuple(vRefer))
	self._typeFunction = self._manager:Function(nArgTuple, nRetTuples)
end

function ClassFnCom:checkDefine()
	if self._once then
		return
	end
	self._once = true
	local nLuaTable = self._newTypeRefer:checkType()
	local nContext = self._luaFunction:newInplaceContext()
	local nTypeTuple = self._typeFunction:getArgTuple()
	self._luaFunction._runFunc(nContext, nTypeTuple:makeTermTuple())
	nLuaTable:sealNew(nContext)
end

function ClassFnCom:meta_call(vContext, vTermTuple)
	self:checkDefine()
	return self._typeFunction:meta_call(vContext, vTermTuple)
end

function ClassFnCom:regionTableSelf(vContext, vNode)
	assert(not self._onceHintNew, "New() can only be called once")
	self._onceHintNew = true
	return self._newTypeRefer:checkType()
end

function ClassFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() or #vTypeTuple~=1 then
		vContext:getRuntime():nodeError(vNode, "return tuple not match")
	else
		local aType = vTypeTuple:get(1):checkType()
		local bType = self._newTypeRefer:checkType()
		if aType ~= bType then
			vContext:getRuntime():nodeError(vNode, "return type not match")
		end
	end
end

function ClassFnCom:regionEnd(vContext, vNode, vTermTupleList)
	if #vTermTupleList <= 0 then
		vContext:getRuntime():nodeError(vNode, "return statement not found")
	end
end

function ClassFnCom.is(v)::isguard(class.ClassFnCom)
	return getmetatable(v) == ClassFnCom
end

return ClassFnCom
