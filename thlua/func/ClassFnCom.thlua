
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const ClassFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

ClassFnCom.STEP_IDLE = 1
ClassFnCom.STEP_START = 2
ClassFnCom.STEP_PRE_SELF = 3
ClassFnCom.STEP_IN_SELF = 4
ClassFnCom.STEP_POST_SELF = 5
ClassFnCom.STEP_RETURN = 6

function ClassFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction, vRefer:class.Reference)::RetClass(class.ClassFnCom, class.IFnCom)
	local self = setmetatable({::Self()
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_refer=vRefer,
		_typeFunction=false@class.TypeFunction,
		_classTableCom=false@class.ClassTableCom,
		_startSid=vManager:genSessionId(),
		_waitCoToSid={}@OrFalse(Dict(Thread, Integer)),
		_buildStep=ClassFnCom.STEP_IDLE@Integer,
		_interface=false@OrFalse(class.MetaObject),
		_luaTable=false@OrFalse(class.LuaTable),
	}, ClassFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function ClassFnCom:createLuaTable(vInterface:class.MetaObject)::Ret(class.LuaTable)
	assert(not self._interface, "interface has beed setted")
	assert(not self._luaTable, "lua table has beed setted")
	const nNewTable = self._manager:LuaTable()
	self._luaTable = nNewTable
	self._interface = vInterface
	return nNewTable
end

function ClassFnCom:tranStep(vNextStep:Integer)
	const nCurStep = self._buildStep
	if vNextStep == ClassFnCom.STEP_START then
		assert(nCurStep == ClassFnCom.STEP_IDLE, "class build step must be IDLE->PRE_SELF")
	elseif vNextStep == ClassFnCom.STEP_PRE_SELF then
		assert(nCurStep == ClassFnCom.STEP_START, "class build step must be IDLE->PRE_SELF")
	elseif vNextStep == ClassFnCom.STEP_IN_SELF then
		assert(nCurStep == ClassFnCom.STEP_PRE_SELF, "class build step must be PRE_SELF->IN_SELF")
	elseif vNextStep == ClassFnCom.STEP_POST_SELF then
		assert(nCurStep == ClassFnCom.STEP_IN_SELF, "class build step must be IN_SELF->POST_SELF")
	elseif vNextStep == ClassFnCom.STEP_RETURN then
		assert(nCurStep == ClassFnCom.STEP_POST_SELF, "class build step must be POST_SELF->RETURN or SELF->RETURN")
	end
	self._buildStep = vNextStep
end

function ClassFnCom:bind(vContext:class.UContext, vTableCom:class.ClassTableCom)
	local nAutoArgs = self._luaFunction._autoArgs
	local nArgTuple = nAutoArgs:checkWhenLate(vContext)
	local nRetTuples = self._manager:SingleRetTuples(self._manager:Tuple(self:getLuaTable()))
	self._typeFunction = self._manager:Function(nArgTuple, nRetTuples)
end

function ClassFnCom:runBuild()
	const co = coroutine.running()
	self._manager:coWait(co, self._startSid)
	local nContext = self._luaFunction:newInplaceOpenContext()
	local nTypeTuple = self._typeFunction:getArgTuple()
	self:tranStep(ClassFnCom.STEP_PRE_SELF)
	self._luaFunction._runFunc(nContext, nTypeTuple:makeTermTuple())
	self:wakeupBuild()
	self:tranStep(ClassFnCom.STEP_RETURN)
end

function ClassFnCom:waitBuild()
	self:startBuild()
	const nCurCo = coroutine.running()
	const nSelfCo = self._refer:getSelfCo()
	if nCurCo ~= nSelfCo then
		const nWaitCoToSid = self._waitCoToSid
		if nWaitCoToSid then
			const nSessionId = self._manager:genSessionId()
			nWaitCoToSid[nCurCo] = nSessionId
			self._manager:coWait(nCurCo, nSessionId, nSelfCo)
		end
	else
		assert(self._buildStep >= ClassFnCom.STEP_POST_SELF)
	end
end

function ClassFnCom:startBuild()
	if self._buildStep == ClassFnCom.STEP_IDLE then
		self:tranStep(ClassFnCom.STEP_START)
		const co = self._refer:getSelfCo()
		self._manager:coWakeup(co, self._startSid)
	end
end

function ClassFnCom:wakeupBuild()
	assert(coroutine.running() == self._refer:getSelfCo(), "can only setmetatable in constructor thread")
	const nWaitCoToSid = self._waitCoToSid
	if nWaitCoToSid then
		for co, sid in pairs(nWaitCoToSid) do
			self._manager:coWakeup(co, sid)
		end
		self._waitCoToSid = false
	end
end

function ClassFnCom:matchTypeFn(vContext, vTypeTuple)
	return self._typeFunction
end

function ClassFnCom:regionTableSelf(vContext, vNode, vCallback)
	const nLuaTable = self:getLuaTable()
	self:tranStep(ClassFnCom.STEP_IN_SELF)
	vCallback(nLuaTable)
	self:tranStep(ClassFnCom.STEP_POST_SELF)
	return nLuaTable
end

function ClassFnCom:getLuaTable()::Ret(class.LuaTable)
	return (assert(self._luaTable, "lua table not setted"))
end

function ClassFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() or #vTypeTuple~=1 then
		vContext:getRuntime():nodeError(vNode, "return tuple not match")
	else
		local aType = vTypeTuple:get(1):checkAtomUnion()
		local bType = self:getLuaTable()
		if aType ~= bType then
			vContext:getRuntime():nodeError(vNode, "return type not match")
		end
	end
end

function ClassFnCom:regionEnd(vContext, vNode, vTermTupleList:List(class.TermTuple))
	if #vTermTupleList <= 0 then
		vContext:getRuntime():nodeError(vNode, "return statement not found")
	end
end

function ClassFnCom.is(v)::isguard(class.ClassFnCom)
	return getmetatable(v) == ClassFnCom
end

return ClassFnCom
