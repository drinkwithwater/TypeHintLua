
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const ClassFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

ClassFnCom.SELF_EMPTY = 1
ClassFnCom.SELF_INIT = 2
ClassFnCom.SELF_META = 3
ClassFnCom.SELF_FINISH = 3

function ClassFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction, vRefer:class.Reference)::RetClass(class.ClassFnCom, class.IFnCom)
	local self = setmetatable({::Self()
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_refer=vRefer,
		_typeFunction=false@class.TypeFunction,
		_classTableCom=false@class.ClassTableCom,
		_onceHintSelf=false@Boolean,
		_startSid=vManager:genSessionId(),
		_started=false@Boolean,
		_buildReady=false@Boolean,
		_waitCoToSid={}@Dict(Thread, Integer),
		_calledSelf=false@Boolean,
	}, ClassFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function ClassFnCom:bind(vContext:class.UContext, vTableCom:class.ClassTableCom)
	self._classTableCom = vTableCom
	local nAutoArgs = self._luaFunction._autoArgs
	local nArgTuple = nAutoArgs:checkWhenLate(vContext)
	local nRetTuples = self._manager:SingleRetTuples(self._manager:Tuple(vTableCom:getLuaTable()))
	self._typeFunction = self._manager:Function(nArgTuple, nRetTuples)
end

function ClassFnCom:runBuild()
	const co = coroutine.running()
	self._manager:coWait(co, self._startSid)
	local nContext = self._luaFunction:newInplaceOpenContext()
	local nTypeTuple = self._typeFunction:getArgTuple()
	self._luaFunction._runFunc(nContext, nTypeTuple:makeTermTuple())
	self._classTableCom:finishBuild(nContext)
end

function ClassFnCom:waitBuild()
	self:startBuild()
	const nCurCo = coroutine.running()
	const nSelfCo = self._refer:getSelfCo()
	if nCurCo ~= nSelfCo then
		if not self._buildReady then
			const nSessionId = self._manager:genSessionId()
			self._waitCoToSid[nCurCo] = nSessionId
			self._manager:coWait(nCurCo, nSessionId, nSelfCo)
		end
	else
		assert(self._calledSelf, "build a ClassTable with {Self()} before use it")
	end
end

function ClassFnCom:startBuild()
	if not self._started then
		self._started = true
		const co = self._refer:getSelfCo()
		self._manager:coWakeup(co, self._startSid)
	end
end

function ClassFnCom:finishSetMetaTable()
	assert(coroutine.running() == self._refer:getSelfCo(), "can only setmetatable in constructor thread")
	self._buildReady=true
	for co, sid in pairs(self._waitCoToSid) do
		self._manager:coWakeup(co, sid)
	end
end

function ClassFnCom:matchTypeFn(vContext, vTypeTuple)
	return self._typeFunction
end

function ClassFnCom:regionTableSelf(vContext, vNode)
	assert(not self._onceHintSelf, "Self() can only be used once")
	self._onceHintSelf = true
	return self
end

function ClassFnCom:longHintSelf()
	self._calledSelf = true
end

function ClassFnCom:getLuaTable()::Ret(class.LuaTable)
	return self._classTableCom:getLuaTable()
end

function ClassFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() or #vTypeTuple~=1 then
		vContext:getRuntime():nodeError(vNode, "return tuple not match")
	else
		local aType = vTypeTuple:get(1):checkAtomUnion()
		local bType = self._classTableCom:getLuaTable()
		if aType ~= bType then
			vContext:getRuntime():nodeError(vNode, "return type not match")
		end
	end
end

function ClassFnCom:regionEnd(vContext, vNode, vTermTupleList:List(class.TermTuple))
	if #vTermTupleList <= 0 then
		vContext:getRuntime():nodeError(vNode, "return statement not found")
	end
end

function ClassFnCom.is(v)::isguard(class.ClassFnCom)
	return getmetatable(v) == ClassFnCom
end

return ClassFnCom
