
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local FnComClass = require "thlua.func.FnComClass"

local DefaultFnCom = FnComClass()

(@var.class = import("thlua.type.TypeClass").class)

function DefaultFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetNew(class.DefaultFnCom)
	local self = setmetatable({::New()
		tag=LuaFunction.DEFAULT,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_once=false,
		_autoArgs=false,
		_retTuples=false,
	}, DefaultFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function DefaultFnCom:initByRet(vContext, vRetTuples)
	self._autoArgs = self._luaFunction._autoArgs
	self._retTuples = vRetTuples
end

function DefaultFnCom:checkLateRun()
	if self._once then
		return
	end
	self._once = true
	local nTypeFn = self._typeFunction
	if nTypeFn then
		local nTermTuple = nTypeFn:getArgTuple():makeTermTuple()
		local nRetTermTuple = self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nTermTuple)
		local nRetTypeTuple = nRetTermTuple:getTypeTuple()
		local nRetTuples = self._retTuples
		if not nRetTuples:containTuple(nRetTypeTuple) then
			self._luaFunction._context:error("return not match", nRetTuples, nRetTypeTuple)
		end
	else
		if self._autoArgs:hasVariable() then
			return
		end
		local nArgsTypeTuple = self._autoArgs:checkWhenLate(self._luaFunction._context)
		local nTermTuple = nArgsTypeTuple:makeTermTuple()
		local nRetTermTuple = self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nTermTuple)
		local nRetTypeTuple = nRetTermTuple:getTypeTuple()
		local nRetTuples = self._retTuples
		if nRetTuples then
			if not nRetTuples:containTuple(nRetTypeTuple) then
				self._luaFunction._context:error("return not match", nRetTuples, nRetTypeTuple)
			end
		else
			nRetTuples = self._manager:EmptyRetTuples():Add(nRetTypeTuple)
		end
		self._typeFunction=self._manager:Function(nArgsTypeTuple, nRetTuples)
	end
end

function DefaultFnCom:meta_call(vContext, vTypeTuple)
	if not self._typeFunction then
		local nTypeTuple = self._autoArgs:checkWhenApply(vContext, vTypeTuple)
		local nRetTuples = self._retTuples
		if nRetTuples then
			self._typeFunction = self._manager:Function(nTypeTuple, nRetTuples)
		else
			self._once = true
			-- not late function
			local nContext = self._luaFunction:newInplaceContext()
			local nRetTermTuple = self._luaFunction._runFunc(nContext, nTypeTuple:makeTermTuple())
			local nRightTypeTuple = nRetTermTuple:getTypeTuple()
			nRetTuples = self._manager:EmptyRetTuples():Add(nRightTypeTuple)
			self._typeFunction = self._manager:Function(nTypeTuple, nRetTuples)
		end
	end
	return self._typeFunction:meta_call(vContext, vTypeTuple)
end

return DefaultFnCom
