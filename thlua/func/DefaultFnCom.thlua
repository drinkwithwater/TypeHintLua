
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local FnComClass = require "thlua.func.FnComClass"

local DefaultFnCom = FnComClass()

(@var.class = import("thlua.type.TypeClass").class)

function DefaultFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetNew(class.DefaultFnCom)
	local self = setmetatable({::New()
		tag=LuaFunction.DEFAULT,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_once=false,
		_autoArgs=false,
		_argTuple=false,
		_retTuples=false,
	}, DefaultFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function DefaultFnCom:initByRet(vContext, vRetTuples)
	self._autoArgs = self._luaFunction._autoArgs
	if not self._autoArgs:hasVariable() then
		self._argTuple = self._autoArgs:checkWhenLate(self._luaFunction._context)
	end
	self._retTuples = vRetTuples
end

function DefaultFnCom:checkLateRun()
	if self._once then
		return
	end
	local nArgTuple = self._argTuple
	if nArgTuple then
		local nTermTuple = nArgTuple:makeTermTuple()
		self._once = true
		self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nTermTuple)
		local nRetTuples = self._retTuples
		if not self._typeFunction then
			self._typeFunction=self._manager:Function(nArgTuple, nRetTuples)
		end
	end
end

function DefaultFnCom:meta_call(vContext, vTypeTuple)
	local nTypeFn = self._typeFunction
	if not nTypeFn then
		local nArgTuple = self._argTuple
		if not nArgTuple then
			nArgTuple = self._autoArgs:checkWhenApply(vContext, vTypeTuple)
			self._argTuple = nArgTuple
		end
		local nRetTuples = self._retTuples
		if not nRetTuples then
			if self._once then
				vContext:error("recursive function must set Ret")
				nRetTuples = self._manager:VoidRetTuples()
			else
				local nContext = self._luaFunction:newInplaceContext()
				self._once = true
				self._luaFunction._runFunc(nContext, nArgTuple:makeTermTuple())
				nRetTuples = self._retTuples
				if not nRetTuples then
					vContext:error("set rettuples void for unexpected error")
					nRetTuples = self._manager:VoidRetTuples()
				end
			end
			self._retTuples = nRetTuples
		end
		nTypeFn = self._manager:Function(nArgTuple, nRetTuples)
		self._typeFunction = nTypeFn
		self:checkLateRun()
	end
	return nTypeFn:meta_call(vContext, vTypeTuple)
end

function DefaultFnCom:regionReturn(vContext, vNode, vTypeTuple)
	local nRetTuples = self._retTuples
	if nRetTuples then
		if not nRetTuples:containTuple(vTypeTuple) then
			vContext:nodeError(vNode, "return check failed")
		end
	end
	if vTypeTuple:getRepeatType() then
		vContext:nodeError(vNode, "return dots type")
	end
end

function DefaultFnCom:regionEnd(vContext, vNode, vTermTupleList)
	local nRetTuples = self._retTuples
	if not nRetTuples then
		if #vTermTupleList == 0 then
			nRetTuples = self._manager:VoidRetTuples()
		else
			nRetTuples = self._manager:SingleRetTuples(vTermTupleList[1]:getTypeTuple())
			for i=2, #vTermTupleList do
				local nTypeTuple = vTermTupleList[i]:getTypeTuple()
				nRetTuples = nRetTuples:Add(nTypeTuple)
			end
		end
		self._retTuples = nRetTuples
	end
end

function DefaultFnCom:cast(vContext, vDstTypeFn)::Ret(Boolean)
	if not self._typeFunction then
		self:meta_call(vContext, vDstTypeFn:getArgTuple())
	end
	return vDstTypeFn:contain(self._typeFunction) and true
end

return DefaultFnCom
