
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local FnComClass = require "thlua.func.FnComClass"

local FixedRetFnCom = FnComClass()

(@var.class = import("thlua.type.TypeClass").class)

function FixedRetFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetNew(class.FixedRetFnCom, class.IFnCom)
	local self = setmetatable({::New()
		tag=LuaFunction.FIXED_RET,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_selfOnceDict={},
		_once=false,
		_autoArgs=false,
		_retTuples=false,
		_nocheck=false,
	}, FixedRetFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function FixedRetFnCom:init(vContext, vRetTuples, vNocheck)
	self._autoArgs = self._luaFunction._autoArgs
	self._retTuples = vRetTuples
	self._nocheck = vNocheck
	local nArgTuple = self._autoArgs:checkByDefault(self._luaFunction._context)
	if self._autoArgs:hasSelf() then
		self._typeFunction = self._manager:Function(nArgTuple, self._retTuples)
	else
		self._typeFunction = self._manager:MemberFunction(nArgTuple, self._retTuples)
	end
end

function FixedRetFnCom:checkLateRun()
	if self._nocheck then
		return
	end
	if self._luaFunction:isMember() then
		for nType, nOnce in pairs(self._selfOnceDict) do
			if not nOnce then
				self._selfOnceDict[nType] = nOnce
				local nArgTuple = self._typeFunction:getArgTuple()
				nArgTuple = nArgTuple:replaceFirst(nType)
				self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nArgTuple:makeTermTuple())
			end
		end
	else
		if not self._once then
			local nArgTuple = self._typeFunction:getArgTuple()
			self._luaFunction._runFunc(self._luaFunction:newInplaceContext(), nArgTuple:makeTermTuple())
			self._once = true
		end
	end
end

function FixedRetFnCom:meta_call(vContext, vTypeTuple)
	local nTypeFn = self._typeFunction
	return nTypeFn:meta_call(vContext, vTypeTuple)
end

function FixedRetFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() then
		vContext:nodeError(vNode, "return dots type is invalid")
	end
	local nOneOkay = false
	self._retTuples:foreach(function(vDstTuple)
		if vTypeTuple:castOrIn(vContext, vDstTuple) then
			nOneOkay = true
		end
	end)
	if not nOneOkay then
		vContext:nodeError(vNode, "return check failed")
	end
end

function FixedRetFnCom:regionEnd(vContext, vNode, vTermTupleList)
	-- do nothing
end

function FixedRetFnCom:cast(vContext, vDstTypeFn)::Ret(Boolean)
	if not self._typeFunction then
		self:meta_call(vContext, vDstTypeFn:getArgTuple())
	end
	return vDstTypeFn:contain(self._typeFunction) and true
end

function FixedRetFnCom:asMemberFunction(vContext, vSelfType)
	self._selfOnceDict[vSelfType] = false
	local nArgTuple = self._typeFunction:getArgTuple()
	nArgTuple = nArgTuple:replaceFirst(vSelfType)
	return self._manager:MemberFunction(nArgTuple, self._retTuples)
end

return FixedRetFnCom
