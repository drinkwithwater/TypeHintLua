
(@do
	let.class = import("thlua.type.TypeClass").class
	class.UFnCom = Union(class.LateFnCom, class.OpenFnCom, class.ClassFactory)
	class.IFnCom = Interface {
		regionTableSelf=member:Fn(class.Context, class.IAstNode, Fn(class.LuaTable)):Ret(class.LuaTable),
		regionReturn=member:Fn(class.Context, class.IAstNode, class.UTypeTuple),
		regionEnd=member:Fn(class.Context, class.IAstNode, List(class.TermTuple)):Ret():Ret(class.TermTuple),
		matchTypeFn=member:Fn(class.Context, class.UTypeTuple):Ret(class.TypeFunction)
	}
end)


const function.open FnComClass()
	const FnCom = {}
	FnCom.__index = FnCom
	function.pass FnCom:matchTypeFn?(vContext, vTypeTuple)
		error("match type fn not implement")
	end
	function.pass FnCom:regionTableSelf?(vContext, vNode, vCallback)
		error("only .class with can take .class")
	end
	function FnCom:regionReturn?(vContext, vNode, vTypeTuple)
		error("return not implement")
	end
	function FnCom:regionEnd?(vContext, vNode, vTermTupleList)
		-- do nothing
	end
	return FnCom
end

return FnComClass
