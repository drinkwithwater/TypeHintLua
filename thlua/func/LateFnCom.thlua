
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const MemberFunction = require "thlua.func.MemberFunction"
const TypeFunction = require "thlua.func.TypeFunction"

const LateFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class LateFnCom.new(vManager:class.TypeManager,
	vLuaFunction:class.LuaFunction,
	vDefaultFn:OrFalse(class.UDefaultFunction),
	vPass:Boolean
):RetClass(class.LateFnCom, class.IFnCom)
	local self = setmetatable({.class
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_defaultFn=vDefaultFn,
		_selfSpecDict={}@Dict(class.LuaTable, class.TypeFunction),
		_castSpecList={}@List(class.TypeFunction),
		_once=false@Boolean,
		_pass=vPass,
	}, LateFnCom)
	return self
end

function LateFnCom:checkLateRun()
	if self._pass then
		return
	end
	if self._once then
		print("error, checkLateRun called more than once")
		return
	end
	self._once = true
	const nSpecFnList:List(class.TypeFunction) = {}
	-- 1. cast fn
	const nCastFn = self._castSpecList[1]
	if nCastFn then
		nSpecFnList[#nSpecFnList + 1] = nCastFn
		const nList = self._castSpecList
		for i=2,#nList do
			const nTypeFn = nList[i]!
			if not nCastFn:containAll(nTypeFn) then
				nSpecFnList[#nSpecFnList + 1] = nTypeFn
				print("polymorphism cast TODO")
			end
		end
	end
	-- 2. default fn
	const nDefaultFn = self._defaultFn
	if MemberFunction.is(nDefaultFn) then
		const nTypeFnDict = nDefaultFn:getTypeFnDict()
		for _, nTypeFn in pairs(nTypeFnDict) do
			nSpecFnList[#nSpecFnList + 1] = nTypeFn
		end
	elseif TypeFunction.is(nDefaultFn) then
		nSpecFnList[#nSpecFnList + 1] = nDefaultFn
	elseif nDefaultFn then
		print("poly function lateRun TODO", tostring(self._luaFunction:getNode()))
	else
		if #self._castSpecList <= 0 then
			-- print("function no cast and no default", tostring(self._luaFunction:getNode()))
		end
		-- nDefaultFn is false
	end
	for _, nTypeFn in ipairs(nSpecFnList) do
		const nParTuple = nTypeFn:getParTuple()
		const nInplaceContext = self._luaFunction:newInplaceSealContext()
		nInplaceContext:setTypeFn(nTypeFn)
		const ok, err = pcall(function():Ret()
			self._luaFunction:getGenFunc()(nInplaceContext, nParTuple:makeTermTuple(), {}, false)
		end)
		if not ok then
			nInplaceContext:error(tostring(err))
		end
	end
end

function LateFnCom:matchTypeFn(vContext, vTypeTuple)
	const nFn = self._defaultFn
	assert(TypeFunction.is(nFn), "only default type function can be called")
	return nFn
end

function LateFnCom:regionReturn(vContext, vNode, vRetTypeTuple)
	if vRetTypeTuple:getRepeatType() then
		vContext:getRuntime():nodeError(vNode, "return dots type is invalid")
	end
	local nOneOkay = false
	local nRetTuples = assert(vContext:getTypeFn(), "LateFnCom's context must set TypeFn"):getRetTuples()
	assert(nRetTuples, "ret tuples not setted when return")
	nRetTuples:foreachWithFirst(function(vDstTuple, _)
		if vRetTypeTuple:castOrIn(vContext, vDstTuple) then
			nOneOkay = true
		end
	end)
	if not nOneOkay then
		vContext:getRuntime():nodeError(vNode, "return check failed")
	end
end

function LateFnCom:regionEnd(vContext, vNode, vTermTupleList)
	-- do nothing
end

function LateFnCom:getDefaultFn():Ret(OrFalse(class.UDefaultFunction))
	return self._defaultFn
end

function LateFnCom:addSpecFn(vTypeFn:class.TypeFunction, vSelfType:OrNil(class.LuaTable))
	if vSelfType then
		self._selfSpecDict[vSelfType] = vTypeFn
	else
		const nList = self._castSpecList
		nList[#nList + 1] = vTypeFn
	end
end

function.open LateFnCom.is(v):RetIs(class.LateFnCom)
	return getmetatable(v) == LateFnCom
end

return LateFnCom
