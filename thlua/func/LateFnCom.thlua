
local TermCase = require "thlua.term.TermCase"
local FnComClass = require "thlua.func.FnComClass"

local LateFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function LateFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetClass(class.LateFnCom)
	local self = setmetatable({::Self()
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
		_selfOnceDict={},
		_once=false,
		_autoArgs=nil@class.AutoArguments,
		_retTuples=false@Union(False, class.RetTuples),
		_nocheck=false@Boolean,
	}, LateFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function LateFnCom:init(vRetTuples:Union(False, class.RetTuples), vNocheck:Boolean)
	self._autoArgs = self._luaFunction._autoArgs
	self._retTuples = vRetTuples or false
	self._nocheck = vNocheck
end

function LateFnCom:checkLateRun()
	if self._nocheck then
		return
	end
	self:_typeDefault()
	if self._luaFunction:isMember() then
		for nType, nOnce in pairs(self._selfOnceDict) do
			if not nOnce then
				self._selfOnceDict[nType] = true
				local nArgTuple = self._typeFunction:getArgTuple()
				nArgTuple = nArgTuple:replaceFirst(nType)
				local nInplaceContext = self._luaFunction:newInplaceContext()
				local ok, err = pcall(function()
					self._luaFunction._runFunc(nInplaceContext, nArgTuple:makeTermTuple())
				end)
				if not ok then
					nInplaceContext:error(tostring(err))
				end
			end
		end
	else
		if not self._once then
			self._once = true
			local nArgTuple = self._typeFunction:getArgTuple()
			local nInplaceContext = self._luaFunction:newInplaceContext()
			local ok, err = pcall(function()
				self._luaFunction._runFunc(nInplaceContext, nArgTuple:makeTermTuple())
			end)
			if not ok then
				nInplaceContext:error(tostring(err))
			end
		end
	end
end

function LateFnCom:meta_call(vContext, vTypeTuple)
	if not self._typeFunction then
		self:_typeDefault()
	end
	local nTypeFn = self._typeFunction
	return nTypeFn:meta_call(vContext, vTypeTuple)
end

function LateFnCom:regionReturn(vContext, vNode, vTypeTuple)
	if vTypeTuple:getRepeatType() then
		vContext:getRuntime():nodeError(vNode, "return dots type is invalid")
	end
	local nOneOkay = false
	self._retTuples:foreach(function(vDstTuple)
		if vTypeTuple:castOrIn(vContext, vDstTuple) then
			nOneOkay = true
		end
	end)
	if not nOneOkay then
		vContext:getRuntime():nodeError(vNode, "return check failed")
	end
end

function LateFnCom:regionEnd(vContext, vNode, vTermTupleList)
	-- do nothing
end

function LateFnCom:cast(vContext, vDstTypeFn:class.TypeFunction)::Ret(Boolean)
	if not self._typeFunction then
		local nArgTuple = self._autoArgs:checkWhenApply(vContext, vDstTypeFn:getArgTuple())
		self._retTuples = self._retTuples or vDstTypeFn:getRetTuples()
		self._typeFunction = self._manager:Function(nArgTuple, self._retTuples or vDstTypeFn:getRetTuples())
	end
	return vDstTypeFn:contain(self._typeFunction) and true
end

function LateFnCom:_typeDefault()
	if not self._typeFunction then
		local nArgTuple = self._autoArgs:checkByDefault(vContext)
		self._retTuples = self._retTuples or self._manager:VoidRetTuples()
		self._typeFunction = self._manager:MemberFunction(nArgTuple, self._retTuples)
	end
end

function LateFnCom:implement(vContext, vSelfType, vIntfFnOrNil)
	self._selfOnceDict[vSelfType] = false
	if vIntfFnOrNil then
		self._autoArgs:checkWhenApply(vContext, vIntfFnOrNil:getArgTuple())
		self._typeFunction = vIntfFnOrNil
		self._retTuples = self._retTuples or vIntfFnOrNil:getRetTuples()
	else
		self:_typeDefault()
	end
	local nArgTuple = self._typeFunction:getArgTuple()
	return self._manager:MemberFunction(nArgTuple, self._retTuples)
end

function LateFnCom.is(v)::isguard(class.LateFnCom)
	return getmetatable(v) == LateFnCom
end

return LateFnCom
