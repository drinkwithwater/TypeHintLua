
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const Exception = require "thlua.Exception"

const OpenFnCom = require "thlua.func.OpenFnCom"
const LateFnCom = require "thlua.func.LateFnCom"
const ClassFnCom = require "thlua.func.ClassFnCom"

const LuaFunction = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function LuaFunction.new(vManager:class.TypeManager)::RetClass(class.LuaFunction, class.IAtomType)
	local self = setmetatable({::Self()
		_manager=vManager,
		_context=false@class.UContext,
		_node=false@class.IAstNode,
		_runFunc=false@class.GenFunc,
		_autoArgs=false@class.AutoArguments,
		bits=TYPE_BITS.FUNCTION,
		name="unknown"@String,
		id=vManager:genTypeId(),
	}, LuaFunction)
	self._unionFnCom=nil@class.UFnCom
	return self
end

function LuaFunction:setFnCom(vUnionTagFn:class.UFnCom)
	self._unionFnCom = vUnionTagFn
end

function LuaFunction:init(vContext:class.UContext, vNode:class.IAstNode, vAutoArgs:class.AutoArguments, vRunFunc:class.GenFunc)
	self._context = vContext
	self._node = vNode
	self._runFunc = vRunFunc
	self._autoArgs = vAutoArgs
	self.name = tostring(vNode)
end

function LuaFunction:newInplaceSealContext()::Ret(class.Context)
	return self._context:newSealContext(self._node)
end

function LuaFunction:newInplaceOpenContext()::Ret(class.Context)
	return self._context:newOpenContext(self._node)
end

function LuaFunction:isNative()::Ret(Boolean)
	return OpenFnCom.is(self._unionFnCom)
end

function LuaFunction:detailString(v, vVerbose)
	return "LuaFunction-"..self.name
end

function LuaFunction:getFnCom()::Ret(class.UFnCom)
	return self._unionFnCom
end

function LuaFunction:meta_native_call(vContext:class.Context, vTermTuple:class.TermTuple)::Ret(class.TermTuple)
	local nFnCom = self._unionFnCom
	if OpenFnCom.is(nFnCom) then
		return nFnCom:meta_native_call(vContext, vTermTuple)
	else
		error("only open or native fn can call meta_native_call")
	end
end

function LuaFunction:meta_call(vContext, vTypeTuple)
	local nFnCom = self._unionFnCom
	if not OpenFnCom.is(nFnCom) then
		return nFnCom:meta_call(vContext, vTypeTuple)
	else
		error("open fn can't call meta_call")
	end
end

function LuaFunction:intersectAtom(vType)
	if vType == self then
		return self
	elseif vType:containAtom(self) then
		return self
	else
		return false
	end
end

function LuaFunction:assumeContainAtom(vAssumeSet, vType)
	if vType == self then
		return self
	else
		return false
	end
end

function LuaFunction:isSingleton()
	return false
end

function LuaFunction:native_type()
	return self._manager:Literal("function")
end

function LuaFunction:cast(vContext:class.Context, vTypeFn:class.TypeFunction)::Ret(OrFalse(class.TypeFunction))
	local nUnionFnCom = self._unionFnCom
	if LateFnCom.is(nUnionFnCom) then
		return nUnionFnCom:castSpecialize(vContext, vTypeFn)
	else
		return false
	end
end

function LuaFunction:specialize(vContext:class.Context, vSelfType:class.LuaTable, vIntfFnOrNil:OrNil(class.TypeFunction))::Ret(class.TypeFunction)
	local nUnionCom = self._unionFnCom
	assert(LateFnCom.is(nUnionCom), "only LateFnCom can specificate")
	return nUnionCom:selfSpecialize(vContext, vSelfType, vIntfFnOrNil)
end

function LuaFunction:isMember()::Ret(Boolean)
	return self._autoArgs:hasSelf() and LateFnCom.is(self._unionFnCom)
end

function LuaFunction:fnPartType()
	return self
end

function LuaFunction:getNode()::Ret(class.IAstNode)
	return self._node
end

function LuaFunction.is(vType)::isguard(class.LuaFunction)
	return getmetatable(vType) == LuaFunction
end

return LuaFunction
