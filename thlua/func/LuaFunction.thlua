
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"
local Exception = require "thlua.Exception"

local LuaFunction = AtomTypeClass()

(@var.class = import("thlua.type.TypeClass").class)

LuaFunction.OPEN="open"

LuaFunction.NOCHECK="nocheck"

LuaFunction.NEW="new"

LuaFunction.DEFAULT="default"


function LuaFunction.new(vManager:class.TypeManager)::RetNew(class.LuaFunction, class.IAtomType)
	local self = setmetatable({::New()
		_manager=vManager,
		_context=false,
		_node=false,
		_unionFnCom=false,
		_runFunc=false,
		_autoArgs=false,
		bits=TYPE_BITS.FUNCTION,
		name="unknown",
		id=vManager:genTypeId(),
	}, LuaFunction)
	return self
end

function LuaFunction:setFnCom(vUnionTagFn)
	self._unionFnCom = vUnionTagFn
end

function LuaFunction:init(vContext, vNode, vAutoArgs, vRunFunc)
	self._context = vContext
	self._node = vNode
	self._runFunc = vRunFunc
	self._autoArgs = vAutoArgs
	self.name = tostring(vNode)
end

function LuaFunction:newInplaceContext()
	return self._context:newContext(self._node)
end

function LuaFunction:isNative()
	local nTag = self._unionFnCom.tag
	return nTag == LuaFunction.OPEN
end

function LuaFunction:detailString(v)
	return "LuaFunction-"..self._unionFnCom.tag.."-"..self.name
end

function LuaFunction:getFnCom()
	return self._unionFnCom
end

-- TODO
function LuaFunction:getPath()
	return self.name
end

function LuaFunction:meta_native_call(vContext, vTermTuple)
	local nTagFn = self._unionFnCom
	if nTagFn.tag == LuaFunction.OPEN then
		return nTagFn:meta_native_call(vContext, vTermTuple)
	else
		error("only native fn can call meta_native_call")
	end
end

function LuaFunction:meta_call(vContext, vTypeTuple)
	return self._unionFnCom:meta_call(vContext, vTypeTuple)
end

function LuaFunction:_intersectOneNotRefer(vType)
	if vType == self then
		return self
	elseif vType:_containOneNotRefer(self) then
		return self
	else
		return false
	end
end

function LuaFunction:_containOneNotRefer(vType)
	if vType == self then
		return self
	else
		return false
	end
end

function LuaFunction:isSingleton()
	return false
end

function LuaFunction:native_type()
	return self._manager:Literal("function")
end

function LuaFunction:cast(vContext, vTypeFn)::Ret(Boolean)
	return self._unionFnCom:cast(vContext, vTypeFn)
end

return LuaFunction
