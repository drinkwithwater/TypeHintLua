
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const TypedFunction = require "thlua.func.TypedFunction"
const PolyFunction = require "thlua.func.PolyFunction"
const AutoFunction = require "thlua.func.AutoFunction"
const BaseFunction = require "thlua.func.BaseFunction"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const MemberFunction = class@<clazz.MemberFunction, false>(BaseFunction)

function.open MemberFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, ...)
	self._node = vNode
end

function MemberFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return ""
end

return MemberFunction
