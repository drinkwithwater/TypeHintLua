
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local NocheckFnCom = {}
NocheckFnCom.__index=NocheckFnCom

(@var.class = import("thlua.type.TypeClass").class)

function NocheckFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetNew(class.NocheckFnCom)
	local self = setmetatable({::New()
		tag=LuaFunction.NOCHECK,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_typeFunction=false,
	}, NocheckFnCom)
	vLuaFunction:setUnionFn(self)
	return self
end

function NocheckFnCom:setTypeFn(vTypeFunction)
	self._typeFunction=vTypeFunction
end

function NocheckFnCom:meta_call(vContext, vTermTuple)
	return self._typeFunction:meta_call(vContext, vTermTuple)
end

return NocheckFnCom
