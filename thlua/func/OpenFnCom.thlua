
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const OpenFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class OpenFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction):RetClass(class.OpenFnCom, class.IFnCom)
	local self = setmetatable({.class
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_nativeFunction=false@class.NativeFunction,
	}, OpenFnCom)
	return self
end

function OpenFnCom:initByOpen()
	self._nativeFunction = self._manager:NativeFunction(function(vContext, vTermTuple)
		return self._luaFunction:getGenFunc()(vContext, {}, vTermTuple)
	end)
end

function OpenFnCom:initByGuard(vContext:class.Context, vType:class.UAllType)
	local nTrue = self._manager.type.True
	local nFalse = self._manager.type.False
	self._nativeFunction=self._manager:NativeFunction(function(vContext, vTermTuple)
		const nIsLuaTable, nTableType = self._manager:tryLuaTable(vType)
		assert(nIsLuaTable, "assert lua table failed")
		local nTerm = vTermTuple:get(1)
		local caseTrue = nTerm:caseIsType(nTableType)
		local caseFalse = nTerm:caseIsNotType(nTableType)
		local nTypeCaseList:List(class.TypeCasePair) = {}
		if caseTrue then
			nTypeCaseList[#nTypeCaseList + 1] = {nTrue, caseTrue}
		end
		if caseFalse then
			nTypeCaseList[#nTypeCaseList + 1] = {nFalse, caseFalse}
		end
		return self._manager:TermTuple({self._manager:mergeToRefineTerm(nTypeCaseList)})
	end)
end

function OpenFnCom:meta_open_call(vContext:class.Context, vTermTuple:class.TermTuple):Ret(class.TermTuple)
	return self._nativeFunction:meta_open_call(vContext, vTermTuple)
end

function OpenFnCom:regionReturn(vContext, vNode, vTypeTuple)
	-- do nothing
end

function OpenFnCom:regionEnd(vContext, vNode, vTermTupleList)
	local nLen = #vTermTupleList
	if nLen == 0 then
		return vContext:TermTuple({})
	elseif nLen == 1 then
		return vTermTupleList[1]
	else
		local retTermTuple = vTermTupleList[1]!
		for i=2,nLen do
			retTermTuple = retTermTuple | vTermTupleList[i]!
		end
		return retTermTuple
	end
end

function.open OpenFnCom.is(v):RetIs(class.OpenFnCom)
	return getmetatable(v) == OpenFnCom
end

return OpenFnCom
