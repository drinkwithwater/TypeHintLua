
const TermCase = require "thlua.term.TermCase"
const FnComClass = require "thlua.func.FnComClass"

const OpenFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class OpenFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction):RetClass(class.OpenFnCom, class.IFnCom)
	local self = setmetatable({.class
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_openFunction=false@class.OpenFunction,
	}, OpenFnCom)
	return self
end

function OpenFnCom:initByOpen(vGenFunc:class.GenFunc)
	self._openFunction = self._manager:OpenFunction():lateInitFromGenFunc(vGenFunc)
end

function OpenFnCom:initByGuard(vContext:class.Context, vType:class.UAllType)
	self._openFunction=self._manager:OpenFunction():lateInitFromGuard(vType)
end

function OpenFnCom:meta_open_call(vContext:class.Context, vTermTuple:class.TermTuple):Ret(class.TermTuple)
	return self._openFunction:meta_open_call(vContext, vTermTuple)
end

function OpenFnCom:regionReturn(vContext, vNode, vTypeTuple)
	-- do nothing
end

function OpenFnCom:regionEnd(vContext, vNode, vTermTupleList)
	local nLen = #vTermTupleList
	if nLen == 0 then
		return vContext:TermTuple({})
	elseif nLen == 1 then
		return vTermTupleList[1]
	else
		local retTermTuple = vTermTupleList[1]!
		for i=2,nLen do
			retTermTuple = retTermTuple | vTermTupleList[i]!
		end
		return retTermTuple
	end
end

function.open OpenFnCom.is(v):RetIs(class.OpenFnCom)
	return getmetatable(v) == OpenFnCom
end

return OpenFnCom
