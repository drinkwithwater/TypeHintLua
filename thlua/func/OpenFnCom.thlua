
local TermCase = require "thlua.term.TermCase"
local LuaFunction = require "thlua.func.LuaFunction"
local OpenFnCom = {}
OpenFnCom.__index=OpenFnCom

(@var.class = import("thlua.type.TypeClass").class)

function OpenFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetNew(class.OpenFnCom)
	local self = setmetatable({::New()
		tag=LuaFunction.OPEN,
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_nativeFunction=false,
	}, OpenFnCom)
	vLuaFunction:setUnionFn(self)
	return self
end

function OpenFnCom:initByOpen(vContext)
	self._nativeFunction = self._manager:NativeFunction(self._luaFunction._runFunc)
end

function OpenFnCom:initByGuard(vContext, vType)
	local nTrue = self._manager.type.True
	local nFalse = self._manager.type.False
	self._nativeFunction=self._manager:NativeFunction(function(vContext, vTermTuple)
		-- TODO isguard add refinement
		local nTerm = vTermTuple:get(1)
		local caseTrue = TermCase.new()
		caseTrue:put_and(nTerm, vType)
		local nTypeCaseList = {
			{nTrue, caseTrue},
			{nFalse, TermCase.new()},
		}
		return self._manager:mergeToUnionTerm(nTypeCaseList)
	end)
end

function OpenFnCom:meta_native_call(vContext, vTermTuple)
	return self._nativeFunction:meta_native_call(vContext, vTermTuple)
end

return OpenFnCom
