
local TermCase = require "thlua.term.TermCase"
local FnComClass = require "thlua.func.FnComClass"

local OpenFnCom = FnComClass()

(@let.class = import("thlua.type.TypeClass").class)

function OpenFnCom.new(vManager:class.TypeManager, vLuaFunction:class.LuaFunction)::RetClass(class.OpenFnCom)
	local self = setmetatable({::Self()
		_manager=vManager,
		_luaFunction=vLuaFunction,
		_nativeFunction=false@class.NativeFunction,
	}, OpenFnCom)
	vLuaFunction:setFnCom(self)
	return self
end

function OpenFnCom:initByOpen()
	self._nativeFunction = self._manager:NativeFunction(self._luaFunction._runFunc)
end

function OpenFnCom:initByGuard(vContext, vType)
	local nTrue = self._manager.type.True
	local nFalse = self._manager.type.False
	self._nativeFunction=self._manager:NativeFunction(function(vContext, vTermTuple)
		-- TODO isguard add refinement
		local nTerm = vTermTuple:get(1)
		local caseTrue = TermCase.new()
		caseTrue:put_and(nTerm, vType)
		local nTypeCaseList = {
			{nTrue, caseTrue},
			{nFalse, TermCase.new()},
		}
		return self._manager:TermTuple({self._manager:mergeToUnionTerm(nTypeCaseList)})
	end)
end

function OpenFnCom:meta_native_call(vContext, vTermTuple)
	return self._nativeFunction:meta_native_call(vContext, vTermTuple)
end

function OpenFnCom:regionReturn(vContext, vNode, vTypeTuple)
	-- do nothing
end

function OpenFnCom:regionEnd(vContext, vNode, vTermTupleList)
	local nLen = #vTermTupleList
	if nLen == 0 then
		return vContext:TermTuple({})
	elseif nLen == 1 then
		return vTermTupleList[1]
	else
		local retTermTuple = vTermTupleList[1]
		for i=2,nLen do
			retTermTuple = retTermTuple | vTermTupleList[i]
		end
		return retTermTuple
	end
end

function OpenFnCom.is(v)::isguard(class.OpenFnCom)
	return getmetatable(v) == OpenFnCom
end

return OpenFnCom
