
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const TermTuple = require "thlua.tuple.TermTuple"

const OpenFunction = AtomTypeClass()

(@let.clazz = import("thlua.type.TypeClass").clazz)

function:class(clazz.OpenFunction) OpenFunction.new(
	vManager:clazz.TypeManager,
	vFunc:OrNil(clazz.OpenCaller)
):impl(clazz.IAtomType)
	const self = setmetatable({.class
		_manager=vManager,
		_func=vFunc,
		_polyParNum=0@Integer,
		name="unknown"@String,
		bits=TYPE_BITS.FUNCTION,
		id=vManager:genTypeId(),
	}, OpenFunction)
	return self
end

function OpenFunction:lateInitFromGenFunc(vGenFunc:clazz.GenFunc):Ret(clazz.OpenFunction)
	const nFn:clazz.OpenCaller = function(vContext, vTermTuple)
		return vGenFunc(self, vContext, vTermTuple, {}, false)
	end
	self._func = nFn
	return self
end

function OpenFunction:lateInitFromGuard(vType:clazz.UAllType):Ret(clazz.OpenFunction)
	const nTrue = self._manager.type.True
	const nFalse = self._manager.type.False
	const nFn:clazz.OpenCaller = function(vContext, vTermTuple)
		const nIsLuaTable, nTableType = self._manager:tryLuaTable(vType)
		assert(nIsLuaTable, "assert lua table failed")
		local nTerm = vTermTuple:get(1)
		local caseTrue = nTerm:caseIsType(nTableType)
		local caseFalse = nTerm:caseIsNotType(nTableType)
		local nTypeCaseList:List(clazz.TypeCasePair) = {}
		if caseTrue then
			nTypeCaseList[#nTypeCaseList + 1] = {nTrue, caseTrue}
		end
		if caseFalse then
			nTypeCaseList[#nTypeCaseList + 1] = {nFalse, caseFalse}
		end
		return self._manager:TermTuple({self._manager:mergeToRefineTerm(nTypeCaseList)})
	end
	self._func = nFn
	return self
end

function OpenFunction:isOpen():Ret(True)
	return true
end

function OpenFunction:detailString(v, vVerbose)
	return "OpenFunction-"..self.name
end

function OpenFunction:set_name(name:String)
	self.name = name
end

function OpenFunction:meta_open_call(vContext:clazz.Context, vTermTuple:clazz.TermTuple):Ret(clazz.TermTuple)
	local re = self._func!(vContext, vTermTuple)
	if TermTuple.is(re) then
		return re
	else
		return self._manager:TermTuple({re})
	end
end

function OpenFunction:assumeIntersectAtom(vAssumeSet, vType)
	if vType == self then
		return self
	else
		return false
	end
end

function OpenFunction:assumeContainAtom(vAssumeSet, vType)
	if vType == self then
		return self
	else
		return false
	end
end

function OpenFunction:fnPartType()
	return self
end

function OpenFunction:isSingleton()
	return true
end

function OpenFunction:mayRecursive()
	return true
end

function.open OpenFunction.is(vType):isguard(clazz.OpenFunction)
	return getmetatable(vType) == OpenFunction
end

return OpenFunction
