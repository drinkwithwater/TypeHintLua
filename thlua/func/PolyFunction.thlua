
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const TypeFunction = require "thlua.func.TypeFunction"
const AutoFunction = require "thlua.refer.AutoFunction"

const PolyFunction = AtomTypeClass()

(@let.clazz = import("thlua.type.TypeClass").clazz)

function:class(clazz.PolyFunction) PolyFunction.new(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vFunc:AnyFunction, vPolyParNum:Integer):impl(clazz.IAtomType)
	local self = setmetatable({.class
		_manager=vManager,
		_polyParNum=vPolyParNum,
		_innerFunc=vFunc,
		_fnDict = {} @ Dict(String, Union(clazz.TypeFunction, clazz.AutoFunction)),
		bits=TYPE_BITS.FUNCTION,
		id=vManager:genTypeId(),
	}, PolyFunction)
	return self
end

function PolyFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return "PolyFunction"
end

function PolyFunction:isOpen():Ret(False)
	return false
end

function PolyFunction:getPolyParNum():Ret(Integer)
	return self._polyParNum
end

function PolyFunction:noCtxCastPoly(vTypeList:List(clazz.UAllType)):Ret(Union(clazz.TypeFunction, clazz.AutoFunction))
	assert(#vTypeList == self._polyParNum, "PolyFunction type args num not match")
	const nAtomUnionList:List(clazz.UAtomUnion) = {}
	for i=1, #vTypeList do
		nAtomUnionList[i] = vTypeList[i]!:checkAtomUnion()
	end
	const nKey = self._manager:signTemplateArgs(nAtomUnionList)
	const nFn = self._fnDict[nKey]
	if not nFn then
		const nResult = (self._innerFunc(table.unpack(vTypeList)) @ Any)
		if (not TypeFunction.is(nResult)) and (not AutoFunction.is(nResult)) then
			error("poly function must return Fn type but got:"..tostring(nResult))
		end
		self._fnDict[nKey] = nResult
		return nResult
	else
		return nFn
	end
end

function PolyFunction:castPoly(vContext, vTypeList)
	const nFn = self:noCtxCastPoly(vTypeList)
	if AutoFunction.is(nFn) then
		return nFn:getFnAwait()
	else
		return nFn
	end
end

function PolyFunction:native_type()
	return self._manager:Literal("function")
end

function PolyFunction:meta_call(vContext, vTypeTuple)
	error("poly function meta_call TODO")
	-- TODO
end

function PolyFunction:assumeIncludeAtom(vAssumeSet, vRight)
	return self == vRight and self
end

function PolyFunction:assumeIntersectAtom(vAssumeSet, vRight)
	return self == vRight and self
end

function PolyFunction:fnPartType()
	return self
end

function PolyFunction:mayRecursive()
	return false
end

function PolyFunction:isSingleton()
	return false
end

function.open PolyFunction.is(vType):isguard(clazz.PolyFunction)
	return getmetatable(vType) == PolyFunction
end

return PolyFunction
