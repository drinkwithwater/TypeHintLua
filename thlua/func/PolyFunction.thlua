
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"
const AtomTypeClass = require "thlua.type.AtomTypeClass"

const MonoFunction = require "thlua.func.MonoFunction"
const BaseFunction = require "thlua.func.BaseFunction"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const PolyFunction = class@<clazz.PolyFunction, false>(BaseFunction)

function.open PolyFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vFunc:AnyFunction, vPolyParNum:Integer)
	self._polyParNum=vPolyParNum
	self._makerFn=vFunc
	self._fnDict = {} @ Dict(String, clazz.MonoFunction)
end

function PolyFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return "PolyFunction"
end

function PolyFunction:isOpen():Ret(False)
	return false
end

function PolyFunction:getPolyParNum():Ret(Integer)
	return self._polyParNum
end

function PolyFunction:noCtxCastPoly(vTypeList:List(clazz.UAllType)):Ret(clazz.MonoFunction)
	assert(#vTypeList == self._polyParNum, "PolyFunction type args num not match")
	const nAtomUnionList:List(clazz.UAtomUnion) = {}
	for i=1, #vTypeList do
		nAtomUnionList[i] = vTypeList[i]!:checkAtomUnion()
	end
	const nKey = self._manager:signTemplateArgs(nAtomUnionList)
	const nFn = self._fnDict[nKey]
	if not nFn then
		const nResult = (self._makerFn(table.unpack(vTypeList)) @ Any)
		if MonoFunction.is(nResult) then
			self._fnDict[nKey] = nResult
			return nResult
		else
			error("poly function must return mono-function type but got:"..tostring(nResult))
		end
	else
		return nFn
	end
end

function PolyFunction:castPoly(vContext, vTypeList)
	const nFn = self:noCtxCastPoly(vTypeList)
	return nFn:getFnAwait()
end

function PolyFunction:native_type()
	return self._manager:Literal("function")
end

function PolyFunction:meta_call(vContext, vTypeTuple)
	error("poly function meta_call TODO")
	-- TODO
end

function PolyFunction:assumeIncludeAtom(vAssumeSet, vRight)
	return self == vRight and self
end

function PolyFunction:assumeIntersectAtom(vAssumeSet, vRight)
	return self == vRight and self
end

function PolyFunction:fnPartType()
	return self
end

function PolyFunction:mayRecursive()
	return false
end

function PolyFunction:isSingleton()
	return false
end

return PolyFunction
