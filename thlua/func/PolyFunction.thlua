
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const PolyFunction = {}
PolyFunction.__index=PolyFunction

(@let.class = import("thlua.type.TypeClass").class)

function PolyFunction.__tostring(self:class.PolyFunction):Ret(String)
	return self:detailString({}, true)
end

function.class PolyFunction.new(vManager:class.TypeManager, vFunc:class.Truth):RetClass(class.PolyFunction)
	local self = setmetatable({.class
		_manager=vManager,
	}, PolyFunction)
	return self
end

function PolyFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return "TODO"
end

function.open PolyFunction.is(vType):RetIs(class.PolyFunction)
	return getmetatable(vType) == PolyFunction
end

return PolyFunction
