
const ScheduleTask = require "thlua.manager.ScheduleTask"
const Exception = require "thlua.Exception"

const BaseFunction = require "thlua.func.BaseFunction"

const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
	let.BuilderFn = Fn():Ret(
		OrFalse(clazz.UTypeTuple), OrFalse(clazz.RetTuples),
		Fn():Ret(
			clazz.UTypeTuple, clazz.RetTuples
		)
	)
end)

const SealFunction = class@<clazz.SealFunction, false>(BaseFunction)

function.open SealFunction:ctor(
	vManager:clazz.TypeManager,
	vNode:clazz.IAstNode,
	vLexShot:OrFalse(clazz.LexShot)
)
	const nNewStack = vManager:getRuntime():SealStack(vNode, vLexShot, self @> Union(clazz.AutoFunction, clazz.ClassFactory))
	self._lexStack = vLexShot and vLexShot.branch:getStack() or false
	self._buildStack = nNewStack
	const nTask = vManager:getScheduleManager():newTask(nNewStack)
	self._task = nTask
	self._node = vNode
	self._headFinishEvent=nTask:makeEvent()
	self._bodyStartEvent=nTask:makeWildEvent()
	self._bodyFinishEvent=nTask:makeEvent()
	self._typeFn=false@OrFalse(clazz.TypedFunction)
	self._retTuples=false@OrFalse(clazz.RetTuples)
	self._builderFn=false@OrFalse(BuilderFn)
end

function SealFunction:meta_call(vContext, vTermTuple)
	const nTypeFn = self:getFnAwait()
	return nTypeFn:meta_call(vContext, vTermTuple)
end

function SealFunction:getFnAwait():Ret(clazz.TypedFunction)
	if not self._typeFn then
		self:_build()
		self._headFinishEvent:wait()
		if not self._typeFn then
			self._bodyStartEvent:wakeup()
			self._bodyFinishEvent:wait()
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function SealFunction:getNode()
	return self._node
end

function SealFunction:getBuildStack()
	return self._buildStack
end

function SealFunction:findRequireStack()
	const nLexShot = self._lexShot
	if not nLexShot then
		return false
	end
	return nLexShot.branch:getStack():findRequireStack()
end

function SealFunction:getRetTuples():Ret(OrFalse(clazz.RetTuples))
	return self._retTuples
end

function SealFunction:_build()
	const nBuilderFn = self._builderFn
	if not nBuilderFn then
		return
	end
	self._builderFn = false
	self._task:runAsync(function()
		const nParTuple, nRetTuples, nLateRunner = nBuilderFn()
		self._retTuples = nRetTuples
		if nParTuple and nRetTuples then
			self._typeFn = self._manager:TypedFunction(self._node, nParTuple, nRetTuples)
		end
		self._headFinishEvent:wakeup()
		if self._typeFn then
			-- if function is typing, schedule it after finish
			const nLexStack = self._lexStack
			if nLexStack then
				self._bodyStartEvent:wait()
				--nLexStack:getSealStack():getBodyFn():waitSeal()
			end
		end
		const nParTuple, nRetTuples = nLateRunner()
		self._typeFn = self._typeFn or self._manager:TypedFunction(self._node, nParTuple, nRetTuples)
		self._buildStack:seal()
		self._bodyFinishEvent:wakeup()
	end)
end

function SealFunction:waitSeal()
	self._bodyFinishEvent:wait()
end

function SealFunction:initAsync(vRunner:BuilderFn)
	self._builderFn=vRunner
end

function SealFunction:startTask()
	self:_build()
	self._bodyStartEvent:wakeup()
end

function SealFunction:findRequireStack()
	const nLexStack = self._lexStack
	return nLexStack and nLexStack:findRequireStack() or false
end

function SealFunction:getIfLuaNode():Ret(False):Ret(True, clazz.IAstNode)
	return true, self._node
end

return SealFunction
