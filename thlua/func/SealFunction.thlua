
const ScheduleTask = require "thlua.manager.ScheduleTask"
const Exception = require "thlua.Exception"

const MonoFunction = require "thlua.func.MonoFunction"

const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const SealFunction = class@<clazz.SealFunction, false>(MonoFunction)

function.open SealFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vParentStack:OrFalse(clazz.BaseStack), vUpValueCase:OrFalse(clazz.VariableCase))
	const nNewStack = vManager:getRuntime():SealStack(vNode, vUpValueCase, self @ Union(clazz.AutoFunction, clazz.ClassFactory))
	self._stack = nNewStack
	const nTask = vManager:getScheduleManager():newTask(nNewStack)
	self._task = nTask
	self._node = vNode
	self._headStartEvent=nTask:makeWildEvent()
	self._headFinishEvent=nTask:makeEvent()
	self._bodyStartEvent=nTask:makeWildEvent()
	self._bodyFinishEvent=nTask:makeEvent()
	self._typeFn=false@OrFalse(clazz.TypeFunction)
	self._retTuples=false@OrFalse(clazz.RetTuples)
end

function SealFunction:meta_call(vContext, vTermTuple)
	const nTypeFn = self:getFnAwait()
	return nTypeFn:meta_call(vContext, vTermTuple)
end

function SealFunction:getFnAwait():Ret(clazz.TypeFunction)
	if not self._typeFn then
		self._headStartEvent:wakeup()
		self._headFinishEvent:wait()
		if not self._typeFn then
			self._bodyStartEvent:wakeup()
			self._bodyFinishEvent:wait()
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function SealFunction:getNode()
	return self._node
end

function SealFunction:getStack()
	return self._stack
end

function SealFunction:getRetTuples():Ret(OrFalse(clazz.RetTuples))
	return self._retTuples
end

function SealFunction:buildAsync(vRunner:Fn():Ret(OrFalse(clazz.TypeFunction), Fn():Ret(clazz.TypeFunction)))
	self._task:runAsync(function()
		self._headStartEvent:wait()
		const nTypeFn, nLateRunner = vRunner()
		if nTypeFn then
			self._typeFn = nTypeFn
			self._retTuples = nTypeFn:getRetTuples()
		end
		self._headFinishEvent:wakeup()
		self._bodyStartEvent:wait()
		const nTypeFn = nLateRunner()
		if not self._typeFn then
			self._typeFn = nTypeFn
			self._retTuples = nTypeFn:getRetTuples()
		end
		self._bodyFinishEvent:wakeup()
	end)
end

function SealFunction:startTask()
	self._headStartEvent:wakeup()
	self._bodyStartEvent:wakeup()
end

return SealFunction
