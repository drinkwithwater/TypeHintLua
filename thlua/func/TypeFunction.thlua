
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"
const Exception = require "thlua.Exception"

const TypeFunction = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class TypeFunction.new(vManager:class.TypeManager, vNode:class.IAstNode,
	vArgTuple:class.UTypeTuple, vRetTuples:OrFalse(class.RetTuples)):RetClass(class.TypeFunction, class.IAtomType)
	const self = setmetatable({.class
		_manager=vManager,
		_node=vNode,
		_buildingRetTuples=vRetTuples,
		_retTuples=vRetTuples,
		_argTuple=vArgTuple,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.FUNCTION,
	}, TypeFunction)
	return self
end

function TypeFunction:Dots(vType:class.UAllType):Ret(class.TypeFunction)
	assert(not self._retTuples, "fn building is finish, can't call Dots")
	local nArgTuple = self._argTuple
	if TypeTupleDots.is(nArgTuple) then
		error("use Dots but tuple has dots")
	end
	self._argTuple = nArgTuple:Dots(vType)
	return self
end

function TypeFunction:Ret(...:Truth):Ret(class.TypeFunction)
	assert(not self._retTuples, "fn building is finish, can't call Ret")
	local nTypeTuple = self._manager:Tuple(...)
	local nPreRetTuples = self._buildingRetTuples
	if not nPreRetTuples then
		nPreRetTuples = self._manager:SingleRetTuples(nTypeTuple)
	else
		nPreRetTuples = self._manager:retConcat(self._node, nPreRetTuples, nTypeTuple)
	end
	self._buildingRetTuples = nPreRetTuples
	return self
end

function TypeFunction:finish():Ret(class.TypeFunction)
	self:_buildRetTuples()
	return self
end

function TypeFunction:_buildRetTuples():Ret(class.RetTuples)
	local nRetTuples = self._retTuples
	if not nRetTuples then
		nRetTuples = self._buildingRetTuples or self._manager:VoidRetTuples()
		self._retTuples = nRetTuples
	end
	return nRetTuples
end

function TypeFunction:isNative():Ret(False)
	return false
end

function TypeFunction:native_type()
	return self._manager:Literal("function")
end

function TypeFunction:detailString(vToStringCache, vVerbose)
	const nRetTuples = self:_buildRetTuples()
	local nCache = vToStringCache[self]
	if nCache then
		return nCache
	end
	vToStringCache[self] = "fn-..."
	const nResult = "fn-" .. self._argTuple:detailString(vToStringCache, vVerbose)..
									"->"..nRetTuples:detailString(vToStringCache, vVerbose)
	vToStringCache[self] = nResult
	return nResult
end

function TypeFunction:meta_call(vContext, vTypeTuple)
	local nRetTuples = self:_buildRetTuples()
	if not vTypeTuple:castOrIn(vContext, self._argTuple) then
		vContext:error("args error when call", self._argTuple, vTypeTuple)
	end
	return nRetTuples
end

function TypeFunction:assumeIntersectAtom(vAssumeSet, vType)
	const nLeftRetFirst = self:_buildRetTuples():getFirstType()
	if vType == self then
		return self
	elseif vType:assumeContainAtom(nil, self) then
		return self
	elseif self:assumeContainAtom(nil, vType) then
		return vType
	else
		return false
	end
end

function TypeFunction:assumeContainFn(vAssumeSet:Dict(Integer, Boolean), vRight:class.TypeFunction):Ret(Boolean)
	local nLeftRetTuples = self:_buildRetTuples()
	local nRightRetTuples = vRight:_buildRetTuples()
	if not vRight:getArgTuple():assumeContainTuple(vAssumeSet, self._argTuple) then
		return false
	end
	if not nLeftRetTuples:assumeContainTuples(vAssumeSet, nRightRetTuples) then
		return false
	end
	return true
end

function TypeFunction:assumeContainAtom(vAssumeSet, vRight)
	if self == vRight then
		return self
	end
	if not TypeFunction.is(vRight) then
		return false
	end
	const nMgr = self._manager
	const nPair = self._manager:makePair(self, vRight)
	if not vAssumeSet then
		return self:assumeContainFn({[nPair]=true}, vRight) and self
	end
	const nAssumeResult = vAssumeSet[nPair]
	if nAssumeResult ~= nil then
		return nAssumeResult and self
	end
	vAssumeSet[nPair] = true
	local nAssumeContain = self:assumeContainFn(vAssumeSet, vRight)
	if not nAssumeContain then
		vAssumeSet[nPair] = false
		return false
	else
		return self
	end
end

function TypeFunction:getArgTuple():Ret(class.UTypeTuple)
	self:_buildRetTuples()
	return self._argTuple
end

function TypeFunction:getRetTuples():Ret(class.RetTuples)
	return self:_buildRetTuples()
end

function TypeFunction:fnPartType()
	return self
end

function TypeFunction:mayRecursive()
	return true
end

function TypeFunction:isSingleton()
	return false
end

function TypeFunction.is(vType):RetIs(class.TypeFunction)
	return getmetatable(vType) == TypeFunction
end

return TypeFunction
