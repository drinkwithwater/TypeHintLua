
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const TypedFunction = require "thlua.func.TypedFunction"
const PolyFunction = require "thlua.func.PolyFunction"
const AutoFunction = require "thlua.func.AutoFunction"
const MemberFunction = require "thlua.func.MemberFunction"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const TypedMemberFunction = class@<clazz.TypedMemberFunction, false>(MemberFunction)

function.open TypedMemberFunction:ctor(_,_,vWildFn:clazz.TypedFunction)
	self._wildFn = vWildFn
	self._typeFnDict = {}@Dict(clazz.IAtomType, clazz.TypedFunction)
end

function TypedMemberFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	const nWildFn = self._wildFn
	const nCache = vToStringCache[self]
	if nCache then
		return nCache
	end
	const nParTuple = nWildFn:getParTuple()
	const nRetTuples = nWildFn:getRetTuples()
	vToStringCache[self] = "member:fn-..."
	const nResult = "member:fn-" .. nParTuple:detailStringIfFirst(vToStringCache, vVerbose, false)..
									"->"..nRetTuples:detailString(vToStringCache, vVerbose)
	vToStringCache[self] = nResult
	return nResult
end

function TypedMemberFunction:Dots(vType:clazz.UAllType):Ret(clazz.MemberFunction)
	const nWildFn = assert(self._wildFn, "member function without wildfn can't take :Dots")
	nWildFn:Dots(vType)
	return self
end

function TypedMemberFunction:RetDots(vFirst:clazz.UAllType, ...:clazz.UAllType):Ret(clazz.MemberFunction)
	const nWildFn = assert(self._wildFn, "member function without wildfn can't take :Ret")
	nWildFn:RetDots(vFirst, ...)
	return self
end

function TypedMemberFunction:Ret(...:clazz.UAllType):Ret(clazz.MemberFunction)
	const nWildFn = assert(self._wildFn, "member function without wildfn can't take :Ret")
	nWildFn:Ret(...)
	return self
end

function TypedMemberFunction:meta_invoke(vContext, vSelfType, vPolyArgs, vTypeTuple)
	const nTypeFn = self:indexTypeFn(vSelfType)
	nTypeFn:meta_call(vContext, vTypeTuple)
end

function TypedMemberFunction:needPolyArgs():Ret(Boolean)
	return false
end

function TypedMemberFunction:indexTypeFn(vSelfType:clazz.IAtomType):Ret(clazz.TypedFunction)
	const nDict = self._typeFnDict
	const nFn = nDict[vSelfType]
	if nFn then
		return nFn
	else
		const nWildFn = self._wildFn
		const nRetTuples = nWildFn:getRetTuples()
		const nParTuple = nWildFn:getParTuple():replaceFirst(vSelfType)
		const nFn = self._manager:TypedFunction(self._node, nParTuple, nRetTuples)
		nDict[vSelfType] = nFn
		return nFn
	end
end

function TypedMemberFunction:mayRecursive():Ret(True)
	return true
end

return TypedMemberFunction
