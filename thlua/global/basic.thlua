return [[

_ENV._G = _ENV

_ENV._VERSION = "" @ String

-- builtin
-- _ENV.assert = nil

function.pass _ENV.collectgarbage(
    opt:OrNil("collect", "stop", "restart", "count", "step", "isrunning", "incremental", "generational"),
    arg:OrNil(Integer)
)
end

function.pass _ENV.dofile()
end

-- builtin
-- _ENV.error = nil

-- builtin
-- _ENV.getmetatable = nil

-- builtin
-- _ENV.ipair = nil

-- builtin
-- _ENV.load = nil

-- builtin
-- _ENV.loadfile = nil

-- builtin
-- _ENV.next = nil

-- builtin
-- _ENV.pairs = nil

-- builtin
-- _ENV.pcall = nil

-- builtin
-- _ENV.pcall = nil


function.open _ENV.tonumber(v:Union(String, Number), base)
    if base == nil then
        return 0.0@OrNil(Number)
    else
        const base:Integer = base
        return 0@OrNil(Integer)
    end
end

function.pass _ENV.tostring(v:Any):Ret(String)
end

function.pass _ENV.print(...:Any)
end

function.pass _ENV.rawset(a:Any, b:Any,c:Any)
end

function.pass _ENV.rawget(a:Any, b:Any):Ret(Any)
end

]]