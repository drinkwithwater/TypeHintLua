return [[

const coroutine = {}

function.pass coroutine.close(co:Thread)
end

function.pass coroutine.create(f:AnyFunction):Ret(Thread)
end

function.pass coroutine.isyieldable(co:OrNil(Thread)):Ret(Boolean)
end

function.pass coroutine.resume(co:Thread, ...:Any):Ret(True):Ret(False, String)
end

function.pass coroutine.running():Ret(Thread, Boolean)
end

function.pass coroutine.status(co:Thread):Ret(Union("running", "suspended", "normal", "dead"))
end

function.pass coroutine.wrap(f:AnyFunction):Ret(AnyFunction)
end

function.pass coroutine.yield():RetDots(Any)
end

_ENV.coroutine = coroutine

]]