return [[

(@let.ReadMode = Union(
    "n", "a", "l", "L"
))

const file = {}

const function:class(let.File) newFile()
    return setmetatable({.class}, {
        __index=file
    })
end

function.pass file:close()
end

function.pass file:flush()
end

function.pass file:lines(...:ReadMode):Ret(Fn():Ret(OrNil(String)))
end

function.pass file:read(...:ReadMode):Ret(String)
end

function.pass file:seek(whence:OrNil("set", "cur", "end"), offset:OrNil(Integer)):Ret(Integer, OrNil(String))
end

function.pass file:setvbuf(mode:Union("no", "full", "line"), size:OrNil(Integer))
end

function.pass file:write(...:Union(String,Number)):Ret(File):Ret(Nil, String)
end

const io = {}

function.pass io.close(file:OrNil(File))
end

function.pass io.flush()
end

function.pass io.input(file:OrNil(String, File)):Ret(File)
end

function.pass io.lines(filename:OrNil(String), ...:ReadMode):Ret(Fn():Ret(OrNil(String)), Nil, Nil, OrNil(File))
end

(@let.OpenMode = Union(
    "r", "w", "a",
    "r+", "w+", "a+",
    "rb", "wb", "ab",
    "r+b", "w+b", "a+b"
))
function.pass io.open(filename:String, mode:OpenMode):Ret(File):Ret(Nil, String)
end

function.pass io.output(file:OrNil(String, File)):Ret(File)
end

function.pass io.popen(prog:String, mode:OrNil("r", "w")):Ret(File):Ret(Nil, String)
end

function.pass io.read(...:ReadMode):Ret(String)
end

function.pass io.tmpfile():Ret(File)
end

function.pass io.type(file:File):Ret(OrNil("file", "closed file"))
    -- use guard?
end

function.pass io.write(...:Union(String, Number)):Ret(File):Ret(Nil, String)
end

_ENV.io = io

]]