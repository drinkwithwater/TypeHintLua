return [[

(@let.ReadMode = Union(
    Integer, String
))

const file = {}

const function:class(let.File) newFile()
    return setmetatable({.class}, {
        __index=file
    })
end

function.nocheck file:close()
end

function.nocheck file:flush()
end

function.nocheck file:lines(...:ReadMode):Ret(Fn():Ret(OrNil(String)))
end

function.nocheck file:read(...:ReadMode):Ret(OrNil(String))
end

function.nocheck file:seek(whence:OrNil("set", "cur", "end"), offset:OrNil(Integer)):Ret(Integer, OrNil(String))
end

function.nocheck file:setvbuf(mode:Union("no", "full", "line"), size:OrNil(Integer))
end

function.nocheck file:write(...:Union(String,Number)):Ret(File):Ret(Nil, String)
end

const io = {}

function.nocheck io.close(file:OrNil(File))
end

function.nocheck io.flush()
end

function.nocheck io.input(file:OrNil(String, File)):Ret(File)
end

function.nocheck io.lines(filename:OrNil(String), ...:ReadMode):Ret(Fn():Ret(OrNil(String)), Nil, Nil, OrNil(File))
end

(@let.OpenMode = Union(
    "r", "w", "a",
    "r+", "w+", "a+",
    "rb", "wb", "ab",
    "r+b", "w+b", "a+b"
))
function.nocheck io.open(filename:String, mode:OpenMode):Ret(File):Ret(Nil, String)
end

function.nocheck io.output(file:OrNil(String, File)):Ret(File)
end

function.nocheck io.popen(prog:String, mode:OrNil("r", "w")):Ret(File):Ret(Nil, String)
end

function.nocheck io.read(...:ReadMode):Ret(OrNil(String))
end

function.nocheck io.tmpfile():Ret(File)
end

function.open io.type(file):mapguard({file=File, ["closed file"]=File})
end

function.nocheck io.write(...:Union(String, Number)):Ret(File):Ret(Nil, String)
end

_ENV.io = io

]]
