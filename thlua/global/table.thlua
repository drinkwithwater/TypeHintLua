return [[

const table = {}

function.open table.concat(list, sep:OrNil(String), i:OrNil(Integer), j:OrNil(Integer))
    const element:OrNil(String, Integer) = list[1@Number]
    return "" @ String
end

function.open table.insert(list, ...)
    (@let.ElementTypeNilable = $(list[1@Integer]))
    const len = select("#", ...)
    if len == 1 then
        const value:ElementTypeNilable = ...
    elseif len == 2 then
        const pos:OrNil(Integer), value:ElementTypeNilable = ...
    else
        -- TODO
        (@print("table insert must table 2 or 3 arguments, TODO, mus print error in out stack"))
    end
end

function.open table.move(a1, f, e, t, a2)
    -- TODO
end

function.open table.pack(...)
    return {n=1@Integer, ...}
end

function.open table.remove(list, pos:OrNil(Integer))
    return list[1@Integer]
end

function.open table.sort(list, comp)
    (@let.ElementTypeNotnil = $(list[1@Integer]!))
    const comp:Fn(ElementTypeNotnil, ElementTypeNotnil):Ret(Boolean) = comp
end

function.open table.unpack(list, i:OrNil(Integer), j:OrNil(Integer))
    -- TODO
end

_ENV.table = table

]]