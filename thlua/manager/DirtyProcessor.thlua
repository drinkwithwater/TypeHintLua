
const Exception = require "thlua.Exception"
const SpaceTable = require "thlua.refer.SpaceTable"
const Reference = require "thlua.refer.Reference"
const AsyncUnion = require "thlua.refer.AsyncUnion"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const BaseUnionType = require "thlua.type.union.BaseUnionType"

const DirtyProcessor = {}

DirtyProcessor.__index = DirtyProcessor

(@do
	let.clazz = import("thlua.class").clazz
end)

function:class(clazz.DirtyProcessor) DirtyProcessor.new(vTypeManager:clazz.TypeManager)
    const self = setmetatable({.class
        _manager = vTypeManager,
		_runtime = vTypeManager:getRuntime()
    }, DirtyProcessor)
    return self
end

function DirtyProcessor:makeDirtyException(vNode:clazz.IBaseNode, vMsg:String):Ret(clazz.Exception)
	return Exception.new(vMsg, vNode)
end

function DirtyProcessor:peasyToMustType(vData:clazz.USpaceAny):Ret(False, String):Ret(True, clazz.UMustType)
	local t = type(vData)
	if t == "table" then
		if AsyncUnion.is(vData) or BaseAtomType.is(vData) or BaseUnionType.is(vData) then
			return true, vData
		else
			const nRefer = SpaceTable.checkSpace(vData)
			if nRefer then
				return true, nRefer:mustType()
			else
				if Reference.is(vData) then
					return true, vData:mustType()
				else
					return false, "to type failed"
				end
			end
		end
	elseif t == "number" or t == "string" or t == "boolean"then
		return true, self._manager:Literal(vData @> Union(Number, String, Boolean))
	else
		return false, "can't trans "..t.." into type in hint space"
	end
end

function DirtyProcessor:easyToMustType(vNode:clazz.IBaseNode, vData:clazz.USpaceAny):Ret(clazz.UMustType)
	const nOkay, nType = self:peasyToMustType(vData)
	if nOkay then
		return nType
	else
		error(self:makeDirtyException(vNode, nType))
	end
end

return DirtyProcessor