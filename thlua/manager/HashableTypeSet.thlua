
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const HashableTypeSet = {}
HashableTypeSet.__index = HashableTypeSet

function:class(clazz.HashableTypeSet) HashableTypeSet.new(vManager:clazz.TypeManager)
    const self = setmetatable({.class
        _manager = vManager,
        _typeDict = {} @ Dict(Integer, clazz.IAtomType),
        _typeResult = false @ OrFalse(clazz.UAtomUnion),
        _num = 0 @ Integer,
        _addValue = 0 @ Integer,
        _xorValue = 0 @ Integer,
        _hash = 0 @ Integer,
        _next = false @ OrFalse(clazz.HashableTypeSet),
    }, HashableTypeSet)
    return self
end

-- true means found, false means not found
function HashableTypeSet:linkedSearchTypeOrAttachSet(vType:clazz.IUnionType):Ret(True, clazz.UAtomUnion):Ret(False, clazz.HashableTypeSet)
    local nCount = 0
    local nMatch = true
    const nTypeDict = self._typeDict
    vType:foreach(function(vAtomType)
        if not nTypeDict[vAtomType.id] then
            nMatch = false
        end
        nCount = nCount + 1
    end)
    if nCount ~= self._num then
        nMatch = false
    end
    if not nMatch then
        const nNextTypeSet = self._next
        if nNextTypeSet then
            return nNextTypeSet:linkedSearchTypeOrAttachSet(vType)
        else
            const nNewTypeSet = self._manager:HashableTypeSet()
            nNewTypeSet:initFromUnion(vType)
            self._next = nNewTypeSet
            return false, nNewTypeSet
        end
    else
        const nResultType = self._typeResult
        if nResultType then
            return true, nResultType
        else
            self._typeResult = vType
            return false, self
        end
    end
end

function HashableTypeSet:linkedSearchOrLink(vConflictTypeSet:clazz.HashableTypeSet):Ret(clazz.HashableTypeSet)
    local nMatch = true
    const nSelfTypeDict = self._typeDict
    for k,v in pairs(vConflictTypeSet._typeDict) do
        if not nSelfTypeDict[k] then
            nMatch = false
            break
        end
    end
    if self._num ~= vConflictTypeSet._num then
        nMatch = false
    end
    if nMatch then
        return self
    else
        const nNextTypeSet = self._next
        if not nNextTypeSet then
            self._next = vConflictTypeSet
            return vConflictTypeSet
        else
            return nNextTypeSet:linkedSearchOrLink(vConflictTypeSet)
        end
    end
end

function HashableTypeSet:putSet(vTypeSet:clazz.HashableTypeSet)
    for k,v in pairs(vTypeSet._typeDict) do
        self:putAtom(v)
    end
end

function HashableTypeSet:initFromUnion(vUnionType:clazz.IUnionType)
    vUnionType:foreach(function(vAtomType)
        self:putAtom(vAtomType)
    end)
    self._typeResult = vUnionType
end

function HashableTypeSet:initFromAtom(vAtomType:clazz.IAtomType)
    self:putAtom(vAtomType)
    self._typeResult = vAtomType
end

function HashableTypeSet:putType(vType:clazz.UAtomUnion)
    vType:foreach(function(vAtomType)
        self:putAtom(vAtomType)
    end)
end

function HashableTypeSet:putAtom(vAtomType:clazz.IAtomType)
    const nId = vAtomType.id
    const nTypeDict = self._typeDict
    if not nTypeDict[nId] then
        nTypeDict[nId] = vAtomType
        self._addValue = self._addValue + nId
        self._xorValue = self._xorValue ^ nId
        self._hash = (self._xorValue << 32) + self._addValue
        self._num = self._num + 1
    end
end

function HashableTypeSet:getDict()
    return self._typeDict
end

function HashableTypeSet:getNum()
    return self._num
end

function HashableTypeSet.hashType(vType:clazz.UAtomUnion):Ret(Integer)
    local addValue = 0
    local xorValue = 0
    vType:foreach(function(vAtomType)
        const nId = vAtomType.id
        addValue = addValue + nId
        xorValue = xorValue ^ nId
    end)
    return (xorValue << 32) + addValue
end

function HashableTypeSet:getHash()
    return self._hash
end

function HashableTypeSet:getResultType():Ret(OrFalse(clazz.UAtomUnion))
    return self._typeResult
end

function HashableTypeSet:buildType():Ret(clazz.UAtomUnion)
    local nResultType = self._typeResult
    if not nResultType then
        const nCollection = self._manager:TypeCollection()
        for k,v in pairs(self._typeDict) do
            nCollection:put(v)
        end
        nResultType = nCollection:mergeToAtomUnion()
        self._typeResult = nResultType
    end
    return nResultType
end

return HashableTypeSet