
const Exception = require "thlua.Exception"
const Reference = require "thlua.type.Reference"
const Node = require "thlua.code.Node"
const Namespace = {}
Namespace.__tostring=function(self)::Ret(String)
	return (self:isLetSpace() and "letspace-" or "namespace-") .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end
Namespace.__index=Namespace

(@do
	let.class = import("thlua.type.TypeClass").class
	class.SpaceDict = Struct {
		[String]=class.Reference,
	}
end)

const function throw(vMsg:String)
	const nNode = Node.getDebugNode(4)
	error(Exception.new(vMsg, nNode))
end

function Namespace.new(vManager:class.TypeManager, vNode:class.AstNode, vIndexTable:OrNil(class.SpaceDict))::RetClass(class.Namespace)
	local self = setmetatable({::Self()
		_manager=vManager,
		_key2type=(vIndexTable and setmetatable({}, {__index=vIndexTable}) or {})@class.SpaceDict,
		_closed=false@Boolean,
		_node=vNode,
		_key=false@Union(False, String),
	}, Namespace)
	self.localExport=setmetatable({}, {
		__index=function(_,k:String)
			local rawgetV = rawget(self._key2type, k)
			if rawgetV ~= nil then
				return rawgetV
			end
			if self._closed then
				throw("namespace closed, can't create key="..tostring(k))
			end
			local getV = self._key2type[k]
			if getV ~= nil then
				throw("let shadow get : key="..tostring(k))
			end
			local refer = self._manager:Reference(k)
			self._key2type[k] = refer
			return refer
		end,
		__newindex=function(_,k:String,newV)
			if self._closed then
				throw("namespace closed, can't create key="..tostring(k))
			end
			local getV = self._key2type[k]
			local rawgetV = rawget(self._key2type, k)
			if getV ~= nil and rawgetV == nil then
				throw("let shadow set : key="..tostring(k))
			end
			if rawgetV ~= nil then
				-- for recursive indexing reference
				if not self._manager:isValueType(newV) then
					throw("namespace assign a non-type value, key="..tostring(k))
				end
				if Reference.is(rawgetV) then
					rawgetV:setTypeAsync(Node.getDebugNode(3), newV)
				else
					throw("conflict assign : key="..tostring(k))
				end
			else
				local namespace = Namespace.fromLocalExport(newV)
				if namespace then
					namespace:trySetKey(k)
					self._key2type[k] = newV
				else
					if not self._manager:isValueType(newV) then
						throw("namespace assign a non-type value, key="..tostring(k))
					end
					local refer = self._manager:Reference(k)
					refer:setTypeAsync(Node.getDebugNode(3), newV)
					self._key2type[k] = refer
				end
			end
		end,
		__tostring=function(t)::Ret(String)
			return tostring(self).."->localExport"
		end,
		__self=self,
	})
	self.globalExport=setmetatable({}, {
		__index=function(_,k:String)
			local v = self._key2type[k]
			if v ~= nil then
				return v
			end
			throw("key with empty value, key="..tostring(k))
		end,
		__newindex=function(t,k,v)
			throw("global can't assign")
		end,
		__tostring=function(t)::Ret(String)
			return tostring(self).."->globalExport"
		end,
	})
	return self
end

function Namespace:trySetKey(vKey:String)
	if not self._key then
		self._key = vKey
	end
end

function Namespace:isLetSpace()::Ret(Boolean)
	return getmetatable(self._key2type) and true or false
end

function Namespace.fromLocalExport(t)
	local nMeta = getmetatable(t)
	if type(nMeta) == "table" then
		local self = rawget(nMeta, "__self")
		if getmetatable(self) == Namespace then
			return self
		end
	end
	return false
end

function Namespace:close()
	self._closed=true
end

function Namespace:check()
	for k,v in pairs(self._key2type) do
		if Reference.is(v) then
			if not v:getType() then
				print(self, v)
			else
				-- print(self, v)
			end
		end
	end
end

function Namespace:getKeyToType()::Ret(class.SpaceDict)
	return self._key2type
end

return Namespace
