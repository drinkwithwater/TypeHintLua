
const ScheduleEvent = {}
ScheduleEvent.__index = ScheduleEvent

(@let.clazz = import("thlua.class").clazz)

function:class(clazz.ScheduleEvent) ScheduleEvent.new(vManager:clazz.ScheduleManager, vTask:OrFalse(clazz.ScheduleTask))
	return setmetatable({.class
		_scheduleManager=vManager,
		_task=vTask,
		_waitTaskList={}@OrFalse(List(clazz.ScheduleTask)),
	}, ScheduleEvent)
end

function ScheduleEvent:wait()
	const nWaitList = self._waitTaskList
	if nWaitList then
		const nManager = self._scheduleManager
		const nTask = nManager:getTask()
		nWaitList[#nWaitList + 1] = nTask
		nTask:waitEvent(self)
	end
end

function ScheduleEvent:wakeup()
	const nSelfTask = self._task
	const nCurTask = self._scheduleManager:getTask()
	if nSelfTask then
		assert(nCurTask == self._task, "event must be waken up in it's own task "..tostring(nSelfTask:getNode()))
	end
	const nWaitList = self._waitTaskList
	if nWaitList then
		self._waitTaskList = false
		for _, nTask in ipairs(nWaitList) do
			nTask:wakeupByEvent(self)
		end
	end
end

function ScheduleEvent:getTask()
	return self._task
end

function.open ScheduleEvent.is(v):isguard(clazz.ScheduleEvent)
	return getmetatable(v) == ScheduleEvent
end

return ScheduleEvent
