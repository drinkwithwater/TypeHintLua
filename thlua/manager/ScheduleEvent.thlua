
const ScheduleEvent = {}
ScheduleEvent.__index = ScheduleEvent

(@let.clazz = import("thlua.type.TypeClass").clazz)

function:class(clazz.ScheduleEvent) ScheduleEvent.new(vManager:clazz.ScheduleManager, vTask:OrFalse(clazz.ScheduleTask))
	return setmetatable({.class
		_scheduleManager=vManager,
		_task=vTask,
		_coToSid={}@OrFalse(Dict(Thread, 1)),
	}, ScheduleEvent)
end

function ScheduleEvent:wait()
	const nCoToSid = self._coToSid
	if nCoToSid then
		const nManager = self._scheduleManager
		const nCurCo = coroutine.running()
		nCoToSid[nCurCo] = 1
		const nTask = nManager:getTask(nCurCo)
		const nSelfTask = self._task
		if nSelfTask then
			nManager:checkRecursive(nTask, nSelfTask)
		end
		nTask:waitEvent(self)
	end
end

function ScheduleEvent:wakeup()
	const nCoToSid = self._coToSid
	if nCoToSid then
		self._coToSid = false
		const nManager = self._scheduleManager
		for co, sid in pairs(nCoToSid) do
			nManager:getTask(co):wakeupEvent(self)
		end
	end
end

function ScheduleEvent:getTask()
	return self._task
end

return ScheduleEvent
