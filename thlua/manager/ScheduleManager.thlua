
const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const Exception = require "thlua.Exception"
const class = require "thlua.class"

const ScheduleTask = require "thlua.manager.ScheduleTask"

(@do
	let.clazz = import($class).clazz
	let.ProfileInfo = Struct {
		counter = Integer,
		start = OrFalse(Integer),
		accumulate = Integer,
		name = String,
	}
end)

const ScheduleManager = class@<clazz.ScheduleManager, false>()

function.open ScheduleManager:ctor(vRuntime:clazz.BaseRuntime)
	self._coToTask={} @ Dict(Thread, clazz.ScheduleTask)
	self._scheduleList={}@List(clazz.ScheduleTask)
	self._selfCo=coroutine.running()
	self._runtime = vRuntime
	self.useProfile = false @Boolean
end

function ScheduleManager:newTask(vTaskHost:clazz.UTaskHost)
	const nTask = ScheduleTask.new(self, vTaskHost)
	self._coToTask[nTask:getSelfCo()] = nTask
	return nTask
end

function ScheduleManager:getTask():Ret(clazz.ScheduleTask)
	return self._coToTask[coroutine.running()]!
end

function ScheduleManager:checkRecursive(vWaitingTask:clazz.ScheduleTask, vDependTask:clazz.ScheduleTask)
	local nCurTask = vDependTask
	const nTaskList:List(clazz.ScheduleTask) = {}
	while nCurTask do
		nTaskList[#nTaskList + 1] = nCurTask
		if nCurTask == vWaitingTask then
			const nNodeList:List(clazz.IBaseNode) = {}
			for _, nTask in ipairs(nTaskList) do
				nNodeList[#nNodeList + 1] = nTask:getNode() or nil
			end
			const nFirstNode = nNodeList[1]
			if not nFirstNode then
				error("recursive build type")
			else
				error(Exception.new("recursive build type", nFirstNode, table.unpack(nNodeList, 2)))
			end
		else
			const nWaitEvent = nCurTask:getWaitEvent()
			if nWaitEvent then
				const nNextTask = nWaitEvent:getTask()
				if nNextTask then
					nCurTask = nNextTask
					continue
				end
			end
			break
		end
	end
end

function ScheduleManager:runSchedule()
	while true do
		const nScheduleList = self._scheduleList
		if not nScheduleList[1] then
			break
		else
			self._scheduleList = {}
			for _, nTask in ipairs(nScheduleList) do
				while nTask:resume() do
					self:runSchedule()
				end
			end
		end
	end
end

function ScheduleManager:trySchedule(vTask:clazz.ScheduleTask)
	const nScheduleList = self._scheduleList
	nScheduleList[#nScheduleList + 1] = vTask
	const nTask = self._coToTask[coroutine.running()]
	if nTask and nTask:getStack() then
		coroutine.yield(true)
	end
	--[[
	const nStack = self:getStack()
	if nStack and not nStack:canWaitType() then
		const nDependTask = vEvent:getTask()
		if nDependTask and not nDependTask:getStack() then
			nDependTask:errorWaitByStack(nStack)
		end
		--if not vDependTask:getStack() then
			--vDependTask:errorWaitByStack(nStack)
		--end
	end
	]]
end

function ScheduleManager:makeWildEvent():Ret(clazz.ScheduleEvent)
	return ScheduleEvent.new(self, false)
end

function ScheduleManager:getRuntime()
	return self._runtime
end

function ScheduleManager:dump()
	const nFnToProfile:Dict(AnyFunction, clazz.ProfileInfo) = {}
	for k, nTask in pairs(self._coToTask) do
		for fn, profile in pairs(nTask:getFnToProfile()) do
			const nCurProfile = nFnToProfile[fn]
			if not nCurProfile then
				nFnToProfile[fn] = {
					accumulate = profile.accumulate,
					counter = profile.counter,
					name = profile.name,
					start = false,
				}
			else
				nCurProfile.accumulate = nCurProfile.accumulate + profile.accumulate
				nCurProfile.counter = nCurProfile.counter + profile.counter
			end
		end
	end
	const l:List(clazz.ProfileInfo) = {}
	for k, profile in pairs(nFnToProfile) do
		if profile.counter > 1 then
			l[#l+1] = profile
		end
	end
	table.sort(l, function(a,b)
		return a.counter < b.counter
	end)
	local nAllTime = 0.0001 -- for divide zero error
	for _, profile in pairs(l) do
		nAllTime = nAllTime + profile.accumulate
	end
	for _, profile in pairs(l) do
		print(string.format("%.5f", profile.accumulate/nAllTime), profile.counter, profile.name)
	end
end


return ScheduleManager
