
const Exception = require "thlua.Exception"

const SealStack = require "thlua.runtime.SealStack"
const Node = require "thlua.code.Node"
const NameReference = require "thlua.space.NameReference"
const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const class = require "thlua.class"

const chrono = (function()
	const ok, t = pcall(require, "chrono")
	return ok and t or {
		now=function():Ret(Integer)
			return 0
		end,
		sub=function():Ret(Integer)
			return 0
		end,
	}
end)()


(@do
	let.clazz = import($class).clazz
	clazz.UTaskHost = Union(clazz.IBaseNode, clazz.SealStack, clazz.TypeRelation, clazz.NameReference)
	clazz.ProfileInfo = Struct {
		counter = Integer,
		start = OrFalse(Integer),
		accumulate = Integer,
		name = String,
	}
end)

const ScheduleTask = class@<clazz.ScheduleTask, false>()

function.open ScheduleTask:ctor(vScheduleManager:clazz.ScheduleManager, vHost:clazz.UTaskHost)
	self._scheduleManager = vScheduleManager
	self._fnToProfile = {} @ Dict(AnyFunction, clazz.ProfileInfo)
	self._runFn = false @ OrFalse(Fn():Err(clazz.Exception))
	self._selfCo = coroutine.create(function()
		const nRunFn = assert(self._runFn, "maybe wakup task before run")
		const nScheduleManager = self._scheduleManager
		if nScheduleManager.useProfile then
			debug.sethook(function(case:Union("call", "return", "line"))
				self:hook(case, 3)
			end, "cr")
		end
		const ok, nExc = pcall(nRunFn)
		if not ok then
			const nHost = self._host
			const nStack = SealStack.is(nHost) and nHost
			if nStack then
				if Exception.is(nExc) then
					nStack:getRuntime():nodeError(nExc.node, nExc.msg)
					const nNodeList = nExc.otherNodes
					if nNodeList then
						for _, nNode in ipairs(nNodeList) do
							nStack:getRuntime():nodeError(nNode, nExc.msg)
						end
					end
				else
					nStack:getRuntime():nodeError(nStack:getNode(), tostring(nExc))
				end
			end
			if not nStack then
				error(nExc)
			end
		end
	end)
	self._host = vHost
	self._waitEvent = false @ OrFalse(clazz.ScheduleEvent)
	self._openStackList = {} @ List(clazz.OpenStack)
end

function ScheduleTask:getWaitEvent()
	return self._waitEvent
end

function ScheduleTask:waitEvent(vEvent:clazz.ScheduleEvent)
	assert(not self._waitEvent)
	self._waitEvent = vEvent
	coroutine.yield()
end

function ScheduleTask:wakeupEvent(vEvent:clazz.ScheduleEvent)
	assert(self._waitEvent == vEvent)
	self._waitEvent = false
	self._scheduleManager:trySchedule(self)
end

function ScheduleTask:resume()
	--[[if self._scheduleManager.useProfile then
		for k, profile in pairs(self._fnToProfile) do
			profile.start = chrono.now()
		end
	end]]
	assert(coroutine.resume(self._selfCo))
end

function ScheduleTask:openCall(vFunc:clazz.OpenCaller, vStack:clazz.OpenStack, vTermTuple:clazz.UTermTuple)
	const nList = self._openStackList
	const nMoreLen = #nList + 1
	nList[nMoreLen] = vStack
	const nRet = vFunc(vStack, vTermTuple)
	nList[nMoreLen] = nil
	return nRet
end

function ScheduleTask:traceStack():Ret(OrFalse(clazz.BaseStack))
	const nList = self._openStackList
	return nList[#nList] or self:getStack()
end

function ScheduleTask:getSelfCo():Ret(Thread)
	return self._selfCo
end

function ScheduleTask:canWaitType()
	return not SealStack.is(self._host)
end

function ScheduleTask:runAsync(vFunc:Fn())
	self._runFn = vFunc
	self._scheduleManager:trySchedule(self)
end

function ScheduleTask:getStack():Ret(OrFalse(clazz.SealStack))
	const nHost = self._host
	return SealStack.is(nHost) and nHost
end

function ScheduleTask:makeEvent():Ret(clazz.ScheduleEvent)
	return ScheduleEvent.new(self._scheduleManager, self)
end

function ScheduleTask:errorWaitByStack(vStack:clazz.SealStack)
	const nHost = self._host
	if SealStack.is(nHost) then
		error(nHost:getNode():toExc("stack waiting error"))
	elseif Node.is(nHost) then
		error(nHost:toExc("type not setted"))
	elseif NameReference.is(nHost) then
		vStack:getRuntime():invalidReference(nHost)
		error(vStack:getNode():toExc("refer not setted : "..tostring(nHost)))
	else
		error(vStack:getNode():toExc("type relation waiting exception when type relation"))
	end
end

function ScheduleTask:getNode():Ret(OrFalse(clazz.IBaseNode))
	const nHost = self._host
	if SealStack.is(nHost) then
		return nHost:getNode()
	elseif Node.is(nHost) then
		return nHost
	elseif NameReference.is(nHost) then
		return nHost:getAssignNode()
	else
		return false
	end
end

function ScheduleTask:hook(vCase:Union("call", "return", "line"), vDepth:OrNil(Integer))
	vDepth = vDepth or 3
	const f = debug.getinfo(vDepth, "f").func
	if f == coroutine.yield then
		for k, profile in pairs(self._fnToProfile) do
			const nStart = profile.start
			if nStart then
				profile.accumulate = profile.accumulate + (chrono.now() - nStart)
				profile.start = false
			end
		end
		return
	end
	const nProfile = self._fnToProfile[f]
	if not nProfile then
		local name = ""
		do.pass
			local n = debug.getinfo(vDepth, "Sn")
			if n.what == "C" then
				name = n.name
			else
				local loc = string.format("[%s]:%s", n.short_src, n.linedefined)
				if n.namewhat ~= "" then
					name = string.format("%s (%s)", loc, n.name)
				else
					name = string.format("%s", loc)
				end
			end
		end
		self._fnToProfile[f] = {
			counter = 1,
			start = chrono.now(),
			accumulate = 0,
			name = name,
		}
	else
		if vCase == "return" then
			const nStart = nProfile.start
			if nStart then
				nProfile.accumulate = nProfile.accumulate + (chrono.now() - nStart)
				nProfile.start = false
			end
		else
			nProfile.start = chrono.now()
			nProfile.counter = nProfile.counter + 1
		end
	end
end

function ScheduleTask:getFnToProfile()
	return self._fnToProfile
end

return ScheduleTask
