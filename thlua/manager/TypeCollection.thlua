
const TYPE_BITS = require "thlua.type.TYPE_BITS"

const StringLiteralUnion = require "thlua.union.StringLiteralUnion"
const NumberLiteralUnion = require "thlua.union.NumberLiteralUnion"
const ObjectUnion = require "thlua.union.ObjectUnion"
const FuncUnion = require "thlua.union.FuncUnion"
const ComplexUnion = require "thlua.union.ComplexUnion"
const FalsableUnion = require "thlua.union.FalsableUnion"

(@do
	let.class = import("thlua.type.TypeClass").class
end)

const FastTypeBitsToTrue = {
	[TYPE_BITS.NIL]=true,
	[TYPE_BITS.FALSE]=true,
	[TYPE_BITS.TRUE]=true,
	[TYPE_BITS.THREAD]=true,
	[TYPE_BITS.TRUTH]=true,
}

const TrueBitToTrue = {
	[TYPE_BITS.TRUE]=true,
	[TYPE_BITS.OBJECT]=true,
	[TYPE_BITS.FUNCTION]=true,
	[TYPE_BITS.NUMBER]=true,
	[TYPE_BITS.STRING]=true,
	[TYPE_BITS.THREAD]=true,
}

const TypeCollection = {}
TypeCollection.__index=TypeCollection
TypeCollection.__len=function(self)
	return self.count
end

function.class TypeCollection.new(vManager:class.TypeManager):RetClass(class.TypeCollection)
	const self = setmetatable({.class
		_manager=vManager,
		_type=vManager.type,
		bitsToSet={} @ Dict(Number,Dict(class.IAtomType,True)),
		bits=0 @ Number,
 		count=0 @ Number,
	}, TypeCollection)
	return self
end

function TypeCollection:_putOne(vType:class.IAtomType)
	local nBitsToSet = self.bitsToSet
	local nBits = vType.bits
	local nSet = nBitsToSet[nBits]
	if not nSet then
		nSet = {}
		nBitsToSet[nBits] = nSet
	end
	if not nSet[vType] then
		nSet[vType] = true
		self.count = self.count + 1
	end
end

function TypeCollection:put(vType:class.UAllType)
	vType:foreach(function(vSubType)
		self.bits = self.bits | vSubType.bits
		self:_putOne(vSubType)
	end)
end

function TypeCollection:_makeSimpleTrueType(vBit:Integer, vSet:Dict(class.IAtomType, True)):Ret(class.UAtomUnion)
	local nUnionType:OrNil(class.IUnionType) = nil
	if vBit == TYPE_BITS.TRUE then
		return self._type.True
	elseif vBit == TYPE_BITS.NUMBER then
		local nNumberType = self._type.Number
		if vSet[nNumberType] then
			return nNumberType
		end
		nUnionType = NumberLiteralUnion.new(self._manager)
	elseif vBit == TYPE_BITS.STRING then
		local nStringType = self._type.String
		if vSet[nStringType] then
			return nStringType
		end
		nUnionType = StringLiteralUnion.new(self._manager)
	elseif vBit == TYPE_BITS.OBJECT then
		nUnionType = ObjectUnion.new(self._manager)
	elseif vBit == TYPE_BITS.FUNCTION then
		nUnionType = FuncUnion.new(self._manager)
	elseif vBit == TYPE_BITS.THREAD then
		return self._type.Thread
	else
		error("bit can't be="..tostring(vBit))
	end
	for nType, _ in pairs(vSet) do
		nUnionType:putAwait(nType)
	end
	return self._manager:_unifyUnion(nUnionType)
end

function TypeCollection:mergeToAtomUnion():Ret(class.UAtomUnion)
	local nBits = self.bits
	-- 1. fast type
	if nBits == 0 then
		-- 1) bits=0 for never
		return self._type.Never
	else
		-- 2). count == 1 for only one type, some bit for only one type
		if self.count == 1 or FastTypeBitsToTrue[nBits] then
			const nOneType = (next(self.bitsToSet[nBits]))
			return (assert(nOneType, "logic error when type merge"))
		end
	end
	local nTruableBits = nBits & (~ (TYPE_BITS.NIL | TYPE_BITS.FALSE))
	local nFalsableBits = nBits & (TYPE_BITS.NIL | TYPE_BITS.FALSE)
	-- 2. make true part
	local nTrueBitToType:Dict(Number, class.UAtomUnion) = {}
	for nBit, nSet in pairs(self.bitsToSet) do
		if TrueBitToTrue[nBit] then
			nTrueBitToType[nBit] = self:_makeSimpleTrueType(nBit, nSet)
		end
	end
	local nTrueType:class.UAtomUnion = self._type.Never
	if TrueBitToTrue[nTruableBits] then
		-- if truablebits is bit, then just one case
		nTrueType = nTrueBitToType[nTruableBits]!
	elseif nTruableBits == TYPE_BITS.TRUTH then
		-- truetype is truth
		nTrueType = self._type.Truth
	elseif next(nTrueBitToType) then
		-- if truablebits is not bit and has true part, then true part must has more than one case
		local nComplexUnion = ComplexUnion.new(self._manager, nTruableBits, nTrueBitToType)
		nTrueType = self._manager:_unifyUnion(nComplexUnion)
	end
	-- 3. check false part
	if nFalsableBits == 0 then
		return nTrueType
	else
		local nUnionType = FalsableUnion.new(self._manager, nTrueType, nFalsableBits)
		return self._manager:_unifyUnion(nUnionType)
	end
end

function TypeCollection.is(vData):RetIs(class.TypeCollection)
	return getmetatable(vData) == TypeCollection
end

return TypeCollection
