
const TYPE_BITS = require "thlua.type.TYPE_BITS"

const StringLiteralUnion = require "thlua.type.union.StringLiteralUnion"
const MixingNumberUnion = require "thlua.type.union.MixingNumberUnion"
const IntegerLiteralUnion = require "thlua.type.union.IntegerLiteralUnion"
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const SubType = require "thlua.type.basic.SubType"
const Number = require "thlua.type.basic.Number"
const ObjectUnion = require "thlua.type.union.ObjectUnion"
const FuncUnion = require "thlua.type.union.FuncUnion"
const ComplexUnion = require "thlua.type.union.ComplexUnion"
const FalsableUnion = require "thlua.type.union.FalsableUnion"

(@do
	let.clazz = import("thlua.class").clazz
end)

const FastBitsSet = {
	[TYPE_BITS.NIL]=true,
	[TYPE_BITS.FALSE]=true,
	[TYPE_BITS.TRUE]=true,
	[TYPE_BITS.THREAD]=true,
	[TYPE_BITS.LIGHTUSERDATA]=true,
	[TYPE_BITS.TRUTH]=true,
	[TYPE_BITS.ANY]=true,
}

const TrueBitSet = {
	[TYPE_BITS.TRUE]=true,
	[TYPE_BITS.OBJECT]=true,
	[TYPE_BITS.FUNCTION]=true,
	[TYPE_BITS.NUMBER]=true,
	[TYPE_BITS.STRING]=true,
	[TYPE_BITS.THREAD]=true,
	[TYPE_BITS.LIGHTUSERDATA]=true,
}

const TypeCollection = {}
TypeCollection.__index=TypeCollection

function:class(clazz.TypeCollection) TypeCollection.new(vManager:clazz.TypeManager)
	const self = setmetatable({.class
		_manager=vManager,
		_type=vManager.type,
		_bitsToSet={} @ Dict(Integer, Dict(clazz.IAtomType,True)),
		_bits=0 @ Integer,
 		_count=0 @ Integer,
	}, TypeCollection)
	return self
end

function TypeCollection:put(vAtomType:clazz.IAtomType)
	const nBitsToSet = self._bitsToSet
	local nCurBits = self._bits
	local nCurCount = self._count
	nCurBits = nCurBits | vAtomType.bits
	-- 1. put into type set
	const nAtomBits = vAtomType.bits
	local nSet = nBitsToSet[nAtomBits]
	if not nSet then
		nSet = {}
		nBitsToSet[nAtomBits] = nSet
	end
	if not nSet[vAtomType] then
		nSet[vAtomType] = true
		nCurCount = nCurCount + 1
	end
	self._bits = nCurBits
	self._count = nCurCount
end

function TypeCollection:_makeSimpleTrueType(vBit:Integer, vSet:Dict(clazz.IAtomType, True)):Ret(clazz.UAtomUnion)
	local nUnionType:OrNil(clazz.IUnionType) = nil
	if vBit == TYPE_BITS.TRUE then
		return self._type.True
	elseif vBit == TYPE_BITS.NUMBER then
		const nNumberType = self._type.Number
		if vSet[nNumberType] then
			return nNumberType
		end
		local nHasPartNumber = false
		for nType,v in pairs(vSet) do
			if FloatLiteral.is(nType) or (SubType.is(nType) and Number.is(nType:getSuperType())) then
				nHasPartNumber = true
			end
		end
		const nIntegerType = self._type.Integer
		if vSet[nIntegerType] and not nHasPartNumber then
			return nIntegerType
		end
		if nHasPartNumber then
			nUnionType = MixingNumberUnion.new(self._manager)
		else
			nUnionType = IntegerLiteralUnion.new(self._manager)
		end
	elseif vBit == TYPE_BITS.STRING then
		local nStringType = self._type.String
		if vSet[nStringType] then
			return nStringType
		end
		nUnionType = StringLiteralUnion.new(self._manager)
	elseif vBit == TYPE_BITS.OBJECT then
		nUnionType = ObjectUnion.new(self._manager)
	elseif vBit == TYPE_BITS.FUNCTION then
		nUnionType = FuncUnion.new(self._manager)
	elseif vBit == TYPE_BITS.THREAD then
		return self._type.Thread
	elseif vBit == TYPE_BITS.LIGHTUSERDATA then
		return self._type.LightUserdata
	else
		error("bit can't be="..tostring(vBit))
	end
	for nType, _ in pairs(vSet) do
		nUnionType:putAwait(nType)
	end
	if MixingNumberUnion.is(nUnionType) then
		const nIntegerPart = nUnionType._integerPart
		if IntegerLiteralUnion.is(nIntegerPart) then
			nUnionType._integerPart = self._manager:unionUnifyToType(nIntegerPart) @> clazz.IntegerLiteralUnion
		end
	end
	return self._manager:unionUnifyToType(nUnionType)
end

function TypeCollection:mergeToAtomUnion():Ret(clazz.UAtomUnion)
	local nBits = self._bits
	-- 1. fast type
	if nBits == 0 then
		-- 1) bits=0 for never
		return self._type.Never
	else
		-- 2). count == 1 for only one type, some bit for only one type
		if self._count == 1 or FastBitsSet[nBits] then
			const nOneType = (next(self._bitsToSet[nBits]))
			return (assert(nOneType, "logic error when type merge"))
		end
	end
	local nTruableBits = nBits & (~ (TYPE_BITS.NIL | TYPE_BITS.FALSE))
	local nFalsableBits = nBits & (TYPE_BITS.NIL | TYPE_BITS.FALSE)
	-- 2. make true part
	local nTrueBitToType:Dict(Integer, clazz.UAtomUnion) = {}
	for nBit, nSet in pairs(self._bitsToSet) do
		if TrueBitSet[nBit] then
			nTrueBitToType[nBit] = self:_makeSimpleTrueType(nBit, nSet)
		end
	end
	local nTrueType:clazz.UAtomUnion = self._type.Never
	if TrueBitSet[nTruableBits] then
		-- if truablebits is bit, then just one case
		nTrueType = nTrueBitToType[nTruableBits]!
	elseif nTruableBits == TYPE_BITS.TRUTH then
		-- truetype is truth
		nTrueType = self._type.Truth
	elseif next(nTrueBitToType) then
		-- if truablebits is not bit and has true part, then true part must has more than one case
		const nComplexUnion = ComplexUnion.new(self._manager, nTruableBits, nTrueBitToType)
		nTrueType = self._manager:unionUnifyToType(nComplexUnion)
	end
	-- 3. check false part
	if nFalsableBits == 0 then
		return nTrueType
	else
		local nUnionType = FalsableUnion.new(self._manager, nTrueType, nFalsableBits)
		return self._manager:unionUnifyToType(nUnionType)
	end
end

function.open TypeCollection.is(vData):isguard(clazz.TypeCollection)
	return getmetatable(vData) == TypeCollection
end

return TypeCollection
