
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const TypeCollection = require "thlua.manager.TypeCollection"
const Node = require "thlua.code.Node"
const Exception = require "thlua.Exception"

const Never = require "thlua.union.Never"
const StringLiteral = require "thlua.type.StringLiteral"
const String = require "thlua.type.String"
const NumberLiteral = require "thlua.type.NumberLiteral"
const Number = require "thlua.type.Number"
const BooleanLiteral= require "thlua.type.BooleanLiteral"
const Nil = require "thlua.type.Nil"
const Thread = require "thlua.type.Thread"
const Truth = require "thlua.type.Truth"
const MetaObject = require "thlua.object.MetaObject"
const LuaTable = require "thlua.object.LuaTable"
const LuaFunction = require "thlua.func.LuaFunction"
const NativeFunction = require "thlua.func.NativeFunction"
const TypeFunction = require "thlua.func.TypeFunction"
const Reference = require "thlua.refer.Reference"
const Variable = require "thlua.func.Variable"

const MemberFunction = require "thlua.func.MemberFunction"

const StringLiteralUnion = require "thlua.union.StringLiteralUnion"
const NumberLiteralUnion = require "thlua.union.NumberLiteralUnion"
const ObjectUnion = require "thlua.union.ObjectUnion"
const FuncUnion = require "thlua.union.FuncUnion"
const FalsableUnion = require "thlua.union.FalsableUnion"
const ComplexUnion = require "thlua.union.ComplexUnion"

const RetTuples = require "thlua.tuple.RetTuples"
const TypeTuple = require "thlua.tuple.TypeTuple"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"

const MetaEventCom = require "thlua.object.MetaEventCom"
const native = require "thlua.native"

(@do
	let.class = import("thlua.type.TypeClass").class
	let.WaitingInfo = Struct {
		waitSid = Integer,
		dependCo = Thread,
	}
end)

const function CoroutineInterrupt():RetClass(class.CoroutineInterrupt)
	return {.class}
end

const TypeManager = {}
TypeManager.__index=TypeManager

function TypeManager.new(vRuntime:class.Runtime):RetClass(class.TypeManager)
	const self = setmetatable({.class
		_runtime=vRuntime,
		-- type items
		type={
			Object=nil @ class.MetaObject,
		},
		generic={},
		builtin={},
		_pairToContain={} @ Dict(Integer, class.Reference),
		_literalDict={}@Struct {[Number]=class.NumberLiteral, [String]=class.StringLiteral},
		_unionSignToType={}@Dict(String, class.UAtomUnion),
		_typeIdCounter=0@Integer,
		-- coroutine items
		_coStop=CoroutineInterrupt(),
		_coToRefer={} @ Dict(Thread, class.Reference),
		_coToScheduleParam={}@Dict(Thread, Union(True, Fn())),
		_coToWaitingInfo={}@Dict(Thread, WaitingInfo),
		_sessionIdCounter=0@Integer,
		_selfCo=coroutine.running(),
	}, TypeManager)
	self.type.Never = Never.new(self)
	self.type.Nil = Nil.new(self)
	self.type.False = BooleanLiteral.new(self, false)
	self.type.True = BooleanLiteral.new(self, true)
	self.type.Thread = Thread.new(self)
	self.type.Number = Number.new(self)
	self.type.Integer = self.type.Number
	self.type.String = String.new(self)
	self.type.Truth = Truth.new(self)
	for k, nType in pairs(self.type @!! Dict(String, class.UAtomUnion)) do
		self:_recordTypeUnionSign(nType)
	end
	self.type.Boolean = self:buildUnion(vRuntime:getNode(), self.type.False, self.type.True)
	self.type.Any = self:buildUnion(vRuntime:getNode(), self.type.False, self.type.Nil, self.type.Truth)
	self.type.Object = self:buildInterface(self._runtime:getNode(), {}, nil, false)
	self.generic.Dict = self:GenericReference(function(vKey,vValue)
		assert(vKey and vValue, "key or value can't be nil when build Dict")
		return self:buildStruct(self._runtime:getNode(), {[vKey]=vValue}, {__next=vKey})
	end)
	self.generic.IDict = self:GenericReference(function(vKey,vValue)
		assert(vKey and vValue, "key or value can't be nil when build IDict")
		return self:buildInterface(self._runtime:getNode(), {[vKey]=vValue}, {__next=vKey})
	end)
	self.generic.List = self:GenericReference(function(vValue)
		assert(vValue, "value can't be nil when build List")
		return self:buildStruct(self._runtime:getNode(), {[self.type.Integer]=vValue}, {__next=self.type.Integer, __len=self.type.Integer})
	end)
	self.generic.IList = self:GenericReference(function(vValue)
		assert(vValue, "value can't be nil when build IList")
		return self:buildInterface(self._runtime:getNode(), {[self.type.Integer]=vValue}, {__len=self.type.Integer})
	end)
	self.builtin.string=native.make_string(self)
	self.builtin.next=native.make_next(self)
	self.builtin.inext=native.make_inext(self)
	self.builtin.bop={
		mathematic=native.make_mathematic(self),
		comparison=native.make_comparison(self),
		bitwise=native.make_bitwise(self),
		concat=native.make_concat(self),
	}
	return self
end

const AtomMetatableSet:Dict(Truth, String) = {
	-- not recursive
	[Nil]="Nil",
	[String]="String",
	[StringLiteral]="StringLiteral",
	[Number]="Number",
	[NumberLiteral]="NumberLiteral",
	[BooleanLiteral]="BooleanLiteral",
	[Thread]="Thread",
	[Truth]="Truth",
	-- may recursive
	[MetaObject]="MetaObject",
	[LuaTable]="LuaTable",
	[TypeFunction]="TypeFunction",
	[LuaFunction]="LuaFunction",
	[NativeFunction]="NativeFunction",
}

const AtomUnionMetatableSet:Dict(Truth, String) = {
	[Never]="Never",
	[NumberLiteralUnion]="NumberLiteralUnion",
	[StringLiteralUnion]="StringLiteralUnion",
	[FalsableUnion]="FalsableUnion",
	[ObjectUnion]="ObjectUnion",
	[FuncUnion]="FuncUnion",
	[ComplexUnion]="ComplexUnion",
}

for k, v in pairs(AtomMetatableSet) do
	AtomUnionMetatableSet[k] = v
end

function TypeManager:pcheckNamespaceAssigValue(vData:Any):Ret(True, Union(class.Reference, class.GenericFunction, class.IAtomType)):Ret(False, String)
	local meta = getmetatable(vData)
	if meta and (AtomMetatableSet[meta] or meta == Reference) then
		return true, vData @!! Union(class.Reference, class.IAtomType)
	elseif type(vData) == "function" then
		return true, vData @!! class.GenericFunction
	else
		return false, "not atom or reference"
	end
end

function TypeManager:tryLuaTable(vType:class.UAllType):Ret(False):Ret(True, class.LuaTable)
	if Reference.is(vType) then
		vType = vType:checkAtomUnion()
	end
	if not LuaTable.is(vType) then
		return false
	else
		return true, vType
	end
end

function TypeManager:basingByDefault(vType:class.UAtomUnion)
	vType:foreach(function(vAtomType)
		if LuaTable.is(vAtomType) then
			vAtomType:checkBaseObjectType()
		end
	end)
end

function TypeManager:assertAllType(vData:Truth):Ret(class.UAllType)
	local meta = getmetatable(vData)
	if meta and (AtomUnionMetatableSet[meta] or meta == Reference) then
		return vData @!! class.UAllType
	else
		error("assertAllType failed, type="..type(vData)..tostring(debug.traceback()))
	end
end

function.pass TypeManager:_checkAllType(vData:Any):Ret(OrFalse(class.UAllType))
	local t = type(vData)
	if t == "table" then
		local meta = getmetatable(vData)
		if AtomMetatableSet[meta] then
			return vData
		end
	end
	if Reference.is(vData) then
		return vData
	end
	return false
end

function.pass TypeManager:_toType(vData:Any):Ret(class.IAtomType)
	local t = type(vData)
	if t == "table" then
		local meta = getmetatable(vData)
		if AtomMetatableSet[meta] then
			return vData
		else
			error("to type failed")
		end
	elseif t == "number" or t == "string" then
		return self:Literal(vData)
	else
		error("_toType("..t..") todo")
	end
end

function TypeManager:TypeCollection():Ret(class.TypeCollection)
	return TypeCollection.new(self)
end

function TypeManager:_buildCombineObject(vNode:class.IAstNode, vIsInterface:Boolean, vObjectList:List(class.UAllType)):Ret(class.Reference)
	const nObjectRefer = self:Reference(false)
	nObjectRefer:setRawAsync(vNode, function()
		if vIsInterface then
			assert(#vObjectList>=1, "Interface must take at least one arguments")
		else
			assert(#vObjectList >= 2, "StructExtend must take at least one interface after struct")
		end
		const nKeyList:List(class.IAtomType) = {}
		const nAllValueDict:class.MemberDict = {}
		const nIntersectSet:Dict(class.MetaObject, True) = {}
		const nMetaEventComList:List(class.MetaEventCom) = {}
		local nIntersectNextKey:OrFalse(class.UAllType) = self.type.Truth
		for i=1,#vObjectList do
			local nMetaObject = vObjectList[i]!
			if Reference.is(nMetaObject) then
				nMetaObject = nMetaObject:waitTypeCom():getTypeAwait()
			end
			if not MetaObject.is(nMetaObject) then
				error("Interface or Struct is expected here")
				break
			end
			if i == 1 then
				if vIsInterface then
					assert(nMetaObject:isInterface(), "Intersect must take Interface")
					nIntersectSet[nMetaObject] = true
				else
					assert(not nMetaObject:isInterface(), "StructExtend must take Struct as first argument")
				end
			else
				assert(nMetaObject:isInterface(), vIsInterface
					and "Intersect must take Interface as args"
					or "StructExtend must take Interface after first argument")
				nIntersectSet[nMetaObject] = true
			end
			local nValueDict = nMetaObject:getMemberDict()
			const nKeyRefer, nNextKey = nMetaObject:getKeyTypes()
			for _, nKeyType in ipairs(nKeyRefer:waitTypeCom():getListAwait()) do
				nKeyList[#nKeyList + 1] = nKeyType
				nAllValueDict[nKeyType] = nValueDict[nKeyType]
			end
			nMetaEventComList[#nMetaEventComList + 1] = nMetaObject:getMetaEventCom() or nil
			if nIntersectNextKey then
				if nNextKey then
					const nTypeOrFalse = nIntersectNextKey:safeIntersect(nNextKey)
					if not nTypeOrFalse then
						error("intersect error")
					else
						nIntersectNextKey = nTypeOrFalse
					end
				else
					nIntersectNextKey = false
				end
			end
		end
		const nKeyRefer = self:Reference(false)
		const nNewObject = MetaObject.new(self, vIsInterface, nKeyRefer, nIntersectNextKey)
		if #nMetaEventComList > 0 then
			const nNewEventCom = self:makeMetaEventCom(nNewObject)
			nNewEventCom:initByMerge(nMetaEventComList)
			nNewObject:lateInit(nIntersectSet, nAllValueDict, nNewEventCom)
		else
			nNewObject:lateInit(nIntersectSet, nAllValueDict, false)
		end
		nKeyRefer:setRawAsync(vNode, function()
			return nKeyList
		end, function(_)
			-- TODO check key's count and intersect valid
		end)
		return {self:_recordTypeUnionSign(nNewObject)}
	end)
	return nObjectRefer
end

function TypeManager:buildStructExtend(vNode:class.IAstNode, vFirst:Union(Dict(Truth, Truth), class.UAllType),
	...:Union(class.Reference, class.MetaObject)):Ret(class.Reference)
	const nStruct = self:_checkAllType(vFirst) or self:buildStruct(vNode, vFirst @ Dict(Truth, Truth))
	const l:List(class.UAllType) = {nStruct, ...}
	return self:_buildCombineObject(vNode, false, l)
end

function TypeManager:buildIntersect(vNode:class.IAstNode, ...:Union(class.Reference, class.MetaObject)):Ret(class.Reference)
	const l:List(class.UAllType) = {...}
	return self:_buildCombineObject(vNode, true, l)
end

function TypeManager:checkedUnion(...:class.UAllType):Ret(class.UAtomUnion)
	const l:List(class.UAllType) = {...}
	const nCollection = self:TypeCollection()
	for i=1, select("#", ...) do
		l[i]!:foreach(function(vAtomType)
			nCollection:put(vAtomType)
		end)
	end
	return nCollection:mergeToAtomUnion()
end

function TypeManager:buildUnion(vNode:class.IAstNode, ...:Truth):Ret(class.Reference)
	local l = {...}
	const nLen = select("#", ...)
	local nNewRefer = self:Reference(false)
	nNewRefer:setRawAsync(vNode, function()
		local nTypeList:List(class.IAtomType) = {}
		for i=1, nLen do
			local nItem = l[i]
			if Reference.is(nItem) then
				local nList = nItem:waitTypeCom():getListAwait()
				table.move(nList, 1, #nList, #nTypeList + 1, nTypeList)
			else
				nTypeList[#nTypeList + 1] = self:_toType(nItem)
			end
		end
		return nTypeList
	end)
	return nNewRefer
end

function TypeManager:buildInterface(vNode:class.IAstNode, vTable:Dict(Truth,Truth), vMetaEventDict:OrNil(Dict(String, class.UAllType))):Ret(class.MetaObject)
	return self:_buildMetaObject(vNode, vTable, vMetaEventDict, true)
end

function TypeManager:buildStruct(vNode:class.IAstNode, vTable:Dict(Truth,Truth), vMetaEventDict:OrNil(Dict(String, class.UAllType))):Ret(class.MetaObject)
	return self:_buildMetaObject(vNode, vTable, vMetaEventDict, false)
end

function TypeManager:_buildMetaObject(vNode:class.IAstNode, vTable:Dict(Truth,Truth), vMetaEventDict:OrNil(Dict(String, class.UAllType)), vIsInterface:Boolean):Ret(class.MetaObject)
	const nKeyRefer = self:Reference(false)
	const nNewObject = MetaObject.new(self, vIsInterface, nKeyRefer, vMetaEventDict and vMetaEventDict.__next or false)
	nKeyRefer:setRawAsync(vNode, function()
		const nKeyList:List(class.IAtomType) = {}
		const nValueDict:Dict(class.IAtomType, Union(class.UAllType, class.MemberFunction)) = {}
		local nKeyCount = 0
		for nKey, nValue in pairs(vTable) do
			local nValueType:OrNil(class.UAllType, class.MemberFunction)
			if Reference.is(nValue) then
				nValueType = nValue
			elseif MemberFunction.is(nValue) then
				nValueType = nValue
			else
				nValueType = self:_toType(nValue)
			end
			local nKeyType:OrNil(class.UAllType)
			if Reference.is(nKey) then
				nKeyType = nKey
			else
				nKeyType =	self:_toType(nKey)
			end
			nKeyType:foreachAwait(function(vAtomType)
				nKeyCount = nKeyCount + 1
				nKeyList[#nKeyList + 1] = vAtomType
				if vAtomType:isSingleton() then
					nValueDict[vAtomType] = nValueType
				else
					assert(nValueType and not MemberFunction.is(nValueType), "valuetype with non-singleton key can't be nil or MemberFunction")
					nValueDict[vAtomType] = self:buildUnion(vNode, nValueType, self.type.Nil)
				end
			end)
		end
		if vMetaEventDict then
			const nNewEventCom = self:makeMetaEventCom(nNewObject)
			nNewEventCom:initByEventDict(vMetaEventDict)
			nNewObject:lateInit({}, nValueDict, nNewEventCom)
		else
			nNewObject:lateInit({}, nValueDict, false)
		end
		return nKeyList
	end, function(vKeyAtomUnion)
		const nList = nKeyRefer:waitTypeCom():getListAwait()
		local nFinalCount = 0
		vKeyAtomUnion:foreach(function(_)
			nFinalCount = nFinalCount + 1
		end)
		if nFinalCount ~= #nList then
			error("Object's key can not has intersect part")
		end
	end)
	return self:_recordTypeUnionSign(nNewObject)
end

function TypeManager:buildIDict(vNode:class.IAstNode, vKey:class.UAtomUnion, vValue:class.UAllType):Ret(class.MetaObject)
	return self:buildInterface(vNode, {[vKey]=vValue})
end

function TypeManager:buildDict(vNode:class.IAstNode, vKey:class.UAtomUnion, vValue:class.UAllType):Ret(class.MetaObject)
	return self:buildStruct(vNode, {[vKey]=vValue}, {__next=vKey})
end

function TypeManager:buildIList(vNode:class.IAstNode, vValue:class.UAllType):Ret(class.MetaObject)
	return self:buildInterface(vNode, {[self.type.Integer]=vValue}, {__len=self.type.Integer})
end

function TypeManager:buildList(vNode:class.IAstNode, vValue:class.UAllType):Ret(class.MetaObject)
	return self:buildStruct(vNode, {[self.type.Integer]=vValue}, {__len=self.type.Integer, __next=self.type.Integer})
end

function TypeManager:buildOrNil(vNode:class.IAstNode, ...:Truth):Ret(class.Reference)
	return self:buildUnion(vNode, self.type.Nil, ...)
end

function TypeManager:buildOrFalse(vNode:class.IAstNode, ...:Truth):Ret(class.Reference)
	return self:buildUnion(vNode, self.type.False, ...)
end

function TypeManager:_unifyUnion(vNewType:class.IUnionType):Ret(class.UAtomUnion)
	local nSign = vNewType:unionSign()
	local nSignToType = self._unionSignToType
	local nOldType = nSignToType[nSign]
	if not nOldType then
		vNewType:initTypeId(self:genTypeId())
		nSignToType[nSign] = vNewType
		return vNewType
	else
		return nOldType
	end
end

function TypeManager:_recordTypeUnionSign(vType):open()
	self._unionSignToType[vType:unionSign()] = vType
	return vType
end

function TypeManager:NativeFunction(vFunc:class.GenNativeFunc):Ret(class.NativeFunction)
	return self:_recordTypeUnionSign(NativeFunction.new(self, vFunc))
end

function TypeManager:LuaFunction():Ret(class.LuaFunction)
	return self:_recordTypeUnionSign(LuaFunction.new(self))
end

function TypeManager:LuaTable():Ret(class.LuaTable)
	return self:_recordTypeUnionSign(LuaTable.new(self))
end

function TypeManager:Boolean(vValue):Ret(class.BooleanLiteral)
	if vValue then
		return self.type.True
	else
		return self.type.False
	end
end

function TypeManager:Literal(vValue:Union(String, Number)):Ret(Union(class.NumberLiteral,class.StringLiteral))
	local t = type(vValue)
	local nLiteralDict = self._literalDict
	local nLiteralType = nLiteralDict[vValue]
	if not nLiteralType then
		if t == "number" then
			nLiteralType = NumberLiteral.new(self, vValue)
			nLiteralDict[vValue] = nLiteralType
		elseif t == "string" then
			nLiteralType = StringLiteral.new(self, vValue)
			nLiteralDict[vValue] = nLiteralType
		else
			error("literal must take number or string value"..t)
		end
		self:_recordTypeUnionSign(nLiteralType)
	end
	return nLiteralType
end

function TypeManager:Tuple(...:Truth):Ret(class.TypeTuple)
	local nTypeList:List(class.UAllType) = {}
	for i=1, select("#", ...) do
		local nArg = select(i, ...)
		assert(nArg, "make thlua happy")
		if Reference.is(nArg) then
			nTypeList[i] = nArg
		else
			nTypeList[i] = self:assertAllType(nArg)
		end
	end
	return TypeTuple.new(self, nTypeList)
end

function TypeManager:Variable(vIsGeneric:Boolean):Ret(class.Variable)
	return Variable.new(self, vIsGeneric)
end

function TypeManager:VoidRetTuples():Ret(class.RetTuples)
	const nFirst = self.type.Nil
	return RetTuples.new(self, nFirst, {[nFirst]=self:Tuple()})
end

function TypeManager:SingleRetTuples(vTypeTuple:class.TypeTuple):Ret(class.RetTuples)
	const nFirst = vTypeTuple:get(1)
	return RetTuples.new(self, nFirst, {[nFirst]=vTypeTuple})
end

function TypeManager:retConcat(vNode:class.IAstNode, vRetTuples:class.RetTuples, vTypeTuple:class.TypeTuple):Ret(class.RetTuples)
	const nFirstToTuple:Dict(class.UAllType, class.TypeTuple) = {}
	vRetTuples:foreachWithFirst(function(vTuple, vFirst)
		nFirstToTuple[vFirst] = vTuple
	end)
	nFirstToTuple[vTypeTuple:get(1)] = vTypeTuple
	const nFirstRefer = self:Reference(false)
	local nTypeList:List(class.IAtomType) = {}
	nFirstRefer:setRawAsync(vNode, function()
		for nFirst, _ in pairs(nFirstToTuple) do
			nFirst:foreachAwait(function(vSubType)
				nTypeList[#nTypeList + 1] = vSubType
			end)
		end
		return nTypeList
	end, function(vAtomUnion)
		local nCount = 0
		vAtomUnion:foreach(function()
			nCount = nCount + 1
		end)
		if nCount ~= #nTypeList then
			error("first type has intersect part")
		end
	end)
	return RetTuples.new(self, nFirstRefer, nFirstToTuple)
end

function TypeManager:buildMfn(vNode:class.IAstNode, ...:Truth):Ret(class.MemberFunction)
	local nArgTuple = self:Tuple(self.type.Truth, ...)
	return MemberFunction.new(self, vNode, nArgTuple, false)
end

function TypeManager:buildFn(vNode:class.IAstNode, ...:Truth):Ret(class.TypeFunction)
	local nArgTuple = self:Tuple(...)
	return self:_recordTypeUnionSign(TypeFunction.new(self, vNode, nArgTuple, false))
end

function TypeManager:checkedFn(...:Truth):Ret(class.TypeFunction)
	local nArgTuple = self:Tuple(...)
	return self:_recordTypeUnionSign(TypeFunction.new(self, self._runtime:getNode(), nArgTuple, false))
end

function TypeManager:Function(vArgTuple:class.UTypeTuple, vRetTuples:class.RetTuples):Ret(class.TypeFunction)
	assert(TypeTuple.is(vArgTuple) or TypeTupleDots.is(vArgTuple))
	assert(RetTuples.is(vRetTuples))
	local nFunc = TypeFunction.new(self, self._runtime:getNode(), vArgTuple, vRetTuples)
	return self:_recordTypeUnionSign(nFunc)
end

function TypeManager:RefineTerm(vType:class.UAllType):Ret(class.RefineTerm)
	local nType = vType:checkAtomUnion()
	nType:foreach(function(vSubType)
		if LuaTable.is(vSubType) then
			-- vSubType:checkDefine()
		end
	end)
	return RefineTerm.new(self, nType)
end

function TypeManager:TermTuple(vTermList:List(class.RefineTerm), vTermTupleOrNil:OrNil(class.TermTuple)):Ret(class.TermTuple)
	local nTermList:List(class.RefineTerm) = {}
	local nTypeList:List(class.UAtomUnion) = {}
	for _, nTerm in ipairs(vTermList) do
		local i = #nTermList + 1
		nTermList[i] = nTerm
		nTypeList[i] = nTerm:getType()
	end
	local nRepeatType:Union(False, class.UAllType) = false
	if vTermTupleOrNil then
		for i1=1, #vTermTupleOrNil do
			local nTerm = vTermTupleOrNil:get(i1)
			local i2 = #nTermList + 1
			nTermList[i2] = nTerm
			nTypeList[i2] = nTerm:getType()
		end
		nRepeatType = vTermTupleOrNil:getRepeatType()
	end
	const nTypeTuple = self:Tuple(table.unpack(nTypeList))
	if nRepeatType then
		const nTypeTupleDots = nTypeTuple:Dots(nRepeatType)
		return TermTuple.new(self, nTermList, nTypeTupleDots)
	else
		return TermTuple.new(self, nTermList, nTypeTuple)
	end
end

function TypeManager:makeMetaEventCom(vObject:Union(class.LuaTable, class.MetaObject)):Ret(class.MetaEventCom)
	return MetaEventCom.new(self, vObject)
end

function TypeManager:GenericReference(vFunc:class.GenericFunction):Ret(class.Reference)
	const nRefer = self:Reference(false)
	nRefer:setAssignAsync(self._runtime:getNode(), function()
		return vFunc
	end)
	return nRefer
end

function TypeManager:Reference(vName:Union(String, False)):Ret(class.Reference)
	const nRefer = Reference.new(self, vName)
	self._coToRefer[nRefer:getSelfCo()] = nRefer
	return nRefer
end

function TypeManager:mergePairList(vTypePairList:List(Struct {class.UAtomUnion, class.UAtomUnion})):Ret(class.UAtomUnion, Dict(class.IAtomType, class.UAtomUnion))
	local nCollection = self:TypeCollection()
	for _, nPair in ipairs(vTypePairList) do
		local nFieldType = nPair[1]
		if nFieldType:isReference() then
			nFieldType = nFieldType:checkAtomUnion()
			nPair[1] = nFieldType
		end
		nCollection:put(nFieldType)
	end
	local nKeyUnion = nCollection:mergeToAtomUnion()
	local nTypeDict:Dict(class.IAtomType, class.UAtomUnion) = {}
	for _, nPair in ipairs(vTypePairList) do
		local nKey = nPair[1]
		local nValueType = nPair[2]
		nKey:foreach(function(vSubType)
			local nContainType = assert(nKeyUnion:containAtom(vSubType), "merge error")
			local nOldType = nTypeDict[nContainType]
			if nOldType then
				nTypeDict[nContainType] = nOldType | nValueType
			else
				nTypeDict[nContainType] = nValueType
			end
		end)
	end
	return nKeyUnion, nTypeDict
end

function TypeManager:mergeToRefineTerm(vTypeCasePairList:List(class.TypeCasePair)):Ret(class.RefineTerm)
	local nCollection = self:TypeCollection()
	for _, nPair in ipairs(vTypeCasePairList) do
		local nFieldType = nPair[1]
		if nFieldType:isReference() then
			nFieldType = nFieldType:checkAtomUnion()
			nPair[1] = nFieldType
		end
		nCollection:put(nFieldType)
	end
	local nKeyUnion = nCollection:mergeToAtomUnion()
	local nTypeDict:Dict(class.IAtomType, class.TermCase) = {}
	for _, nPair in ipairs(vTypeCasePairList) do
		local nKey = nPair[1]
		local nCase = nPair[2]
		nKey:foreach(function(vSubType)
			local nContainType = assert(nKeyUnion:containAtom(vSubType), "merge error")
			local nOldCase = nTypeDict[nContainType]
			if nOldCase then
				nTypeDict[nContainType] = nOldCase | nCase
			else
				nTypeDict[nContainType] = nCase
			end
		end)
	end
	return RefineTerm.new(self, nKeyUnion, nTypeDict)
end

function TypeManager:coWait(vWaitCo:Thread, vWaitSid:Integer, vDependCo:OrNil(Thread))
	assert(vWaitCo == coroutine.running(), "wait co must be current co")
	if vDependCo then
		const nWaitingRefer = self._coToRefer[vWaitCo]
		if not nWaitingRefer then
			const nDependRefer = self._coToRefer[vDependCo]
			error("can only call coWait in Reference's coroutine, try to get:"..tostring(nDependRefer))
		end
		local nCurCo:OrNil(Thread) = vDependCo
		while nCurCo do
			if nCurCo == vWaitCo then
				break
			else
				const nNextWaitingInfo = self._coToWaitingInfo[nCurCo]
				if nNextWaitingInfo then
					nCurCo = nNextWaitingInfo.dependCo
				else
					nCurCo = nil
					break
				end
			end
		end
		if nCurCo then
			error(Exception.new("recursive build type:"..tostring(self._coToRefer[nCurCo])))
		end
	else
		vDependCo = self._selfCo
	end
	self._coToWaitingInfo[vWaitCo] = {
		waitSid = vWaitSid,
		dependCo = vDependCo,
	}
	const nSucc = coroutine.yield()
	if not nSucc then
		error(self._coStop)
	end
end

function TypeManager:coWakeup(vWaitCo:Thread, vWaitSid:Integer)
	const nWaitingInfo = self._coToWaitingInfo[vWaitCo]
	if not nWaitingInfo then
		-- session is cancel
		print("session is cancel when wakeup")
		return
	elseif vWaitSid ~= nWaitingInfo.waitSid then
		print("wait sid not match when wakeup")
		return
	end
	self._coToWaitingInfo[vWaitCo] = nil
	self._coToScheduleParam[vWaitCo] = true
	if coroutine.running() == self._selfCo then
		self:_schedule()
	end
end

function TypeManager:coStart(vCo:Thread, vFunc:Fn())
	self._coToScheduleParam[vCo] = vFunc
	if coroutine.running() == self._selfCo then
		self:_schedule()
	end
end

function TypeManager:_schedule()
	while true do
		const nCoToParam = self._coToScheduleParam
		if not next(nCoToParam) then
			break
		else
			self._coToScheduleParam = {}@Dict(Thread, Union(True, Fn()))
			for co, param in pairs(nCoToParam) do
				assert(coroutine.resume(co, param))
			end
		end
	end
end

function TypeManager:makePair(vLeft:class.IAtomType, vRight:class.IAtomType):Ret(Integer)
	const nLeftId, nRightId = vLeft.id, vRight.id
	assert(nLeftId ~= 0 and nRightId ~=0, "use id ==0")
	return (nLeftId << 32) + nRightId
end

function TypeManager:makeDuPair(vLeft:class.IAtomType, vRight:class.IAtomType):Ret(Boolean, Integer, Integer)
	const nLeftId, nRightId = vLeft.id, vRight.id
	if nLeftId < nRightId then
		return false, (nLeftId << 32) + nRightId, (nRightId << 32) + nLeftId
	else
		return true, (nRightId << 32) + nLeftId, (nLeftId << 32) + nRightId
	end
end

function TypeManager:getTypePairContain(vLeft:class.IAtomType, vRight:class.IAtomType):Ret(OrNil(class.Reference))
	const nPair = self:makePair(vLeft, vRight)
	return self._pairToContain[nPair]
end

function TypeManager:attachPairContain(vLeft:class.MetaObject, vRight:class.MetaObject, vWaitCreate:Boolean):Ret(OrNil(class.RelationEnum))
	const nInverse, nLRPair, nRLPair = self:makeDuPair(vLeft, vRight)
	if nInverse then
		vRight, vLeft = vLeft, vRight
	end
	local nContainRefer = self._pairToContain[nLRPair]
	local nResultType:OrFalse(class.UAtomUnion) = false
	if vWaitCreate then
		if not nContainRefer then
			nContainRefer = self:Reference(false)
			self._pairToContain[nLRPair] = nContainRefer
			nContainRefer:setRawAsync(self._runtime:getNode(), function()
				const nLRContain = vLeft:assumeContainObject({[nLRPair]=true}, vRight)
				const nRLContain = vRight:assumeContainObject({[nRLPair]=true}, vLeft)
				if nLRContain and nRLContain then
					return {self:Literal("=")}
				elseif nLRContain then
					return {self:Literal(">")}
				elseif nRLContain then
					return {self:Literal("<")}
				else
					if vLeft:isInterface() and vRight:isInterface() then
						const nIntersect = vLeft:assumeIntersectInterface({[nLRPair]=true,[nRLPair]=true}, vRight)
						if nIntersect then
							return {self:Literal("&")}
						end
					end
					return {self:Literal("~")}
				end
			end)
		end
		nResultType = nContainRefer:waitTypeCom():getTypeAwait()
	else
		if nContainRefer then
			nResultType = nContainRefer:waitTypeCom():getResultType()
		end
	end
	if not nResultType then
		return nil
	else
		const nLiteral = nResultType @!! class.StringLiteral
		const nRelation = (nLiteral:getLiteral()) @!! class.RelationEnum
		if nInverse then
			if nRelation == ">" then
				return "<"
			elseif nRelation == "<" then
				return ">"
			else
				return nRelation
			end
		else
			return nRelation
		end
	end
end

function TypeManager:getRuntime():Ret(class.Runtime)
	return self._runtime
end

function TypeManager:literal2Primitive(vType:class.UAtomUnion):Ret(class.UAtomUnion)
	if BooleanLiteral.is(vType) then
		return self.type.Boolean:checkAtomUnion()
	elseif NumberLiteral.is(vType) then
		return self.type.Number
	elseif StringLiteral.is(vType) then
		return self.type.String
	else
		return vType
	end
end

function TypeManager:genTypeId():Ret(Integer)
	local nNewId = self._typeIdCounter + 1
	self._typeIdCounter = nNewId
	return nNewId
end

function TypeManager:genSessionId():Ret(Integer)
	local nNewId = self._sessionIdCounter + 1
	self._sessionIdCounter = nNewId
	return nNewId
end

function TypeManager:dump()
	for k,v in pairs(self._unionSignToType) do
		print(k, tostring(v))
	end
end

return TypeManager
