
const TermTuple = require "thlua.tuple.TermTuple"
const TypedFunction = require "thlua.type.func.TypedFunction"
const SealTable = require "thlua.type.object.SealTable"
const OpenTable = require "thlua.type.object.OpenTable"
const AutoTable = require "thlua.type.object.AutoTable"
const RefineTerm = require "thlua.term.RefineTerm"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const Integer = require "thlua.type.basic.Integer"
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const Number = require "thlua.type.basic.Number"
const Truth = require "thlua.type.basic.Truth"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const native = {}

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.StringToAtomUnion = Dict(String, clazz.UAtomUnion)
end)

function native._toTable(vManager:clazz.TypeManager, vTable:StringToAtomUnion):Ret(clazz.AutoTable)
	const nPairList:List(Struct{clazz.UAtomUnion, clazz.UAtomUnion}) = {}
	for k,v in pairs(vTable) do
		nPairList[#nPairList + 1] = {
			vManager:Literal(k), v
		}
	end
  const nKeyUnion, nTypeDict = vManager:typeMapReduce@<clazz.UAtomUnion>(nPairList, function(vList)
		return vManager:unionReduceType(vList)
	end)
	const nTable = AutoTable.new(vManager, vManager:getRuntime():getNode(), vManager:getRuntime():getRootStack())
	nTable:initByKeyValue(vManager:getRuntime():getNode(), nKeyUnion, nTypeDict)
	return nTable
end

function native.make(vRuntime:clazz.BaseRuntime):Ret(clazz.AutoTable)
	const nManager = vRuntime:getTypeManager()
	const global:StringToAtomUnion = {
		--- meta_native
		setmetatable=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			return vStack:withOnePushContext(vStack:getNode(), function(vContext)
				const nTerm1 = vTermTuple:checkFixed(vContext, 1)
				local nType1 = nTerm1:getType()
				local nType2 = vTermTuple:checkFixed(vContext, 2):getType()
				if nType1:isUnion() or nType2:isUnion() then
					vContext:error("setmetatable can't take union type")
				else
					nType1 = nType1:checkAtomUnion()
					nType2 = nType2:checkAtomUnion()
					if SealTable.is(nType2) or OpenTable.is(nType2) then
						nType2:setAssigned(vContext)
						nType1:native_setmetatable(vContext, nType2)
					else
						vContext:error("metatable must be table but get:"..tostring(nType2))
					end
				end
				vContext:nativeOpenReturn(nTerm1)
			end):mergeFirst()
		end),
		getmetatable=nManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(vContext, 1)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			nTerm1:foreach(function(vType1, vVariableCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType1:native_getmetatable(vContext),
					vVariableCase,
				}
			end)
			return vContext:mergeToRefineTerm(nTypeCaseList)
		end),
		next=nManager.builtin.next,
		ipairs=nManager:metaNativeOpenFunction(function(vContext, vType)
			const nTypeTuple = vType:meta_ipairs(vContext) or nManager:TypeTuple(vContext:getNode(), {nManager.builtin.inext, vType, nManager:Literal(0)})
			vContext:pushFirstAndTuple(nTypeTuple:get(1):checkAtomUnion(), nTypeTuple)
		end),
		pairs=nManager:metaNativeOpenFunction(function(vContext, vType)
			const nTypeTuple = vType:meta_pairs(vContext) or nManager:TypeTuple(vContext:getNode(), {nManager.builtin.next, vType, nManager.type.Nil})
			vContext:pushFirstAndTuple(nTypeTuple:get(1):checkAtomUnion(), nTypeTuple)
		end),
		rawequal=nManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
			--self:argnum_warn(2, vTermTuple)
			--return self:check_call(vTermTuple)
			print("rawequal TODO")
			return vContext:RefineTerm(nManager.type.Boolean)
		end),
		type=nManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
			local nTerm = vTermTuple:get(vContext, 1)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			nTerm:foreach(function(vType, vVariableCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType:native_type(), vVariableCase
				}
			end)
			return vContext:mergeToRefineTerm(nTypeCaseList)
		end),
		--- not meta_native
		select=nManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
			const nFirstType = vTermTuple:get(vContext, 1):getType()
			if nFirstType == nManager:Literal("#") then
				if vTermTuple:getTail() then
					return vContext:RefineTerm(nManager.type.Integer)
				else
					return vContext:RefineTerm(nManager:Literal(#vTermTuple-1))
				end
			else
				if IntegerLiteral.is(nFirstType) then
					local nStart = nFirstType:getLiteral()
					if nStart > 0 then
						return vTermTuple:select(vContext, nStart + 1)
					elseif nStart < 0 then
						vContext:error("select first < 0 TODO")
						return vContext:FixedTermTuple({})
					else
						vContext:error("select's first arguments is zero")
						return vContext:FixedTermTuple({})
					end
				else
					if Integer.is(nFirstType) then
						const nCollection = nManager:TypeCollection()
						for i=2, #vTermTuple do
							const nType = vTermTuple:get(vContext, i):getType()
							nCollection:put(nType)
						end
						const nRepeatType = vTermTuple:getRepeatType()
						if nRepeatType then
							nCollection:put(nRepeatType)
						end
						const nFinalType = nCollection:mergeToAtomUnion()
						if nRepeatType then
							return nManager:TypeTuple(vContext:getNode(), {}):withDots(nRepeatType):makeTermTuple(vContext)
						else
							const nReList:List(clazz.UMustType) = {}
							for i=2, #vTermTuple do
								nReList[#nReList + 1] = nFinalType
							end
							return nManager:TypeTuple(vContext:getNode(), nReList):makeTermTuple(vContext)
						end
					else
						vContext:error("select's first value must be integer or integer-literal")
						return vContext:FixedTermTuple({})
					end
				end
			end
		end),
		require=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			return vStack:withOnePushContext(vStack:getNode(), function(vContext)
				local nFileName = vTermTuple:get(vContext, 1):getType()
				if StringLiteral.is(nFileName) then
					local nPath = nFileName:getLiteral()
					const nRetTerm, nOpenFn = vRuntime:require(vStack:getNode(), nPath)
					vContext:addLookTarget(nOpenFn)
					vContext:nativeOpenReturn(nRetTerm)
				else
					vContext:warn("require take non-const type ")
					vContext:nativeOpenReturn(vContext:RefineTerm(nManager.type.Any))
				end
			end):mergeFirst()
		end),
		load=nManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
			-- TODO
			return vContext:RefineTerm(nManager.type.AnyFunction)
		end),
		-- function take open context, not oper context
		pcall=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFunc = vTermTuple:get(nHeadContext, 1):checkRefineTerm(nHeadContext)
			const nArgs = vTermTuple:select(nHeadContext, 2)
			const nCallContext = vStack:prepareMetaCall(vStack:getNode(), nFunc, function() return nArgs end)
			return nCallContext:pcallMergeReturn(vStack:mergeEndErrType())
		end),
		xpcall=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFunc1 = vTermTuple:get(nHeadContext, 1):checkRefineTerm(nHeadContext)
			const nFunc2 = vTermTuple:get(nHeadContext, 2):checkRefineTerm(nHeadContext)
			const nArgs = vTermTuple:select(nHeadContext, 3)
			const nCallContext = vStack:prepareMetaCall(vStack:getNode(), nFunc1, function() return nArgs end)
			const nErrType = vStack:mergeEndErrType()
			const nHandleContext = vStack:prepareMetaCall(vStack:getNode(), nFunc2, function() return nCallContext:FixedTermTuple({nCallContext:RefineTerm(nErrType)}) end)
			const nHandleReturn = nHandleContext:mergeReturn()
			const nType = RefineTerm.is(nHandleReturn) and nHandleReturn:getType() or nHandleReturn:get(nHandleContext, 1):getType()
			return nCallContext:pcallMergeReturn(nType)
		end),
		error=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			const nOperCtx = vStack:inplaceOper()
			vStack:getApplyStack():nativeError(nOperCtx, vTermTuple:checkFixed(nOperCtx, 1))
			return nOperCtx:FixedTermTuple({})
		end),
		assert=nManager:stackNativeOpenFunction(function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFirst = vTermTuple:checkFixed(nHeadContext, 1)
			const nSecond = vTermTuple:rawget(2)
			vStack:getApplyStack():nativeAssert(nHeadContext, nFirst, nSecond and nSecond:checkRefineTerm(nHeadContext))
			const nLogicContext = vStack:newLogicContext(vStack:getNode())
			return vStack:inplaceOper():FixedTermTuple({nLogicContext:logicTrueTerm(nFirst)})
		end),
	}

	const nGlobalTable = native._toTable(vRuntime:getTypeManager(), global)
    nGlobalTable:setName("_G")

	return nGlobalTable
end

function native.make_inext(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	local nInteger = vManager.type.Integer
	local nNil = vManager.type.Nil
	return vManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
		const nFirstTerm = vTermTuple:get(vContext, 1)
		--local nNotNilValue = nType1:meta_get(vContext, nNumber):notnilType()
		local nNotNilValue = vContext:getStack():anyNodeMetaGet(vContext:getNode(), nFirstTerm, vContext:RefineTerm(nInteger), true):getType()
		local nValueTerm = vContext:RefineTerm(vManager:checkedUnion(nNotNilValue, nNil))
		local nKeyValue:Dict(clazz.IAtomType, clazz.UAtomUnion) = {
			[nInteger]=nNotNilValue,
			[nNil]=nNil,
		}
		local nTypeCaseList:List(clazz.TypeCasePair) = {}
		for nOneKey, nOneValue in pairs(nKeyValue) do
			local nCase = VariableCase.new()
			nCase:put_and(nValueTerm:attachImmutVariable(), nOneValue)
			nTypeCaseList[#nTypeCaseList + 1] = {
				nOneKey, nCase
			}
		end
		local nKeyTerm = vContext:mergeToRefineTerm(nTypeCaseList)
		return vContext:FixedTermTuple({nKeyTerm, nValueTerm})
	end)
end

function native.make_next(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	return vManager:fixedNativeOpenFunction(function(vContext, vTermTuple)
		local nType1 = vTermTuple:get(vContext, 1):getType()
		nType1 = nType1:trueType()
		local nType2 = vTermTuple:get(vContext, 2):getType()
		if nType1:isUnion() then
			if nType1:isNever() then
				vContext:error("next must take table as first type")
			else
				vContext:error("TODO: next Union type")
			end
			return vContext:FixedTermTuple({vContext:NilTerm(), vContext:NilTerm()})
		else
			local nValueType, nKeyValue = nType1:native_next(vContext, nType2)
			local nValueTerm = vContext:RefineTerm(nValueType)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			for nOneKey, nOneValue in pairs(nKeyValue) do
				local nCase = VariableCase.new()
				nCase:put_and(nValueTerm:attachImmutVariable(), nOneValue)
				nTypeCaseList[#nTypeCaseList + 1] = {
					nOneKey, nCase
				}
			end
			local nKeyTerm = vContext:mergeToRefineTerm(nTypeCaseList)
			return vContext:FixedTermTuple({nKeyTerm, nValueTerm})
		end
	end)
end

function native.make_mathematic(vManager:clazz.TypeManager, vIsDivide:OrNil(True)):Ret(clazz.IAtomType)
	const nNumber = vManager.type.Number
	if vIsDivide then
		return vManager:checkedFn(nNumber, nNumber):Ret(nNumber)
	end
	const nInteger = vManager.type.Integer
	return vManager:stackNativeOpenFunction(function(vStack, vTermTuple)
		const nOperCtx = vStack:inplaceOper()
		const nType1 = vTermTuple:checkFixed(nOperCtx, 1):getType()
		const nType2 = vTermTuple:checkFixed(nOperCtx, 2):getType()
		local nHasFloat = false
		const nEachFn:Fn(clazz.IAtomType) = function(vAtomType)
			if FloatLiteral.is(vAtomType) or Number.is(vAtomType) then
				nHasFloat = true
			elseif not (IntegerLiteral.is(vAtomType) or Integer.is(vAtomType)) then
				nOperCtx:error("math operator must take number")
			end
		end
		nType1:foreach(nEachFn)
		nType2:foreach(nEachFn)
		if nHasFloat then
			return nOperCtx:FixedTermTuple({nOperCtx:RefineTerm(nNumber)})
		else
			return nOperCtx:FixedTermTuple({nOperCtx:RefineTerm(nInteger)})
		end
	end)
end

function native.make_comparison(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	local nNumber = vManager.type.Number
	return vManager:checkedFn(nNumber, nNumber):Ret(vManager.type.Boolean)
end

function native.make_bitwise(vManager:clazz.TypeManager):Ret(clazz.TypedFunction)
	local nInteger = vManager.type.Integer
	return vManager:checkedFn(nInteger, nInteger):Ret(nInteger)
end

function native.make_concat(vManager:clazz.TypeManager):Ret(clazz.TypedFunction)
	local nType = vManager:checkedUnion(vManager.type.String, vManager.type.Number)
	return vManager:checkedFn(nType, nType):Ret(vManager.type.String)
end

return native

