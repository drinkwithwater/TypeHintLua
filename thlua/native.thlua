
local LuaFunction = require "thlua.func.LuaFunction"
local TypeFunction = require "thlua.func.TypeFunction"
local LuaTable = require "thlua.object.LuaTable"
local Truth = require "thlua.type.Truth"
local StringLiteral = require "thlua.type.StringLiteral"
local NumberLiteral = require "thlua.type.NumberLiteral"
local Number = require "thlua.type.Number"
local Exception = require "thlua.Exception"
local TermCase = require "thlua.term.TermCase"

local native = {}

(@let.class = import("thlua.type.TypeClass").class)

function native._toTable(vManager:class.TypeManager, vTable:Dict(String, class.UAtomUnion))::Ret(class.LuaTable)
	local nPairList:List(Struct{class.IAtomType, class.UAtomUnion}) = {}
	for k,v in pairs(vTable) do
		nPairList[#nPairList + 1] = {
			vManager:Literal(k), v
		}
	end
  local nKeyUnion, nTypeDict = vManager:mergePairList(nPairList)
	local nTable = vManager:LuaTable()
	nTable:getDefaultCom():initByKeyValue(nKeyUnion, nTypeDict)
	return nTable
end

function native.make(vRuntime:class.Runtime)::Ret(class.LuaTable)
	local nManager = vRuntime:getTypeManager()
	local global = {
		--- meta_native
		setmetatable=nManager:NativeFunction(function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(1)
			local nType1 = nTerm1:getType()
			local nType2 = vTermTuple:get(2):getType()
			if nType1:isUnion() or nType2:isUnion() then
				vContext:error("set metatable can't take union")
			else
				nType1 = nType1:checkAtomUnion()
				nType2 = nType2:checkAtomUnion()
				if LuaTable.is(nType2) then
					nType1:native_setmetatable(vContext, nType2)
				else
					vContext:error("metatable must be table")
				end
				return nTerm1
			end
		end),
		getmetatable=nManager:NativeFunction(function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(1)
			local nTypeCaseList:List(class.TypeCasePair) = {}
			nTerm1:foreach(function(vType1, vTermCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType1:native_getmetatable(),
					vTermCase,
				}
			end)
			return vContext._manager:mergeToRefineTerm(nTypeCaseList)
		end),
		next=nManager.builtin.next,
		ipairs=nManager:NativeFunction(function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(1)
			local nTypeTuple = nManager:Tuple(nTerm1:getType():meta_ipairs(vContext))
			return nTypeTuple:makeTermTuple()
		end),
		pairs=nManager:NativeFunction(function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(1)
			local nTypeTuple = nManager:Tuple(nTerm1:getType():meta_pairs(vContext))
			return nTypeTuple:makeTermTuple()
		end),
		rawequal=nManager:NativeFunction(function(vContext, vTermTuple)
			--self:argnum_warn(2, vTermTuple)
			--return self:check_call(vTermTuple)
			error("raw equal TODO")
		end),
		rawget=nManager:NativeFunction(function(vContext, vTermTuple)
			local nType1 = vTermTuple:get(1):getType()
			local nType2 = vTermTuple:get(2):getType()
			return nManager:RefineTerm(nType1:native_rawget(vContext, nType2))
		end),
		rawset=nManager:NativeFunction(function(vContext, vTermTuple)
			--self:argnum_warn(3, vTermTuple)
			--return self:check_call(vTermTuple)
			error("raw set TODO")
		end),
		tostring=nManager:NativeFunction(function(vContext, vTermTuple)
			return nManager:Tuple(nManager.type.String):makeTermTuple()
		end),
		type=nManager:NativeFunction(function(vContext, vTermTuple)
			local nTerm = vTermTuple:get(1)
			local nTypeCaseList:List(class.TypeCasePair) = {}
			nTerm:foreach(function(vType, vTermCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType:native_type(), vTermCase
				}
			end)
			return vContext._manager:mergeToRefineTerm(nTypeCaseList)
		end),
		--- not meta_native
		assert=nManager:NativeFunction(function(vContext, vTermTuple)
			local nRegion = vContext:getParentContext():getRegion()
			assert(nRegion, "error in a context without region")
			local nFirst = vTermTuple:get(1)
			nRegion:nativeAssert(nFirst)
			return nManager:TermTuple({nFirst:trueTerm()})
		end),
		select=nManager:NativeFunction(function(vContext, vTermTuple)
			print("select TODO")
		end),
		print=nManager:NativeFunction(function(vContext, vTermTuple)
			return nManager:TermTuple({})
		end),
		tprint=nManager:NativeFunction(function(vContext, vTermTuple)
			vContext:info(vTermTuple)
			return nManager:TermTuple({})
		end),
		ttprint=nManager:NativeFunction(function(vContext, vTermTuple)
			vContext:info(vTermTuple:getTypeTuple())
			return nManager:TermTuple({})
		end),
		tonumber=nManager:NativeFunction(function(vContext, vTermTuple)
			--self:argnum_warn(1, vTermTuple)
			--local nData = vTermTuple:get(1)
			error("TODO tonumber")
		end),
		require=nManager:NativeFunction(function(vContext, vTermTuple)
			local nFileName = vTermTuple:get(1):getType()
			if StringLiteral.is(nFileName) then
				local nPath = nFileName:getLiteral()
				return vRuntime:require(nPath)
			else
				vContext:error("TODO require take non-StringLiteral type ")
			end
		end),
		pcall=nManager:NativeFunction(function(vContext, vTermTuple)
			print("TODO pcall")
		end),
		xpcall=nManager:NativeFunction(function(vContext, vTermTuple)
			print("TODO xpcall")
		end),
		error=nManager:NativeFunction(function(vContext, vTermTuple)
			local nRegion = vContext:getParentContext():getRegion()
			assert(nRegion, "error in a context without region")
			nRegion:nativeError()
			return vContext._manager:TermTuple({})
		end),
	}
	for k,v in pairs(global) do
		v:set_name(k)
	end

	global.string=nManager.builtin.string

	global.math=native.make_math(nManager)
	global.table=native.make_table(nManager)
	global.io=native.make_io(nManager)
	global.coroutine=native.make_coroutine(nManager)

	-- global.next = vRuntime.func.next
	local nGlobalTable = native._toTable(vRuntime:getTypeManager(), global)
    nGlobalTable:setName("_G")

	return nGlobalTable
end

function native.make_math(vManager:class.TypeManager)::Ret(class.LuaTable)
	local type = vManager.type
	local math = {
		random=vManager:checkedFn():Dots(type.Number):Ret(type.Number),
		max=vManager:checkedFn(type.Number):Dots(type.Number):Ret(type.Number),
		tointeger=vManager:checkedFn(type.Any):Ret(vManager:checkedUnion(type.Number, type.Nil)),
	}
	local nTable = native._toTable(vManager, math)
	nTable:setName("math")
	return nTable
end

function native.make_io(vManager:class.TypeManager)::Ret(class.LuaTable)
	local type = vManager.type
	local io = {
		read=vManager:checkedFn(vManager:checkedUnion(type.String, type.Number)):Ret(vManager:checkedUnion(type.String, type.Nil)),
		write=vManager:checkedFn(type.String),
		flush=vManager:checkedFn(),
	}
	local nTable = native._toTable(vManager, io)
	nTable:setName("io")
	return nTable
end

function native.make_coroutine(vManager:class.TypeManager)::Ret(class.LuaTable)
	local type = vManager.type
	local co = {
		create=vManager:checkedFn(vManager:checkedFn()):Ret(type.Truth),
		running=vManager:checkedFn():Ret(type.Truth, type.Boolean),
		resume=vManager:checkedFn(type.Truth):Dots(type.Truth):Ret(type.True):Ret(type.False,type.String),
		yield=vManager:checkedFn():Ret(type.Truth),
	}
	local nTable = native._toTable(vManager, co)
	nTable:setName("coroutine")
	return nTable
end

function native.make_string(vManager:class.TypeManager)::Ret(class.LuaTable)
	local type = vManager.type
	local string = {
		format=vManager:checkedFn(type.String):Dots(type.Truth):Ret(type.String),
		gsub=vManager:checkedFn(type.String, type.String, type.String):Ret(type.String),
		match=vManager:checkedFn(type.String, type.String):Ret():Ret(type.String),
	}
	local nTable = native._toTable(vManager, string)
	nTable:setName("string")
	return nTable
end

function native.make_table(vManager:class.TypeManager)::Ret(class.LuaTable)
	local function checkList(vContext:class.Context, vType:class.UAtomUnion, vKey:String)
		local nNumber = vManager.type.Number
		vType:foreach(function(vSubType)
			local nLenType = vSubType:meta_len(vContext)
			if not (Number.is(nLenType) or NumberLiteral.is(nLenType)) then
				vContext:error("table."..vKey.." must take list-lick variable")
				return
			end
			vSubType:meta_get(vContext, nNumber)
		end)
	end
	local table = {
		sort=vManager:NativeFunction(function(vContext, vTermTuple)
			local nFirstTerm = vTermTuple:get(1)
			local nType = nFirstTerm:getType()
			checkList(vContext, nType, "sort")
			return vManager:Tuple():makeTermTuple()
		end),
		concat=vManager:NativeFunction(function(vContext, vTermTuple)
			local nFirstTerm = vTermTuple:get(1)
			local nType = nFirstTerm:getType()
			checkList(vContext, nType, "concat")
			return vManager:TermTuple({vManager:RefineTerm(vManager.type.String)})
		end),
		insert=vManager:NativeFunction(function(vContext, vTermTuple)
			local nFirstTerm = vTermTuple:get(1)
			local nType = nFirstTerm:getType()
			checkList(vContext, nType, "insert")
			return vManager:TermTuple({})
		end),
		unpack=vManager:NativeFunction(function(vContext, vTermTuple)
			local nFirstTerm = vTermTuple:get(1)
			local nType = nFirstTerm:getType()
			local nNumber = vManager.type.Number
			local nCollection = vManager:TypeCollection()
			nType:foreach(function(vSubType)
				local nLenType = vSubType:meta_len(vContext)
				if not (Number.is(nLenType) or NumberLiteral.is(nLenType)) then
					vContext:error("__len must return number when concat")
					return
				end
				local nValueType = vSubType:meta_get(vContext, nNumber)
				nCollection:put(nValueType)
			end)
			local nRetType = nCollection:mergeToAtomUnion()
			return vManager:Tuple():Dots(nRetType:notnilType()):makeTermTuple()
		end),
	}
	local nTable = native._toTable(vManager, table)
	nTable:setName("table")
	return nTable
end

function native.make_inext(vManager:class.TypeManager)::Ret(class.IAtomType)
	local nNumber = vManager.type.Number
	local nNil = vManager.type.Nil
	return vManager:NativeFunction(function(vContext, vTermTuple)
		local nType1 = vTermTuple:get(1):getType()
		nType1 = nType1:trueType()
		if nType1:isUnion() then
			error(Exception.new("TODO: next Union type"))
		else
			local nNotNilValue = nType1:meta_get(vContext, nNumber):notnilType()
			local nValueTerm = vManager:RefineTerm(vManager:checkedUnion(nNotNilValue, nNil))
			local nKeyValue:Dict(class.IAtomType, class.UAtomUnion) = {
				[nNumber]=nNotNilValue,
				[nNil]=nNil,
			}
			local nTypeCaseList:List(class.TypeCasePair) = {}
			for nOneKey, nOneValue in pairs(nKeyValue) do
				local nCase = TermCase.new()
				nCase:put_and(nValueTerm:attachSymbolShot(), nOneValue)
				nTypeCaseList[#nTypeCaseList + 1] = {
					nOneKey, nCase
				}
			end
			local nKeyTerm = vManager:mergeToRefineTerm(nTypeCaseList)
			return vManager:TermTuple({nKeyTerm, nValueTerm})
		end
	end)
end

function native.make_next(vManager:class.TypeManager)::Ret(class.IAtomType)
	return vManager:NativeFunction(function(vContext, vTermTuple)
		local nType1 = vTermTuple:get(1):getType()
		nType1 = nType1:trueType()
		local nType2 = vTermTuple:get(2):getType()
		if nType1:isUnion() then
			error(Exception.new("TODO: next Union type"))
		else
			local nValueType, nKeyValue = nType1:native_next(vContext, nType2)
			local nValueTerm = vManager:RefineTerm(nValueType)
			local nTypeCaseList:List(class.TypeCasePair) = {}
			for nOneKey, nOneValue in pairs(nKeyValue) do
				local nCase = TermCase.new()
				nCase:put_and(nValueTerm:attachSymbolShot(), nOneValue)
				nTypeCaseList[#nTypeCaseList + 1] = {
					nOneKey, nCase
				}
			end
			local nKeyTerm = vManager:mergeToRefineTerm(nTypeCaseList)
			return vManager:TermTuple({nKeyTerm, nValueTerm})
		end
	end)
end

function native.make_mathematic(vManager:class.TypeManager)::Ret(class.IAtomType)
	local nNumber = vManager.type.Number
	return vManager:checkedFn(nNumber, nNumber):Ret(nNumber)
end

function native.make_comparison(vManager:class.TypeManager)::Ret(class.IAtomType)
	local nNumber = vManager.type.Number
	return vManager:checkedFn(nNumber, nNumber):Ret(vManager.type.Boolean)
end

function native.make_bitwise(vManager:class.TypeManager)
	local nNumber = vManager.type.Number
	return vManager:checkedFn(nNumber, nNumber):Ret(nNumber)
end

function native.make_concat(vManager:class.TypeManager)
	local nType = vManager:checkedUnion(vManager.type.String, vManager.type.Number)
	return vManager:checkedFn(nType, nType):Ret(vManager.type.String)
end

return native

