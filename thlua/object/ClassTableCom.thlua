
const StringLiteral = require "thlua.type.StringLiteral"
const TypeFunction = require "thlua.func.TypeFunction"
const MemberFunction = require "thlua.func.MemberFunction"
const LuaFunction = require "thlua.func.LuaFunction"
const Nil = require "thlua.type.Nil"
const TableComClass = require "thlua.object.TableComClass"

(@do
	let.class = import("thlua.type.TypeClass").class
end)

const ClassTableCom = TableComClass()

-- TODO vImplType can be struct, class
function ClassTableCom.new(vManager:class.TypeManager,
	vRefer:class.Reference,
	vLuaTable:class.LuaTable,
	vFnCom:class.ClassFnCom,
	vBaseClass:OrFalse(class.LuaTable),
	vInterface:class.MetaObject)::RetClass(class.ClassTableCom)
	const self = setmetatable({::Self()
		_manager=vManager,
		_luaTable=vLuaTable,
		_refer=vRefer,
		_defaultCom=vLuaTable:getDefaultCom(),
		_baseClass=vBaseClass,
		_interface=vInterface,
		_fnCom=vFnCom,
		_waitCoToSid={}@Dict(Thread, Integer),
		_buildReady=false@Boolean,
		_calledSelf=false@Boolean,
	}, ClassTableCom)
	return self
end

function ClassTableCom:longHintSelf()
	self._calledSelf = true
end

function ClassTableCom:waitBuild()
	self._fnCom:startBuild()
	const nCurCo = coroutine.running()
	const nSelfCo = self._refer:getSelfCo()
	if nCurCo ~= nSelfCo then
		if not self._buildReady then
			const nSessionId = self._manager:genSessionId()
			self._waitCoToSid[nCurCo] = nSessionId
			self._manager:coWait(nCurCo, nSessionId, nSelfCo)
		end
	else
		assert(self._calledSelf, "build a ClassTable with {Self()} before use it")
	end
end

function ClassTableCom:finishSetMetaTable()
	-- TODO, can only set once in ClassFn's context
	assert(coroutine.running() == self._refer:getSelfCo(), "can only setmetatable in constructor thread")
	self._buildReady=true
	for co, sid in pairs(self._waitCoToSid) do
		self._manager:coWakeup(co, sid)
	end
end

function ClassTableCom:getBase()::Ret(class.MetaObject)
	return self._interface
end

function ClassTableCom:finishBuild(vContext:class.Context)
	-- TODO seal table
end

function ClassTableCom:getLuaTable()::Ret(class.LuaTable)
	return self._luaTable
end

function ClassTableCom:getRefer()::Ret(class.Reference)
	return self._refer
end

function ClassTableCom.is(vType)::isguard(class.ClassTableCom)
	return getmetatable(vType) == ClassTableCom
end

return ClassTableCom
