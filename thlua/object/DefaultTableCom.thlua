
const StringLiteral = require "thlua.type.StringLiteral"
const TypeFunction = require "thlua.func.TypeFunction"
const LuaFunction = require "thlua.func.LuaFunction"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const Nil = require "thlua.type.Nil"
const TableComClass = require "thlua.object.TableComClass"

(@let.class = import("thlua.type.TypeClass").class)

const DefaultTableCom = TableComClass()

function DefaultTableCom.new(vManager:class.TypeManager,
	vLuaTable:class.LuaTable)::RetClass(class.DefaultTableCom, class.ITableCom)
	const self = setmetatable({::Self()
		_manager=vManager,
		_keyType=vManager.type.Never @class.UAtomUnion,
		_valueDict={}@Dict(class.IAtomType, class.UAtomUnion),
		_nextValue=false@Union(False, class.UAtomUnion),
		_nextDict=false@Union(False, Dict(class.IAtomType, class.UAtomUnion)),
		_overrideLiteralSet={} @Dict(class.IAtomType, True),
		_luaTable=vLuaTable,
		__indexType=false@OrFalse(class.UIndexType),
		__newindexType=false@OrFalse(class.UIndexType),
		_metaEventDict={}@Dict(String, class.IAtomType),
		_nothingStruct=vManager.type.Object,
	}, DefaultTableCom)
	return self
end

function DefaultTableCom:initByKeyValue(vKeyType:class.UAtomUnion, vValueDict:Dict(class.IAtomType, class.UAtomUnion))::Ret()
	self._keyType = vKeyType
	self._valueDict = vValueDict
end

function DefaultTableCom:setMeta(vIndexType:OrFalse(class.UIndexType), vNewIndexType:OrFalse(class.UIndexType), vMetaEventDict:Dict(String, class.IAtomType))
	self.__indexType = vIndexType
	self.__newindexType = vNewIndexType
	self._metaEventDict = vMetaEventDict
end

function DefaultTableCom:foreachGetPair(vFunc:Fn(class.IAtomType, class.UAtomUnion))
	self._keyType:foreach(function(vType)
		vFunc(vType, self._valueDict[vType]!)
	end)
end

function DefaultTableCom:meta_set(vContext, vKeyType:class.IAtomType, vValueType:class.UAtomUnion)
	self:_meta_set(vContext, vKeyType, vValueType, false)
end

function DefaultTableCom:meta_set_override(vContext, vKeyType:class.IAtomType, vValueType:class.UAtomUnion)
	self:_meta_set(vContext, vKeyType, vValueType, true)
end

function DefaultTableCom:_meta_set(vContext:class.Context, vKeyType:class.IAtomType, vValueType:class.UAtomUnion, vOverride:Union(Nil,Boolean))
	local nKeyContainType = self._keyType:containAtom(vKeyType)
	if nKeyContainType then
		local nCurValueType = self._valueDict[nKeyContainType]!
		if not nCurValueType:containAll(vValueType) then
			if vKeyType:isSingleton() and not vKeyType:isNilable() and self._overrideLiteralSet[vKeyType] then
				self._valueDict[vKeyType] = vValueType
				if vOverride then
					self._overrideLiteralSet[vKeyType] = true
				end
			else
				vContext:error("wrong value type when set, value:"..tostring(vValueType).." !<= "..tostring(nCurValueType)..", key:"..tostring(nKeyContainType))
			end
		end
		return
	end
	local nNewIndexType = self.__newindexType
	if not nNewIndexType then
		self:native_rawset(vContext, vKeyType, vValueType, vOverride)
		return
	else
		if vOverride then
			vContext:error("can't set override when trigger meta __newindex")
		end
		nNewIndexType:meta_set(vContext, vKeyType, vValueType)
		return
	end
end

function DefaultTableCom:_meta_get(vContext:class.Context, vKeyType:class.IAtomType)::Ret(Boolean, class.UAtomUnion)
	local nKeyContainType = self._keyType:containAtom(vKeyType)
	if nKeyContainType then
		return true, self._valueDict[nKeyContainType]!
	end
	local nIndexType = self.__indexType
	if not nIndexType then
		return false, self._manager.type.Nil
	else
		if LuaFunction.is(nIndexType) or TypeFunction:is(nIndexType) then
			return false, self._manager.type.Nil
		else
			-- TODO if nIndexType is Function, call it...
			return nIndexType:getDefaultCom():_meta_get(vContext, vKeyType)
		end
	end
end

function DefaultTableCom:meta_get(vContext, vKeyType:class.IAtomType)
	local nOkay, nReType = self:_meta_get(vContext, vKeyType)
	if not nOkay then
		vContext:error("index error, key=", tostring(vKeyType))
	end
	return nReType
end

function DefaultTableCom:getMetaEventDict()::Ret(Dict(String, class.IAtomType))
	return self._metaEventDict
end

function DefaultTableCom:meta_bop_func(vContext, vOper)
	local nMethodEvent = OPER_ENUM.all[vOper]!
	local nMethodType = self._metaEventDict[nMethodEvent]
	if not nMethodType then
		return false, nil
	else
		return true, nMethodType
	end
end

function DefaultTableCom:native_rawset(vContext, vKeyType, vValueType, vOverride)
	local nContainType = self._keyType:containAtom(vKeyType)
	if not nContainType then
		if vKeyType:isSingleton() and not vKeyType:isNilable() then
			-- TODO thinking when to lock this
			self._keyType = self._manager:checkedUnion(self._keyType, vKeyType):checkAtomUnion()
			self._valueDict[vKeyType] = vValueType
			if vOverride then
				self._overrideLiteralSet[vKeyType] = true
			end
		else
			vContext:error("rawset("..tostring(vKeyType)..","..tostring(vValueType)..") error")
		end
	else
		local nCurValueType = self._valueDict[nContainType]!
		if not nCurValueType:containAll(vValueType) then
			if vKeyType:isSingleton() and not vKeyType:isNilable() and self._overrideLiteralSet[vKeyType] then
				self._valueDict[vKeyType] = vValueType
				if vOverride then
					self._overrideLiteralSet[vKeyType] = true
				end
			else
				vContext:error("wrong value type when set, value:"..tostring(vValueType).." !<= "..tostring(nCurValueType)..", key:"..tostring(nContainType))
			end
		end
	end
end

function DefaultTableCom:native_rawget(vContext, vKeyType)::Ret(class.UAtomUnion)
	local nKeyContainType = self._keyType:containAtom(vKeyType)
	if nKeyContainType then
		return self._valueDict[nKeyContainType]!
	else
		return self._manager.type.Nil
	end
end

function DefaultTableCom:native_next(vContext, vInitType)
	local nNextDict = self._nextDict
	local nValueType = self._nextValue
	if not nNextDict or not nValueType then
		nNextDict = {}
		for k,v in pairs(self._valueDict) do
			nNextDict[k] = v
		end
		local nNil = self._manager.type.Nil
		local nCollection = self._manager:TypeCollection()
		for nOneKey, nOneValue in pairs(self._valueDict) do
			nOneValue = nOneValue:checkAtomUnion():notnilType()
			nNextDict[nOneKey] = nOneValue
			nCollection:put(nOneValue)
		end
		nCollection:put(nNil)
		nValueType = nCollection:mergeToAtomUnion()
		nNextDict[nNil] = nNil
		self._nextValue = nValueType
		self._nextDict = nNextDict
	end
	return nValueType, nNextDict
end

function DefaultTableCom:checkStruct()
	return self._nothingStruct
end

function DefaultTableCom:getCompletion()
	local nDict:Dict(String, True) = {}
	self._keyType:foreach(function(vType)
		if StringLiteral.is(vType) then
			nDict[vType:getLiteral()] = true
		end
	end)
	return nDict
end

return DefaultTableCom
