
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const StringLiteral = require "thlua.type.StringLiteral"
const LuaFunction = require "thlua.func.LuaFunction"
const Nil = require "thlua.type.Nil"
const TypeFunction = require "thlua.func.TypeFunction"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const DefaultTableCom = require "thlua.object.DefaultTableCom"
const MetaEventCom = require "thlua.object.MetaEventCom"
const MetaObject = require "thlua.object.MetaObject"

const LuaTable = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function LuaTable.new(vManager:class.TypeManager):RetClass(class.LuaTable, class.IAtomType)
	const self = setmetatable({:Self()
		_manager=vManager,
		_name="Table"@String,
		_unionSign=false,
		_metaTable=false@OrFalse(class.LuaTable),
		bits=TYPE_BITS.OBJECT,
		id=vManager:genTypeId(),
		_metaEventCom=false@OrFalse(class.MetaEventCom),
		_defaultCom=nil@class.DefaultTableCom,
		_classCom=false@OrFalse(class.ClassFactory),
		_castStruct=false@OrFalse(class.MetaObject),
	}, LuaTable)
	self._defaultCom=DefaultTableCom.new(self._manager, self)
	return self
end

function LuaTable:initByClassCom(vFnCom:class.ClassFactory, vInterface:class.MetaObject)
	self._classCom = vFnCom
	self._defaultCom:setInterface(vInterface)
end

function LuaTable:getMetaEventCom():Ret(OrFalse(class.MetaEventCom))
	return self._metaEventCom
end

function LuaTable:getDefaultCom():Ret(class.DefaultTableCom)
	return self._defaultCom
end

function LuaTable:_lockOrWaitClass(vContext:class.Context)
	const nCastStruct = self._castStruct
	if nCastStruct then
		vContext:warn("table has been cast to other type")
		return
	end
	const nClassCom = self._classCom
	if nClassCom then
		nClassCom:waitBuild()
	end
end

function LuaTable:detailString(v, vVerbose)
	return "LuaTable-"..self._name
end

function LuaTable:setName(vName:String)
	self._name = vName
end

function LuaTable:meta_pairs(vContext)
	self:_lockOrWaitClass(vContext)
	const nCom = self._metaEventCom
	if nCom then
		const nPairsFn = nCom:getPairsFunc()
		if nPairsFn then
			const nManager = self._manager
			const nRetTuples = nPairsFn:meta_call(vContext, nManager:Tuple(self))
			local nRetOneTuple:OrFalse(class.TypeTuple) = false
			nRetTuples:foreachWithFirst(function(vTuple, _)
				nRetOneTuple = vTuple
			end)
			if nRetTuples:getTupleCount() ~= 1 then
				vContext:error("__pairs must return only one tuple")
			end
			return nRetOneTuple
		end
	else
		return false
	end
end

function LuaTable:meta_ipairs(vContext)
	self:_lockOrWaitClass(vContext)
	return false
end

function LuaTable:native_next(vContext, vInitType)
	return self:_checkComOrStruct(vContext):native_next(vContext, vInitType)
end

function LuaTable:native_setmetatable(vContext, vMetaTableType)
	if self._metaTable then
		vContext:error("can only setmetatable once for one table")
		return
	end
	self._metaTable = vMetaTableType
	-- 1. copyout meta event items
	assert(not self._metaEventCom, "meta event has been setted")
	const nMetaEventCom = self._manager:makeMetaEventCom(self)
	nMetaEventCom:initByLuaTable(vContext, vMetaTableType:getDefaultCom())
	self._metaEventCom = nMetaEventCom
	-- 2. copyout index/newindex event items
	local nManager = self._manager
	const nIndexType = vMetaTableType:native_rawget(vContext, nManager:Literal("__index"))
	const nNewIndexType = vMetaTableType:native_rawget(vContext, nManager:Literal("__newindex"))
	local nAsIndex:OrFalse(class.MetaIndexField) = false
	local nAsNewIndex:OrFalse(class.MetaIndexField) = false
	if LuaTable.is(nIndexType) then
		nAsIndex = nIndexType:getDefaultCom():lockAsMetaIndex()
	end
	if LuaTable.is(nNewIndexType) then
		nAsNewIndex = nNewIndexType:getDefaultCom():lockAsMetaNewIndex()
	end
	-- 3. set default com
	const nDefaultCom = self._defaultCom
	nDefaultCom:setMetaIndex(vContext, nAsIndex, nAsNewIndex)
	-- 4. set class com
	const nClassCom = self._classCom
	if nClassCom then
		nClassCom:onSetMetaTable()
	end
	return self
end

function LuaTable:native_getmetatable(vContext)
	self:_lockOrWaitClass(vContext)
	return self._metaTable or self._manager.type.Nil
end

function LuaTable:native_type()
	return self._manager:Literal("table")
end

function LuaTable:native_rawget(vContext, vKeyType):Ret(class.UAtomUnion)
	self:_lockOrWaitClass(vContext)
	return self._defaultCom:native_rawget(vContext, vKeyType)
end

function LuaTable:native_rawset(vContext, vKeyType:class.IAtomType, vValueType:class.UAtomUnion, vOverride:Union(Nil, Boolean))
	self:_lockOrWaitClass(vContext)
	return self._defaultCom:native_rawset(vContext, vKeyType, vValueType, vOverride)
end

function LuaTable:_checkComOrStruct(vContext:class.Context):Ret(class.IMetaNative)
	const nCastStruct = self._castStruct
	if nCastStruct then
		vContext:warn("table has been cast to other type")
		return nCastStruct
	else
		self:_lockOrWaitClass(vContext)
		return self._defaultCom
	end
end

function LuaTable:meta_get(vContext, vKeyType)
	return self:_checkComOrStruct(vContext):meta_get(vContext, vKeyType)
end

function LuaTable:meta_set(vContext, vKeyType, vValueType)
	self:_checkComOrStruct(vContext):meta_set(vContext, vKeyType, vValueType)
end

function LuaTable:meta_set_override(vContext, vKeyType, vValueType)
	self:_lockOrWaitClass(vContext)
	if self._classCom then
		vContext:error("override set can't work on class table")
	else
		self._defaultCom:meta_set_ifoverride(vContext, vKeyType, vValueType, true)
	end
end

function LuaTable:meta_len(vContext)
	-- TODO
	return self._manager.type.Number
end

function LuaTable:meta_uop_some(vContext, vOper)
	self:_lockOrWaitClass(vContext)
	vContext:error("meta uop TODO:"..tostring(vOper))
	return self._manager.type.Never
end

function LuaTable:meta_bop_func(vContext, vOper)
	self:_lockOrWaitClass(vContext)
	const nMethodEvent = OPER_ENUM.bopNoEq[vOper]!
	const nCom = self._metaEventCom
	if nCom then
		const nMethodFn = nCom:getBopFunc(nMethodEvent)
		if nMethodFn then
			return true, nMethodFn
		end
	end
	return false, nil
end

function LuaTable:isSingleton()
	return false
end

function LuaTable:assumeContainAtom(vAssumeSet, vType)
	-- TODO check struct
	if self == vType then
		return self
	else
		return false
	end
end

function LuaTable:assumeIntersectAtom(vAssumeSet, vType)
	if vType:assumeContainAtom(nil, self) then
		return self
	else
		return false
	end
end

function LuaTable:cast(vContext:class.Context, vObjectAtomUnion:class.UObjectAtomUnion):Ret(OrFalse(class.MetaObject))
	if self._classCom then
		return false
	end
	const nOldStruct = self._castStruct
	if nOldStruct then
		local nMatchStruct:OrNil(class.MetaObject) = nil
		vObjectAtomUnion:foreach(function(vAtomType)
			if not nMatchStruct and MetaObject.is(vAtomType)
				and vAtomType:containAll(nOldStruct) and nOldStruct:containAll(vAtomType) then
				nMatchStruct = vAtomType
			end
		end)
		if not nMatchStruct then
			vContext:error("table can't cast to multi struct type")
			return false
		end
		return nMatchStruct
	end
	const nMatchStruct = self._defaultCom:castStruct(vContext, vObjectAtomUnion)
	if not nMatchStruct then
		vContext:error("default table can't cast to struct type", self, vObjectAtomUnion)
		return false
	end
	self._castStruct = nMatchStruct
	return nMatchStruct
end

function LuaTable:objectPartType()
	return self
end

function LuaTable:mayRecursive()
	return true
end

-- called when struct contain
function LuaTable:checkBaseObjectType()
	const nClassCom = self._classCom
	if nClassCom then
		return nClassCom:getInterface()
	end
	const nStruct = self._castStruct
	if nStruct then
		return nStruct
	end
	self._defaultCom:basingByDefault()
	return self._manager.type.Object
end

function LuaTable:getCompletion():Ret(class.LspCompletion)
	return self._defaultCom:getCompletion()
end

function LuaTable.is(v):isguard(class.LuaTable)
	return getmetatable(v) == LuaTable
end

return LuaTable
