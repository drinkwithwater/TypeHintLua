
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const StringLiteral = require "thlua.type.StringLiteral"
const LuaFunction = require "thlua.func.LuaFunction"
const Nil = require "thlua.type.Nil"
const TypeFunction = require "thlua.func.TypeFunction"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const MetaEventCom = require "thlua.object.MetaEventCom"
const MetaObject = require "thlua.object.MetaObject"

const DefaultTableCom = require "thlua.object.DefaultTableCom"
const OpenTableCom = require "thlua.object.OpenTableCom"

const LuaTable = AtomTypeClass()

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	clazz.UTableCom = Union(clazz.DefaultTableCom, clazz.OpenTableCom)
end)

function:class(clazz.LuaTable) LuaTable.new(vManager:clazz.TypeManager, vIsOpen:OrNil(Boolean)):impl(clazz.IAtomType)
	const self = setmetatable({.class
		_manager=vManager,
		_name="Table"@String,
		_unionSign=false,
		_metaTable=false@OrFalse(clazz.LuaTable),
		bits=TYPE_BITS.OBJECT,
		id=vManager:genTypeId(),
		_metaEventCom=false@OrFalse(clazz.MetaEventCom),
		_tableCom=nil@clazz.UTableCom,
		_classCom=false@OrFalse(clazz.ClassFactory),
		_baseClass=false@OrFalse(clazz.LuaTable),
		_objectType=false@OrFalse(clazz.MetaObject),
	}, LuaTable)
	if vIsOpen then
		self._tableCom=OpenTableCom.new(self._manager, self)
	else
		self._tableCom=DefaultTableCom.new(self._manager, self)
	end
	return self
end

function LuaTable:initByKeyValue(vKeyType:clazz.UAtomUnion, vValueDict:Dict(clazz.IAtomType, clazz.UAtomUnion))
	self._tableCom:initByKeyValue(vKeyType, vValueDict)
end

function LuaTable:initByClassCom(vFnCom:clazz.ClassFactory, vBaseClass:OrFalse(clazz.LuaTable), vInterface:clazz.MetaObject)
	const nTableCom = self._tableCom
	if DefaultTableCom.is(nTableCom) then
		self._classCom = vFnCom
		self._baseClass = vBaseClass
		self._objectType = vInterface
		nTableCom:setInterface(vInterface)
	else
		error("open table can't be class")
	end
end

function LuaTable:getMetaEventCom():Ret(OrFalse(clazz.MetaEventCom))
	return self._metaEventCom
end

function LuaTable:getTableCom():Ret(clazz.UTableCom)
	return self._tableCom
end

function LuaTable:_lockOrWaitClass(vContext:clazz.BaseContext)
	const nClassCom = self._classCom
	if nClassCom then
		nClassCom:waitBuild()
	else
		const nCastStruct = self._objectType
		if nCastStruct then
			vContext:warn("table has been cast to other type")
			return
		end
	end
end

function LuaTable:detailString(v, vVerbose)
	return "LuaTable-"..self._name
end

function LuaTable:setName(vName:String)
	self._name = vName
end

function LuaTable:meta_pairs(vContext)
	self:_lockOrWaitClass(vContext)
	const nCom = self._metaEventCom
	if nCom then
		const nPairsFn = nCom:getPairsFunc()
		if nPairsFn then
			const nManager = self._manager
			const nRetTuples = nPairsFn:meta_call(vContext, vContext:FixedTermTuple({self}))
			local nRetOneTuple:OrFalse(clazz.UTypeTuple) = false
			nRetTuples:foreachWithFirst(function(vTuple, _)
				nRetOneTuple = vTuple
			end)
			if nRetTuples:getTupleCount() ~= 1 then
				vContext:error("__pairs must return only one tuple")
			end
			return nRetOneTuple
		end
	else
		return false
	end
end

function LuaTable:meta_ipairs(vContext)
	self:_lockOrWaitClass(vContext)
	return false
end

function LuaTable:native_next(vContext, vInitType)
	return self:_checkComOrStruct(vContext):native_next(vContext, vInitType)
end

function LuaTable:native_setmetatable(vContext, vMetaTableType)
	if self._metaTable then
		vContext:error("can only setmetatable once for one table")
		return
	end
	self._metaTable = vMetaTableType
	-- 1. copyout meta event items
	assert(not self._metaEventCom, "meta event has been setted")
	const nMetaEventCom = self._manager:makeMetaEventCom(self)
	nMetaEventCom:initByLuaTable(vContext:getHeadContext(), vMetaTableType:getTableCom())
	self._metaEventCom = nMetaEventCom
	-- 2. copyout index/newindex event items
	local nManager = self._manager
	const nIndexType = vMetaTableType:native_rawget(vContext:getHeadContext(), nManager:Literal("__index"))
	const nNewIndexType = vMetaTableType:native_rawget(vContext:getHeadContext(), nManager:Literal("__newindex"))
	-- 3. set default com
	const nDefaultCom = self._tableCom
	nDefaultCom:setMetaIndex(
		vContext,
		not nIndexType:isNever() and nIndexType or false,
		not nNewIndexType:isNever() and nNewIndexType or false)
	-- 4. set clazz com
	const nClassCom = self._classCom
	if nClassCom then
		nClassCom:onSetMetaTable()
	end
	return
end

function LuaTable:lockAsMetaIndex()
	return self._tableCom:lockAndGet()
end

function LuaTable:lockAsMetaNewIndex()
	return self._tableCom:lockAndGet()
end

function LuaTable:native_getmetatable(vContext)
	self:_lockOrWaitClass(vContext)
	return self._metaTable or self._manager.type.Nil
end

function LuaTable:native_type()
	return self._manager:Literal("table")
end

function LuaTable:native_rawget(vContext, vKeyType):Ret(clazz.UAtomUnion)
	self:_lockOrWaitClass(vContext)
	return self._tableCom:native_rawget(vContext, vKeyType)
end

function LuaTable:native_rawset(vContext, vKeyType:clazz.IAtomType, vValueType:clazz.UAtomUnion)
	self:_lockOrWaitClass(vContext)
	return self._tableCom:native_rawset(vContext, vKeyType, vValueType)
end

function LuaTable:_checkComOrStruct(vContext:clazz.BaseContext):Ret(clazz.IMetaNative)
	self:_lockOrWaitClass(vContext)
	if self._classCom then
		return self._tableCom
	else
		const nCastStruct = self._objectType
		if nCastStruct then
			vContext:warn("table has been cast to other type")
			return nCastStruct
		else
			return self._tableCom
		end
	end
end

function LuaTable:meta_get(vContext, vKeyType)
	return self:_checkComOrStruct(vContext):meta_get(vContext, vKeyType)
end

function LuaTable:meta_set(vContext, vKeyType, vValueType)
	self:_checkComOrStruct(vContext):meta_set(vContext, vKeyType, vValueType)
end

function LuaTable:meta_len(vContext)
	-- TODO
	return self._manager.type.Number
end

function LuaTable:meta_uop_some(vContext, vOper)
	self:_lockOrWaitClass(vContext)
	vContext:error("meta uop TODO:"..tostring(vOper))
	return self._manager.type.Never
end

function LuaTable:meta_bop_func(vContext, vOper)
	self:_lockOrWaitClass(vContext)
	const nMethodEvent = OPER_ENUM.bopNoEq[vOper]!
	const nCom = self._metaEventCom
	if nCom then
		const nMethodFn = nCom:getBopFunc(nMethodEvent)
		if nMethodFn then
			return true, nMethodFn
		end
	end
	return false, nil
end

function LuaTable:isSingleton()
	if OpenTableCom.is(self._tableCom) then
		return true
	else
		return false
	end
end

function LuaTable:getBaseClass()
	return self._baseClass
end

function LuaTable:assumeIncludeAtom(vAssumeSet, vType)
	if LuaTable.is(vType) then
		local nMatchTable = vType
		while nMatchTable ~= self do
			const nBaseClass = nMatchTable:getBaseClass()
			if not nBaseClass then
				break
			else
				nMatchTable = nBaseClass
			end
		end
		return nMatchTable == self and self or false
	else
		-- TODO check struct
		return false
	end
end

function LuaTable:assumeIntersectAtom(vAssumeSet, vType)
	if vType:assumeIncludeAtom(nil, self) then
		return self
	elseif self:assumeIncludeAtom(nil, vType) then
		return vType
	else
		return false
	end
end

function LuaTable:cast(vContext:clazz.OperContext, vObjectAtomUnion:clazz.UObjectAtomUnion):Ret(OrFalse(clazz.MetaObject))
	if self._classCom then
		return false
	end
	const nOldStruct = self._objectType
	if nOldStruct then
		local nMatchStruct:OrNil(clazz.MetaObject) = nil
		vObjectAtomUnion:foreach(function(vAtomType)
			if not nMatchStruct and MetaObject.is(vAtomType)
				and vAtomType:includeAll(nOldStruct) and nOldStruct:includeAll(vAtomType) then
				nMatchStruct = vAtomType
			end
		end)
		if not nMatchStruct then
			vContext:error("table can't cast to multi struct type")
			return false
		end
		return nMatchStruct
	end
	const nMatchStruct = self._tableCom:castStruct(vContext, vObjectAtomUnion)
	if not nMatchStruct then
		return false
	end
	self._objectType = nMatchStruct
	return nMatchStruct
end

function LuaTable:objectPartType()
	return self
end

function LuaTable:mayRecursive()
	return true
end

-- called when struct include
function LuaTable:checkBaseObjectType()
	if self._classCom then
		return (assert(self._objectType))
	end
	const nStruct = self._objectType
	if nStruct then
		return nStruct
	end
	self._tableCom:basingByDefault()
	return self._manager.type.AnyObject
end

function LuaTable:getCompletion():Ret(clazz.LspCompletion)
	return self._tableCom:getCompletion()
end

function.open LuaTable.is(v):isguard(clazz.LuaTable)
	return getmetatable(v) == LuaTable
end

return LuaTable
