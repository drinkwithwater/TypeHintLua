
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const StringLiteral = require "thlua.type.StringLiteral"
const LuaFunction = require "thlua.func.LuaFunction"
const Nil = require "thlua.type.Nil"
const TypeFunction = require "thlua.func.TypeFunction"
const AtomTypeClass = require "thlua.type.AtomTypeClass"
const ClassTableCom = require "thlua.object.ClassTableCom"
const DefaultTableCom = require "thlua.object.DefaultTableCom"

const LuaTable = AtomTypeClass()


(@let.class = import("thlua.type.TypeClass").class)

function LuaTable.new(vManager:class.TypeManager)::RetClass(class.LuaTable, class.IAtomType)
	const self = setmetatable({::Self()
		_manager=vManager,
		_name="Table"@String,
		_unionSign=false,
		singleton=false,
		bits=TYPE_BITS.OBJECT,
		id=vManager:genTypeId(),
		_sealed=false@Boolean,
		_metaTable=false@OrFalse(class.LuaTable),
		_sealCom=false@OrFalse(class.DefaultTableCom, class.ClassTableCom),
	}, LuaTable)
	self._defaultCom=DefaultTableCom.new(self._manager, self)
	return self
end

function LuaTable:initByClass(vFnCom:class.ClassFnCom, vBaseClass:Union(False, class.LuaTable), vInterface:Union(False, class.MetaObject))
	self._sealCom = ClassTableCom.new(self._manager, self, vFnCom, vBaseClass, vInterface)
end

function LuaTable:getDefaultCom()::Ret(class.DefaultTableCom)
	return self._defaultCom
end

function LuaTable:getCurrentCom()::Ret(class.ITableCom)
	if not self._sealed then
		return self._defaultCom
	else
		return self._sealCom or self._defaultCom
	end
	return self._sealCom or self._defaultCom
end

function LuaTable:detailString(v, vVerbose)
	return "LuaTable-"..self._name
end

function LuaTable:setName(vName:String)
	self._name = vName
end

function LuaTable:meta_pairs(vContext)
	self:checkDefine()
	vContext:error("lua table meta_pairs TODO")
	local nManager = self._manager
	return nManager.builtin.next, self, nManager.type.Nil
end

function LuaTable:meta_ipairs(vContext)
	self:checkDefine()
	vContext:error("lua table meta_ipairs TODO")
	local nManager = self._manager
	return nManager.builtin.inext, self, nManager.type.Nil
end

function LuaTable:native_next(vContext, vInitType)
	self:checkDefine()
	local nSealCom = self._sealCom
	if nSealCom then
		return nSealCom:native_next(vContext, vInitType)
	else
		vContext:error("only struct table or class table can take next")
		return self._manager.type.Never, {}
	end
end

function LuaTable:native_setmetatable(vContext, vMetaTableType)
	-- TODO thinking when to lock this ?
	assert(not self._metaTable, "meta table can be only set once")
	self._metaTable = vMetaTableType
	local nManager = self._manager
	const function checkValidIndexType(vType)::Ret(OrFalse(class.UIndexType))
		if LuaTable.is(vType) or TypeFunction.is(vType) or LuaFunction.is(vType) then
			return vType
		else
			return false
		end
	end
	const nIndexType = checkValidIndexType(vMetaTableType:native_rawget(vContext, nManager:Literal("__index")))
	const nNewIndexType = checkValidIndexType(vMetaTableType:native_rawget(vContext, nManager:Literal("__newindex")))
	local nMetaEventToType:Dict(String, class.IAtomType) = {}
	for nOper, nEvent in pairs(OPER_ENUM.all) do
		const nMethodType = vMetaTableType:native_rawget(vContext, nManager:Literal(nEvent))
		if TypeFunction.is(nMethodType) or LuaFunction.is(nMethodType) then
			nMetaEventToType[nEvent] = nMethodType
		end
	end
	const nSomeEvents:List(String) = {"__len", "__tostring"}
	for _, nEvent in pairs(nSomeEvents) do
		const nMethodType = vMetaTableType:native_rawget(vContext, nManager:Literal(nEvent))
		if TypeFunction.is(nMethodType) or LuaFunction.is(nMethodType) then
			nMetaEventToType[nEvent] = nMethodType
		end
	end
	self._defaultCom:setMeta(nIndexType, nNewIndexType, nMetaEventToType)
end

function LuaTable:foreachGetPair(vFunc:Fn(class.IAtomType, class.UAtomUnion))
	self._defaultCom:foreachGetPair(vFunc)
end

function LuaTable:native_getmetatable()
	self:checkDefine()
	return self._metaTable or self._manager.type.Nil
end

function LuaTable:native_type()
	return self._manager:Literal("table")
end

function LuaTable:native_rawget(vContext, vKeyType)::Ret(class.UAtomUnion)
	self:checkDefine()
	return self._defaultCom:native_rawget(vContext, vKeyType)
end

function LuaTable:native_rawset(vContext, vKeyType:class.IAtomType, vValueType:class.UAtomUnion, vOverride:Union(Nil, Boolean))
	self:checkDefine()
	if not self._sealed then
		self._defaultCom:native_rawset(vContext, vKeyType, vValueType, vOverride)
	else
		vContext:error("can rawset for a sealed table")
	end
end

function LuaTable:meta_get(vContext, vKeyType)
	self:checkDefine()
	return self:getCurrentCom():meta_get(vContext, vKeyType)
end

function LuaTable:meta_set(vContext, vKeyType, vValueType)
	self:checkDefine()
	self:getCurrentCom():meta_set(vContext, vKeyType, vValueType)
end

function LuaTable:meta_set_override(vContext, vKeyType, vValueType)
	self:checkDefine()
	if not self._sealed then
		self._defaultCom:meta_set_override(vContext, vKeyType, vValueType)
	else
		vContext:error("override set can't work on sealed table")
	end
end

function LuaTable:meta_len(vContext)
	self:checkDefine()
	-- TODO
	return self._manager.type.Number
end

function LuaTable:meta_uop_some(vContext, vOper)
	self:checkDefine()
	vContext:error("meta uop TODO:"..tostring(vOper))
	return self._manager.type.Never
end

function LuaTable:meta_bop_func(vContext, vOper)
	self:checkDefine()
	return self:getCurrentCom():meta_bop_func(vContext, vOper)
end

function LuaTable:isSingleton()
	return self.singleton
end

function LuaTable:assumeContainAtom(vAssumeSet, vType)
	-- TODO check struct
	if self == vType then
		return self
	else
		return false
	end
end

function LuaTable:intersectAtom(vType)
	if self == vType then
		return self
	elseif vType:containAtom(self) then
		return self
	else
		return false
	end
end

-- called when New function checkDefine
function LuaTable:sealNew(vContext:class.Context)
	assert(not self._sealed, "is sealed")
	self._sealed = true
	const clsCom = self._sealCom
	assert(ClassTableCom.is(clsCom), "only ClassTableCom can call sealNew")
	clsCom:implement(vContext)
end

function LuaTable:cast(vContext:class.Context, vStruct:class.MetaObject)::Ret(OrFalse(class.MetaObject))
	if self._sealCom then
		return false
	end
	self._sealed = true
	self._sealCom = self._defaultCom
	self._defaultCom:tryCast(vContext, vStruct)
	return vStruct
end

function LuaTable.is(v)::isguard(class.LuaTable)
	return getmetatable(v) == LuaTable
end

-- called when struct contain
function LuaTable:checkBaseObjectType()
	local nSealCom = self._sealCom
	if not nSealCom then
		nSealCom = self._defaultCom
		self._sealed = true
		self._sealCom = nSealCom
	end
	return nSealCom:checkBaseObjectType()
end

function LuaTable:getCompletion()::Ret(class.LspCompletion)
	return self:getCurrentCom():getCompletion()
end

function LuaTable:checkDefine()
	local nSealCom = self._sealCom
	if ClassTableCom.is(nSealCom) then
		nSealCom:checkDefine()
	end
end

return LuaTable
