
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const Nil = require "thlua.type.Nil"
const TypeFunction = require "thlua.func.TypeFunction"
const LuaFunction = require "thlua.func.LuaFunction"

(@do
	let.class = import("thlua.type.TypeClass").class
	let.MetaFnField = Struct {
		luaFn=OrFalse(class.LuaFunction),
		typeFn=class.TypeFunction,
	}
end)

const MetaEventCom = {}
MetaEventCom.__index=MetaEventCom

function MetaEventCom.new(vManager:class.TypeManager)::RetClass(class.MetaEventCom)
	const self = setmetatable({::Self()
		_manager=vManager,
		bopEq=false@OrFalse(let.MetaFnField),
		bopDict={}@Dict(String, let.MetaFnField),
		uopLen=false@OrFalse(let.MetaFnField),
		uopDict={}@Dict(String, let.MetaFnField),
		-- special
		mode=false,
		call=false@OrFalse(let.MetaFnField),
		metatable=false,
		tostring=false,
		pairs=false,
		ipairs=false,
		gc=false,
		name=false,
		close=false,
	}, MetaEventCom)
	return self
end

const function fieldFromFn(vContext:class.Context, vEvent:String, vMethodFn:class.IAtomType,
	vTypeFn:OrNil(class.TypeFunction))::Ret(OrNil(class.MetaFnField))
	if vMethodFn:isUnion() then
		vContext:error("meta method can't be union type, event:"..vEvent)
		return nil
	elseif TypeFunction.is(vMethodFn) then
		return {
			luaFn=false,
			typeFn=vMethodFn
		}
	elseif LuaFunction.is(vMethodFn) then
		return {
			luaFn=false,
			typeFn=vMethodFn:specialize(vContext, nil, vTyepFn)
		}
	elseif not Nil.is(vMethodFn) then
		vContext:error("meta method type must be function or nil, event:"..vEvent)
	end
	return nil
end

function MetaEventCom.fromDefaultTable(vContext:class.Context, vTableCom:class.DefaultTableCom)::Ret(class.MetaEventCom)
	const nManager = vContext:getTypeManager()
	const self = MetaEventCom.new(nManager)
	for nOper, nEvent in pairs(OPER_ENUM.all) do
		const nMethodType = vTableCom:native_rawget(vContext, nManager:Literal(nEvent))
		const nField = fieldFromFn(vContext, nEvent, nMethodType)
		if nField then
			self.bopDict[nEvent] = nField
		end
	end
	return self
end

function MetaEventCom.fromObjectMetaBuild(vContext:class.Context)::Ret(class.MetaEventCom)
	const nCom = MetaEventCom.new(vContext:getTypeManager())
	return nCom
end

return MetaEventCom
