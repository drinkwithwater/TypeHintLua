
const Reference = require "thlua.refer.Reference"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const Nil = require "thlua.type.Nil"
const TypedFunction = require "thlua.func.TypedFunction"
const AutoFunction = require "thlua.func.AutoFunction"
const AutoMemberFunction = require "thlua.func.AutoMemberFunction"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.MetaFnField = Struct {
		typeFn=OrNil(clazz.TypedFunction),
		autoFn=OrNil(clazz.AutoFunction),
	}
end)

const MetaEventCom = {}
MetaEventCom.__index=MetaEventCom

function:class(clazz.MetaEventCom) MetaEventCom.new(vManager:clazz.TypeManager, vSelfType:Union(clazz.SealTable, clazz.TypedObject))
	const self = setmetatable({.class
		_manager=vManager,
		_selfType=vSelfType,
		_bopEq=false,
		_bopDict={}@Dict(String, MetaFnField),
		_uopLen=false@OrFalse(clazz.UAtomUnion),
		_uopDict=false, -- TODO {}@Dict(String, MetaFnField),
		-- special
		_pairs=false@OrFalse(MetaFnField),
		_ipairs=false@OrFalse(MetaFnField),
		_tostring=false@OrFalse(MetaFnField),
		_mode=false,
		_call=false, -- TODO @OrFalse(MetaFnField),
		_metatable=false,
		_gc=false,
		_name=false,
		_close=false,
	}, MetaEventCom)
	return self
end

function MetaEventCom:getBopFunc(vBopEvent:String):Ret(OrNil(clazz.TypedFunction))
	const nField = self._bopDict[vBopEvent]
	return nField and (nField.typeFn or nField.autoFn!:getFnAwait())
end

function MetaEventCom:getLenType():Ret(OrFalse(clazz.UAtomUnion))
	return self._uopLen
end

function MetaEventCom:getPairsFunc():Ret(OrFalse(clazz.TypedFunction))
	const nField = self._pairs
	return nField and (nField.typeFn or nField.autoFn!:getFnAwait())
end

const function buildFieldFromFn(vContext:clazz.OperContext, vEvent:String, vMethodFn:clazz.UAtomUnion,
	vTypeFnOrNil:OrNil(clazz.TypedFunction)):Ret(OrNil(MetaFnField))
	if vMethodFn:isUnion() then
		vContext:error("meta method can't be union type, event:"..vEvent)
		return nil
	elseif TypedFunction.is(vMethodFn) then
		return {
			typeFn=vMethodFn
		}
	elseif AutoMemberFunction.is(vMethodFn) then
		if vTypeFnOrNil then
			const nSelfType = vTypeFnOrNil:getParTuple():get(1)
			const nAutoFn = vMethodFn:indexAutoFn(nSelfType)
			nAutoFn:checkWhenCast(vContext, vTypeFnOrNil)
			return {
				typeFn=vTypeFnOrNil,
			}
		else
			vContext:error("member function cast to type fn in meta field TODO")
			return nil
		end
	elseif AutoFunction.is(vMethodFn) then
		if vTypeFnOrNil then
			vMethodFn:checkWhenCast(vContext, vTypeFnOrNil)
			return {
				typeFn=vTypeFnOrNil,
			}
		else
			return {
				autoFn=vMethodFn
			}
		end
	elseif not Nil.is(vMethodFn) then
		vContext:error("meta method type must be function or nil, event:"..vEvent)
	end
	return nil
end

function MetaEventCom:initByTable(vContext:clazz.OperContext, vMetaTable:Union(clazz.OpenTable, clazz.SealTable))
	const nSelfType = self._selfType
	const nManager = self._manager
	-- 1. build bop
	for nOper, nEvent in pairs(OPER_ENUM.bopNoEq) do
		const nMethodType = vMetaTable:native_rawget(vContext, nManager:Literal(nEvent))
		self._bopDict[nEvent] = buildFieldFromFn(vContext, nEvent, nMethodType)
	end
	const nEqFn = vMetaTable:native_rawget(vContext, nManager:Literal("__eq"))
	if not Nil.is(nEqFn) then
		vContext:error("TODO meta logic for bop __eq", tostring(nEqFn))
	end
	-- 2. build uop
	const nLenFn = vMetaTable:native_rawget(vContext, nManager:Literal("__len"))
	const nLenTypeFn = nManager:checkedFn(nSelfType):Ret(nManager.type.Integer)
	const nLenField = buildFieldFromFn(vContext, "__len", nLenFn, nLenTypeFn)
	if nLenField then
		self._uopLen = nManager.type.Integer
		-- TODO, use fn's ret in the future
		-- self._uopLen = nLenField.typeFn:getRetTuples():getFirstType():checkAtomUnion()
	end
	-- 3. build other
	-- 1) __tostring
	const nStringTypeFn = nManager:checkedFn(nSelfType):Ret(nManager.type.String)
	const nStringFn = vMetaTable:native_rawget(vContext, nManager:Literal("__tostring"))
	self._tostring = buildFieldFromFn(vContext, "__tostring", nStringFn, nStringTypeFn) or false
	-- 2) __pairs
	const nPairsFn = vMetaTable:native_rawget(vContext, nManager:Literal("__pairs"))
	self._pairs = buildFieldFromFn(vContext, "__pairs", nPairsFn) or false
end

const function buildFieldFromAllType(vEvent:String, vTypeFn:OrNil(clazz.UAllType)):Ret(OrNil(MetaFnField))
	if not vTypeFn then
		return nil
	end
	if Reference.is(vTypeFn) then
		vTypeFn = vTypeFn:waitTypeCom():getTypeAwait()
	end
	if not TypedFunction.is(vTypeFn) then
		error("meta field "..vEvent.." must be single type-function")
	else
		return {
			typeFn=vTypeFn
		}
	end
end

function MetaEventCom:initByEventDict(vActionDict:Dict(String, clazz.UAllType))
	const nManager = self._manager
	-- 1. build bop
	for nOper, nEvent in pairs(OPER_ENUM.bopNoEq) do
		self._bopDict[nEvent] = buildFieldFromAllType(nEvent, vActionDict[nEvent])
	end
	if vActionDict["__eq"] then
		print("__eq in action table TODO")
	end
	-- 2. build uop
	local nLenType = vActionDict["__len"]
	if nLenType then
		nLenType = nLenType:checkAtomUnion()
		if not nManager.type.Integer:includeAll(nLenType) then
			error("len type must be subtype of Integer")
		end
		self._uopLen = nLenType
	end
	-- 3.
	self._pairs = buildFieldFromAllType("__pairs", vActionDict["__pairs"]) or false
	self._ipairs = buildFieldFromAllType("__ipairs", vActionDict["__ipairs"]) or false
end

function MetaEventCom:mergeField(
	vEvent:String,
	vComList:List(clazz.MetaEventCom),
	vFieldGetter:Fn(clazz.MetaEventCom):Ret(OrFalse(MetaFnField))):Ret(OrFalse(MetaFnField))
	local nRetField:OrFalse(MetaFnField) = false
	for _, vCom in ipairs(vComList) do
		const nField = vFieldGetter(vCom)
		if nField then
			if nRetField then
				error("meta field conflict when merge, field:"..vEvent)
			else
				nRetField = nField
			end
		end
	end
	return nRetField
end

function MetaEventCom:initByMerge(vComList:List(clazz.MetaEventCom))
	self._pairs = self:mergeField("__pairs", vComList, function(vCom)
		return vCom._pairs
	end)
	self._ipairs = self:mergeField("__ipairs", vComList, function(vCom)
		return vCom._ipairs
	end)
	for nOper, nEvent in pairs(OPER_ENUM.bopNoEq) do
		self._bopDict[nEvent] = self:mergeField(nEvent, vComList, function(vCom)
			return vCom._bopDict[nEvent] or false
		end) or nil
	end
	local nFinalUopLen:OrFalse(clazz.UAtomUnion) = false
	for _, vCom in ipairs(vComList) do
		const nUopLen = vCom._uopLen
		if nUopLen then
			if nFinalUopLen then
				error("__len conflict in meta when merge")
			else
				nFinalUopLen = nUopLen
			end
		end
	end
	self._uopLen = nFinalUopLen
end

return MetaEventCom
