
const MemberFunction = require "thlua.func.MemberFunction"
const StringLiteral = require "thlua.type.StringLiteral"
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const MetaEventCom = require "thlua.object.MetaEventCom"

const BaseObject = require "thlua.object.BaseObject"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const MetaObject = class@<clazz.MetaObject, false>(BaseObject)

function.open MetaObject:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vKeyRefer:clazz.UnionReferCom, vNextKey:OrFalse(clazz.UAllType))
	self._node=vNode
	self._keyRefer=vKeyRefer
	self._memberDict=false@OrFalse(clazz.MemberDict)
	self._nextKey=vNextKey
	self._nextValue=false@OrFalse(clazz.UAtomUnion)
	self._nextDict={}@Dict(clazz.IAtomType, clazz.UAtomUnion)
	self._metaEventCom=false@OrFalse(clazz.MetaEventCom)
	self._intersectSet={}@Dict(clazz.MetaObject, True)
	self.bits=TYPE_BITS.OBJECT
end

function MetaObject:lateInit(vIntersectSet:Dict(clazz.MetaObject,True), vMemberDict:clazz.MemberDict, vMetaEventCom:OrFalse(clazz.MetaEventCom))
	self._intersectSet = vIntersectSet
	self._metaEventCom = vMetaEventCom
	self._memberDict = vMemberDict
end

function MetaObject:lateCheck()
	const nNextKey = self._nextKey
	const nMemberDict = assert(self._memberDict, "member dict must existed here")
	if nNextKey then
		nNextKey:foreachAwait(function(vKeyAtom)
			const nMember = nMemberDict[vKeyAtom]
			if not nMember then
				error("nextKey is not subtype of object's key, missing field:"..tostring(vKeyAtom))
			elseif MemberFunction.is(nMember) then
				error("nextKey's value can't be member function"..tostring(vKeyAtom))
			end
		end)
	end
end

function MetaObject:_everyWith(vRightObject:clazz.MetaObject, vFunc:Fn(clazz.IAtomType, clazz.UAllType, Boolean):Ret(Boolean)):Ret(Boolean)
	const nMemberDict = self:getMemberDict()
	for nLeftKey, nLeftValue in pairs(nMemberDict) do
		if not nLeftValue:mayRecursive() and not vFunc(nLeftKey, nLeftValue, false) then
			return false
		end
	end
	for nLeftKey, nLeftValue in pairs(nMemberDict) do
		if nLeftValue:mayRecursive() then
			local nLeftIsMfn = false
			if MemberFunction.is(nLeftValue) then
				nLeftValue = nLeftValue:indexTypeFn(vRightObject)
				nLeftIsMfn = true
			end
			if not vFunc(nLeftKey, nLeftValue, nLeftIsMfn) then
				return false
			end
		end
	end
	return true
end

function.pass MetaObject:assumeIncludeObject(vAssumeSet:Dict(Integer, Boolean), vRightObject:clazz.MetaObject):Ret(Boolean)
	error("assume include Object not implement")
end

function MetaObject:assumeIncludeAtom(vAssumeSet, vRightType)
	local nRightStruct = vRightType:checkBaseObjectType()
	if not nRightStruct then
		return false
	end
	if self == nRightStruct then
		return self
	end
	const nMgr = self._manager
	const nRelation = nMgr:attachPairInclude(self, nRightStruct, not vAssumeSet)
	if nRelation then
		if nRelation == ">" or nRelation == "=" then
			return self
		else
			return false
		end
	else
		assert(vAssumeSet, "assume set must be existed here")
	end
	const nPair = self._manager:makePair(self, nRightStruct)
	const nAssumeResult = vAssumeSet[nPair]
	if nAssumeResult ~= nil then
		return nAssumeResult and self
	end
	vAssumeSet[nPair] = true
	local nAssumeInclude = self:assumeIncludeObject(vAssumeSet, nRightStruct)
	if not nAssumeInclude then
		vAssumeSet[nPair] = false
		return false
	else
		return self
	end
end

function MetaObject:meta_len(vContext)
	const nCom = self:getMetaEventCom()
	if nCom then
		const nType = nCom:getLenType()
		if nType then
			return nType
		end
	end
	vContext:error(self, "object take # oper, but _len action not setted")
	return self._manager.type.Integer
end

function MetaObject:meta_uop_some(vContext, vOper)
	vContext:error("other oper invalid:"..tostring(vOper))
	return self._manager.type.Never
end

function MetaObject:meta_pairs(vContext)
	return false
end

function MetaObject:meta_ipairs(vContext)
	return false
end

function MetaObject:native_next(vContext, vInitType)
	const nMemberDict = self:getMemberDict()
	const nNextKey = self._nextKey
	const nNil = self._manager.type.Nil
	if not nNextKey then
		vContext:error("this object can not take next")
		return nNil, {[nNil]=nNil}
	end
	local nNextValue = self._nextValue
	local nNextDict = self._nextDict
	if not nNextValue then
		nNextDict = {}
		local nCollection = self._manager:TypeCollection()
		nNextKey:foreachAwait(function(vKeyAtom)
			const nValue = nMemberDict[vKeyAtom]!
			if MemberFunction.is(nValue) then
				vContext:error("next can't take member function as value")
			else
				const nNotnilValue = nValue:checkAtomUnion():notnilType()
				nNextDict[vKeyAtom] = nNotnilValue
				nCollection:put(nNotnilValue)
			end
		end)
		nCollection:put(nNil)
		nNextValue = nCollection:mergeToAtomUnion()
		nNextDict[nNil] = nNil
		self._nextValue = nNextValue
		self._nextDict = nNextDict
	end
	return nNextValue, nNextDict
end

function MetaObject:isSingleton()
	return false
end

function MetaObject:_keyIncludeAtom(vType:clazz.IAtomType):Ret(clazz.IAtomType, clazz.UMemberAllType):Ret(False)
	const nKey = self._keyRefer:getTypeAwait():includeAtom(vType)
	if nKey then
		return nKey, assert(self._memberDict)[nKey]!
	else
		return false
	end
end

function MetaObject:meta_get(vContext, vType)
	const nRet = self:_meta_get(vContext, vType, false)
	vContext:pushFirstAndTuple(nRet)
end

function MetaObject:_meta_get(vContext:clazz.OperContext, vType:clazz.IAtomType, vIsInvoke:Boolean):Ret(clazz.UAtomUnion)
	const nKey, nGetValue = self:_keyIncludeAtom(vType)
	if not nKey then
		vContext:error("error get("..tostring(vType)..") in struct")
		return self._manager.type.Nil
	else
		if MemberFunction.is(nGetValue) then
			if not vIsInvoke then
				-- vContext:warn("index a member function but using as invoke")
			end
			return nGetValue:indexTypeFn(self)
		else
			return nGetValue:checkAtomUnion()
		end
	end
end

function MetaObject:native_rawget(vContext, vKeyType)
	vContext:warn("abstract object take rawget")
	return self:_meta_get(vContext, vKeyType, false)
end

function MetaObject:meta_bop_func(vContext, vOper)
	local nMethodEvent = OPER_ENUM.bopNoEq[vOper]!
	const nCom = self:getMetaEventCom()
	if nCom then
		const nFn = nCom:getBopFunc(nMethodEvent)
		if nFn then
			return true, nFn
		end
	end
	return false, nil
end

function MetaObject:indexKeyValue(vKeyType:clazz.IAtomType):Ret(False):Ret(clazz.IAtomType, clazz.UAllType)
	const nKey, nValue = self:_keyIncludeAtom(vKeyType)
	if nKey then
		if MemberFunction.is(nValue) then
			return false
		else
			return nKey, nValue
		end
	else
		return false
	end
end

function MetaObject:detailString(vToStringCache, vVerbose)
	return "MetaObject..."
	--[[
	local nRefer = self._referCom
	if nRefer then
		return "Object ("..nRefer:getToString()..")"
	end
	local nCache = vToStringCache[self]
	if nCache then
		return nCache
	end
	const nMemberDict = self._memberDict
	if not nMemberDict then
		return "Object (constructing...)"
	end
	vToStringCache[self] = "Object {...}"
	local l:List(String) = {}
	for k,v in pairs(nMemberDict) do
		local nKeyString:String = ""
		if StringLiteral.is(k) and not vVerbose then
			nKeyString = k:getLiteral()
		else
			nKeyString = "["..k:detailString(vToStringCache, vVerbose).."]"
		end
		l[#l+1] = nKeyString.."="..v:detailString(vToStringCache, vVerbose)
	end
	local nResult = "Object {"..table.concat(l, ",").."}"
	vToStringCache[self] = nResult
	return nResult]]
end

function MetaObject:getMemberDict():Ret(clazz.MemberDict)
	self._keyRefer:getListAwait()
	return (assert(self._memberDict, "member list is not setted after waiting"))
end

function MetaObject:copyValueDict(vSelfObject:OrNil(clazz.SealTable, clazz.MetaObject)):Ret(Dict(clazz.IAtomType, clazz.UAllType))
	const nValueDict:Dict(clazz.IAtomType, clazz.UAllType) = {}
	for k,v in pairs(self:getMemberDict()) do
		if not MemberFunction.is(v) then
			nValueDict[k] = v
		else
			assert(vSelfObject, "member function copy require SelfObject")
			nValueDict[k] = v:indexTypeFn(vSelfObject)
		end
	end
	return nValueDict
end

function MetaObject:getMetaEventCom():Ret(OrFalse(clazz.MetaEventCom))
	self._keyRefer:getListAwait()
	return self._metaEventCom
end

function MetaObject:getKeyTypes():Ret(clazz.UnionReferCom, OrFalse(clazz.UAllType))
	return self._keyRefer, self._nextKey
end

function MetaObject:checkBaseObjectType()
	return self
end

function MetaObject:native_type()
	return self._manager:Literal("table")
end

function MetaObject:objectPartType()
	return self
end

function MetaObject:mayRecursive()
	return true
end

function MetaObject:getCompletion():Ret(clazz.LspCompletion)
	local nDict:Dict(String, True) = {}
	self._keyRefer:foreachAwait(function(vType)
		if StringLiteral.is(vType) then
			nDict[vType:getLiteral()] = true
		end
	end)
	return nDict
end

return MetaObject
