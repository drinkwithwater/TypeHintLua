
local LuaFunction = require "thlua.func.LuaFunction"

(@let.class = import("thlua.type.TypeClass").class)

local StructTableCom = {}
StructTableCom.__index=StructTableCom

function StructTableCom.new(vManager:class.TypeManager, vLuaTable:class.LuaTable, vStruct:class.Struct)::RetClass(class.StructTableCom)
    local self = setmetatable({::Self()
        _manager=vManager,
        _luaTable=vLuaTable,
        _struct=vStruct,
    }, StructTableCom)
    return self
end

function StructTableCom:meta_set(vContext, vKeyType, vValueType)
    self._struct:meta_set(vContext, vKeyType, vValueType)
end

function StructTableCom:meta_get(vContext, vKeyType)::Ret(class.IKeyType)
    return self._struct:meta_get(vContext, vKeyType)
end

function StructTableCom:meta_ipairs(vContext)
    return self._struct:meta_ipairs(vContext)
end

function StructTableCom:meta_pairs(vContext)
    return self._struct:meta_pairs(vContext)
end

function StructTableCom:meta_bop_func(vContext, vOper)::Ret(False, Nil):Ret(True, Union(class.TypeFunction, class.LuaFunction))
    return self._struct:meta_bop_func(vContext, vOper)
end

function StructTableCom:tryCast(vContext)
	local nCastSuccess = true
    local nDefaultCom = self._luaTable:getDefaultCom()
	self._struct:foreachGetPair(function(vKeyType, vValueType)
		local nDstType = vValueType:checkType()
		local nSrcType 
		local nRawValue = nDefaultCom:native_rawget(vContext, vKeyType)
		if not nRawValue:isNilable() then
			nSrcType = nRawValue
		else
			local _, nMetaGetValue = nDefaultCom:_meta_get(vContext, vKeyType)
			nSrcType = nMetaGetValue
		end
		if LuaFunction.is(nSrcType) then
			if not TypeFunction.is(nDstType) then
				nCastSuccess = false
				vContext:error("field cast failed, field="..tostring(vKeyType))
			else
				if nDstType:isMember() then
					local nArgTuple = nDstType:getArgTuple()
					nDstType = self._manager:Function(nArgTuple:replaceFirst(self), nDstType:getRetTuples())
				end
				if not vContext:cast(nSrcType, nDstType) then
					nCastSuccess = false
					vContext:error("field cast function failed, field="..tostring(vKeyType))
				end
			end
		elseif not nDstType:contain(nSrcType) then
			vContext:error("field cast fail, field="..tostring(vKeyType))
			nCastSuccess = false
		end
	end)
	self._struct:foreachSetPair(function(vKeyType, vValueType)
		if vKeyType:isSingleton() then
			local nRawValue = nDefaultCom:native_rawget(vContext, vKeyType)
			if not nRawValue:isNilable() then
				if not nRawValue:contain(vValueType) then
					vContext:error(" setter field error, field=", vKeyType)
				end
			else
				print("TODO check __newindex")
				-- self:_meta_set(vContext, vKeyType, vValueType, false)
			end
		else
			print("TODO check __newindex")
			-- self:_meta_set(vContext, vKeyType, vValueType, false)
		end
	end)
	return nCastSuccess
end

function StructTableCom:checkStruct()
    return self._struct:checkStruct()
end

function StructTableCom:getCompletion()
	return self._struct:getCompletion()
end

function StructTableCom.is(vType)::isguard(class.StructTableCom)
	return getmetatable(vType) == StructTableCom
end

return StructTableCom