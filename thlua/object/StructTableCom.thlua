
local LuaFunction = require "thlua.func.LuaFunction"
local MemberFunction = require "thlua.func.MemberFunction"

(@let.class = import("thlua.type.TypeClass").class)

local StructTableCom = {}
StructTableCom.__index=StructTableCom

function StructTableCom.new(vManager:class.TypeManager, vLuaTable:class.LuaTable, vStruct:class.MetaObject)::RetClass(class.StructTableCom)
    local self = setmetatable({::Self()
        _manager=vManager,
        _luaTable=vLuaTable,
        _struct=vStruct,
    }, StructTableCom)
    return self
end

function StructTableCom:meta_set(vContext, vKeyType, vValueType)
    self._struct:meta_set(vContext, vKeyType, vValueType)
end

function StructTableCom:meta_get(vContext, vKeyType)::Ret(class.UAtomUnion)
    return self._struct:meta_get(vContext, vKeyType)
end

function StructTableCom:meta_ipairs(vContext)
    return self._struct:meta_ipairs(vContext)
end

function StructTableCom:meta_pairs(vContext)
    return self._struct:meta_pairs(vContext)
end

function StructTableCom:meta_bop_func(vContext, vOper)::Ret(False, Nil):Ret(True, Union(class.TypeFunction, class.LuaFunction))
    return self._struct:meta_bop_func(vContext, vOper)
end

function StructTableCom:tryCast(vContext)
	local nCastSuccess = true
	local nDefaultCom = self._luaTable:getDefaultCom()
	local nStruct = self._struct
	nDefaultCom:foreachGetPair(function(vKeyType, vValueType)
		local nKey, nValue = nStruct:indexKeyValue(vKeyType)
		if nKey then
			if nValue:containAll(vValueType) then
				return
			else
				vContext:error("table cast fail, field="..tostring(vKeyType).." not match")
			end
		else
			vContext:error("table cast fail, field="..tostring(vKeyType).." not existed")
		end
		nCastSuccess = false
	end)
	return nCastSuccess
end

function StructTableCom:checkStruct()
    return self._struct:checkStruct()
end

function StructTableCom:getCompletion()
	return self._struct:getCompletion()
end

function StructTableCom.is(vType)::isguard(class.StructTableCom)
	return getmetatable(vType) == StructTableCom
end

return StructTableCom
