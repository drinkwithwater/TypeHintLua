
(@do
	let.class = import("thlua.type.TypeClass").class
	class.UTableCom = Union(class.StructTableCom, class.DefaultTableCom, class.ClassTableCom)
	class.ITableCom = Intersect(class.IMetaNative, Interface {
		checkStruct=Mfn():Ret(Union(class.MetaObject)),
		getCompletion=Mfn():Ret(class.LspCompletion)
	})
end)


local function TableComClass()::open()
	local TableCom = {}
	TableCom.__index = TableCom
	function TableCom:meta_pairs?(vContext)
		error("meta_pairs not implement")
	end
	function TableCom:meta_ipairs?(vContext)
		error("meta_ipairs not implement")
	end
	function TableCom:meta_get?(vContext, vKey)
		error("meta_get not implement")
	end
	function TableCom:meta_set?(vContext, vKey, vValue)
		error("meta_set not implement")
	end
	function TableCom:meta_set_override?(vContext, vKey, vValue)
		error("meta_set_override not implement")
	end
	function TableCom:meta_len?(vContext)
		error("meta_len not implement")
	end
	function TableCom:meta_uop_some?(vContext, vOper)
		error("meta_uop_some not implement")
	end
	function TableCom:meta_bop_func?(vContext, vOper)
		error("meta_bop_func not implement")
	end
	function TableCom:native_next?(vContext, vInitType)
		error("meta_bop_func not implement")
	end
	return TableCom
end

return TableComClass
