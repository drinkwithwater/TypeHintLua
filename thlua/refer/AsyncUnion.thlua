
const ScheduleTask = require "thlua.manager.ScheduleTask"
const class = require "thlua.class"
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AsyncUnion = class@<clazz.AsyncUnion, false>()

function.open AsyncUnion:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vTask:clazz.ScheduleTask)
	self._manager=vManager
	self._task = vTask
	self._node = vNode
	self._mayRecursive=false@Boolean
	self._typeList=false@OrFalse(List(clazz.IAtomType))
	self._resultType=false@OrFalse(clazz.UAtomUnion)
	self._listBuildEvent=vTask:makeEvent()
	self._resultBuildEvent=vTask:makeEvent()
end

function AsyncUnion:getResultType():Ret(OrFalse(clazz.UAtomUnion))
	return self._resultType
end

function AsyncUnion:getTypeAwait():Ret(clazz.UAtomUnion)
	if not self._resultType then
		self._resultBuildEvent:wait()
	end
	return (assert(self._resultType, "result type not setted"))
end

function AsyncUnion:getMayRecursive():Ret(Boolean)
	return self._mayRecursive
end

function AsyncUnion:getListAwait():Ret(List(clazz.IAtomType))
	if not self._typeList then
		self._listBuildEvent:wait()
	end
	return (assert(self._typeList, "type list not setted"))
end

function AsyncUnion:setAtomList(vAtomList:List(clazz.IAtomType), vLateRunner:OrNil(Fn():Ret(OrFalse(clazz.UAtomUnion)))):Ret(clazz.UAtomUnion)
	assert(not self._typeList, "type list has been setted")
	-- step 1. set list
	self._typeList = vAtomList
	for k, v in ipairs(vAtomList) do
		if v:mayRecursive() then
			self._mayRecursive = true
		end
	end
	self._listBuildEvent:wakeup()
	if vLateRunner then
		const nResultType = vLateRunner()
		if nResultType then
			self._resultType = nResultType
			self._resultBuildEvent:wakeup()
			return nResultType
		end
	end
	-- step 2. merge to result type
	local nResultType:OrNil(clazz.UAtomUnion) = nil
	if #vAtomList == 0 then
		nResultType = self._manager.type.Never
	elseif #vAtomList == 1 then
		nResultType = vAtomList[1]!
	else
		local nCollection = self._manager:TypeCollection()
		for _, v in ipairs(vAtomList) do
			nCollection:put(v)
		end
		nResultType = nCollection:mergeToAtomUnion()
	end
	self._resultType = nResultType
	self._resultBuildEvent:wakeup()
	return nResultType
end

function AsyncUnion:foreachAwait(vFunc:Fn(clazz.IAtomType))
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nListType = self:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function AsyncUnion:getAssignNode():Ret(OrFalse(clazz.IAstNode))
	return self._node
end

return AsyncUnion
