
const TypeFunction = require "thlua.func.TypeFunction"
const ISealFunction = require "thlua.refer.ISealFunction"
const Exception = require "thlua.Exception"

const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.BuildRunner = Fn(clazz.AutoFunction, OrFalse(clazz.TypeFunction)):Ret(
		OrFalse(clazz.TypeFunction), Fn():Ret(clazz.TypeFunction)
	)
end)

const AutoFunction = class@<clazz.AutoFunction, false>(ISealFunction)
AutoFunction.__tostring=function(self:clazz.AutoFunction)
	return "autofn@"..tostring(self._node)
end

function.open AutoFunction:ctor(vManager:clazz.TypeManager, ...)
	self._castList={}@List(clazz.TypeFunction)
	self._retTuples=false@OrFalse(clazz.RetTuples)
end

function AutoFunction:checkWhenCast(vContext:clazz.OperContext, vTypeFn:clazz.TypeFunction):Ret(Boolean)
	if not self._headStartEvent:isWaken() then
		const nList = self._castList
		nList[#nList + 1] = vTypeFn
		return true
	else
		return false
	end
end

function AutoFunction:setRetTuples(vRetTuples:clazz.RetTuples)
	self._retTuples = vRetTuples
end

function AutoFunction:getRetTuples():Ret(OrFalse(clazz.RetTuples))
	return self._retTuples
end

function AutoFunction:build(vRunner:BuildRunner)
	self._task:runAsync(function()
		self:_build(vRunner)
	end)
end

function AutoFunction:_build(vRunner:BuildRunner)
	self._headStartEvent:wait()
	self._task:stopWaitType()
	local nCastFn:OrFalse(clazz.TypeFunction) = false
	for k,v in pairs(self._castList) do
		nCastFn = v
	end
	const nTypeFn, nLateRunner = vRunner(self, nCastFn)
	if nTypeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._headFinishEvent:wakeup()
	self._bodyStartEvent:wait()
	const nTypeFn = nLateRunner()
	if not self._typeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._bodyFinishEvent:wakeup()
end

function AutoFunction:getFnAwait():Ret(clazz.TypeFunction)
	if not self._typeFn then
		self._headStartEvent:wakeup()
		self._headFinishEvent:wait()
		if not self._typeFn then
			self._bodyStartEvent:wakeup()
			self._bodyFinishEvent:wait()
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function AutoFunction:startBuild()
	self._headStartEvent:wakeup()
	self._bodyStartEvent:wakeup()
end

function AutoFunction:getContext()
	return self._context
end

return AutoFunction
