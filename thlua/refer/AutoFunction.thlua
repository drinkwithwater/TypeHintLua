
const TypeFunction = require "thlua.func.TypeFunction"
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoFunction = {}
AutoFunction.__index=AutoFunction
AutoFunction.__tostring=function(self:clazz.AutoFunction)
	return "auto-fn"
end

function:class(clazz.AutoFunction) AutoFunction.new(vManager:clazz.TypeManager, vRefer:clazz.Reference)
	const self = setmetatable({.class
		_manager=vManager,
		_refer=vRefer,
		-- startSid : true means wait to gen sid and start, int means waiting, false means started
		_waitStartSid=true@Union(Boolean, Integer),
		_typeFn=false@OrFalse(clazz.TypeFunction),
		_retTuples=false@OrFalse(clazz.RetTuples),
		_preBuildEvent=vRefer:makeEvent(),
		_lateBuildEvent=vRefer:makeEvent(),
	}, AutoFunction)
	return self
end

function AutoFunction:getRetTuples():Ret(OrFalse(clazz.RetTuples))
	return self._retTuples
end

function AutoFunction:build(vRunner:Fn():Ret(OrFalse(clazz.TypeFunction), Fn(clazz.AutoFunction):Ret(OrFalse(clazz.TypeFunction))))
	const nTypeFn, nLateRunner = vRunner()
	if nTypeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._preBuildEvent:wakeup()
	const nWaitStartSid = self._waitStartSid
	if nWaitStartSid then
		assert(nWaitStartSid == true, "wait start sid must be true here")
		const nSessionId = self._manager:genSessionId()
		self._waitStartSid = nSessionId
		const co = coroutine.running()
		self._manager:coWait(co, nSessionId)
	end
	const nTypeFn = nLateRunner(self)
	if nTypeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._lateBuildEvent:wakeup()
end

function AutoFunction:meta_call(vContext:clazz.Context, vTermTuple:clazz.UTermTuple):Ret(clazz.RetTuples)
	const nTypeFn = self:getFnAwait()
	return nTypeFn:meta_call(vContext, vTermTuple)
end

function AutoFunction:getFnAwait():Ret(clazz.TypeFunction)
	if not self._typeFn then
		self._preBuildEvent:wait()
		if not self._typeFn then
			self:startBuild()
			if not self._typeFn then
				self._lateBuildEvent:wait()
			end
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function AutoFunction:startBuild()
	const nWaitStartSid = self._waitStartSid
	if nWaitStartSid then
		self._waitStartSid = false
		if type(nWaitStartSid) == "number" then
			const co = self._refer:getSelfCo()
			self._manager:coWakeup(co, nWaitStartSid)
		end
	end
end

function.open AutoFunction.is(self):isguard(clazz.AutoFunction)
	return getmetatable(self) == AutoFunction
end

return AutoFunction
