
const TypeFunction = require "thlua.func.TypeFunction"
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoFunction = {}
AutoFunction.__index=AutoFunction
AutoFunction.__tostring=function(self:clazz.AutoFunction)
	return "auto-fn"
end

function:class(clazz.AutoFunction) AutoFunction.new(vManager:clazz.TypeManager, vRefer:clazz.TypeReference)
	const self = setmetatable({.class
		_manager=vManager,
		_refer=vRefer,
		_headStartEvent=vManager:getScheduleManager():makeEvent(),
		_bodyStartEvent=vManager:getScheduleManager():makeEvent(),
		_castList={}@List(clazz.TypeFunction),
		_typeFn=false@OrFalse(clazz.TypeFunction),
		_retTuples=false@OrFalse(clazz.RetTuples),
		_headFinidhEvent=vRefer:makeEvent(),
		_bodyFinishEvent=vRefer:makeEvent(),
	}, AutoFunction)
	return self
end

function AutoFunction:checkWhenCast(vContext:clazz.OperContext, vTypeFn:clazz.TypeFunction):Ret(Boolean)
	if not self._headStartEvent:isWaken() then
		const nList = self._castList
		nList[#nList + 1] = vTypeFn
		return true
	else
		return false
	end
end

function AutoFunction:setRetTuples(vRetTuples:clazz.RetTuples)
	self._retTuples = vRetTuples
end

function AutoFunction:getRetTuples():Ret(OrFalse(clazz.RetTuples))
	return self._retTuples
end

function AutoFunction:build(vRunner:Fn(clazz.AutoFunction, OrFalse(clazz.TypeFunction)):Ret(OrFalse(clazz.TypeFunction), Fn():Ret(clazz.TypeFunction)))
	self._headStartEvent:wait()
	self._refer:stopWaitType()
	local nCastFn:OrFalse(clazz.TypeFunction) = false
	for k,v in pairs(self._castList) do
		nCastFn = v
	end
	const nTypeFn, nLateRunner = vRunner(self, nCastFn)
	if nTypeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._headFinidhEvent:wakeup()
	self._bodyStartEvent:wait()
	const nTypeFn = nLateRunner()
	if not self._typeFn then
		self._typeFn = nTypeFn
		self._retTuples = nTypeFn:getRetTuples()
	end
	self._bodyFinishEvent:wakeup()
end

function AutoFunction:meta_call(vContext:clazz.OperContext, vTermTuple:clazz.UTermTuple):Ret(clazz.RetTuples)
	const nTypeFn = self:getFnAwait()
	return nTypeFn:meta_call(vContext, vTermTuple)
end

function AutoFunction:getFnAwait():Ret(clazz.TypeFunction)
	if not self._typeFn then
		self._headStartEvent:wakeup()
		self._headFinidhEvent:wait()
		if not self._typeFn then
			self._bodyStartEvent:wakeup()
			self._bodyFinishEvent:wait()
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function AutoFunction:startBuild()
	self._headStartEvent:wakeup()
	self._bodyStartEvent:wakeup()
end

function.open AutoFunction.is(self):isguard(clazz.AutoFunction)
	return getmetatable(self) == AutoFunction
end

return AutoFunction
