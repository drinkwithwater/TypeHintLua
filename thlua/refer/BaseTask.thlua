
const Exception = require "thlua.Exception"

const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const class = require "thlua.class"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const BaseTask = class@<clazz.BaseTask, false>()

function.open BaseTask:ctor(vManager:clazz.TypeManager, vStack:OrNil(clazz.SealStack))
	self._manager = vManager
	self._scheduleManager = vManager:getScheduleManager()
	self._selfCo = coroutine.create(function(vRunFn:Fn())
		const ok, nExc = pcall(vRunFn)
		if not ok then
			const nStack = self:getStack()
			if nStack then
				const nNode = nExc.node
				if not nNode then
					nStack:error(tostring(nExc))
				else
					nStack:getRuntime():nodeError(nNode, nExc.msg)
				end
			else
				error(nExc)
			end
		end
		--[[if not ok then
			const nContext = self:getContext()
			if Exception.is(nExc) then
				nExc:fixNode(self:getAssignNode())
				if nContext then
					nContext:getRuntime():nodeError(nExc.node, nExc.msg)
				else
					error(nExc)
				end
				error(nExc)
			else
				const nExc = Exception.new(tostring(nExc), self:getAssignNode())
				if nContext then
					nContext:getRuntime():nodeError(nExc.node, nExc.msg)
				else
					error(nExc)
				end
				error(nExc)
			end
		end]]
	end)
	self._stack = vStack or false
	self._stopWaitType=false@Boolean
	self._scheduleManager:markReference(self._selfCo, self)
end

function BaseTask:getSelfCo():Ret(Thread)
	return self._selfCo
end

function BaseTask:stopWaitType()
	self._stopWaitType = true
end

function BaseTask:canWaitType()
	return not self._stopWaitType
end

function BaseTask:runAsync(vFunc:Fn())
	self._scheduleManager:coStart(self._selfCo, vFunc)
end

function BaseTask:getStack():Ret(OrFalse(clazz.SealStack))
	return self._stack
end

function BaseTask:makeEvent():Ret(clazz.ScheduleEvent)
	return self._manager:getScheduleManager():makeEvent(self._selfCo)
end

function BaseTask:makeWildEvent():Ret(clazz.ScheduleEvent)
	return self._manager:getScheduleManager():makeEvent()
end

return BaseTask
