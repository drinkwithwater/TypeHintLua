
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const ClassFactory = {}
ClassFactory.__index=ClassFactory

function:class(clazz.ClassFactory) ClassFactory.new(vManager:clazz.TypeManager, vRefer:clazz.Reference)
	const self = setmetatable({.class
		_manager=vManager,
		_refer=vRefer,
		_buildStartEvent=vManager:getScheduleManager():makeEvent(),
		_namedRefer=vRefer,
		_typeFn=false@OrFalse(clazz.TypeFunction),
		_classType=false@OrFalse(clazz.LuaTable),
		_classEvent=vRefer:makeEvent(),
		_buildFinishEvent=vRefer:makeEvent(),
		_funcEvent=vRefer:makeEvent(),
	}, ClassFactory)
	return self
end

function ClassFactory:addReference(vRefer:clazz.Reference)
	if vRefer:getKey() and not self._namedRefer:getKey() then
		self._namedRefer = vRefer
	end
end

function ClassFactory:getToString():Ret(String)
	return tostring(self._refer)
end

function ClassFactory:getResultType():Ret(OrFalse(clazz.LuaTable))
	return self._classType
end

function ClassFactory:meta_call(vContext:clazz.OperContext, vTermTuple:clazz.UTermTuple):Ret(clazz.RetTuples)
	self:waitBuild()
	const nTypeFn = self:getFnAwait()
	return nTypeFn:meta_call(vContext, vTermTuple)
end

function ClassFactory:getFnAwait():Ret(clazz.TypeFunction)
	if not self._typeFn then
		self:getTypeAwait()
		if not self._typeFn then
			self:startBuild()
			if not self._typeFn then
				self._funcEvent:wait()
			end
		end
	end
	return (assert(self._typeFn, "type function not setted after wait"))
end

function ClassFactory:getTypeAwait():Ret(clazz.UAtomUnion)
	if not self._classType then
		self._classEvent:wait()
	end
	return (assert(self._classType, "result type not setted"))
end

function ClassFactory:getMayRecursive():Ret(Boolean)
	return true
end

function ClassFactory:getListAwait():Ret(List(clazz.IAtomType))
	if not self._classType then
		self._classEvent:wait()
	end
	const nClassType = assert(self._classType, "clazz type is not setted")
	return {nClassType}
end

function ClassFactory:build(
	vRunner:Fn(clazz.ClassFactory):Ret(
		OrFalse(clazz.LuaTable), clazz.MetaObject,
		Fn():Ret(OrFalse(clazz.TypeFunction), Fn(clazz.LuaTable):Ret(clazz.TypeFunction))
	)
)
	-- step 1. wait inteface
	const nBaseClass, nInterface, nPreRunner = vRunner(self)
	-- step 2. create table
	const nNewTable = self._manager:LuaTable()
	nNewTable:initByClassCom(self, nBaseClass, nInterface)
	self._classType = nNewTable
	self._classEvent:wakeup()
	-- nClassType:linkNamedReference(self)
	const nTypeFn, nLateRunner = nPreRunner()
	if nTypeFn then
		self._typeFn = nTypeFn
	end
	self._buildStartEvent:wait()
	-- step 3. run build
	const nTypeFn = nLateRunner(nNewTable)
	if not self._typeFn then
		self._typeFn = nTypeFn
	end
	self._buildFinishEvent:wakeup()
	-- step 4. wake up fn
	self._funcEvent:wakeup()
end

function ClassFactory:startBuild()
	self._buildStartEvent:wakeup()
end

function ClassFactory:onSetMetaTable()
	self._buildFinishEvent:wakeup()
end

function ClassFactory:waitBuild()
	self:startBuild()
	const nCurCo = coroutine.running()
	const nSelfCo = self._refer:getSelfCo()
	if nCurCo ~= nSelfCo then
		self._buildFinishEvent:wait()
	end
end

function.open ClassFactory.is(self):isguard(clazz.ClassFactory)
	return getmetatable(self) == ClassFactory
end

return ClassFactory
