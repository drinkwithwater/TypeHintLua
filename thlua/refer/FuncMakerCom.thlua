
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const FuncMakerCom = {}
FuncMakerCom.__index=FuncMakerCom

function:class(clazz.FuncMakerCom) FuncMakerCom.new(vManager:clazz.TypeManager, vRefer:clazz.Reference, vTypeFn:OrFalse(clazz.TypeFunction))
	const self = setmetatable({.class
		_manager=vManager,
		_refer=vRefer,
		-- startSid : true means wait to gen sid and start, int means waiting, false means started
		_waitStartSid=true@Union(Boolean, Integer),
		_typeFn=vTypeFn@OrFalse(clazz.TypeFunction),
		_waitCoToSid={}@OrFalse(Dict(Thread, Integer)),
	}, FuncMakerCom)
	return self
end

function FuncMakerCom:build(vRunner:Fn():Ret(clazz.TypeFunction))
	const nWaitStartSid = self._waitStartSid
	if nWaitStartSid then
		assert(nWaitStartSid == true, "wait start sid must be true here")
		const nSessionId = self._manager:genSessionId()
		self._waitStartSid = nSessionId
		const co = coroutine.running()
		self._manager:coWait(co, nSessionId)
	end
	if not self._typeFn then
		self._typeFn = vRunner()
		self:_wakeupBuild()
	else
		vRunner()
	end
end

function FuncMakerCom:getFnAwait():Ret(clazz.TypeFunction)
	const nTypeFn = self._typeFn
	if not nTypeFn then
		self:startBuild()
		if not self._typeFn then
			const nSessionId = self._manager:genSessionId()
			const nCurCo = coroutine.running()
			const nWaitCoToSid = assert(self._waitCoToSid)
			nWaitCoToSid[nCurCo] = nSessionId
			self._manager:coWait(nCurCo, nSessionId, self._refer:getSelfCo())
		end
	end
	return (assert(self._typeFn, "_typeFn must existed here"))
end

function FuncMakerCom:startBuild()
	const nWaitStartSid = self._waitStartSid
	if nWaitStartSid then
		self._waitStartSid = false
		if type(nWaitStartSid) == "number" then
			const co = self._refer:getSelfCo()
			self._manager:coWakeup(co, nWaitStartSid)
		end
	end
end

function FuncMakerCom:_wakeupBuild()
	assert(coroutine.running() == self._refer:getSelfCo(), "can only setmetatable in constructor thread")
	const nWaitCoToSid = self._waitCoToSid
	if nWaitCoToSid then
		self._waitCoToSid = false
		for co, sid in pairs(nWaitCoToSid) do
			self._manager:coWakeup(co, sid)
		end
	end
end

function.open FuncMakerCom.is(self):isguard(clazz.FuncMakerCom)
	return getmetatable(self) == FuncMakerCom
end

return FuncMakerCom
