
const class = require "thlua.class"
const Namespace = require "thlua.refer.Namespace"
const SpaceTable = require "thlua.refer.SpaceTable"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const HolderState = require "thlua.refer.HolderState"

(@do
	let.clazz = import($class).clazz
end)

const Letspace = class@<clazz.Letspace, false>(Namespace)
Letspace.__tostring=function(self):Ret(String)
	return "letspace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function.open Letspace:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vParentOrGlobalDict:Union(Dict(clazz.IAtomType, clazz.Reference), clazz.Namespace))
    self._parentSpace = false @ OrFalse(clazz.Namespace)
    if Namespace.is(vParentOrGlobalDict) then
        self._parentSpace = vParentOrGlobalDict
    else
        for k,v in pairs(vParentOrGlobalDict) do
            self._childDict[k] = v
        end
    end
    self._envHolder = SpaceTable.createEnvTable(self)
end

function Letspace:parentHasKey(vKeyType:clazz.IAtomType):Ret(Boolean)
    const nParentSpace = self._parentSpace
	return nParentSpace and nParentSpace:pureGet(vKeyType) and true or false
end

function Letspace:pureGet(vKeyType:clazz.IAtomType):Ret(OrNil(clazz.LocalSpaceValue))
    const nParentSpace = self._parentSpace
	return self._childDict[vKeyType] or (nParentSpace and nParentSpace:pureGet(vKeyType) or nil)
end

function Letspace:globalGet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType)
    const nValue = self:pureGet(vKeyType)
    if nValue then
        if HolderState.is(nValue) then
            return nValue:getHolder()
        else
            return nValue
        end
    else
        error(Exception.new("key with empty value, key="..tostring(vKeyType), vNode))
    end
end

function Letspace:export():Ret(clazz.LocalSpaceTable, clazz.EnvSpaceTable, Truth)
    return self._holder, self._envHolder, _G
end

function Letspace:spaceTablePutCompletion(vSpaceTable:clazz.BaseSpaceTable, vCompletion:clazz.FieldCompletion)
    const nWhat = getmetatable(vSpaceTable).__what
    if nWhat == "_ENV" then
        self:putCompletion(vCompletion)
        const nParentSpace = self._parentSpace
        if nParentSpace then
            nParentSpace:spaceTablePutCompletion(vSpaceTable, vCompletion)
        end
    elseif nWhat == "_G" then
    else
        self:putCompletion(vCompletion)
    end
end

return Letspace
