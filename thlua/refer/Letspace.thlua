
const class = require "thlua.class"
const Namespace = require "thlua.refer.Namespace"
const SpaceTable = require "thlua.refer.SpaceTable"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import($class).clazz
end)

const Letspace = class@<clazz.Letspace, false>(Namespace)
Letspace.__tostring=function(self):Ret(String)
	return "letspace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function.open Letspace:ctor(_, _, _, vParentOrDict:Union(Dict(clazz.IAtomType, clazz.Reference), clazz.Letspace))
    self._parentSpace = false @ OrFalse(clazz.Letspace)
    self._envTable = SpaceTable.createEnvTable(self._refer)
	if Letspace.is(vParentOrDict) then
        self._parentSpace = vParentOrDict
    else
        assert(not Namespace.is(vParentOrDict))
        -- root space
		for k,v in pairs(vParentOrDict) do
			self._key2child[k] = v
		end
	end
end

function Letspace:parentHasKey(vKeyType:clazz.IAtomType):Ret(Boolean)
    const nParent = self._parentSpace
	return nParent and nParent:pureGet(vKeyType) and true or false
end

function Letspace:pureGet(vKeyType:clazz.IAtomType):Ret(OrNil(clazz.LocalSpaceValue))
    const nParent = self._parentSpace
	return self._key2child[vKeyType] or (nParent and nParent:pureGet(vKeyType) or nil)
end

function Letspace:globalGet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType)
    const nValue = self:pureGet(vKeyType)
    if nValue then
        return nValue
    else
        error(Exception.new("key with empty value, key="..tostring(vKeyType), vNode))
    end
end

function Letspace:export():Ret(clazz.LocalSpaceTable, clazz.EnvSpaceTable, Truth)
    return self._refer:getSpaceValue(), self._envTable, _G
end

function Letspace:spaceTablePutCompletion(vSpaceTable:clazz.BaseSpaceTable, vCompletion:clazz.FieldCompletion)
    const nWhat = getmetatable(vSpaceTable).__what
    if nWhat == "_ENV" then
        self:putCompletion(vCompletion)
        const nParent = self._parentSpace
        if nParent then
            nParent:spaceTablePutCompletion(vSpaceTable, vCompletion)
        end
    else
        self:putCompletion(vCompletion)
    end
end

return Letspace
