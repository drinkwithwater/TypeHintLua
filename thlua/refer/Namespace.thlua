
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const StringLiteral = require "thlua.type.StringLiteral"
const SpaceTable = require "thlua.refer.SpaceTable"
const NameLocation= require "thlua.refer.NameLocation"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	clazz.SpaceValue = Union(clazz.TypeReference, clazz.LocalSpaceTable)
end)

const Namespace = class@<clazz.Namespace, clazz.ICompletion>()
Namespace.__tostring=function(self):Ret(String)
	return "namespace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function.open Namespace:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, vIndexTable:OrNil(Dict(clazz.IAtomType, clazz.TypeReference)), ...)
	self._manager=vManager
	self._key2type={} @ Dict(clazz.IAtomType, clazz.SpaceValue) -- (vIndexTable and setmetatable({}, {__index=vIndexTable}) or {})@StringToRefer,
	self._closed=false@Boolean
	self._node=vNode
	self._key=false@Union(False, String)
	self.localExport = SpaceTable.createLocal(self, self._key2type)
	if vIndexTable then -- root space
		for k,v in pairs(vIndexTable) do
			self._key2type[k] = v
		end
	end
	return self
end

function Namespace:assertSpaceKeyType(vKey:Any):Ret(clazz.IAtomType)
	const nNode = Node.getDebugNode(5)
	const nOkay, nType = self._manager:peasyToType(vKey)
	if not nOkay then
		error(Exception.new(nType, nNode))
	end
	local nFinalKey = nType
	if Reference.is(nFinalKey) then
		nFinalKey = nFinalKey:checkAtomUnion()
	end
	if not nFinalKey:isUnion() then
		return nFinalKey
	else
		error("namespace's key can't be union type")
	end
end

function Namespace:parentGet(vKey:clazz.IAtomType):Ret(OrNil(clazz.SpaceValue))
	return nil
end

function Namespace:trySetKey(vKey:String)
	if not self._key then
		self._key = vKey
	end
end

function Namespace:assignNewValue(vNode:clazz.IAstNode, vKeyType:clazz.IAtomType, vNewValue:Any)
	const nAssignSpace = SpaceTable.checkSpace(vNewValue)
	if nAssignSpace then
		nAssignSpace:trySetKey(tostring(vKeyType))
		self._key2type[vKeyType] = vNewValue @? clazz.LocalSpaceTable
	else
		const refer = self._manager:Reference(tostring(vKeyType))
		refer:setAssignAsync(vNode, function() return vNewValue end)
		self._key2type[vKeyType] = refer
	end
end

function Namespace:isClosed()
	return self._closed
end

function Namespace:close()
	self._closed=true
end

function Namespace:check()
	for k,v in pairs(self._key2type) do
		if Reference.is(v) then
		end
	end
end

function Namespace:getKeyToType()
	return self._key2type
end

function Namespace:putCompletion(vCompletion)
	for k,v in pairs(self._key2type) do
		if StringLiteral.is(k) then
			vCompletion:putPair(k:getLiteral(), v)
		end
	end
end

function Namespace:getNode()
	return self._node
end

function Namespace:getManager()
	return self._manager
end

SpaceTable.checkSpace = function.pass (t:Any):Ret(OrFalse(clazz.Namespace))
	local nMeta = getmetatable(t)
	if type(nMeta) == "table" then
		local self = rawget(nMeta, "__namespace")
		if Namespace.is(self) then
			return self
		end
	end
	return false
end

return Namespace
