
const Exception = require "thlua.Exception"
const AsyncUnion = require "thlua.refer.AsyncUnion"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const SpaceTable = require "thlua.refer.SpaceTable"
const SpaceBuiltin = require "thlua.refer.SpaceBuiltin"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	clazz.LocalSpaceValue = Union(clazz.Reference, clazz.LocalSpaceTable)
end)

const Namespace = class@<clazz.Namespace, clazz.ICompletion>()
Namespace.__tostring=function(self):Ret(String)
	return "namespace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function.open Namespace:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vRefer:clazz.Reference, ...)
	self._manager=vManager
	self._key2child={} @ Dict(clazz.IAtomType, clazz.LocalSpaceValue) -- (vIndexTable and setmetatable({}, {__index=vIndexTable}) or {})@StringToRefer,
	self._closed=false@Boolean
	self._node=vNode
	self._key=false@Union(False, String)
	self._refer = vRefer
end

function Namespace:pureGet(vKeyType:clazz.IAtomType):Ret(OrNil(clazz.LocalSpaceValue))
	return self._key2child[vKeyType]
end

function Namespace:parentHasKey(vKeyType:clazz.IAtomType):Ret(Boolean)
	return false
end

function Namespace:triggerGet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType):Ret(clazz.LocalSpaceValue)
	const rawgetV = self._key2child[vKeyType]
	if rawgetV then
		return rawgetV
	end
    if self:parentHasKey(vKeyType) then
        error(Exception.new("'let' can only get symbol in current level key="..tostring(vKeyType), vNode))
    end
	if self._closed then
		error(Exception.new("namespace closed, can't create key="..tostring(vKeyType), vNode))
	end
	const refer = self._manager:Reference(tostring(vKeyType))
	refer:pushReferNode(vNode)
	self._key2child[vKeyType] = refer
	return refer
end

function Namespace:triggerSet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType, vNewValue:Any)
	const Reference = require "thlua.refer.Reference"
	if self._closed then
		error(Exception.new("namespace closed, can't create key="..tostring(vKeyType), vNode))
	end
	const rawgetV = self._key2child[vKeyType]
	if rawgetV then
		if Reference.is(rawgetV) then
			rawgetV:setAssignAsync(vNode, function() return vNewValue end)
		else
			error(Exception.new("assign conflict: key="..tostring(vKeyType), vNode))
		end
	else
		if self:parentHasKey(vKeyType) then
            error(Exception.new("'let' shadow set key="..tostring(vKeyType), vNode))
		end
		const nAssignSpace = SpaceTable.checkSpace(vNewValue)
		if nAssignSpace then
			self._key2child[vKeyType] = vNewValue @? clazz.LocalSpaceTable
		elseif SpaceBuiltin.is(vNewValue) then
            error(Exception.new("space-builtin function can't assign between space"..tostring(vKeyType), vNode))
		else
			const refer = self._manager:Reference(tostring(vKeyType))
			refer:setAssignAsync(vNode, function() return vNewValue end)
			self._key2child[vKeyType] = refer
		end
	end
end

function Namespace:close()
	self._closed=true
end

function Namespace:spaceTablePutCompletion(vSpaceTable:clazz.BaseSpaceTable, vCompletion:clazz.FieldCompletion)
    const nWhat = getmetatable(vSpaceTable).__what
	if nWhat ~= "_G" then
		self:putCompletion(vCompletion)
	end
end

function Namespace:putCompletion(vCompletion)
	for k,v in pairs(self._key2child) do
		if StringLiteral.is(k) then
			vCompletion:putSpaceField(k:getLiteral(), v)
		end
	end
end

function Namespace:getNode()
	return self._node
end

function Namespace:getRefer():Ret(clazz.Reference)
	return self._refer
end

return Namespace
