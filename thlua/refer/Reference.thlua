
const TypeClass = require "thlua.type.TypeClass"
const Exception = require "thlua.Exception"
const TypeReferCom = require "thlua.refer.TypeReferCom"
const TYPE_BITS = require "thlua.type.TYPE_BITS"

(@let.class = import("thlua.type.TypeClass").class)

const Reference = TypeClass()

Reference.__call=function(self:class.Reference, ...:class.UAllType)::Ret(class.Reference)
	const nTypeList:List(class.UAllType) = {...}
	const nIdList = {}
	for i=1,#nTypeList do
		nIdList[i] = nTypeList[i]!.id
	end
	const nGeneric = assert(self._generic)
	const nKey = table.concat(nIdList, "-")
	const nRefer = self._genericDict[nKey]
	if not nRefer then
		const nRefer = self._manager:Reference(false)
		nRefer:setRawAsync(self._manager:getRuntime():getNode(), function()
			return nGeneric(table.unpack(nTypeList))
		end)
	end
	return nRefer
end

function Reference.new(vManager:class.TypeManager, vKeyOrFalse:OrFalse(String))::RetClass(class.Reference, class.IType)
	local self = setmetatable({::Self()
		_manager=vManager,
		_key=vKeyOrFalse,
		_assignNode=false@OrFalse(class.IAstNode),
		_referNodes={}@List(class.IAstNode),
		_generic=false@OrFalse(Fn():Dots(class.UAllType):Ret(class.Reference)),
		_genericDict={}@Dict(String, class.Reference),
		_com=false@OrFalse(class.TypeReferCom),
		id=vManager:genTypeId(),
		bits=false,
		_selfCo=nil@Thread,
		_mayRecursive=false@Boolean,
		_typeList=false@OrFalse(List(class.IAtomType)),
		_resultType=false@OrFalse(class.UAtomUnion),
		_waitListCoToSid={} @ Dict(Thread, Integer),
		_waitResultCoToSid={} @ Dict(Thread, Integer),
	}, Reference)
	self._selfCo = coroutine.create(function(vRunFn:Fn())
		const ok, nExc = pcall(vRunFn)
		if not ok then
			if Exception.is(nExc) then
				nExc:fixNode(self:getAssignNode())
				error(nExc)
			else
				error(Exception.new(tostring(nExc), self:getAssignNode()))
			end
		end
	end)
	const nCom = TypeReferCom.new(self._manager, self)
	self._com = nCom
	return self
end

function Reference:getKey()::Ret(OrFalse(String))
	return self._key
end

function Reference:getSelfCo()::Ret(Thread)
	return self._selfCo
end

function Reference:detailString(v, vVerbose)
	return "Reference("..(self._key or tostring(self._assignNode))..")"
end

function Reference:checkTypeCom()::Ret(class.TypeReferCom)
	const nCom = self._com
	assert(TypeReferCom.is(nCom))
	return nCom
end

function Reference:setRawAsync(vNode:class.IAstNode,
	vGetList:Fn():Ret(List(class.IAtomType)),
	vLaterCall:OrNil(Fn(class.UAtomUnion)))::pass()
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	self._manager:coStart(self._selfCo, function()
		self:checkTypeCom():build(vNode, vGetList, vLaterCall)
	end)
end

function Reference:getAssignNode()::Ret(OrFalse(class.IAstNode))
	return self._assignNode
end

function Reference:getReferNode()::Ret(List(class.IAstNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:class.IAstNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:checkAtomUnion()::Ret(class.UAtomUnion)
	return self:checkTypeCom():getTypeAwait()
end

function Reference:isNilable()
	return self:checkAtomUnion():isNilable()
end

function Reference:isUnion()::Ret(Boolean)
	return self:checkAtomUnion():isUnion()
end

function Reference:isReference()::Ret(True)
	return true
end

function Reference:foreachAwait(vFunc)
	const nTypeCom = self:checkTypeCom()
	const nResultType = nTypeCom:getResultType()
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nListType = nTypeCom:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:foreach(vFunc)
	const nTypeCom = self:checkTypeCom()
	const nResultType = nTypeCom:getResultType()
	if nResultType then
		nResultType:foreach(vFunc)
	else
		error("TODO"..debug.traceback())
		local nListType = nTypeCom:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:intersectAtom(vRightType)
	const nType = self:checkTypeCom():getTypeAwait()
	return nType:intersectAtom(vRightType)
end

function Reference:containAtom(vRightType)
	const nType = self:checkTypeCom():getTypeAwait()
	return nType:containAtom(vRightType)
end

function Reference:assumeIntersectAny(vAssumeSet, vRight)
	const nTypeCom = self:checkTypeCom()
	const nResultType = nTypeCom:getResultType()
	if nResultType then
		return nResultType:assumeIntersectAny(vAssumeSet, vRight)
	else
		local nAnyIntersect:Boolean = false
		const nTypeList = nTypeCom:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if nAnyIntersect then
				return
			end
			local nCurIntersect:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeIntersectAtom(vAssumeSet, vAtomType) then
					nCurIntersect = true
					break
				end
			end
			if nCurIntersect then
				nAnyIntersect = true
			end
		end)
		return nAnyIntersect
	end
end

function Reference:assumeContainAll(vAssumeSet, vRight)
	const nTypeCom = self:checkTypeCom()
	const nResultType = nTypeCom:getResultType()
	if nResultType then
		return nResultType:assumeContainAll(vAssumeSet, vRight)
	else
		local nAllContain:Boolean = true
		const nTypeList = nTypeCom:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if not nAllContain then
				return
			end
			local nCurContain:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeContainAtom(vAssumeSet, vAtomType) then
					nCurContain = true
					break
				end
			end
			if not nCurContain then
				nAllContain = false
			end
		end)
		return nAllContain
	end
end

function Reference:mayRecursive()
	const nTypeCom = self:checkTypeCom()
	nTypeCom:getListAwait()
	return nTypeCom:getMayRecursive()
end

function Reference:objectPartType()
	return self:checkAtomUnion():objectPartType()
end

function Reference:fnPartType()
	return self:checkAtomUnion():fnPartType()
end

function Reference:trueType()
	return self:checkAtomUnion():trueType()
end

function Reference:falseType()
	return self:checkAtomUnion():falseType()
end

function Reference.is(v)::isguard(class.Reference)
	return getmetatable(v) == Reference
end

function Reference.isType(v)::isguard(class.Reference)
	return getmetatable(v) == Reference and TypeReferCom.is(v._com)
end

return Reference
