
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Node = require "thlua.code.Node"

const BaseAtomType = require "thlua.type.BaseAtomType"
const BaseUnionType = require "thlua.union.BaseUnionType"

const AsyncUnion = require "thlua.refer.AsyncUnion"

const TypeReferCom = require "thlua.refer.TypeReferCom"
const TemplateReferCom = require "thlua.refer.TemplateReferCom"

const ScheduleEvent = require "thlua.manager.ScheduleEvent"

const ScheduleTask = require "thlua.manager.ScheduleTask"

const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	let.UReferCom = Union(clazz.TypeReferCom, clazz.TemplateReferCom)
end)

const Reference = class@<clazz.TypeReference, clazz.IType>()

Reference.__call=function(self:clazz.TypeReference, ...:Any):Ret(clazz.TypeReference)
	-- TODO, cast
	const nNode = Node.getDebugNode(3)
	const nArgList:List(clazz.UAllType) = self._manager:easyToTypeList(...)
	const nKey = self._manager:signTemplateArgs(nArgList)
	const nCom = self._com
	if TemplateReferCom.is(nCom) then
		return nCom:call(nNode, nKey, nArgList)
	elseif nCom then
		error(Exception.new("template reference expected here", nNode))
	end
	const nDict = self._callDict
	local nRefer = nDict[nKey]
	if not nRefer then
		nRefer = self._manager:Reference(false)
		nRefer:setAssignAsync(nNode, function()
			const nCom = self:waitTemplateCom()
			return nCom:call(nNode, nKey, nArgList)
		end)
		nDict[nKey] = nRefer
	end
	return nRefer
end

function Reference.__tostring(self:clazz.TypeReference):Ret(String)
	return self:detailString({}, false)
end

function Reference.__bor(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
	return vLeft._manager:checkedUnion(vLeft, vRight)
end

function Reference.__band(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
	const nTypeOrFalse = vLeft:safeIntersect(vRight)
	if nTypeOrFalse then
		return nTypeOrFalse
	else
		error("unexpected intersect")
	end
end

function.open Reference:ctor(vManager:clazz.TypeManager, vKeyOrFalse:OrFalse(String))
	const nTask = vManager:getScheduleManager():newTask()
	self._manager = vManager
	self._task = nTask
	self._key=vKeyOrFalse
	self._callDict={}@Dict(String, clazz.TypeReference)
	self._assignNode=false@OrFalse(clazz.IAstNode)
	self._referNodes={}@List(clazz.IAstNode)
	self.id=vManager:genTypeId()
	self.bits=false
	self._assignComEvent = nTask:makeEvent()
	self._com=false@OrFalse(UReferCom)
end

function Reference:getKey():Ret(OrFalse(String))
	return self._key
end

function Reference:detailString(v, vVerbose)
	const nCom = self._com
	if not nCom then
		return "Reference("..(tostring(self._key) or tostring(self._assignNode))..")"
	else
		if TypeReferCom.is(nCom) then
			return "TypeReference("..tostring(nCom:getTypeNowait())..")"
		else
			return "TemplateReference("..(tostring(self._key) or tostring(self._assignNode))..")"
		end
	end
end

function Reference:getComNowait():Ret(OrFalse(UReferCom))
	return self._com
end

function Reference:getComAwait():Ret(UReferCom)
	if not self._com then
		self._assignComEvent:wait()
	end
	const nCom = assert(self._com, "com not setted after wait finish")
	return nCom
end

function Reference:waitTypeCom():Ret(Union(clazz.TypeReferCom))
	const nCom = self:getComAwait()
	assert(TypeReferCom.is(nCom), "type reference expected, but get template reference")
	return nCom
end

function Reference:waitTemplateCom():Ret(clazz.TemplateReferCom)
	const nCom = self:getComAwait()
	assert(TemplateReferCom.is(nCom), "template reference expected, but get some other reference")
	return nCom
end

function Reference:_setComAndWakeup(vCom:UReferCom)
	self._com = vCom
	self._assignComEvent:wakeup()
end

function Reference:setAssignAsync(vNode:clazz.IAstNode, vGetFunc:Fn():Ret(Any))
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	self._task:runAsync(function()
		const nAssignValue = vGetFunc()
		if Reference.is(nAssignValue) then
			const nCom = nAssignValue:getComAwait()
			self:_setComAndWakeup(nCom)
		elseif BaseAtomType.is(nAssignValue) then
			const nCom = TypeReferCom.new(self._manager, self._task, nAssignValue)
			self:_setComAndWakeup(nCom)
		elseif BaseUnionType.is(nAssignValue) then
			const nCom = TypeReferCom.new(self._manager, self._task, nAssignValue)
			self:_setComAndWakeup(nCom)
		else
			error("namespace assign a non-type value")
		end
	end)
end

function Reference:setTemplateAsync(vNode:clazz.IAstNode, vFunc:AnyFunction, vParNum:Integer)
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	const nCom = TemplateReferCom.new(self._manager, self, vFunc, vParNum)
	self._task:runAsync(function()
		self:_setComAndWakeup(nCom)
	end)
end

function Reference:setUnionAsync(
	vNode:clazz.IAstNode,
	vGetList:Fn():Ret(List(clazz.IAtomType), OrNil(Fn():Ret(OrFalse(clazz.UAtomUnion))))
)
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	const nAsyncUnion = self._manager:AsyncUnion(self._task)
	self._task:runAsync(function()
		nAsyncUnion:setAtomList(vGetList())
	end)
	const nCom = TypeReferCom.new(self._manager, self._task, nAsyncUnion)
	self:_setComAndWakeup(nCom)
end

function Reference:getAssignNode():Ret(OrFalse(clazz.IAstNode))
	return self._assignNode
end

function Reference:getReferNode():Ret(List(clazz.IAstNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:clazz.IAstNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:checkAtomUnion():Ret(clazz.UAtomUnion)
	return self:waitTypeCom():getTypeAwait()
end

function Reference:isReference():Ret(True)
	return true
end

function Reference:foreachAwait(vFunc)
	const nResultType = self:waitTypeCom():getTypeNowait()
	if not nResultType:isAsync() then
		nResultType:foreach(vFunc)
	else
		local nListType = nResultType:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:intersectAtom(vRightType)
	const nType = self:checkAtomUnion()
	return nType:intersectAtom(vRightType)
end

function Reference:includeAtom(vRightType)
	const nType = self:checkAtomUnion()
	return nType:includeAtom(vRightType)
end

function Reference:assumeIntersectSome(vAssumeSet, vRight)
	const nResultType = self:waitTypeCom():getTypeNowait()
	if not nResultType:isAsync() then
		return nResultType:assumeIntersectSome(vAssumeSet, vRight)
	else
		local nSomeIntersect:Boolean = false
		const nTypeList = nResultType:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if nSomeIntersect then
				return
			end
			local nCurIntersect:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeIntersectAtom(vAssumeSet, vAtomType) then
					nCurIntersect = true
					break
				end
			end
			if nCurIntersect then
				nSomeIntersect = true
			end
		end)
		return nSomeIntersect
	end
end

function Reference:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	const nResultType = self:waitTypeCom():getTypeNowait()
	if not nResultType:isAsync() then
		return nResultType:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	else
		local nAllInclude:Boolean = true
		const nTypeList = nResultType:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if not nAllInclude then
				return
			end
			local nCurInclude:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeIncludeAtom(vAssumeSet, vAtomType, vSelfType) then
					nCurInclude = true
					break
				end
			end
			if not nCurInclude then
				nAllInclude = false
			end
		end)
		return nAllInclude
	end
end

function Reference:unionSign()
	return tostring(self.id)
end

function Reference:safeIntersect(vRight)
	return self:checkAtomUnion():safeIntersect(vRight)
end

function Reference:includeAll(vRight)
	return self:assumeIncludeAll(nil, vRight)
end

function Reference:intersectSome(vRight)
	return self:assumeIntersectSome(nil, vRight)
end

function Reference:mayRecursive()
	const nTypeCom = self:waitTypeCom()
	const nResultType = nTypeCom:getTypeNowait()
	if nResultType:isAsync() then
		return nResultType:getMayRecursive()
	else
		return nResultType:mayRecursive()
	end
end

return Reference
