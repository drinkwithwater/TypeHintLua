
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Node = require "thlua.code.Node"
-- const ReferState = require "thlua.refer.ReferState"

const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const BaseUnionType = require "thlua.type.union.BaseUnionType"

const Namespace = require "thlua.refer.Namespace"
const Letspace = require "thlua.refer.Letspace"
const AsyncUnion = require "thlua.refer.AsyncUnion"
const TemplateReferCom = require "thlua.refer.TemplateReferCom"

const SpaceTable = require "thlua.refer.SpaceTable"

const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	let.UReferCom = Union(clazz.AsyncUnion, clazz.TemplateReferCom, clazz.Namespace)
end)

const Reference = {}
Reference.__index = Reference
Reference.__call=function(self:clazz.Reference, ...:clazz.USpaceAny):Ret(clazz.AsyncUnion)
	const nNode = Node.newDebugNode()
	return self:triggerCall(nNode, ...)
end

function Reference.__tostring(self:clazz.Reference):Ret(String)
	return "Reference tostring TODO"
end

function:class(clazz.Reference) Reference.new(vManager:clazz.TypeManager, vKey:String)
	const nTask = vManager:getScheduleManager():newTask()
	const self = setmetatable({.class
		_manager = vManager,
		id=vManager:genTypeId(),
		_task = nTask,
		_key=vKey,
		_callDict={}@Dict(String, clazz.AsyncUnion),
		_assignNode=false@OrFalse(clazz.IBaseNode),
		_referNodes={}@List(clazz.IBaseNode),
		_assignComEvent = nTask:makeEvent(),
		_com=false@OrFalse(UReferCom),
	}, Reference)
	return self
end

function Reference:initWithSpace@<T>(vNode:clazz.IBaseNode, vData:T):Ret(Cond(T, clazz.Letspace, clazz.Namespace))
	assert(not self._assignNode, "init space called after assignNode")
	self._assignNode = vNode
	if vData then
		const nSpace = Letspace.new(self._manager, vNode, self, vData)
		self._com = nSpace
		return nSpace
	else
		const nSpace = Namespace.new(self._manager, vNode, self)
		self._com = nSpace
		return nSpace
	end
end

function Reference:getComNowait():Ret(OrFalse(UReferCom))
	return self._com
end

function Reference:getComAwait():Ret(UReferCom)
	if not self._com then
		self._assignComEvent:wait()
	end
	const nCom = assert(self._com, "com not setted after wait finish")
	return nCom
end

function Reference:mustType():Ret(clazz.AsyncUnion)
	const nCom = self:getComAwait()
	assert(AsyncUnion.is(nCom), "type reference expected, but get template reference")
	return nCom
end

function Reference:waitTemplateCom():Ret(clazz.TemplateReferCom)
	const nCom = self:getComAwait()
	assert(TemplateReferCom.is(nCom), "template reference expected, but get some other reference")
	return nCom
end

function Reference:_setComAndWakeup(vCom:UReferCom)
	self._com = vCom
	self._assignComEvent:wakeup()
end

function Reference:setAssignAsync(vNode:clazz.IBaseNode, vGetFunc:Fn():Ret(Any))
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	self._task:runAsync(function()
		const nAssignValue = vGetFunc()
		if Reference.is(nAssignValue) then
			const nCom = nAssignValue:getComAwait()
			self:_setComAndWakeup(nCom)
		elseif Namespace.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		elseif TemplateReferCom.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		elseif AsyncUnion.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		else
			if BaseAtomType.is(nAssignValue) then
				const nCom = self._manager:AsyncUnion()
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			elseif BaseUnionType.is(nAssignValue) then
				const nCom = self._manager:AsyncUnion()
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			else
				error("namespace assign a non-type value")
			end
		end
	end)
end

function Reference:getAssignNode():Ret(OrFalse(clazz.IBaseNode))
	return self._assignNode
end

function Reference:getReferNode():Ret(List(clazz.IBaseNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:clazz.IBaseNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function.open Reference.is(v):isguard(clazz.Reference)
	return getmetatable(v) == Reference
end

function Reference:triggerGet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType):Ret(clazz.LocalSpaceValue)
	const nCom = self._com
	assert(Namespace.is(nCom), "only namespace com can take index")
	return nCom:triggerGet(vNode, vKeyType)
end

function Reference:triggerSet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType, vValue:Any)
	const nCom = self._com
	assert(Namespace.is(nCom), "only namespace com can take newindex")
	return nCom:triggerSet(vNode, vKeyType, vValue)
end

function Reference:globalGet(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType)
	const nCom = self._com
	assert(Letspace.is(nCom), "only letspace com can take index")
	return nCom:globalGet(vNode, vKeyType)
end

function Reference:assertSpaceKeyType(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny):Ret(clazz.IAtomType)
	const nOkay, nType = self._manager:getDirtyProcessor():peasyToMustType(vKey)
	if not nOkay then
		error(Exception.new(nType, vNode))
	end
	local nFinalKey = nType:checkAtomUnion()
	if not nFinalKey:isUnion() then
		return nFinalKey
	else
		error(Exception.new("namespace's key can't be union type", vNode))
	end
end

function Reference:triggerCall(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.AsyncUnion)
	-- TODO, cast
	const nArgList:List(clazz.USpaceAny) = {...}
	const nArgNum = select("#", ...)
	const nCom = self._com
	if TemplateReferCom.is(nCom) then
		return nCom:call(vNode, nArgNum, nArgList)
	elseif nCom then
		error(Exception.new("template reference expected here", vNode))
	end
	const nTypeCom = self._manager:AsyncUnion()
	nTypeCom:setTypeAsync(vNode, function()
		const nCom = self:waitTemplateCom()
		return nCom:call(vNode, nArgNum, nArgList)
	end)
	return nTypeCom
end

return Reference
