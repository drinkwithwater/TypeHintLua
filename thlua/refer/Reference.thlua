
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Node = require "thlua.code.Node"
-- const ReferState = require "thlua.refer.ReferState"

const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const BaseUnionType = require "thlua.type.union.BaseUnionType"

const AsyncUnion = require "thlua.refer.AsyncUnion"

const AsyncUnion = require "thlua.refer.AsyncUnion"
const TemplateReferCom = require "thlua.refer.TemplateReferCom"

const ScheduleEvent = require "thlua.manager.ScheduleEvent"

const ScheduleTask = require "thlua.manager.ScheduleTask"

const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
	let.UReferCom = Union(clazz.AsyncUnion, clazz.TemplateReferCom)
end)

const Reference = {}
Reference.__index = Reference
Reference.__call=function(self:clazz.TypeReference, ...:Any):Ret(clazz.AsyncUnion)
	-- TODO, cast
	const nNode = Node.newDebugNode()
	const nArgList = self._manager:getDirtyProcessor():easyToAllTypeList(nNode, ...)
	const nKey = self._manager:signTemplateArgs(nArgList)
	const nCom = self._com
	if TemplateReferCom.is(nCom) then
		return nCom:call(nNode, nKey, nArgList)
	elseif nCom then
		error(Exception.new("template reference expected here", nNode))
	end
	const nDict = self._callDict
	local nTypeCom = nDict[nKey]
	if not nTypeCom then
		nTypeCom = self._manager:AsyncUnion()
		nTypeCom:setTypeAsync(nNode, function()
			const nCom = self:waitTemplateCom()
			return nCom:call(nNode, nKey, nArgList)
		end)
		nDict[nKey] = nTypeCom
	end
	return nTypeCom
end

function Reference.__tostring(self:clazz.TypeReference):Ret(String)
	return self:detailString({}, false)
end

function:class(clazz.TypeReference) Reference.new(vManager:clazz.TypeManager, vKey:String)
	const nTask = vManager:getScheduleManager():newTask()
	const self = setmetatable({.class
		_manager = vManager,
		id=vManager:genTypeId(),
		_task = nTask,
		_key=vKey,
		_callDict={}@Dict(String, clazz.AsyncUnion),
		_assignNode=false@OrFalse(clazz.IBaseNode),
		_referNodes={}@List(clazz.IBaseNode),
		_assignComEvent = nTask:makeEvent(),
		_com=false@OrFalse(UReferCom),
	}, Reference)
	return self
end

function Reference:getKey():Ret(OrFalse(String))
	return self._key
end

function Reference:detailString(v:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	const nCom = self._com
	if not nCom then
		return "Reference("..(tostring(self._key) or tostring(self._assignNode))..")"
	else
		if AsyncUnion.is(nCom) then
			return "TypeReference("..tostring(nCom:getTypeNowait())..")"
		else
			return "TemplateReference("..(tostring(self._key) or tostring(self._assignNode))..")"
		end
	end
end

function Reference:getComNowait():Ret(OrFalse(UReferCom))
	return self._com
end

function Reference:getComAwait():Ret(UReferCom)
	if not self._com then
		self._assignComEvent:wait()
	end
	const nCom = assert(self._com, "com not setted after wait finish")
	return nCom
end

function Reference:mustType():Ret(clazz.AsyncUnion)
	const nCom = self:getComAwait()
	assert(AsyncUnion.is(nCom), "type reference expected, but get template reference")
	return nCom
end

function Reference:waitTemplateCom():Ret(clazz.TemplateReferCom)
	const nCom = self:getComAwait()
	assert(TemplateReferCom.is(nCom), "template reference expected, but get some other reference")
	return nCom
end

function Reference:_setComAndWakeup(vCom:UReferCom)
	self._com = vCom
	self._assignComEvent:wakeup()
end

function Reference:setAssignAsync(vNode:clazz.IBaseNode, vGetFunc:Fn():Ret(Any))
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	self._task:runAsync(function()
		const nAssignValue = vGetFunc()
		if Reference.is(nAssignValue) then
			const nCom = nAssignValue:getComAwait()
			self:_setComAndWakeup(nCom)
		elseif TemplateReferCom.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		elseif AsyncUnion.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		else
			if BaseAtomType.is(nAssignValue) then
				const nCom = self._manager:AsyncUnion()
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			elseif BaseUnionType.is(nAssignValue) then
				const nCom = self._manager:AsyncUnion()
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			else
				error("namespace assign a non-type value")
			end
		end
	end)
end

function Reference:getAssignNode():Ret(OrFalse(clazz.IBaseNode))
	return self._assignNode
end

function Reference:getReferNode():Ret(List(clazz.IBaseNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:clazz.IBaseNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:getManager()
	return self._manager
end

function.open Reference.is(v):isguard(clazz.TypeReference)
	return getmetatable(v) == Reference
end

return Reference
