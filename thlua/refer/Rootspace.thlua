
const class = require "thlua.class"
const Namespace = require "thlua.refer.Namespace"
const SpaceTable = require "thlua.refer.SpaceTable"
const Exception = require "thlua.Exception"

(@do
	let.clazz = import($class).clazz
end)

const Rootspace = class@<clazz.Rootspace, false>(Namespace)
Rootspace.__tostring=function(self):Ret(String)
    return "Rootspace"
end

function.open Rootspace:ctor(_, _, _, vDict:Dict(clazz.IAtomType, clazz.Reference))
    self._dict = vDict
end

function Rootspace:pureGet(vKeyType:clazz.IAtomType):Ret(OrNil(clazz.LocalSpaceValue))
    return self._dict[vKeyType]
end

function.pass Rootspace:getChild(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType):Ret(clazz.LocalSpaceValue)
    error(vNode:toExc("root space can't get child"))
end

return Rootspace
