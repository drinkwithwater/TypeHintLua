
const Reference = require "thlua.refer.Reference"
const Exception = require "thlua.Exception"
const Node = require "thlua.code.Node"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const SpaceTable = {.open}

const function:class(clazz.BaseSpaceTable) __createBaseTable(vSpace:clazz.Namespace)
	-- abstract class
	return setmetatable({.class}, {
		__index={},
		__tostring=function(_)
			return tostring(vSpace).."->BaseSpaceTable"
		end,
		__what=false@OrFalse("_ENV", "_G"),
		__namespace=vSpace,
	})
end

function:class(clazz.LocalSpaceTable) SpaceTable.createLocalTable(vSpace:clazz.Namespace, vKeyToType:Dict(clazz.IAtomType, clazz.LocalSpaceValue)):extends(clazz.BaseSpaceTable)
    return setmetatable({.class
    }, {
		__index=function(_:Truth,k:Any):Ret(clazz.LocalSpaceValue)
			const nNode = Node.getDebugNode(3)
			const nKeyType = vSpace:assertSpaceKeyType(nNode, k)
			return vSpace:localGet(nNode, nKeyType)
		end,
		__newindex=function(_:Truth,k:Any,newV:Any)
			const nNode = Node.getDebugNode(3)
			const nKeyType = vSpace:assertSpaceKeyType(nNode, k)
			vSpace:localSet(nNode, nKeyType, newV)
		end,
		__tostring=function(_)
			return tostring(vSpace).."->SpaceTable"
		end,
		__what=false,
		__namespace=vSpace,
    })
end

function:class(clazz.EnvSpaceTable) SpaceTable.createEnvTable(vSpace:clazz.Letspace, vKeyToType:Dict(clazz.IAtomType, clazz.LocalSpaceValue)):extends(clazz.BaseSpaceTable)
    return setmetatable({.class
    }, {
		__index=function(_:Truth,k:Any):Ret(Union(clazz.TypeReference, clazz.LocalSpaceTable))
			const nNode = Node.getDebugNode(3)
			const nKeyType = vSpace:assertSpaceKeyType(nNode, k)
			return vSpace:globalGet(nNode, nKeyType)
		end,
		__newindex=function(t:Truth,k:Any,v:Any)
			const nNode = Node.getDebugNode(3)
			error(Exception.new("global can't assign", nNode))
		end,
		__tostring=function(_)
			return tostring(vSpace).."-_ENV"
		end,
		__what="_ENV",
		__namespace=vSpace,
    })
end

function:class(clazz.GlobalSpaceTable) SpaceTable.createGlobalTable(vSelfSpace:clazz.Letspace, vParentSpace:clazz.Namespace):extends(clazz.BaseSpaceTable)
    const nMeta = vParentSpace:getGlobalTable() or _G
    const self = setmetatable({.class:Init({[Any]=Any})}, {
        __index=nMeta @ Truth,
        __tostring=function(_)
			return tostring(vSelfSpace).."-_G"
        end,
		__what="_G",
        __namespace=vSelfSpace,
    })
    return self
end

return SpaceTable