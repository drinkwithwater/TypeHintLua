
const Exception = require "thlua.Exception"
const Node = require "thlua.code.Node"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const SpaceValue = {.open}

const function:class(clazz.BaseSpaceValue) __createBaseTable(vSpace:clazz.Namespace)
	-- abstract class
	return setmetatable({.class}, {
		__index={},
		__tostring=function(_)
			return tostring(vSpace).."->BaseSpaceValue"
		end,
		__what=false@OrFalse("_ENV", "_G"),
		__refer=vSpace,
	})
end

function:class(clazz.LocalSpaceValue) SpaceValue.create(vRefer:clazz.Reference):extends(clazz.BaseSpaceValue)
    return setmetatable({.class
    }, {
		__index=function(_:Truth,k:clazz.USpaceAny):Ret(clazz.BaseSpaceValue)
			const nNode = Node.newDebugNode()
			const nKeyType = vRefer:assertSpaceKeyType(nNode, k)
			return vRefer:triggerGet(nNode, nKeyType)
		end,
		__newindex=function(_:Truth,k:clazz.USpaceAny,newV:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			const nKeyType = vRefer:assertSpaceKeyType(nNode, k)
			vRefer:triggerSet(nNode, nKeyType, newV)
		end,
		__tostring=function(_)
			return tostring("TODO").."->SpaceValue"
		end,
		__call=function(_:Truth, ...:clazz.USpaceAny):Ret(clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			return vRefer:triggerCall(nNode, ...)
		end,
		__what=false,
		__refer=vRefer,
    })
end

function:class(clazz.EnvSpaceValue) SpaceValue.envCreate(vRefer:clazz.Reference):extends(clazz.BaseSpaceValue)
    return setmetatable({.class
    }, {
		__index=function(_:Truth,k:clazz.USpaceAny):Ret(clazz.BaseSpaceValue)
			const nNode = Node.newDebugNode()
			const nKeyType = vRefer:assertSpaceKeyType(nNode, k)
			return vRefer:globalGet(nNode, nKeyType)
		end,
		__newindex=function(t:Truth,k:clazz.USpaceAny,v:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			error(nNode:toExc("global can't assign "))
		end,
		__tostring=function(_)
			return tostring(vRefer).."-_ENV"
		end,
		__call=function(_:Truth, ...:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			error(nNode:toExc("this value can't call"))
		end,
		__what="_ENV",
		__refer=vRefer,
    })
end

function.open SpaceValue.checkRefer(v):mapguard({[clazz.Reference]=clazz.BaseSpaceValue})
	local nMeta = getmetatable(v)
	if type(nMeta) == "table" then
		local self = nMeta.__refer
		if self then
			return self
		end
	end
	return nil
end

return SpaceValue