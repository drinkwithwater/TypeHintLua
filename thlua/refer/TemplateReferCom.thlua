
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const TemplateReferCom = {}
TemplateReferCom.__index = TemplateReferCom

function:class(clazz.TemplateReferCom) TemplateReferCom.new(
	vManager:clazz.TypeManager,
	vNode:clazz.IBaseNode,
	vFunc:AnyFunction,
	vParNum:Integer
)
	const self = setmetatable({.class
		_manager=vManager,
		_node=vNode,
		_parNum=vParNum,
		_func=vFunc,
		_cache={}@Dict(String, clazz.AsyncUnion),
	}, TemplateReferCom)
	return self
end

function TemplateReferCom:call(vNode:clazz.IBaseNode, vKey:String, vArgList:IList(clazz.UAllType)):Ret(clazz.AsyncUnion)
	const nFn = self._func
	local nTypeCom = self._cache[vKey]
	if not nTypeCom then
		nTypeCom = self._manager:AsyncUnion()
		nTypeCom:setTypeAsync(vNode, function()
			if #vArgList ~= self._parNum then
				error(Exception.new("template args num not match", vNode))
			end
			return self._manager:getDirtyProcessor():easyToMustType(vNode, nFn(table.unpack(vArgList)))
		end)
		self._cache[vKey] = nTypeCom
	end
	return nTypeCom
end

function.open TemplateReferCom.is(self):isguard(clazz.TemplateReferCom)
	return getmetatable(self) == TemplateReferCom
end

return TemplateReferCom
