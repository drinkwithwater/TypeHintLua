
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const UnionReferCom = {}
UnionReferCom.__index=UnionReferCom

function:class(clazz.UnionReferCom) UnionReferCom.new(vManager:clazz.TypeManager, vRefer:clazz.TypeReference)
	const self = setmetatable({.class
		_manager=vManager,
		_refer=vRefer,
		_namedRefer=vRefer,
		_mayRecursive=false@Boolean,
		_typeList=false@OrFalse(List(clazz.IAtomType)),
		_resultType=false@OrFalse(clazz.UAtomUnion),
		_listBuildEvent=vRefer:makeEvent(),
		_resultBuildEvent=vRefer:makeEvent(),
	}, UnionReferCom)
	return self
end

function UnionReferCom:addReference(vRefer:clazz.TypeReference)
	if vRefer:getKey() and not self._namedRefer:getKey() then
		self._namedRefer = vRefer
	end
end

function UnionReferCom:getToString():Ret(String)
	return tostring(self._refer)
end

function UnionReferCom:getResultType():Ret(OrFalse(clazz.UAtomUnion))
	return self._resultType
end

function UnionReferCom:getTypeAwait():Ret(clazz.UAtomUnion)
	if not self._resultType then
		self._resultBuildEvent:wait()
	end
	return (assert(self._resultType, "result type not setted"))
end

function UnionReferCom:getMayRecursive():Ret(Boolean)
	return self._mayRecursive
end

function UnionReferCom:getListAwait():Ret(List(clazz.IAtomType))
	if not self._typeList then
		self._listBuildEvent:wait()
	end
	return (assert(self._typeList, "type list not setted"))
end

function UnionReferCom:build(
	vGetList:Fn():Ret(List(clazz.IAtomType)),
	vLaterCall:OrNil(Fn(clazz.UAtomUnion))
):Ret()
	-- step 1. get list
	const nAtomList = vGetList()
	self._typeList = nAtomList
	for k, v in ipairs(nAtomList) do
		if v:mayRecursive() then
			self._mayRecursive = true
		end
	end
	self._listBuildEvent:wakeup()
	-- step 2. merge to result
	local nResultType:OrNil(clazz.UAtomUnion) = nil
	if #nAtomList == 0 then
		nResultType = self._manager.type.Never
	elseif #nAtomList == 1 then
		nResultType = nAtomList[1]!
	else
		local nCollection = self._manager:TypeCollection()
		for _, v in ipairs(nAtomList) do
			nCollection:put(v)
		end
		nResultType = nCollection:mergeToAtomUnion()
	end
	self._resultType = nResultType
	if not nResultType:isUnion() then
		nResultType:linkNamedReference(self)
	end
	self._resultBuildEvent:wakeup()
	-- step 3. later call
	if vLaterCall then
		vLaterCall(nResultType)
	end
end

function.open UnionReferCom.is(self):isguard(clazz.UnionReferCom)
	return getmetatable(self) == UnionReferCom
end

return UnionReferCom
