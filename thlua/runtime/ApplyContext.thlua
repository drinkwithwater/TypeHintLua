
local Region = require "thlua.runtime.Region"
local UnionTerm = require "thlua.term.UnionTerm"
local ContextClass = require "thlua.runtime.ContextClass"
local Meta = require "thlua.runtime.Meta"
local ApplyContext = ContextClass()

function ApplyContext.new(vRuntime, vApplyNode)
	local self = setmetatable({
		_runtime=vRuntime,
		_manager=vRuntime.typeManager,
		_node=vApplyNode,
		_namespace=false,
		_newTypeRefer=false,
		_meta=false,
	}, ApplyContext)
	self._region = Region.new(self._runtime, self)
	self._meta = Meta.new(self._runtime, self._node, self, self._region)
	return self
end

function ApplyContext:newContext(vApplyNode)
	return self._runtime:newContext(vApplyNode)
end

function ApplyContext:setNewTypeRefer(vRefer)
	self._newTypeRefer = vRefer
end

function ApplyContext:getNewTypeRefer()
	return self._newTypeRefer
end

function ApplyContext:BEGIN(vLexContext, vBlockNode)
	local nSpace = vLexContext:getNamespace():createChild(self)
	self._namespace = nSpace
	return self._region, nSpace.localExport, nSpace.globalExport
end

return ApplyContext
