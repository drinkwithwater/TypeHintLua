
const class = require@<let.clazz> "thlua.class"
const Node = require@<let.node> "thlua.code.Node"
const LuaPromise = require@<let.LuaPromise> "thlua.LuaPromise"

const TypedFunction = require "thlua.type.func.TypedFunction"
const TypeManager = require "thlua.manager.TypeManager"
const OpenFunction = require "thlua.type.func.OpenFunction"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const TermTuple = require "thlua.tuple.TermTuple"
const native = require "thlua.native"
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const LetSpace = require "thlua.space.LetSpace"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const BaseStack = require "thlua.runtime.BaseStack"
const OpenStack = require "thlua.runtime.OpenStack"
const SealStack = require "thlua.runtime.SealStack"
const DeduceStack = require "thlua.runtime.DeduceStack"
const AutoFunction = require "thlua.type.func.AutoFunction"
const NameReference = require "thlua.space.NameReference"

const ScheduleManager = require "thlua.manager.ScheduleManager"
const CodeEnv = require "thlua.code.CodeEnv"
const platform = require "thlua.platform"

(@do

	let.uv_async_t = import("luv").uv_async_t
	clazz.IPlatform = Interface {
		searchPath=Fn(OrFalse(String), String):Ret(Boolean, String),
		parseFile=Fn(String):Ret(clazz.CodeEnv),
		parseGlobal=Fn(String):Ret(clazz.CodeEnv, String),
		createAsync=Fn(Fn():Dots(Any)):Ret(uv_async_t),
		logger=OrNil(clazz.LevelLogger),
	}

	clazz.LevelLogger = Interface {
		error=Mfn():Dots(Truth),
		warn=Mfn():Dots(Truth),
		info=Mfn():Dots(Truth),
	}

	clazz.Diagnostic = Struct {
		node=clazz.IBaseNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.LoadedState = Struct {
		openFn=clazz.OpenFunction,
		codeEnv=clazz.CodeEnv,
		path=OrNil(String),
		term=OrNil(clazz.RefineTerm),
		stack=OrNil(clazz.OpenStack),
	}

end)

const DefaultPlatform:clazz.IPlatform = {
	searchPath=function(vPrefix, vPath)
		local fileName, err1 = package.searchpath(vPath, vPrefix or "./?.thlua;./?.d.thlua")
		if not fileName then
			return false, err1
		end
		return true, fileName
	end,
	parseFile=function.pass(vFileName)
		local file, err = io.open(vFileName, "r")
		if not file then
			error(err)
		end
		local nContent = assert(file:read("*a"), "file "..vFileName.. " read fail")
		file:close()
		const nCodeEnv = CodeEnv.new(nContent, vFileName)
		return nCodeEnv
	end,
	parseGlobal=function.pass(vPackage)
		local nContent:String = require("thlua.global."..vPackage)
		const nFileName = "@virtual-file:"..vPackage
		const nCodeEnv = CodeEnv.new(nContent, "@virtual-file:"..vPackage)
		return nCodeEnv, nFileName
	end,
	createAsync=function(fn)
		const uv = require "luv"
		return uv.new_async(fn)
	end,
}

const DefaultLogger:clazz.LevelLogger = {
	error=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[ERROR]", nPrefix, ...)
	end,
	warn=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[WARN]", nPrefix, ...)
	end,
	info=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[INFO]", nPrefix, ...)
	end,
}

const BaseRuntime = class@<clazz.BaseRuntime, false>()

function.open BaseRuntime:ctor(vPlatform:OrNil(clazz.IPlatform))
	self._searchPath = false @ OrFalse(String)
	self._platform=vPlatform or DefaultPlatform
	self._logger=self._platform.logger or DefaultLogger
	self._pathToFileName={}@Dict(String, String)
	self._loadedDict={}@Dict(String, LoadedState)
	self._scheduleManager=ScheduleManager.new(self)
	-- late init fields
	self._node=nil@!node.Root
	self._manager=nil@!clazz.TypeManager
	self._globalTable=nil@!clazz.AutoTable
	self._rootStack=nil@!clazz.SealStack
	self._rootSpace=false@OrFalse(clazz.LetSpace)
end

function BaseRuntime:getCodeEnv(vFileName:String):Ret(OrFalse(clazz.CodeEnv))
	const nState = self._loadedDict[vFileName]
	if nState then
		return nState.codeEnv
	else
		return false
	end
end

function BaseRuntime:import(vNode:clazz.IBaseNode, vDst:Truth):Ret(clazz.LocalSpaceValue)
	-- TODO better style?
	if type(vDst) == "string" then
		const nPath = vDst @> String
		const nLoadedState = self:_cacheLoadPath(vNode, nPath)
		const nStack = nLoadedState.stack
		if not nStack then
			error(vNode:toExc("recursive import:"..nPath))
		end
		const nSpace = nStack:getLetSpace()
		return nSpace:getRefer():getSpaceValue()
	elseif BaseAtomType.is(vDst) then
		const nStack = vDst:findRequireStack()
		if nStack then
			const nSpace = nStack:getLetSpace()
			return nSpace:getRefer():getSpaceValue()
		else
			error(vNode:toExc("import can only take type in a require stack"))
		end
	else
		error(vNode:toExc("import can only take string or type as first argument"))
	end
end

const nGlobalPackage:List(String) = {
	"basic",
	"coroutine",
	"debug",
	"io",
	"math",
	"os",
	"package",
	"string",
	"table",
	"utf8",
}

function BaseRuntime:promiseMain(vRootFileUri:String, vUseProfile:OrNil(Boolean))
	self._scheduleManager.useProfile = vUseProfile or false
	self._node=Node.newRootNode(vRootFileUri)
	self._manager=TypeManager.new(self, self._node, self._scheduleManager)
	const nAutoFn = AutoFunction.new(self._manager, self._node, false)
	nAutoFn:initAsync(function()
		const nRootStack = nAutoFn:getBuildStack()
		self._rootStack = nRootStack
		self._manager:lateInit()
		self._globalTable = native.make(self)
		nRootStack:rootSetLetSpace(self:getRootSpace())
		for _, pkg in ipairs(nGlobalPackage) do
			const nLoadedState = self:_cacheLoadGlobal(pkg)
			if pkg == "string" then
				const nRetType = nLoadedState.term!:getType()
				assert(not nRetType:isUnion(), "string lib's return can't be union")
				self._manager:lateInitStringLib(nRetType)
			end
		end
		return false, false, function()
			const nLoadedState = self:_cacheLoadFile(self._node, vRootFileUri)
			const nParTuple = self._manager:TypeTuple(self._node, {})
			const nRetTuples = self._manager:VoidRetTuples(self._node)
			return nParTuple, nRetTuples
		end
	end)
	nAutoFn:startPreBuild()
	nAutoFn:startLateBuild()
	return self._scheduleManager:promiseSchedule()
end

function BaseRuntime:recordBranch(vNode:node.Block, vBranch:clazz.Branch)
	-- pass
end

function BaseRuntime:recordApplyContext(vNode:clazz.IBaseNode, vContext:clazz.ApplyContext)
	-- pass
end

function BaseRuntime:SealStack(...):Ret(clazz.SealStack)
	return SealStack.new(self, ...)
end

function BaseRuntime:DeduceStack(...):Ret(clazz.DeduceStack)
	return DeduceStack.new(self, ...)
end

function BaseRuntime:OpenStack(...):Ret(clazz.OpenStack)
	return OpenStack.new(self, ...)
end

function BaseRuntime:_cacheLoadGlobal(vPkg:String):Ret(LoadedState)
	const nCodeEnv, nFileName = self._platform.parseGlobal(vPkg)
	const nOpenFn = nCodeEnv:callTypingFn(self._rootStack, self:makeGlobalTerm())
	const nContext = self._rootStack:newNoPushContext(self._node)
	const nTermTuple = nContext:FixedTermTuple({})
	const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
	const nLoadedState:LoadedState = {
		openFn=nOpenFn,
		codeEnv=nCodeEnv,
		term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext),
		stack = nStack,
	}
	self._loadedDict[nFileName] = nLoadedState
	return nLoadedState
end

function BaseRuntime:_cacheLoadFile(vNode:clazz.IBaseNode, vFileName:String):Ret(LoadedState)
	local nLoadedState = self._loadedDict[vFileName]
	if not nLoadedState then
		const nCodeEnv = self._platform.parseFile(vFileName)
		const nOpenFn = nCodeEnv:callTypingFn(self._rootStack, self:makeGlobalTerm())
		nLoadedState = {
			openFn=nOpenFn,
			codeEnv=nCodeEnv,
		}
		self._loadedDict[vFileName] = nLoadedState
		const nContext = self._rootStack:newNoPushContext(vNode)
		const nTermTuple = nContext:FixedTermTuple({})
		const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
		nLoadedState.term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext)
		nLoadedState.stack = nStack
	end
	return nLoadedState
end

function BaseRuntime:_cacheLoadPath(vNode:clazz.IBaseNode, vPath:String):Ret(LoadedState)
	local nFileName = self._pathToFileName[vPath]
	if not nFileName then
		const nOkay, nSearchFileName = self._platform.searchPath(self._searchPath, vPath)
		if not nOkay then
			error(Exception.new(nSearchFileName, vNode))
		else
			nFileName = nSearchFileName
		end
	end
	const nLoadedState = self._loadedDict[nFileName] or self:_cacheLoadFile(vNode, nFileName)
	const nOldPath = nLoadedState.path
	if nOldPath and nOldPath ~= vPath then
		self:nodeWarn(vNode, "mixing path:'"..nOldPath.."','"..vPath.."'")
	end
	nLoadedState.path = vPath
	return nLoadedState
end

function BaseRuntime:require(vNode:clazz.IBaseNode, vPath:String):Ret(clazz.RefineTerm, clazz.OpenFunction, clazz.OpenStack)
	const nLoadedState = self:_cacheLoadPath(vNode, vPath)
	const nTerm = nLoadedState.term
	if not nTerm then
		error(Exception.new("recursive require:"..vPath, vNode))
	end
	return nTerm, nLoadedState.openFn, nLoadedState.stack!
end

function BaseRuntime:buildSimpleGlobal(vRootSpace:clazz.LetSpace)
	const nGlobal = {} @ Dict(String, Union(clazz.NameReference, clazz.BaseSpaceCom))
	do.pass
		for k,v in pairs(self._manager.type) do
			nGlobal[k] = v
		end
		for k,v in pairs(self._manager.generic) do
			nGlobal[k] = v
		end
		local l = {
			SubType="buildSubType",
			Union="buildUnion",
			Struct="buildStruct",
			OneOf="buildOneOf",
			Interface="buildInterface",
			ExtendInterface="buildExtendInterface",
			ExtendStruct="buildExtendStruct",
			Template="buildTemplate",
			easymap="buildEasyMap",
			--IDict="buildIDict",
			--IList="buildIList",
			--Dict="buildDict",
			--List="buildList",
			OrNil="buildOrNil",
			OrFalse="buildOrFalse",
			Fn="buildFn",
			Pfn="buildPfn",
			Mfn="buildMfn",
		}
		local nManager = self._manager
		for k,v in pairs(l) do
			nGlobal[k]=nManager:BuiltinFn(function(vNode, ...)
				return nManager[v](nManager, vNode, ...)
			end, k)
		end
		nGlobal.Literal=nManager:BuiltinFn(function(vNode, v)
			return nManager:Literal(v)
		end, "Literal")
		nGlobal.namespace=nManager:BuiltinFn(function(vNode)
			return self:NameSpace(vNode, false)
		end, "namespace")
		nGlobal.import=nManager:BuiltinFn(function(vNode, vPath)
			return self:import(vNode, vPath)
		end, "import")
		nGlobal.traceFile=nManager:BuiltinFn(function(vNode, vDepth)
			local nRetNode = vNode
			if vDepth then
				const nSealTask = self._scheduleManager:getTask()
				local nStack = nSealTask!:traceStack()
				for i=2,vDepth do
					if OpenStack.is(nStack) then
						nStack = nStack:getApplyStack()
					else
						return false
					end
				end
				nRetNode = nStack:getNode()
			end
			return platform.uri2path(nRetNode.path)
		end, "traceFile")
		nGlobal.setPath=nManager:BuiltinFn(function(vNode, vPath)
			self._searchPath = vPath
		end, "setPath")
		nGlobal.foreachPair=nManager:BuiltinFn(function(vNode, vObject, vFunc)
			const nObject = self._manager:easyToMustType(vNode, vObject):checkAtomUnion()
			const d = nObject:copyValueDict(nObject)
			for k,v in pairs(d) do
				vFunc(k,v)
			end
		end, "foreachPair")
		nGlobal.literal=nManager:BuiltinFn(function(vNode, vType)
			vType = self._manager:easyToMustType(vNode, vType):checkAtomUnion()
			if vType:isUnion() then
				return nil
			else
				if self._manager:isLiteral(vType) then
					return vType:getLiteral()
				else
					return nil
				end
			end
		end, "literal")
		nGlobal.same=nManager:BuiltinFn(function(vNode, vType1, vType2)
			return vType1:includeAll(vType2) and vType2:includeAll(vType1) and true or false
		end, "same")
		nGlobal.print=nManager:BuiltinFn(function(vNode, ...)
			self:nodeInfo(vNode, ...)
		end, "print")
	end
	for k,v in pairs(nGlobal) do
		assert(not NameReference.is(v), "namerefer in namrefer")
		vRootSpace:referChild(self._node, k):setAssignAsync(self._node, function()
			return v
		end)
	end
end

function BaseRuntime:getRootSpace():Ret(clazz.LetSpace)
	local nRootSpace = self._rootSpace
	if not nRootSpace then
		const nRefer = self._manager:NameReference(self._node, "")
		nRootSpace = nRefer:initWithLetSpace(self._node, false)
		self._rootSpace = nRootSpace
		self:buildSimpleGlobal(nRootSpace)
	end
	return nRootSpace
end

function BaseRuntime:LetSpace(vRegionNode:clazz.IBaseNode, vParentLet:clazz.LetSpace):Ret(clazz.LetSpace)
	const nRefer = self._manager:NameReference(vParentLet, "")
	const nSpace = nRefer:initWithLetSpace(self._node, vParentLet)
	return nSpace
end

function BaseRuntime:NameSpace(vNode:node.Debug, vParent:OrFalse(clazz.NameSpace)):Ret(clazz.NameSpace)
	const nRefer = self._manager:NameReference(vParent or vNode, "")
	const nSpace = nRefer:initWithNameSpace(vNode, vParent)
	return nSpace
end

function BaseRuntime:makeGlobalTerm():Ret(clazz.RefineTerm)
	const nHeadContext = self._rootStack:inplaceOper()
	return nHeadContext:RefineTerm(self._globalTable)
end

function BaseRuntime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IBaseNode, ...:Truth)
	-- pass
end

function BaseRuntime:invalidReference(vRefer:clazz.NameReference)
	-- pass
end

function BaseRuntime:stackNodeError(vStack:clazz.BaseStack, vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
	const nPrefix = "(open)"
	while OpenStack.is(vStack) do
		const nStackNode = vStack:getNode()
		if nStackNode ~= vNode and not vStack:isRequire() then
			print("[ERROR] "..tostring(nStackNode), nPrefix, ...)
			self:_save(1, nStackNode, nPrefix, ...)
		end
		vStack = vStack:getApplyStack()
	end
end

function BaseRuntime:nodeError(vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function BaseRuntime:nodeWarn(vNode:clazz.IBaseNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function BaseRuntime:nodeInfo(vNode:clazz.IBaseNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function BaseRuntime:getNode():Ret(node.Root)
	return self._node
end

function BaseRuntime:makeException(vNode:clazz.IBaseNode, vMsg:String)
	return Exception.new(vMsg, vNode)
end

function BaseRuntime:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function BaseRuntime:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function BaseRuntime:getPlatform():Ret(clazz.IPlatform)
	return self._platform
end

function BaseRuntime:getRootStack():Ret(clazz.SealStack)
	return self._rootStack
end

return BaseRuntime
