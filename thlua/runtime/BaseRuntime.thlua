
const TypedFunction = require "thlua.type.func.TypedFunction"
const TypeManager = require "thlua.manager.TypeManager"
const OpenFunction = require "thlua.type.func.OpenFunction"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const TermTuple = require "thlua.tuple.TermTuple"
const native = require "thlua.native"
const Node = require "thlua.code.Node"
const Namespace = require "thlua.space.Namespace"
const Letspace = require "thlua.space.Letspace"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const BaseStack = require "thlua.runtime.BaseStack"
const OpenStack = require "thlua.runtime.OpenStack"
const SealStack = require "thlua.runtime.SealStack"
const AutoFunction = require "thlua.type.func.AutoFunction"
const NameReference = require "thlua.space.NameReference"

const ScheduleManager = require "thlua.manager.ScheduleManager"
const class = require "thlua.class"
const CodeEnv = require "thlua.code.CodeEnv"

(@do
	let.clazz = import($class).clazz
	let.node = import($Node).node

	clazz.FileLoader = Struct {
		thluaSearch=Fn(clazz.BaseRuntime, String):Ret(Boolean, String),
		thluaParseFile=Fn(clazz.BaseRuntime, String):Ret(clazz.CodeEnv),
		thluaGlobalFile=Fn(clazz.BaseRuntime, String):Ret(clazz.CodeEnv, String),
	}

	clazz.Diagnostic = Struct {
		node=clazz.IBaseNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.LoadedState = Struct {
		openFn=clazz.OpenFunction,
		codeEnv=clazz.CodeEnv,
		path=OrNil(String),
		term=OrNil(clazz.RefineTerm),
		stack=OrNil(clazz.OpenStack),
	}

end)

const DefaultLoader:clazz.FileLoader = {
	thluaSearch=function(vRuntime, vPath)
		local fileName, err1 = package.searchpath(vPath, vRuntime:getSearchPath() or "./?.thlua;./?.d.thlua")
		if not fileName then
			return false, err1
		end
		return true, fileName
	end,
	thluaParseFile=function.pass(vRuntime, vFileName)
		local file, err = io.open(vFileName, "r")
		if not file then
			error(err)
		end
		local nContent = assert(file:read("*a"), "file "..vFileName.. " read fail")
		file:close()
		const nCodeEnv = CodeEnv.new(nContent, vFileName)
		return nCodeEnv
	end,
	thluaGlobalFile=function.pass(vRuntime, vPackage)
		local nContent:String = require("thlua.global."..vPackage)
		const nFileName = "@virtual-file:"..vPackage
		const nCodeEnv = CodeEnv.new(nContent, "@virtual-file:"..vPackage)
		return nCodeEnv, nFileName
	end
}

const BaseRuntime = class@<clazz.BaseRuntime, false>()

function.open BaseRuntime:ctor(vLoader:OrNil(clazz.FileLoader))
	self._searchPath = false @ OrFalse(String)
	self._loader=vLoader or DefaultLoader
	self._pathToFileName={}@Dict(String, String)
	self._loadedDict={}@Dict(String, LoadedState)
	self._scheduleManager=ScheduleManager.new()
	-- late init fields
	self._node=nil@!node.Root
	self._manager=nil@!clazz.TypeManager
	self._globalTable=nil@!clazz.AutoTable
	self._rootStack=nil@!clazz.SealStack
end

function BaseRuntime:getCodeEnv(vFileName:String):Ret(OrFalse(clazz.CodeEnv))
	const nState = self._loadedDict[vFileName]
	if nState then
		return nState.codeEnv
	else
		return false
	end
end

function BaseRuntime:import(vDst:Truth):Ret(clazz.LocalSpaceValue)
	-- TODO better style?
	if type(vDst) == "string" then
		const nPath = vDst @> String
		const nNode = Node.newDebugNode()
		const nLoadedState = self:_cacheLoadPath(Node.newDebugNode(), nPath)
		const nStack = nLoadedState.stack
		if not nStack then
			error(Exception.new("recursive import:"..nPath, nNode))
		end
		const nSpace = nStack:getNamespace()
		return nSpace:getRefer():getSpaceValue()
	elseif BaseAtomType.is(vDst) then
		const nStack = vDst:findRequireStack()
		if nStack then
			const nSpace = nStack:getNamespace()
			return nSpace:getRefer():getSpaceValue()
		else
			error("import can only take type in a require stack"..debug.traceback())
		end
	else
		error("import can only take string or type as first argument")
	end
end

const nGlobalPackage:List(String) = {
	"basic",
	"coroutine",
	"debug",
	"io",
	"math",
	"os",
	"package",
	"string",
	"table",
	"utf8",
}

function BaseRuntime:pmain(vRootFileUri:String):Ret(True):Ret(False, Union(String, clazz.Exception))
	self._node=Node.newRootNode(vRootFileUri)
	self._manager=TypeManager.new(self, self._node, self._scheduleManager)
	const nAutoFn = AutoFunction.new(self._manager, self._node, false)
	const nRootStack = nAutoFn:getBuildStack()
	self._rootStack = nRootStack
	self._manager:lateInit()
	self._globalTable = native.make(self)
	nRootStack:rootSetNamespace(self:RootNamespace())
	const t1 = os.clock()
	const ok, err = pcall(function():Err(clazz.Exception)
		nAutoFn:initAsync(function()
			for _, pkg in ipairs(nGlobalPackage) do
				const nLoadedState = self:_cacheLoadGlobal(pkg)
				if pkg == "string" then
					const nRetType = nLoadedState.term!:getType()
					assert(not nRetType:isUnion(), "string lib's return can't be union")
					self._manager:lateInitStringLib(nRetType)
				end
			end
			return false, false, function()
				const nLoadedState = self:_cacheLoadFile(self._node, vRootFileUri)
				const nParTuple = self._manager:TypeTuple(self._node, {})
				const nRetTuples = self._manager:VoidRetTuples(self._node)
				return nParTuple, nRetTuples
			end
		end)
		nAutoFn:startPreBuild()
		nAutoFn:startLateBuild()
	end)
	if not ok then
		if Exception.is(err) then
			self:nodeError(err.node, err.msg)
		else
			self:nodeError(self._node, err)
		end
	end
	const t2 = os.clock()
	print(t2-t1)
	-- self:diffTestExpect()
	return ok, err
end

function BaseRuntime:lateSchedule(vAutoFn:clazz.AutoFunction)
	error("implement lateSchedule function in extends class")
end

function BaseRuntime:recordBranch(vNode:node.Block, vBranch:clazz.Branch)
	-- pass
end

function BaseRuntime:recordApplyContext(vNode:clazz.IBaseNode, vContext:clazz.ApplyContext)
	-- pass
end

function BaseRuntime:SealStack(...):Ret(clazz.SealStack)
	return SealStack.new(self, ...)
end

function BaseRuntime:OpenStack(...):Ret(clazz.OpenStack)
	return OpenStack.new(self, ...)
end

function BaseRuntime:_cacheLoadGlobal(vPkg:String):Ret(LoadedState)
	const nCodeEnv, nFileName = self._loader.thluaGlobalFile(self, vPkg)
	const nOpenFn = nCodeEnv:getTypingFn()(nCodeEnv:getNodeList(), self._rootStack, self:makeGlobalTerm())
	const nContext = self._rootStack:newNoPushContext(self._node)
	const nTermTuple = nContext:FixedTermTuple({})
	const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
	const nLoadedState:LoadedState = {
		openFn=nOpenFn,
		codeEnv=nCodeEnv,
		term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext),
		stack = nStack,
	}
	self._loadedDict[nFileName] = nLoadedState
	return nLoadedState
end

function BaseRuntime:_cacheLoadFile(vNode:clazz.IBaseNode, vFileName:String):Ret(LoadedState)
	local nLoadedState = self._loadedDict[vFileName]
	if not nLoadedState then
		const nCodeEnv = self._loader.thluaParseFile(self, vFileName)
		const nOpenFn = nCodeEnv:getTypingFn()(nCodeEnv:getNodeList(), self._rootStack, self:makeGlobalTerm())
		nLoadedState = {
			openFn=nOpenFn,
			codeEnv=nCodeEnv,
		}
		self._loadedDict[vFileName] = nLoadedState
		const nContext = self._rootStack:newNoPushContext(vNode)
		const nTermTuple = nContext:FixedTermTuple({})
		const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
		nLoadedState.term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext)
		nLoadedState.stack = nStack
	end
	return nLoadedState
end

function BaseRuntime:_cacheLoadPath(vNode:clazz.IBaseNode, vPath:String):Ret(LoadedState)
	local nFileName = self._pathToFileName[vPath]
	if not nFileName then
		const nOkay, nSearchFileName = self._loader.thluaSearch(self, vPath)
		if not nOkay then
			error(Exception.new(nSearchFileName, vNode))
		else
			nFileName = nSearchFileName
		end
	end
	const nLoadedState = self._loadedDict[nFileName] or self:_cacheLoadFile(vNode, nFileName)
	const nOldPath = nLoadedState.path
	if nOldPath and nOldPath ~= vPath then
		self:nodeWarn(vNode, "mixing path:'"..nOldPath.."','"..vPath.."'")
	end
	nLoadedState.path = vPath
	return nLoadedState
end

function BaseRuntime:require(vNode:clazz.IBaseNode, vPath:String):Ret(clazz.RefineTerm, clazz.OpenFunction)
	const nLoadedState = self:_cacheLoadPath(vNode, vPath)
	const nTerm = nLoadedState.term
	if not nTerm then
		error(Exception.new("recursive require:"..vPath, vNode))
	end
	return nTerm, nLoadedState.openFn
end

function BaseRuntime:TreeNamespace(vNode:node.Debug):Ret(clazz.Treespace)
	const nRefer = self._manager:NameReference(vNode, "")
	const nSpace = nRefer:initWithSpace@<Nil>(vNode)
	return nSpace
end

function BaseRuntime:buildSimpleGlobal():Ret(Dict(String, clazz.NameReference))
	const nGlobal = {} @ Dict(String, Union(clazz.NameReference, clazz.BaseSpaceCom))
	do.pass
		for k,v in pairs(self._manager.type) do
			nGlobal[k] = v
		end
		for k,v in pairs(self._manager.generic) do
			nGlobal[k] = v
		end
		local l = {
			Enum="buildEnum",
			Union="buildUnion",
			Struct="buildStruct",
			Interface="buildInterface",
			ExtendInterface="buildExtendInterface",
			ExtendStruct="buildExtendStruct",
			Template="buildTemplate",
			easymap="buildEasyMap",
			--IDict="buildIDict",
			--IList="buildIList",
			--Dict="buildDict",
			--List="buildList",
			OrNil="buildOrNil",
			OrFalse="buildOrFalse",
			Fn="buildFn",
			Pfn="buildPfn",
			Mfn="buildMfn",
		}
		local nManager = self._manager
		for k,v in pairs(l) do
			nGlobal[k]=nManager:BuiltinFn(function(vNode, ...)
				return nManager[v](nManager, vNode, ...)
			end, k)
		end
		nGlobal.Literal=nManager:BuiltinFn(function(vNode, v)
			return nManager:Literal(v)
		end, "Literal")
		nGlobal.enum=nManager:BuiltinFn(function(vNode, vEnumType, ...)
			return nManager:addEnum(vNode, vEnumType, ...)
		end, "enum")
		nGlobal.namespace=nManager:BuiltinFn(function(vNode)
			return self:TreeNamespace(vNode)
		end, "namespace")
		nGlobal.lock=nManager:BuiltinFn(function(vNode, vType)
			vType:foreach(function(vAtom)
				vAtom:setLocked()
			end)
		end, "lock")
		nGlobal.import=nManager:BuiltinFn(function(vNode, vPath)
			return self:import(vPath)
		end, "import")
		nGlobal.setPath=nManager:BuiltinFn(function(vNode, vPath)
			self._searchPath = vPath
		end, "setPath")
		nGlobal.foreachPair=nManager:BuiltinFn(function(vNode, vObject, vFunc)
			const nObject = self._manager:getDirtyProcessor():easyToMustType(vNode, vObject):checkAtomUnion()
			const d = nObject:copyValueDict(nObject)
			for k,v in pairs(d) do
				vFunc(k,v)
			end
		end, "foreachPair")
		nGlobal.literal=nManager:BuiltinFn(function(vNode, vType)
			vType = self._manager:getDirtyProcessor():easyToMustType(vNode, vType):checkAtomUnion()
			if vType:isUnion() then
				return nil
			else
				if self._manager:isLiteral(vType) then
					return vType:getLiteral()
				else
					return nil
				end
			end
		end, "literal")
		nGlobal.same=nManager:BuiltinFn(function(vNode, vType1, vType2)
			return vType1:includeAll(vType2) and vType2:includeAll(vType1) and true or false
		end, "same")
		nGlobal.print=nManager:BuiltinFn(function(vNode, ...)
			self:nodeInfo(vNode, ...)
		end, "print")
	end
	const nRetGlobal = {} @ Dict(String, clazz.NameReference)
	for k,v in pairs(nGlobal) do
		if NameReference.is(v) then
			nRetGlobal[k] = v
		else
			const nRefer = self._manager:NameReference(self._node, k)
			nRetGlobal[k] = nRefer
			nRefer:setAssignAsync(self._node, function()
				return v
			end)
		end
	end
	return nRetGlobal
end

function BaseRuntime:RootNamespace():Ret(clazz.Letspace)
	const nRefer = self._manager:NameReference(self._node, "")
	const nGlobal = self:buildSimpleGlobal()
	const nSpace = nRefer:initWithSpace@<$nGlobal>(self._node, nGlobal)
	nSpace:close()
	return nSpace
end

function BaseRuntime:LetNamespace(vParentLet:clazz.Letspace, vRegionNode:clazz.IBaseNode):Ret(clazz.Letspace)
	const nRefer = self._manager:NameReference(vParentLet, "")
	const nSpace = nRefer:initWithSpace@<$vParentLet>(self._node, vParentLet)
	return nSpace
end

function BaseRuntime:makeGlobalTerm():Ret(clazz.RefineTerm)
	const nHeadContext = self._rootStack:inplaceOper()
	return nHeadContext:RefineTerm(self._globalTable)
end

function BaseRuntime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IBaseNode, ...:Truth)
	-- pass
end

function BaseRuntime:invalidReference(vRefer:clazz.NameReference)
	-- pass
end

function BaseRuntime:stackNodeError(vStack:clazz.BaseStack, vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
	const nPrefix = "(open)"
	while OpenStack.is(vStack) do
		const nStackNode = vStack:getNode()
		if nStackNode ~= vNode and not vStack:isRequire() then
			print("[ERROR] "..tostring(nStackNode), nPrefix, ...)
			self:_save(1, nStackNode, nPrefix, ...)
		end
		vStack = vStack:getApplyStack()
	end
end

function BaseRuntime:nodeError(vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function BaseRuntime:nodeWarn(vNode:clazz.IBaseNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function BaseRuntime:nodeInfo(vNode:clazz.IBaseNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function BaseRuntime:getNode():Ret(clazz.IBaseNode)
	return self._node
end

function BaseRuntime:makeException(vNode:clazz.IBaseNode, vMsg:String)
	return Exception.new(vMsg, vNode)
end

function BaseRuntime:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function BaseRuntime:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function BaseRuntime:getRootStack():Ret(clazz.SealStack)
	return self._rootStack
end

function BaseRuntime:getSearchPath():Ret(OrFalse(String))
	return self._searchPath
end

return BaseRuntime
