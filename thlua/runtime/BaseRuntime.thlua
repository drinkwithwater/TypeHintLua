
const TypedFunction = require "thlua.func.TypedFunction"
const TypeManager = require "thlua.manager.TypeManager"
const OpenFunction = require "thlua.func.OpenFunction"
const BaseAtomType = require "thlua.type.BaseAtomType"
const TermTuple = require "thlua.tuple.TermTuple"
const native = require "thlua.native"
const Node = require "thlua.code.Node"
const Namespace = require "thlua.manager.Namespace"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const BaseStack = require "thlua.runtime.BaseStack"
const OpenStack = require "thlua.runtime.OpenStack"
const SealStack = require "thlua.runtime.SealStack"
const AutoFunction = require "thlua.func.AutoFunction"

const ScheduleManager = require "thlua.manager.ScheduleManager"
const class = require "thlua.class"

(@do
	import("thlua.code.CodeEnv")
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node

	clazz.ILoader = Interface {
		thluaSearch=Mfn(String):Ret(Boolean, String),
		thluaParseFile=Mfn(String):Ret(clazz.CodeEnv),
	}

	clazz.Diagnostic = Struct {
		node=clazz.IAstNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.LoadedState = Struct {
		openFn=clazz.OpenFunction,
		term=OrNil(clazz.RefineTerm),
		stack=OrNil(clazz.BaseStack),
	}

end)


const BaseRuntime = class@<clazz.BaseRuntime, false>()

function.open BaseRuntime:ctor(vLoader:clazz.ILoader)
	self._loader=vLoader
	self._spaceList={}@List(clazz.Namespace)
	self._loadedDict={}@Dict(String, LoadedState)
	self._fileEnvDict={}@Dict(String, clazz.CodeEnv)
	self._scheduleManager=ScheduleManager.new()
	-- late init fields
	self._node=nil@!node.Root
	self._manager=nil@!clazz.TypeManager
	self._globalTable=nil@!clazz.AutoTable
	self._rootStack=nil@!clazz.SealStack
end

function BaseRuntime:getCodeEnv(vFileKey:String):Ret(OrNil(clazz.CodeEnv))
	return self._fileEnvDict[vFileKey]
end

function BaseRuntime:checkAtomUnionFinish()
	for _, space in pairs(self._spaceList) do
		space:check()
	end
end

function BaseRuntime:import(vDst:Truth):Ret(clazz.SpaceTable)
	-- TODO better style?
	if type(vDst) == "string" then
		const nPath = vDst@> String
		self:require(nPath)
		const nStack = self._loadedDict[nPath]!.stack!
		const nSpace = nStack:getNamespace()
		return nSpace.localExport
	elseif BaseAtomType.is(vDst) then
		const nStack = vDst:findRequireStack()
		if nStack then
			const nSpace = nStack:getNamespace()
			return nSpace.localExport
		else
			error("import can only take type in a require stack"..debug.traceback())
		end
	else
		error("import can only take string or type as first argument")
	end
end

function BaseRuntime:pmain(vMainFileName:String):Ret(True):Ret(False, String)
	self._node=Node.newRootNode(vMainFileName)
	self._manager=TypeManager.new(self, self._node, self._scheduleManager)
	const nAutoFn = AutoFunction.new(self._manager, self._node, false)
	const nRootStack = nAutoFn:getBuildStack()
	self._rootStack = nRootStack
	self._manager:lateInit()
	self._globalTable = native.make(self)
	nRootStack:rootSetNamespace(self:RootNamespace())
	const t1 = os.clock()
	const a,b = pcall(function()
		nAutoFn:initAsync(function()
			return false, false, function()
				const nLuaFunc = self:cacheLoadFile(vMainFileName)
				const nNoPushContext = self._rootStack:newNoPushContext(self._node)
				const nTermTuple = nNoPushContext:FixedTermTuple({})
				nLuaFunc:meta_open_call(nNoPushContext, nTermTuple, true)
				const nParTuple = self._manager:TypeTuple(self._node)
				const nRetTuples = self._manager:VoidRetTuples(self._node)
				return nParTuple, nRetTuples
			end
		end)
		nAutoFn:startTask()
	end)
	const t2 = os.clock()
	print(t2-t1)
	-- self:diffTestExpect()
	return a,b
end

function BaseRuntime:scheduleAutoFn(vAutoFn:clazz.AutoFunction)
	vAutoFn:startTask()
end

function BaseRuntime:recordBranch(vNode:node.Block, vBranch:clazz.Branch)
	-- pass
end

function BaseRuntime:recordApplyContext(vNode:clazz.IAstNode, vContext:clazz.ApplyContext)
	-- pass
end

function BaseRuntime:SealStack(...):Ret(clazz.SealStack)
	return SealStack.new(self, ...)
end

function BaseRuntime:OpenStack(...):Ret(clazz.OpenStack)
	return OpenStack.new(self, ...)
end

function BaseRuntime:cacheLoadFile(vFileName:String):Ret(clazz.OpenFunction)
	local nCodeEnv = self._fileEnvDict[vFileName]
	if not nCodeEnv then
		nCodeEnv = self._loader:thluaParseFile(vFileName)
		self._fileEnvDict[vFileName] = nCodeEnv
	end
	return nCodeEnv:getTypingFn()(nCodeEnv:getNodeList(), self._rootStack, self:makeGlobalTerm())
end

function BaseRuntime:require(vPath:String):Ret(clazz.RefineTerm, clazz.OpenFunction)
	if not self._loadedDict[vPath] then
		const nOkay, nFileName = self._loader:thluaSearch(vPath)
		if not nOkay then
			error(nFileName)
		end
		const nLuaFunc = self:cacheLoadFile(nFileName)
		const nLoadedState:LoadedState = {
			openFn=nLuaFunc,
		}
		self._loadedDict[vPath] = nLoadedState
		const nContext = self._rootStack:newNoPushContext(self._node)
		const nTermTuple = nContext:FixedTermTuple({})
		const nRet, nStack = nLuaFunc:meta_open_call(nContext, nTermTuple, true)
		nLoadedState.term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext)
		nLoadedState.stack = nStack
	end
	const nLoaded = self._loadedDict[vPath]!
	const nTerm = nLoaded.term
	if not nTerm then
		error("recursive require:"..vPath)
	end
	return nTerm, nLoaded.openFn
end

function BaseRuntime:TreeNamespace():Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, Node.getDebugNode(4))
	self._spaceList[#self._spaceList + 1] = nSpace
	return nSpace
end

function.pass BaseRuntime:buildSimpleGlobal():Ret(Truth)
	local nGlobal = {}
	for k,v in pairs(self._manager.type) do
		nGlobal[k] = v
	end
	for k,v in pairs(self._manager.generic) do
		nGlobal[k] = v
	end
	local l = {
		Union="buildUnion",
		Struct="buildStruct",
		Interface="buildInterface",
		ExtendInterface="buildExtendInterface",
		ExtendStruct="buildExtendStruct",
		Template="buildTemplate",
		--IDict="buildIDict",
		--IList="buildIList",
		--Dict="buildDict",
		--List="buildList",
		OrNil="buildOrNil",
		OrFalse="buildOrFalse",
		Fn="buildFn",
		Pfn="buildPfn",
		Mfn="buildMfn",
	}
	local nManager = self._manager
	for k,v in pairs(l) do
		nGlobal[k]=function(...)
			return nManager[v](nManager, Node.getDebugNode(3), ...)
		end
	end
	nGlobal.Literal=function(v)
		return nManager:Literal(v)
	end
	nGlobal.namespace=function()
		return self:TreeNamespace().localExport
	end
	nGlobal.import=function(vPath)
		return self:import(vPath)
	end
	nGlobal.foreachPair=function(vObject, vFunc)
		const vObject = vObject:checkAtomUnion()
		const d = vObject:copyValueDict(vObject)
		for k,v in pairs(d) do
			vFunc(k,v)
		end
	end
	for k,v in pairs(_G) do
		nGlobal[k]=v
	end
	nGlobal.print=function(...)
		self:nodeInfo(Node.getDebugNode(3), ...)
	end
	const nRetGlobal = {}
	for k,v in pairs(nGlobal) do
		nRetGlobal[self._manager:Literal(k)] = v
	end
	return nRetGlobal
end

function BaseRuntime:RootNamespace():Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, self._node, self:buildSimpleGlobal())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	nSpace:close()
	return nSpace
end

function BaseRuntime:LetNamespace(vParentLet:clazz.Namespace, vRegionNode:clazz.IAstNode):Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, vRegionNode, vParentLet:getKeyToType())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	return nSpace
end

function BaseRuntime:makeGlobalTerm():Ret(clazz.RefineTerm)
	const nHeadContext = self._rootStack:inplaceOper()
	return nHeadContext:RefineTerm(self._globalTable)
end

function BaseRuntime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IAstNode, ...:Truth)
	-- pass
end

function BaseRuntime:nodeError(vNode:clazz.IAstNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function BaseRuntime:nodeWarn(vNode:clazz.IAstNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function BaseRuntime:nodeInfo(vNode:clazz.IAstNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function BaseRuntime:getNode():Ret(clazz.IAstNode)
	return self._node
end

function BaseRuntime:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function BaseRuntime:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function BaseRuntime:getRootStack():Ret(clazz.SealStack)
	return self._rootStack
end

return BaseRuntime
