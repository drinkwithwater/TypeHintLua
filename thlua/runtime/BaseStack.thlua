
const DoBuilder = require "thlua.builder.DoBuilder"
const Branch = require "thlua.runtime.Branch"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoFlag = require "thlua.auto.AutoFlag"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const Node = require "thlua.code.Node"
const Enum = require "thlua.Enum"
const LocalSymbol = require "thlua.term.LocalSymbol"
const ImmutVariable = require "thlua.term.ImmutVariable"

const ClassFactory = require "thlua.func.ClassFactory"
const AutoFunction = require "thlua.func.AutoFunction"
const OpenFunction = require "thlua.func.OpenFunction"
const BaseFunction = require "thlua.func.BaseFunction"
const BaseTable = require "thlua.object.BaseTable"
const MetaObject = require "thlua.object.MetaObject"
const Truth = require "thlua.type.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"
const class = require "thlua.class"

const OperContext = require "thlua.context.OperContext"
const ApplyContext = require "thlua.context.ApplyContext"
const LogicContext = require "thlua.context.LogicContext"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

const BaseStack = class@<clazz.BaseStack, false>()

function.open BaseStack:ctor(
	vRuntime:clazz.Runtime,
	vNode:clazz.IAstNode,
	vUpValueCase:OrFalse(clazz.VariableCase),
	...
)
	const nManager = vRuntime:getTypeManager()
	self._runtime=vRuntime
	self._manager=nManager
	self._node=vNode
	self._classTable=false@OrFalse(clazz.BaseTable)
	self._namespace=false@OrFalse(clazz.Namespace)
	self._headContext=OperContext.new(vNode, self, nManager)
	self._tailContext=OperContext.new(vNode, self, nManager)
	const nRootBranch = Branch.new(self, nil, vUpValueCase or VariableCase.new())-- vUpCase or VariableCase.new())
	self._curBranch=nRootBranch
	self._branchStack={self._curBranch}@List(clazz.Branch)
	self._bodyFn=nil@clazz.UBodyFunction
	self._retList={} @ List(clazz.FixedTermTuple)
end

function BaseStack:AUTO(vNode:clazz.IAstNode):Ret(clazz.AutoFlag)
	return AutoFlag
end

function BaseStack:setClassTable(vClassTable:clazz.BaseTable)
	self._classTable = vClassTable
end

function BaseStack:getClassTable():Ret(OrFalse(clazz.BaseTable))
	return self._classTable
end

function BaseStack:rootSetNamespace(vRootSpace:clazz.Namespace)
	assert(not self._namespace, "namespace has been setted")
	self._namespace = vRootSpace
end

function BaseStack:BEGIN(vLexStack:clazz.BaseStack, vRegionNode:clazz.IAstNode, vBodyFn:clazz.UBodyFunction, vUpCase:OrFalse(clazz.VariableCase)
):Ret(clazz.BaseStack, clazz.SpaceTable, clazz.SpaceTable)
	assert(not self._namespace, "context can only begin once")
	const nSpace = self._runtime:LetNamespace(vLexStack:getNamespace(), vRegionNode)
	self._namespace = nSpace
	return self, nSpace.localExport, nSpace.globalExport
end

-- pack explist to termtuple or lazyfunc
function BaseStack:EXPRLIST_REPACK(
	vNode:clazz.IAstNode,
	vLazy:Boolean,
	l:List(Union(clazz.UTermTuple, clazz.UAutoTerm, Fn():Ret(clazz.UAutoTerm)))
):Ret(clazz.UTermTuple):Ret(Fn():Ret(clazz.UTermTuple))
	const nPackContext = self:newOperContext(vNode)
	local reFunc:OrNil(Fn():Ret(clazz.UTermTuple))
	const nLastIndex = #l
	const nLast = l[nLastIndex]
	if not nLast then
		reFunc = function()
			return nPackContext:FixedTermTuple({})
		end
	else
		const repackWithoutLast = function():Ret(List(clazz.UAutoTerm))
			const nTermList:List(clazz.UAutoTerm) = {}
			for i=1, #l-1 do
				const cur = l[i]
				if TermTuple.is(cur) then
					if #cur ~= 1 then
						-- self._runtime:nodeWarn(vNode, "tuple expect 1 value but get "..#cur)
					end
					nTermList[i] = cur:get(nPackContext, 1)
				elseif RefineTerm.is(cur) or AutoHolder.is(cur) then
					nTermList[i] = cur
				elseif type(cur) == "function" then
					nTermList[i] = cur()
				else
					error("unexcept branch")
				end
			end
			return nTermList
		end
		-- force cast
		if TermTuple.is(nLast) then
			reFunc = function()
				return nPackContext:UTermTupleByAppend(repackWithoutLast(), nLast)
			end
		else
			reFunc = function()
				const nTermList = repackWithoutLast()
				if RefineTerm.is(nLast) or AutoHolder.is(nLast) then
					nTermList[#nTermList + 1] = nLast
				elseif type(nLast) == "function" then
					nTermList[#nTermList + 1] = nLast()
				else
					error("unexcept branch")
				end
				return nPackContext:UTermTupleByAppend(nTermList, false)
			end
		end
	end
	if vLazy then
		return reFunc
	else
		return reFunc()
	end
end

-- unpack explist to vNum term | termtuple
function BaseStack:EXPRLIST_UNPACK(
	vNode:clazz.IAstNode,
	vNum:Number,
	...:Union(clazz.RefineTerm, clazz.FixedTermTuple)
):RetDots(clazz.RefineTerm)
	const nUnpackContext = self:newOperContext(vNode)
	const l:List(Union(clazz.RefineTerm, clazz.FixedTermTuple)) = {...}
	const re:List(clazz.RefineTerm) = {}
	for i=1, vNum do
		if i > #l then
			local last = l[#l]
			if TermTuple.is(last) then
				local value = last:get(nUnpackContext, i - #l + 1)
				if not value then
					self._runtime:nodeError(vNode, "exprlist_unpack but right tuple value not enough")
					re[i] = nUnpackContext:RefineTerm(self._manager.type.Nil)
				else
					re[i] = value
				end
			else
				self._runtime:nodeError(vNode, "exprlist_unpack but right value not enough")
				re[i] = nUnpackContext:RefineTerm(self._manager.type.Nil)
			end
		else
			local cur = l[i]
			if TermTuple.is(cur) then
				if (i < #l and #cur ~= 1) then
					self._runtime:nodeWarn(vNode, "exprlist_unpack except 1 value but has "..#cur)
				end
				re[i] = cur:get(nUnpackContext, 1)
			else
				re[i] = cur
			end
		end
	end
	return table.unpack(re)
end

-- meta items
function BaseStack:META_GET(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vNotnil:Boolean
):Ret(clazz.RefineTerm)
	const nGetContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vSelfTerm:foreach(function(vType, vVariableCase)
		vKeyTerm:foreach(function(vKeyType, vKeyVariableCase)
			local nReType = vType:meta_get(nGetContext, vKeyType)
			if vNotnil then
				nReType = nReType:notnilType()
			end
			nTypeCaseList[#nTypeCaseList + 1] = {nReType, vVariableCase & vKeyVariableCase}
		end)
	end)
	return nGetContext:mergeToRefineTerm(nTypeCaseList)
end

function BaseStack:META_SET(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vValueTerm:clazz.RefineTerm
)
	const nSetContext = self:newOperContext(vNode)
	self:nodePcall(vNode, function()
		local nNil = self._manager.type.Nil
		vSelfTerm:foreach(function(vType, _)
			vKeyTerm:foreach(function(vKeyType, _)
				vType:meta_set(nSetContext, vKeyType, vValueTerm:getType())
			end)
		end)
	end)
end

function BaseStack:META_CALL(
	vNode:clazz.IAstNode,
	vFuncTerm:clazz.RefineTerm,
	vLazyFunc:Fn():Ret(clazz.UTermTuple)
):Ret(clazz.UTermTuple)
	const nNil = self._manager.type.Nil
	const nCallContext = self:newApplyContext(vNode)
	vFuncTerm:foreach(function(vFuncType, vVariableCase)
		local nArgTermTuple:OrNil(clazz.UTermTuple) = nil
		self:withBranch(vVariableCase, function()
			nArgTermTuple = vLazyFunc()
		end)
		assert(nArgTermTuple, "must be true here")
		if vFuncType == nNil then
			self._runtime:nodeWarn(vNode, "nil as call func")
		elseif BaseFunction.is(vFuncType) or Truth.is(vFuncType) then
			nCallContext:applyCall(vFuncType, nArgTermTuple, vVariableCase)
		else
			self._runtime:nodeError(vNode, "TODO call by a not-function value, type="..tostring(vFuncType))
		end
	end)
	return nCallContext:mergeReturn()
end

function BaseStack:META_INVOKE(
	vNode:clazz.IAstNode,
	vSelfTerm:clazz.RefineTerm,
	vName:String,
	vPolyArgs:List(clazz.UAllType),
	vArgTuple:clazz.FixedTermTuple
):Ret(clazz.UTermTuple)
	assert(vPolyArgs, "poly args can't be nil here")
	const nInvokeContext = self:newApplyContext(vNode)
	const nNil = self._manager.type.Nil
	vSelfTerm:foreach(function(vSelfType, vVariableCase)
		if vSelfType == nNil then
			self._runtime:nodeWarn(vNode, "nil as invoke self")
		else
			const nNewArgTuple = nInvokeContext:UTermTupleByAppend({nInvokeContext:RefineTerm(vSelfType)}, vArgTuple)
			const nFuncType = vSelfType:meta_get_invoke(nInvokeContext, self._manager:Literal(vName))
			nFuncType:foreach(function(vSingleFuncType)
				if vSingleFuncType == nNil then
					self._runtime:nodeWarn(vNode, "nil as invoke func")
				elseif Truth.is(vSingleFuncType) or BaseFunction.is(vSingleFuncType) then
					nInvokeContext:applyInvoke(vSingleFuncType, nNewArgTuple, vVariableCase, vPolyArgs, vSelfType)
				else
					self._runtime:nodeError(vNode, "TODO non-function-call TODO"..tostring(vSingleFuncType))
				end
			end)
		end
	end)
	return nInvokeContext:mergeReturn()
end

function BaseStack:META_EQ_NE(
	vNode:clazz.IAstNode,
	vIsEq:Boolean,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nCmpContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
		vRightTerm:foreach(function(vRightType, vRightVariableCase)
			local nReType:OrNil(clazz.UAtomUnion) = nil
			if vLeftType:isSingleton() and vRightType:isSingleton() then
				-- TODO check for named type
				const nTypeIsEq = vLeftType == vRightType
				if vIsEq == nTypeIsEq then
					nReType = self._manager.type.True
				else
					nReType = self._manager.type.False
				end
			elseif not (vLeftType & vRightType):isNever() then
				nReType = self._manager.type.Boolean:checkAtomUnion()
			else
				if vIsEq then
					nReType = self._manager.type.False
				else
					nReType = self._manager.type.True
				end
			end
			nTypeCaseList[#nTypeCaseList + 1] = {nReType, vLeftVariableCase & vRightVariableCase}
		end)
	end)
	return nCmpContext:mergeToRefineTerm(nTypeCaseList)
end

function BaseStack:META_BOP_SOME(
	vNode:clazz.IAstNode,
	vOper:String,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nBopContext = self:newOperContext(vNode)
	const nCollection = self._manager:TypeCollection()
	vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
		const nLeftHigh, nLeftFunc = vLeftType:meta_bop_func(nBopContext, vOper)
		if nLeftHigh then
			const nRightType = vRightTerm:getType()
			const nTermTuple = nBopContext:FixedTermTuple({
				vLeftTerm:filter(nBopContext, vLeftType), vRightTerm
			})
			const nRetTuples = nLeftFunc:meta_call(nBopContext, nTermTuple)
			nCollection:put(nRetTuples:getFirstType())
		else
			vRightTerm:foreach(function(vRightType, vRightVariableCase)
				const nRightHigh, nRightFunc = vRightType:meta_bop_func(nBopContext, vOper)
				if nRightHigh then
					const nTermTuple = nBopContext:FixedTermTuple({
						vLeftTerm:filter(nBopContext, vLeftType),
						vRightTerm:filter(nBopContext, vRightType)
					})
					const nRetTuples = nRightFunc:meta_call(nBopContext, nTermTuple)
					nCollection:put(nRetTuples:getFirstType())
				else
					if nLeftFunc and nRightFunc and nLeftFunc == nRightFunc then
						const nTermTuple = nBopContext:FixedTermTuple({
							vLeftTerm:filter(nBopContext, vLeftType),
							vRightTerm:filter(nBopContext, vRightType)
						})
						const nRetTuples = nLeftFunc:meta_call(nBopContext, nTermTuple)
						nCollection:put(nRetTuples:getFirstType())
					else
						self._runtime:nodeError(vNode, "invalid bop:"..vOper)
					end
				end
			end)
		end
	end)
	return nBopContext:RefineTerm(nCollection:mergeToAtomUnion())
end

function BaseStack:META_UOP(
	vNode:clazz.IAstNode,
	vOper:String,
	vData:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nUopContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	if vOper == "#" then
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_len(nUopContext),
				vVariableCase
			}
		end)
	else
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_uop_some(nUopContext, vOper),
				vVariableCase
			}
		end)
	end
	return nUopContext:mergeToRefineTerm(nTypeCaseList)
end

function.open BaseStack:nodePcall(vNode:clazz.IAstNode, vFunc, ...)
	const ok, err = xpcall(vFunc, function(exc:Union(String, clazz.Exception)):Ret(clazz.Exception)
		if Exception.is(exc) then
			return exc
		else
			print("[ERROR] "..tostring(vNode), tostring(exc))
			print(debug.traceback())
			return Exception.new("[FATAL]"..tostring(exc), vNode)
		end
	end, ...)
	if not ok then
		error(err)
	end
	return ok, err
end

function BaseStack:CHUNK_TYPE(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm):Ret(clazz.UAtomUnion)
	return vTerm:getType()
end

function BaseStack:FUNC_NEW(vNode:clazz.IAstNode,
	vFnNewInfo:clazz.FuncNewInfo,
	vPrefixHint:clazz.TLongHintInfo(clazz.FnPrefixHint),
	vParRetMaker:clazz.GenMaker
):Ret(clazz.RefineTerm)
	const nUpValueCase = self:topBranch():getCase()
	const nFnType = FunctionBuilder.new(self, vNode, nUpValueCase, vFnNewInfo, vPrefixHint, vParRetMaker):build()
	return self:nodeRefineTerm(vNode, nFnType)
end

(@let.PairMaker = import("thlua.builder.TableBuilder").PairMaker)
function BaseStack:TABLE_NEW(vNode:clazz.IAstNode, vHintInfo:clazz.TLongHintInfo(clazz.TableLongHint), vPairMaker:PairMaker):Ret(clazz.RefineTerm)
	local nBuilder = TableBuilder.new(self, vNode, vHintInfo, vPairMaker)
	const nTableType = nBuilder:build()
	return self:nodeRefineTerm(vNode, nTableType)
end

function BaseStack:EVAL(vNode:clazz.IAstNode, vTerm:Truth):Ret(clazz.UAtomUnion)
	if RefineTerm.is(vTerm) then
		return vTerm:getType()
	else
		self:getRuntime():nodeError(vNode, "hint eval fail")
		error("hint eval fail")
	end
end

function BaseStack:CAST_HINT(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vCastKind:node.CastKindEnum, ...:Any):Ret(clazz.RefineTerm)
	const nCastContext = self:newOperContext(vNode)
	-- TODO check cast valid
	if vCastKind == Enum.CastKind_POLY then
		const nTypeCaseList:List(clazz.TypeCasePair) = {}
		const nTemplateList:List(clazz.UAllType) = self._manager:easyToTypeList(...)
		vTerm:foreach(function(vType, vVariableCase)
			const nAfterType = vType:castPoly(nCastContext, nTemplateList)
			if nAfterType then
				nTypeCaseList[#nTypeCaseList + 1] = {nAfterType, vVariableCase}
			else
				nTypeCaseList[#nTypeCaseList + 1] = {vType, vVariableCase}
			end
		end)
		return nCastContext:mergeToRefineTerm(nTypeCaseList)
	else
		if not vCastKind then
			vContext:error("unexcepted castkind:"..tostring(vCastKind))
		end
		const nDst = assert(..., "hint type can't be nil")
		const nDstType = self._manager:easyToType(nDst)
		if not nDstType:includeAll(vTerm:getType()) then
			-- self:getRuntime():nodeError(vNode, "@ cast fail")
		end
		return nCastContext:RefineTerm(nDstType)
	end
end

function BaseStack:newAutoFunction(vNode:clazz.IAstNode, vUpValueCase:OrFalse(clazz.VariableCase)):Ret(clazz.AutoFunction)
	const nAutoFn = AutoFunction.new(self._manager, vNode, self, vUpValueCase)
	self:getSealStack():recordAutoFunction(nAutoFn)
	return nAutoFn
end

function BaseStack:newClassFactory(vNode:clazz.IAstNode, vUpValueCase:OrFalse(clazz.VariableCase)):Ret(clazz.ClassFactory)
	const nFactory = ClassFactory.new(self._manager, vNode, self, vUpValueCase)
	self:getSealStack():recordClassFactory(nFactory)
	return nFactory
end

function BaseStack:newOpenFunction(vNode:clazz.IAstNode, vUpValueCase:OrNil(False, clazz.VariableCase)):Ret(clazz.OpenFunction)
	const nOpenFn = OpenFunction.new(self._manager, vNode, self, vUpValueCase)
	return nOpenFn
end

function BaseStack:newApplyContext(vNode:clazz.IAstNode):Ret(clazz.ApplyContext)
	return ApplyContext.new(vNode, self, self._manager)
end

function BaseStack:newLogicContext(vNode:clazz.IAstNode):Ret(clazz.LogicContext)
	return LogicContext.new(vNode, self, self._manager)
end

function BaseStack:newOperContext(vNode:clazz.IAstNode):Ret(clazz.OperContext)
	return OperContext.new(vNode, self, self._manager)
end

function.pass BaseStack:getSealStack():Ret(clazz.SealStack)
	error("getSealStack not implement in BaseStack")
end

function BaseStack:seal()
end

function BaseStack:NIL_TERM(vNode:clazz.IAstNode)
	return self:nodeRefineTerm(vNode, self._manager.type.Nil)
end

function BaseStack:LITERAL_TERM(vNode:clazz.IAstNode, vValue:Union(String, Number, Boolean))
	const nType = self._manager:Literal(vValue)
	return self:nodeRefineTerm(vNode, nType)
end

function BaseStack:nodeRefineTerm(vNode:clazz.IAstNode, vType:clazz.UAllType)
	return RefineTerm.new(vNode, vType:checkAtomUnion())
end

function BaseStack:getHeadContext():Ret(clazz.OperContext)
	return self._headContext
end

function BaseStack:getTailContext():Ret(clazz.OperContext)
	return self._tailContext
end

function BaseStack:getNamespace():Ret(clazz.Namespace)
	local nSpace = self._namespace
	return assert(nSpace, "space is false when get")
end

function BaseStack:error(...:Truth)
	self._runtime:nodeError(self._node, ...)
end

function BaseStack:warn(...:Truth)
	self._runtime:nodeWarn(self._node, ...)
end

function BaseStack:info(...:Truth)
	self._runtime:nodeInfo(self._node, ...)
end

function BaseStack:getNode():Ret(clazz.IAstNode)
	return self._node
end

function BaseStack:getRuntime():Ret(clazz.Runtime)
	return self._runtime
end

function BaseStack:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

--

function BaseStack:withBranch(vVariableCase:clazz.VariableCase, vFunc:Fn()):Ret(clazz.Branch)
	const nStack = self._branchStack
	const nNewLen = #nStack + 1
	const nOldBranch = self._curBranch
	const nNewBranch = Branch.new(self, nOldBranch, vVariableCase)
	nStack[nNewLen] = nNewBranch
	self._curBranch = nNewBranch
	vFunc()
	nStack[nNewLen] = nil
	self._curBranch = nOldBranch
	return nNewBranch
end

function BaseStack:topBranch():Ret(clazz.Branch)
	return self._curBranch
end

function BaseStack:SYMBOL_SET(vNode:clazz.IAstNode, vSymbol:clazz.LocalSymbol, vTerm:clazz.RefineTerm)
	assert(not AutoHolder.is(vSymbol), "auto symbol can't set"..tostring(vNode))
	assert(not ImmutVariable.is(vSymbol), "immutable symbol can't set"..tostring(vNode))
	const nSymbolContext = self:newOperContext(vNode)
	self:topBranch():mutSet(nSymbolContext, vSymbol, vTerm)
end

function BaseStack:SYMBOL_GET(vNode:clazz.IAstNode, vSymbol:clazz.USymbol, vAllowAuto:Boolean):Ret(clazz.UAutoTerm)
	const nSymbolContext = self:newOperContext(vNode)
	const nBranch = self:topBranch()
	if LocalSymbol.is(vSymbol) then
		return nBranch:mutGet(nSymbolContext, vSymbol)
	elseif ImmutVariable.is(vSymbol) then
		return nBranch:immutGet(nSymbolContext, vSymbol)
	else
		const nTerm = vSymbol:getRefineTerm()
		if nTerm then
			return nBranch:immutGet(nSymbolContext, nTerm:attachImmutVariable())
		else
			if not vAllowAuto then
				error(Exception.new("auto term can't be used when it's undeduced", vNode))
			else
				return vSymbol
			end
		end
	end
end

function BaseStack:PARAM_PACKOUT(
	vNode:clazz.IAstNode,
	vList:List(clazz.UAutoTerm),
	vDots:OrFalse(clazz.UTermTuple)
):Ret(clazz.UTermTuple)
	return self._headContext:UTermTupleByAppend(vList, vDots)
end

function BaseStack:PARAM_UNPACK(
	vNode:clazz.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vIndex:Integer,
	vHintType:Union(clazz.AutoFlag, clazz.UAllType)
):Ret(clazz.UAutoTerm)
	const nHeadContext = self._headContext
	if vHintType == AutoFlag then
		if vTermTuple then
			return vTermTuple:get(nHeadContext, vIndex)
		else
			return AutoHolder.new(nHeadContext)
		end
	else
		if vTermTuple then
			const nAutoTerm = vTermTuple:get(nHeadContext, vIndex)
			if not nAutoTerm:getType() then
				nAutoTerm:setAutoCastType(nHeadContext, vHintType)
			end
		end
		-- TODO check type match here...
		return nHeadContext:RefineTerm(vHintType)
	end
end

function BaseStack:PARAM_NODOTS_UNPACK(
	vNode:clazz.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer
)
	if vTermTuple then
		self._headContext:matchParToDots(vNode, vTermTuple, vParNum, false)
	end
end

function BaseStack:PARAM_DOTS_UNPACK(
	vNode:clazz.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer,
	vHintDots:Union(clazz.AutoFlag, clazz.UAllType)
):Ret(OrFalse(clazz.UTermTuple))
	if vTermTuple then
		return self._headContext:matchParToDots(vNode, vTermTuple, vParNum, vHintDots)
	else
		if vHintDots == AutoFlag then
			return self._headContext:UTermTupleByTail({}, AutoTail.new(self._headContext))
		else
			return self._headContext:UTermTupleByTail({}, DotsTail.new(self._headContext, vHintDots))
		end
	end
end

function BaseStack:SYMBOL_NEW(vNode:clazz.IAstNode, vKind:node.SymbolKindEnum, vModify:Boolean, vTerm:OrNil(clazz.UAutoTerm), vHintType:OrNil(clazz.UAllType)):Ret(clazz.USymbol)
	const nSymbolContext = self:newOperContext(vNode)
	if AutoHolder.is(vTerm) then
		const nAutoRefineTerm = vTerm:getRefineTerm()
		if not nAutoRefineTerm then
			if vKind ~= Enum.SymbolKind_PARAM then
				error(Exception.new("undeduced auto variable can't be assigned to other variable", vNode))
			end
			return vTerm
		else
			vTerm = nAutoRefineTerm
		end
	end
	if not vTerm then
		vTerm = nSymbolContext:NilTerm()
	end
	if vHintType then
		local nSrcType = vTerm:getType()
		if not nSymbolContext:castLuaType(nSrcType, vHintType) then
			if not vHintType:includeAll(nSrcType) then
				nSymbolContext:error("symbol init but type not match")
			end
		end
		vTerm = nSymbolContext:RefineTerm(vHintType)
	else
		-- convert string literal to string, number literal to number, boolean literal to boolean
		if vModify and vKind == Enum.SymbolKind_LOCAL then
			const nFromType = vTerm:getType()
			const nToType = nSymbolContext:getTypeManager():literal2Primitive(nFromType)
			if nFromType ~= nToType then
				vTerm = nSymbolContext:RefineTerm(nToType)
			end
		end
		nSymbolContext:getTypeManager():basingByDefault(vTerm:getType())
	end
	const nImmutVariable = vTerm:attachImmutVariable()
	if vModify then
		local nLocalSymbol = LocalSymbol.new(nSymbolContext, vNode, vTerm:getType(), vTerm)
		self:getRuntime():recordSymbol(nLocalSymbol)
		self:topBranch():mutMark(nLocalSymbol, nImmutVariable)
		return nLocalSymbol
	else
		nImmutVariable:setNode(vNode)
		return nImmutVariable
	end
end

function BaseStack:IF(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vTrueFunction:Fn(), vFalseFunction:OrNil(Fn()))
	const nIfContext = self:newOperContext(vNode)
	const nTrueCase = vTerm:caseTrue()
	const nFalseCase = vTerm:caseFalse()
	const nBeforeBranch = self:topBranch()
	if nTrueCase then
		const nTrueBranch = self:withBranch(nTrueCase, function()
			vTrueFunction()
		end)
		if nFalseCase and vFalseFunction then
			const nFalseBranch = self:withBranch(nFalseCase, function()
				vFalseFunction()
			end)
			nBeforeBranch:mergeTwoBranch(nIfContext, nTrueBranch, nFalseBranch)
		else
			nBeforeBranch:mergeOneBranch(nIfContext, nTrueBranch, nFalseCase)
		end
	elseif nFalseCase and vFalseFunction then
		const nFalseBranch = self:withBranch(nFalseCase, function()
			vFalseFunction()
		end)
		nBeforeBranch:mergeOneBranch(nIfContext, nFalseBranch, nTrueCase)
	end
end

function BaseStack:WHILE(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vTrueFunction:Fn())
	const nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:withBranch(nTrueCase, function()
			vTrueFunction()
		end)
	else
		self:getRuntime():nodeWarn(vNode, "while loop is unreachable scope")
	end
end

function BaseStack:DO(vNode:clazz.IAstNode, vHintInfo:clazz.TLongHintInfo(Nil), vDoFunc:Fn())
	const nBuilder = DoBuilder.new(self, vNode)
	nBuilder:build(vHintInfo)
	if not nBuilder.pass then
		vDoFunc()
	end
end

function BaseStack:FOR_IN(vNode:clazz.IAstNode, vFunc:Fn(clazz.FixedTermTuple), vNextSelfInit:clazz.FixedTermTuple)
	const nForContext = self:newOperContext(vNode)
	const nLenNext = #vNextSelfInit
	if nLenNext < 1 or nLenNext > 3 then
		nForContext:error("FOR_IN iterator error, arguments number must be 1 or 2 or 3")
		return
	end
	const nNext = vNextSelfInit:get(nForContext, 1)
	const nTuple = self:META_CALL(vNode, nNext, function ()
		if nLenNext == 1 then
			return nForContext:FixedTermTuple({})
		else
			const nSelf = vNextSelfInit:get(nForContext, 2)
			if nLenNext == 2 then
				return nForContext:FixedTermTuple({nSelf})
			else
				if nLenNext == 3 then
					const nInit = vNextSelfInit:get(nForContext, 3)
					return nForContext:FixedTermTuple({nSelf, nInit})
				else
					error("NextSelfInit tuple must be 3, this branch is impossible")
				end
			end
		end
	end)
	if #nTuple <= 0 then
		self:getRuntime():nodeError(vNode, "FOR_IN must receive at least 1 value when iterator")
		return
	end
	assert(TermTuple.isFixed(nTuple), "iter func can't return auto term")
	local nFirstTerm = nTuple:get(nForContext, 1)
	const nFirstType = nFirstTerm:getType()
	if not nFirstType:isNilable() then
		self:getRuntime():nodeError(vNode, "FOR_IN must receive nilable type, TODO : still run logic?? ")
		return
	end
	if nFirstType:notnilType():isNever() then
		return
	end
	nFirstTerm:foreach(function(vAtomType, vCase)
		if vAtomType:isNilable() then
			return
		end
		const nTermList:List(clazz.RefineTerm) = {nForContext:RefineTerm(vAtomType)}
		--[[for i=2, #nTuple do
			nTermList[i] = nTuple:get(i)
		end]]
		for i=2, #nTuple do
			local nTerm = nTuple:get(nForContext, i)
			const nType = vCase[nTerm:attachImmutVariable()]
			if nType then
				nTerm = nForContext:RefineTerm(nType)
			end
			nTermList[i] = nTerm
		end
		local nNewTuple = nForContext:FixedTermTuple(nTermList)
		self:withBranch(vCase, function()
			vFunc(nNewTuple)
		end)
	end)
end

function BaseStack:FOR_NUM(
	vNode:clazz.IAstNode,
	vStart:clazz.RefineTerm,
	vStop:clazz.RefineTerm,
	vStepOrNil:OrNil(clazz.RefineTerm),
	vFunc:Fn(clazz.RefineTerm)
)
	const nForContext = self:newOperContext(vNode)
	vFunc(nForContext:RefineTerm(self:getTypeManager().type.Integer))
end

function BaseStack:LOGIC_OR(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	const nOrContext = self:newLogicContext(vNode)
	const nLeftTrueTerm = nOrContext:logicTrueTerm(vLeftTerm)
	const nLeftFalseCase = vLeftTerm:caseFalse()
	if not nLeftFalseCase then
		return nLeftTrueTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:withBranch(nLeftFalseCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		return nOrContext:logicCombineTerm(nLeftTrueTerm, nRightTerm, nLeftFalseCase)
	end
end

function BaseStack:LOGIC_AND(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	const nAndContext = self:newLogicContext(vNode)
	const nLeftFalseTerm = nAndContext:logicFalseTerm(vLeftTerm)
	const nLeftTrueCase = vLeftTerm:caseTrue()
	if not nLeftTrueCase then
		return nLeftFalseTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:withBranch(nLeftTrueCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		return nAndContext:logicCombineTerm(nLeftFalseTerm, nRightTerm, nLeftTrueCase)
	end
end

function BaseStack:LOGIC_NOT(vNode:clazz.IAstNode, vData:clazz.RefineTerm):Ret(clazz.RefineTerm)
	const nNotContext = self:newLogicContext(vNode)
	return nNotContext:logicNotTerm(vData)
end

function BaseStack:nativeError()
	self:topBranch():setStop()
end

function BaseStack:nativeAssert(vTerm:clazz.RefineTerm)
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:topBranch():assertCase(nTrueCase)
	end
end

function BaseStack:BREAK(vNode:clazz.IAstNode)
	self:topBranch():setStop()
end

function BaseStack:_bodyReturn(vNode:clazz.IAstNode, vTypeTuple:clazz.UTypeTuple)
	const nRetContext = self:newOperContext(vNode)
	const nBodyFn = assert(self._bodyFn)
	if AutoFunction.is(nBodyFn) then
		local nOneOkay = false
		local nRetTuples = nBodyFn:getRetTuples()
		if nRetTuples then
			nRetTuples:foreachWithFirst(function(vDstTuple, _)
				if vTypeTuple:castOrIn(nRetContext, vDstTuple) then
					nOneOkay = true
				end
			end)
			if not nOneOkay then
				nRetContext:error("return check failed")
			end
		else
			-- error("auto return TODO")
		end
	elseif ClassFactory.is(nBodyFn) then
		const nResultType = nBodyFn:getClassAwait()
		if nResultType ~= vTypeTuple:get(1):checkAtomUnion() or #vTypeTuple ~= 1 or vTypeTuple:getRepeatType() then
			nRetContext:error("class return check failed")
		end
	end
end

function BaseStack:_bodyEnd(vNode:clazz.IAstNode, vTermTupleList:List(clazz.FixedTermTuple)):Ret(clazz.FixedTermTuple)
	const nBodyFn = assert(self._bodyFn)
	if OpenFunction.is(nBodyFn) or (AutoFunction.is(nBodyFn) and not nBodyFn:getRetTuples()) then
		local nLen = #vTermTupleList
		if nLen == 0 then
			return self._tailContext:FixedTermTuple({})
		elseif nLen == 1 then
			return vTermTupleList[1]!
		else
			error("TODO : open-function or auto-return-function has more than one return")
			--[[
			local retTermTuple = vTermTupleList[1]!
			for i=2,nLen do
				retTermTuple = retTermTuple | vTermTupleList[i]!
			end
			return retTermTuple]]
		end
	end
	return self._tailContext:FixedTermTuple({})
end

function BaseStack:RETURN(vNode:clazz.IAstNode, vTermTuple:clazz.FixedTermTuple)
	const nRetContext = self:newOperContext(vNode)
	table.insert(self._retList, vTermTuple)
	if #vTermTuple <= 0 or vTermTuple:getTail() then
		self:_bodyReturn(vNode, vTermTuple:checkTypeTuple())
	else
		const nManager = self:getTypeManager()
		const nFirstTerm = vTermTuple:get(nRetContext, 1)
		nFirstTerm:foreach(function(vAtomType, vCase)
			const nTypeList:List(clazz.UAtomUnion) = {vAtomType}
			for i=2, #vTermTuple do
				local nTerm = vTermTuple:get(nRetContext, i)
				const nType = vCase[nTerm:attachImmutVariable()]
				if not nType then
					nTypeList[i] = nTerm:getType()
				else
					nTypeList[i] = assert(nTerm:getType():safeIntersect(nType), "unexcepted intersect when return")
				end
			end
			const nTypeTuple = nManager:TypeTuple(vNode, table.unpack(nTypeList))
			self:_bodyReturn(vNode, nTypeTuple)
		end)
	end
	self:topBranch():setStop()
end

function BaseStack:RUN_AFTER_IF(vNode:clazz.IAstNode, vFunc:Fn())
	if self:topBranch():getStop() then
		self:getRuntime():nodeError(vNode, "unreachable code")
	end
	vFunc()
end

function BaseStack:END(vNode:clazz.IAstNode):Ret(clazz.FixedTermTuple)
	local re = self:_bodyEnd(vNode, self._retList)
	self:getNamespace():close()
	self:seal()
	return re
end

return BaseStack
