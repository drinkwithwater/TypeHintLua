
const DoBuilder = require "thlua.builder.DoBuilder"
const Branch = require "thlua.runtime.Branch"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoFlag = require "thlua.auto.AutoFlag"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const Node = require "thlua.code.Node"
const LocalSymbol = require "thlua.term.LocalSymbol"
const ImmutVariable = require "thlua.term.ImmutVariable"

const ClassFactory = require "thlua.func.ClassFactory"
const AutoFunction = require "thlua.func.AutoFunction"
const OpenFunction = require "thlua.func.OpenFunction"
const BaseFunction = require "thlua.func.BaseFunction"
const BaseTable = require "thlua.object.BaseTable"
const MetaObject = require "thlua.object.MetaObject"
const Truth = require "thlua.type.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"
const class = require "thlua.class"

const OperContext = require "thlua.context.OperContext"
const ApplyContext = require "thlua.context.ApplyContext"
const LogicContext = require "thlua.context.LogicContext"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

const BaseStack = class@<clazz.BaseStack, false>()

function.open BaseStack:ctor(
	vRuntime:clazz.Runtime,
	vNode:clazz.IAstNode,
	vUpValueCase:OrFalse(clazz.VariableCase),
	...
)
	const nManager = vRuntime:getTypeManager()
	self._runtime=vRuntime
	self._manager=nManager
	self._node=vNode
	self._namespace=false@OrFalse(clazz.Namespace)
	self._headContext=OperContext.new(vNode, self, nManager)
	self._tailContext=OperContext.new(vNode, self, nManager)
	const nRootBranch = Branch.new(self, vUpValueCase or VariableCase.new())
	self._curBranch=nRootBranch
	self._branchStack={self._curBranch}@List(clazz.Branch)
	self._bodyFn=nil@clazz.UBodyFunction
	self._retList={} @ List(clazz.FixedTermTuple)
end

function BaseStack:META_CALL(
	vNode:clazz.IAstNode,
	vFuncTerm:clazz.RefineTerm,
	vLazyFunc:Fn():Ret(clazz.UTermTuple)
):Ret(clazz.UTermTuple)
	const nNil = self._manager.type.Nil
	const nCallContext = self:newApplyContext(vNode)
	vFuncTerm:foreach(function(vFuncType, vVariableCase)
		local nArgTermTuple:OrNil(clazz.UTermTuple) = nil
		self:_withBranch(vVariableCase, function()
			nArgTermTuple = vLazyFunc()
		end)
		assert(nArgTermTuple, "must be true here")
		if vFuncType == nNil then
			self._runtime:nodeWarn(vNode, "nil as call func")
		elseif BaseFunction.is(vFuncType) or Truth.is(vFuncType) then
			nCallContext:applyCall(vFuncType, nArgTermTuple, vVariableCase)
		else
			self._runtime:nodeError(vNode, "TODO call by a not-function value, type="..tostring(vFuncType))
		end
	end)
	return nCallContext:mergeReturn()
end

--[[function.open BaseStack:nodePcall(vNode:clazz.IAstNode, vFunc, ...)
	const ok, err = xpcall(vFunc, function(exc:Union(String, clazz.Exception)):Ret(clazz.Exception)
		if Exception.is(exc) then
			return exc
		else
			print("[ERROR] "..tostring(vNode), tostring(exc))
			print(debug.traceback())
			return Exception.new("[FATAL]"..tostring(exc), vNode)
		end
	end, ...)
	if not ok then
		error(err)
	end
	return ok, err
end]]

function BaseStack:getClassTable():Ret(OrFalse(clazz.ClassTable))
	return self:getSealStack():getClassTable()
end

function BaseStack:newAutoFunction(vNode:clazz.IAstNode, ...):Ret(clazz.AutoFunction)
	const nAutoFn = AutoFunction.new(self._manager, vNode, self, ...)
	self:getSealStack():recordAutoFunction(nAutoFn)
	return nAutoFn
end

function BaseStack:newClassFactory(vNode:clazz.IAstNode, ...):Ret(clazz.ClassFactory)
	const nFactory = ClassFactory.new(self._manager, vNode, self, ...)
	self:getSealStack():recordClassFactory(nFactory)
	return nFactory
end

function BaseStack:newOpenFunction(vNode:clazz.IAstNode, vUpValueCase:OrNil(False, clazz.VariableCase)):Ret(clazz.OpenFunction)
	const nOpenFn = OpenFunction.new(self._manager, vNode, self, vUpValueCase)
	return nOpenFn
end

function BaseStack:newApplyContext(vNode:clazz.IAstNode):Ret(clazz.ApplyContext)
	return ApplyContext.new(vNode, self, self._manager)
end

function BaseStack:newLogicContext(vNode:clazz.IAstNode):Ret(clazz.LogicContext)
	return LogicContext.new(vNode, self, self._manager)
end

function BaseStack:newOperContext(vNode:clazz.IAstNode):Ret(clazz.OperContext)
	return OperContext.new(vNode, self, self._manager)
end

function.pass BaseStack:getSealStack():Ret(clazz.SealStack)
	error("getSealStack not implement in BaseStack")
end

function BaseStack:seal()
end

function BaseStack:_nodeTerm(vNode:clazz.IAstNode, vType:clazz.UAllType)
	return RefineTerm.new(vNode, vType:checkAtomUnion())
end

function BaseStack:getHeadContext():Ret(clazz.OperContext)
	return self._headContext
end

function BaseStack:getTailContext():Ret(clazz.OperContext)
	return self._tailContext
end

function BaseStack:getNamespace():Ret(clazz.Namespace)
	local nSpace = self._namespace
	return assert(nSpace, "space is false when get")
end

function BaseStack:error(...:Truth)
	self._runtime:nodeError(self._node, ...)
end

function BaseStack:warn(...:Truth)
	self._runtime:nodeWarn(self._node, ...)
end

function BaseStack:info(...:Truth)
	self._runtime:nodeInfo(self._node, ...)
end

function BaseStack:getNode():Ret(clazz.IAstNode)
	return self._node
end

function BaseStack:getRuntime():Ret(clazz.Runtime)
	return self._runtime
end

function BaseStack:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function BaseStack:_withBranch(vVariableCase:clazz.VariableCase, vFunc:Fn()):Ret(clazz.Branch)
	const nStack = self._branchStack
	const nNewLen = #nStack + 1
	const nOldBranch = self._curBranch
	const nNewBranch = Branch.new(self, vVariableCase, nOldBranch)
	nStack[nNewLen] = nNewBranch
	self._curBranch = nNewBranch
	vFunc()
	nStack[nNewLen] = nil
	self._curBranch = nOldBranch
	return nNewBranch
end

function BaseStack:_topBranch():Ret(clazz.Branch)
	return self._curBranch
end

function BaseStack:nativeError()
	self:_topBranch():setStop()
end

function BaseStack:nativeAssert(vTerm:clazz.RefineTerm)
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:_topBranch():assertCase(nTrueCase)
	end
end

function BaseStack:_bodyReturn(vNode:clazz.IAstNode, vTypeTuple:clazz.UTypeTuple)
	const nRetContext = self:newOperContext(vNode)
	const nBodyFn = self._bodyFn
	if AutoFunction.is(nBodyFn) then
		local nOneOkay = false
		local nRetTuples = nBodyFn:getRetTuples()
		if nRetTuples then
			nRetTuples:foreachWithFirst(function(vDstTuple, _)
				if vTypeTuple:castOrIn(nRetContext, vDstTuple) then
					nOneOkay = true
				end
			end)
			if not nOneOkay then
				nRetContext:error("return check failed")
			end
		else
			-- error("auto return TODO")
		end
	elseif ClassFactory.is(nBodyFn) then
		const nResultType = nBodyFn:getClassTable(true)
		if nResultType ~= vTypeTuple:get(1):checkAtomUnion() or #vTypeTuple ~= 1 or vTypeTuple:getRepeatType() then
			nRetContext:error("class return check failed")
		end
	end
end

function BaseStack:_bodyEnd(vNode:clazz.IAstNode, vTermTupleList:List(clazz.FixedTermTuple)):Ret(clazz.FixedTermTuple)
	const nBodyFn = self._bodyFn
	if OpenFunction.is(nBodyFn) or (AutoFunction.is(nBodyFn) and not nBodyFn:getRetTuples()) then
		local nLen = #vTermTupleList
		if nLen == 0 then
			return self._tailContext:FixedTermTuple({})
		elseif nLen == 1 then
			return vTermTupleList[1]!
		else
			error("TODO : open-function or auto-return-function has more than one return")
			--[[
			local retTermTuple = vTermTupleList[1]!
			for i=2,nLen do
				retTermTuple = retTermTuple | vTermTupleList[i]!
			end
			return retTermTuple]]
		end
	end
	return self._tailContext:FixedTermTuple({})
end

return BaseStack
