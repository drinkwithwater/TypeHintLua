
const class = require@<let.clazz> "thlua.class"
const Node = require@<let.node> "thlua.code.Node"
const OpenTable = require "thlua.type.object.OpenTable"
const SealTable = require "thlua.type.object.SealTable"
const DoBuilder = require "thlua.builder.DoBuilder"
const Branch = require "thlua.runtime.Branch"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoFlag = require "thlua.auto.AutoFlag"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"
const Reference = require "thlua.space.NameReference"
const LocalSymbol = require "thlua.term.LocalSymbol"
const ImmutVariable = require "thlua.term.ImmutVariable"

const ClassFactory = require "thlua.type.func.ClassFactory"
const AutoFunction = require "thlua.type.func.AutoFunction"
const AutoTable = require "thlua.type.object.AutoTable"
const OpenFunction = require "thlua.type.func.OpenFunction"
const BaseFunction = require "thlua.type.func.BaseFunction"
const TypedObject = require "thlua.type.object.TypedObject"
const Truth = require "thlua.type.basic.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"

const OperContext = require "thlua.context.OperContext"
const ApplyContext = require "thlua.context.ApplyContext"
const ReturnContext = require "thlua.context.ReturnContext"
const AssignContext = require "thlua.context.AssignContext"
const MorePushContext = require "thlua.context.MorePushContext"
const OnePushContext = require "thlua.context.OnePushContext"
const NoPushContext = require "thlua.context.NoPushContext"
const LogicContext = require "thlua.context.LogicContext"

(@do

	clazz.LexCapture = Struct {
		branch=clazz.Branch,
		uvCase=clazz.VariableCase,
	}
end)

const BaseStack = class@<clazz.BaseStack, false>()

function BaseStack:__tostring()
	return "stack@"..tostring(self._node)
end

function.open BaseStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IBaseNode,
	vUpState:OrFalse(clazz.LexCapture),
	...
)
	const nManager = vRuntime:getTypeManager()
	self._runtime=vRuntime
	self._manager=nManager
	self._node=vNode
	self._letspace=false@OrFalse(clazz.LetSpace)
	self._headContext=AssignContext.new(vNode, self, nManager)
	self._fastOper=OperContext.new(vNode, self, nManager)
	self._lexCapture = vUpState
	const nTempBranch = Branch.new(self, vUpState and vUpState.uvCase or VariableCase.new(), vUpState and vUpState.branch or false)
	self._branchStack={nTempBranch}@List(clazz.Branch)
	self._bodyFn=nil@!clazz.UBodyFunction
	self._retList={} @ List(clazz.FixedTermTuple)
	self._polyDotsNum = 0 @ Integer
	self._polyDotsArgs = {} @ List(clazz.USpaceAny)
end

function BaseStack:RAISE_ERROR(vContext:clazz.OperContext, vType:clazz.UMustType)
	error("check error in OpenStack or SealStack")
end

function BaseStack:unpackPolyArgs()
	const nDotsNum = self._polyDotsNum
	if nDotsNum > 0 then
		return table.unpack(self._polyDotsArgs, 1, nDotsNum)
	else
		return
	end
end

function BaseStack:anyNodeMetaGet(vNode:clazz.IBaseNode, vSelfTerm:clazz.RefineTerm, vKeyTerm:clazz.RefineTerm, vNotnil:Boolean):Ret(clazz.RefineTerm)
	return self:withOnePushContext(vNode, function(vContext)
		vSelfTerm:foreach(function(vSelfType, vVariableCase)
			vKeyTerm:foreach(function(vKeyType, vKeyVariableCase)
				vContext:withCase(vVariableCase & vKeyVariableCase, function()
					if not vSelfType:meta_get(vContext, vKeyType) then
						if not OpenTable.is(vSelfType) then
							vContext:error("index error, key="..tostring(vKeyType))
						end
					end
				end)
			end)
		end)
	end, vNotnil):mergeFirst()
end

function BaseStack:prepareMetaCall(
	vNode:clazz.IBaseNode,
	vFuncTerm:clazz.RefineTerm,
	vLazyFunc:Fn():Ret(clazz.UTermTuple)
):Ret(clazz.MorePushContext)
	const nNil = self._manager.type.Nil
	return self:withMorePushContextWithCase(vNode, vFuncTerm, function(vContext, vFuncType, vCase)
		local nArgTermTuple:OrNil(clazz.UTermTuple) = nil
		self:_withBranch(vCase, function()
			nArgTermTuple = vLazyFunc()
		end)
		if vFuncType == nNil then
			vContext:error("nil as call func")
		elseif BaseFunction.is(vFuncType) or Truth.is(vFuncType) or SealTable.is(vFuncType) then
			vFuncType:meta_call(vContext, assert(nArgTermTuple))
		else
			vContext:error("TODO call by a non-function value, type="..tostring(vFuncType))
		end
	end)
end

--[[function.open BaseStack:nodePcall(vNode:clazz.IBaseNode, vFunc, ...)
	const ok, err = xpcall(vFunc, function(exc:Union(String, clazz.Exception)):Ret(clazz.Exception)
		if Exception.is(exc) then
			return exc
		else
			print("[ERROR] "..tostring(vNode), tostring(exc))
			print(debug.traceback())
			return Exception.new("[FATAL]"..tostring(exc), vNode)
		end
	end, ...)
	if not ok then
		error(err)
	end
	return ok, err
end]]

function BaseStack:getClassTable():Ret(OrFalse(clazz.ClassTable))
	return self:getSealStack():getClassTable()
end

function BaseStack:newAutoTable(vNode:Union(node.Table, node.Root)):Ret(clazz.AutoTable)
	const nAutoTable = AutoTable.new(self._manager, vNode, self)
	self:getSealStack():getBodyFn():saveAutoTable(nAutoTable)
	return nAutoTable
end

function BaseStack:newAutoFunction(vNode:Union(node.Function, node.Root), ...):Ret(clazz.AutoFunction)
	const nAutoFn = AutoFunction.new(self._manager, vNode, ...)
	return nAutoFn
end

function BaseStack:newClassFactory(vNode:node.Function, ...):Ret(clazz.ClassFactory)
	const nFactory = ClassFactory.new(self._manager, vNode, ...)
	return nFactory
end

function BaseStack:newOpenFunction(vNode:clazz.IBaseNode, vUpState:OrNil(False, clazz.LexCapture)):Ret(clazz.OpenFunction)
	const nOpenFn = OpenFunction.new(self._manager, vNode, vUpState)
	return nOpenFn
end

function BaseStack:withOnePushContext(vNode:clazz.IBaseNode, vFunc:Fn(clazz.OnePushContext), vNotnil:OrNil(Boolean)):Ret(clazz.OnePushContext)
	const nCtx = OnePushContext.new(vNode, self, self._manager, vNotnil or false)
	vFunc(nCtx)
	return nCtx
end

function BaseStack:withMorePushContext(vNode:clazz.IBaseNode, vFunc:Fn(clazz.MorePushContext)):Ret(clazz.MorePushContext)
	const nCtx = MorePushContext.new(vNode, self, self._manager)
	vFunc(nCtx)
	return nCtx
end

function BaseStack:withMorePushContextWithCase(vNode:clazz.IBaseNode, vTermOrTuple:Union(clazz.FixedTermTuple, clazz.RefineTerm), vFunc:Fn(clazz.MorePushContext, clazz.IAtomType, clazz.VariableCase)):Ret(clazz.MorePushContext)
	const nCtx = MorePushContext.new(vNode, self, self._manager)
	const nTerm = TermTuple.isFixed(vTermOrTuple) and vTermOrTuple:checkFixed(nCtx, 1) or vTermOrTuple
	nTerm:foreach(function(vType, vCase)
		nCtx:withCase(vCase, function()
			vFunc(nCtx, vType, vCase)
		end)
	end)
	return nCtx
end

function BaseStack:newNoPushContext(vNode:clazz.IBaseNode)
	return NoPushContext.new(vNode, self, self._manager)
end

function BaseStack:newLogicContext(vNode:clazz.IBaseNode):Ret(clazz.LogicContext)
	return LogicContext.new(vNode, self, self._manager)
end

function BaseStack:newOperContext(vNode:clazz.IBaseNode):Ret(clazz.OperContext)
	return OperContext.new(vNode, self, self._manager)
end

function BaseStack:newReturnContext(vNode:clazz.IBaseNode):Ret(clazz.ReturnContext)
	return ReturnContext.new(vNode, self, self._manager)
end

function BaseStack:newAssignContext(vNode:clazz.IBaseNode):Ret(clazz.AssignContext)
	return AssignContext.new(vNode, self, self._manager)
end

function.pass BaseStack:getSealStack():Ret(clazz.SealStack)
	error("getSealStack not implement in BaseStack")
end

function BaseStack:seal()
end

function BaseStack:_nodeTerm(vNode:clazz.IBaseNode, vType:clazz.UAtomUnion)
	return RefineTerm.new(vNode, vType)
end

function BaseStack:inplaceOper()
	return self._fastOper
end

function BaseStack:getLetSpace():Ret(clazz.LetSpace)
	local nSpace = self._letspace
	return assert(nSpace, "space is false when get")
end

function BaseStack:getNode():Ret(clazz.IBaseNode)
	return self._node
end

function BaseStack:getRuntime():Ret(clazz.BaseRuntime)
	return self._runtime
end

function BaseStack:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function BaseStack:_withBranch(vVariableCase:clazz.VariableCase, vFunc:Fn():Dots(clazz.USpaceAny), vNode:OrNil(node.Block)):Ret(clazz.Branch)
	const nStack = self._branchStack
	const nLen = #nStack
	const nNewLen = nLen + 1
	const nOldBranch = nStack[nLen]!
	const nNewBranch = Branch.new(self, vVariableCase & nOldBranch:getCase(), nOldBranch, vNode)
	nStack[nNewLen] = nNewBranch
	vFunc(self:unpackPolyArgs())
	nStack[nNewLen] = nil
	return nNewBranch
end

function BaseStack:topBranch():Ret(clazz.Branch)
	const nStack = self._branchStack
	return nStack[#nStack]!
end

function BaseStack:nativeError(vContext:clazz.OperContext, vTerm:clazz.RefineTerm)
	self:RAISE_ERROR(vContext, vTerm:getType())
	self:topBranch():setStop()
end

function BaseStack:nativeAssert(vContext:clazz.OperContext, vFirstTerm:clazz.RefineTerm, vSecondTerm:OrNil(clazz.RefineTerm))
	if vSecondTerm then
		self:RAISE_ERROR(vContext, vSecondTerm:getType())
	end
	const nTrueCase = vFirstTerm:caseTrue()
	if nTrueCase then
		self:topBranch():assertCase(nTrueCase)
	end
end

function BaseStack:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	return false
end

return BaseStack
