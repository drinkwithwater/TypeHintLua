
local TermCase = require "thlua.term.TermCase"
local RefineTerm = require "thlua.term.RefineTerm"

local Branch = {}

(@let.class = import("thlua.type.TypeClass").class)

Branch.__index = Branch
Branch.__tostring = function(self)::Ret(String)
	return "Branch"
end

function Branch.new(vContext:class.Context, vPreBranch:Option(class.Branch), vTermCase:Option(class.TermCase))::RetClass(class.Branch)
	local self = setmetatable({::Self()
		_context=vContext,
		_stop=false@Boolean,
		case=nil@class.TermCase,
		headCase=vTermCase,
		symbolToTerm=nil@Dict(class.Symbol,class.RefineTerm),
	}, Branch)
	self.symbolToTerm = setmetatable({}, {__index=vPreBranch and vPreBranch.symbolToTerm})
	local nTermCase
	if vPreBranch then
		if vTermCase then
			nTermCase = vPreBranch.case & vTermCase
		else
			nTermCase = vPreBranch.case
		end
	else
		nTermCase = TermCase.new()
	end
	self.case=nTermCase
	return self
end

function Branch:symbol_get(vSymbol:class.Symbol)::Ret(class.RefineTerm)
	local nRefineTerm = self.symbolToTerm[vSymbol]
	if not nRefineTerm then
		-- TODO, set upvalue symbol in prepre...prebranch
		local nType = vSymbol:getType()
		nRefineTerm = self._context:RefineTerm(nType)
		nRefineTerm:add_self(vSymbol)
		self.symbolToTerm[vSymbol] = nRefineTerm
		return nRefineTerm
	end
	local nType = self.case[nRefineTerm]
	if nType then
		if not nType:isNever() then
			return nRefineTerm:filter(nType)
		else
			print("TODO type is never when get symbol"..tostring(vSymbol), nRefineTerm)
			return self._context:NeverTerm()
		end
	else
		return nRefineTerm
	end
end

function Branch:symbol_init(vUnionSymbol:class.Symbol, vTerm:class.RefineTerm)
	self._context:getRuntime():recordSymbol(vUnionSymbol)
	vTerm:add_self(vUnionSymbol)
	self.symbolToTerm[vUnionSymbol] = vTerm
end

function Branch:symbol_set(vUnionSymbol:class.Symbol, vValueTerm:class.RefineTerm)
	local nValueType = vValueTerm:getType()
	if vUnionSymbol:getType():contain(nValueType) then
		local nRefineTerm = self._context:RefineTerm(nValueType)
		nRefineTerm:add_self(vUnionSymbol)
		self.symbolToTerm[vUnionSymbol] = nRefineTerm
	else
		print(tostring(nValueType).." can't be assigned to "..tostring(vUnionSymbol:getType()))
	end
end

function Branch:merge_from(vContext:class.UContext, vTrueBranch:class.Branch, vFalseBranch:class.Branch)
	local nModSymbolDict:Dict(class.Symbol, True) = {}
	local nTrueStop = vTrueBranch:getStop()
	for nSymbol, nUnion in pairs(vTrueBranch.symbolToTerm) do
		nModSymbolDict[nSymbol] = true
	end
	local nFalseStop = vFalseBranch:getStop()
	for nSymbol, nUnion in pairs(vFalseBranch.symbolToTerm) do
		nModSymbolDict[nSymbol] = true
	end
	if (not nTrueStop) or (not nFalseStop) then
		for nSymbol, _ in pairs(nModSymbolDict) do
			if self.symbolToTerm[nSymbol] then
				local nType
				if nFalseStop or not vFalseBranch.headCase then
					nType = vTrueBranch:symbol_get(nSymbol):getType()
				elseif nTrueStop or not vTrueBranch.headCase then
					nType = vFalseBranch:symbol_get(nSymbol):getType()
				else
					local nTrueType = vTrueBranch:symbol_get(nSymbol):getType()
					local nFalseType = vFalseBranch:symbol_get(nSymbol):getType()
					nType = nTrueType | nFalseType
				end
				local nRefineTerm = self._context:RefineTerm(nType)
				self.symbolToTerm[nSymbol] = nRefineTerm
				nRefineTerm:add_self(nSymbol)
			end
		end
		local nAndCase
		if nFalseStop then
			nAndCase = vTrueBranch.headCase
		elseif nTrueStop then
			nAndCase = vFalseBranch.headCase
		end
		if nAndCase then
			self.case = self.case & nAndCase
			self.headCase = self.headCase & nAndCase
		end
	else
		local nAndCase = vTrueBranch.headCase & vFalseBranch.headCase
		self.case = self.case & nAndCase
		self.headCase = self.headCase & nAndCase
		self._stop = true
	end
end

function Branch:assertCase(vTermCase:class.TermCase)
	self.case = self.case & vTermCase
	self.headCase = self.headCase & vTermCase
end

function Branch:setStop()
	self._stop = true
end

function Branch:getStop()::Ret(Boolean)
	return self._stop
end

return Branch
