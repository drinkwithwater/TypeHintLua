
const ImmutVariable = require "thlua.term.ImmutVariable"
const LocalSymbol = require "thlua.term.LocalSymbol"
const VariableCase = require "thlua.term.VariableCase"
const RefineTerm = require "thlua.term.RefineTerm"

const Branch = {}

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
end)

Branch.__index = Branch
Branch.__tostring = function(self):Ret(String)
	return "Branch@"..tostring(self._node)
end

function:class(clazz.Branch) Branch.new(vStack:clazz.BaseStack, vVariableCase:clazz.VariableCase, vPreBranch:OrFalse(clazz.Branch), vNode:OrNil(clazz.IAstNode))
	(@let.VariableDict = Dict(clazz.LocalSymbol, clazz.ImmutVariable))
	(@let.SymbolDict = Dict(node.Ident_def, clazz.USymbol))
	const self = setmetatable({.class
		_stack=vStack,
		_node=vNode or false,
		_stop=false@Boolean,
		_case=vVariableCase,
		_nodeToSymbol={}@SymbolDict,
		symbolToVariable={}@VariableDict,
		_headCase=vVariableCase,
	}, Branch)
	if vPreBranch then
		if vPreBranch:getStack() == vStack then
			self.symbolToVariable = setmetatable({}, {__index=vPreBranch.symbolToVariable}) @ VariableDict
		end
		self._nodeToSymbol = setmetatable({}, {__index=vPreBranch._nodeToSymbol})
	end
	return self
end

function Branch:immutGet(vContext:clazz.OperContext, vImmutVariable:clazz.ImmutVariable):Ret(clazz.RefineTerm)
	local nType = self._case[vImmutVariable]
	if nType then
		if not nType:isNever() then
			const nTerm = vImmutVariable:getTerm():filter(vContext, nType)
			nTerm:initVariable(vImmutVariable)
			return nTerm
		else
			vContext:error("TODO type is never when get symbol"..tostring(vImmutVariable))
			return vContext:NeverTerm()
		end
	else
		return vImmutVariable:getTerm()
	end
end

function Branch:mutGet(vContext:clazz.OperContext, vLocalSymbol:clazz.LocalSymbol):Ret(clazz.RefineTerm)
	local nImmutVariable = self.symbolToVariable[vLocalSymbol]
	if not nImmutVariable then
		-- TODO, consider upvalue symbol??
		nImmutVariable = vLocalSymbol:makeVariable()
		self.symbolToVariable[vLocalSymbol] = nImmutVariable
	end
	return self:immutGet(vContext, nImmutVariable)
end

function Branch:SYMBOL_GET(vNode:clazz.IAstNode, vDefineNode:node.Ident_def, vAllowAuto:Boolean):Ret(clazz.UAutoTerm)
	const nSymbolContext = self._stack:newOperContext(vNode)
	const nSymbol = self:getSymbolByNode(vDefineNode)
	if LocalSymbol.is(nSymbol) then
		return self:mutGet(nSymbolContext, nSymbol)
	elseif ImmutVariable.is(nSymbol) then
		return self:immutGet(nSymbolContext, nSymbol)
	else
		const nTerm = nSymbol:getRefineTerm()
		if nTerm then
			return self:immutGet(nSymbolContext, nTerm:attachImmutVariable())
		else
			if not vAllowAuto then
				error(nSymbolContext:newException("auto term can't be used when it's undeduced"))
			else
				return nSymbol
			end
		end
	end
end

function Branch:setSymbolByNode(vNode:node.Ident_def, vSymbol:clazz.USymbol):Ret(clazz.USymbol)
	self._nodeToSymbol[vNode] = vSymbol
	return vSymbol
end

function Branch:getSymbolByNode(vNode:node.Ident_def):Ret(clazz.USymbol)
	return self._nodeToSymbol[vNode]!
end

function Branch:mutMark(vSymbol:clazz.LocalSymbol, vImmutVariable:clazz.ImmutVariable)
	self.symbolToVariable[vSymbol] = vImmutVariable
	vImmutVariable:addSymbol(vSymbol)
end

function Branch:mutSet(vContext:clazz.AssignContext, vSymbol:clazz.LocalSymbol, vValueTerm:clazz.RefineTerm)
	const nValueType = vValueTerm:getType()
	const nDstType = vSymbol:getType()
	const nSetType = vContext:includeAndCast(nDstType, nValueType, "assign") or nDstType
	const nCastTerm = vContext:RefineTerm(nSetType)
	const nImmutVariable = nCastTerm:attachImmutVariable()
	self.symbolToVariable[vSymbol] = nImmutVariable
	nImmutVariable:addSymbol(vSymbol)
end

function Branch:mergeOneBranch(vContext:clazz.OperContext, vOneBranch:clazz.Branch, vOtherCase:OrNil(clazz.VariableCase))
	if vOneBranch:getStop() then
		if vOtherCase then
			self._case = self._case & vOtherCase
			self._headCase = self._headCase & vOtherCase
		end
	else
		const nSymbolToVariable = self.symbolToVariable
		for nLocalSymbol, nOneVariable in pairs(vOneBranch.symbolToVariable) do
			const nBeforeVariable = nSymbolToVariable[nLocalSymbol]
			if nBeforeVariable then
				const nOneType = vOneBranch:mutGet(vContext, nLocalSymbol):getType()
				if not vOtherCase then
					nSymbolToVariable[nLocalSymbol] = nLocalSymbol:makeVariable(nOneType)
				else
					const nOtherType = vOtherCase[nBeforeVariable] or self._case[nBeforeVariable] or nBeforeVariable:getType()
					const nMergeType = nOneType | nOtherType
					nSymbolToVariable[nLocalSymbol] = nLocalSymbol:makeVariable(nMergeType)
				end
			end
		end
	end
end

function Branch:mergeTwoBranch(vContext:clazz.OperContext, vTrueBranch:clazz.Branch, vFalseBranch:clazz.Branch)
	const nTrueStop = vTrueBranch:getStop()
	const nFalseStop = vFalseBranch:getStop()
	if nTrueStop and nFalseStop then
		self._stop = true
		return
	end
	local nModLocalSymbolDict:Dict(clazz.LocalSymbol, True) = {}
	for nLocalSymbol, _ in pairs(vTrueBranch.symbolToVariable) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	for nLocalSymbol, _ in pairs(vFalseBranch.symbolToVariable) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	for nLocalSymbol, _ in pairs(nModLocalSymbolDict) do
		if self.symbolToVariable[nLocalSymbol] then
			local nType:OrNil(clazz.UAtomUnion)
			if nFalseStop then
				nType = vTrueBranch:mutGet(vContext, nLocalSymbol):getType()
			elseif nTrueStop then
				nType = vFalseBranch:mutGet(vContext, nLocalSymbol):getType()
			else
				const nTrueType = vTrueBranch:mutGet(vContext, nLocalSymbol):getType()
				const nFalseType = vFalseBranch:mutGet(vContext, nLocalSymbol):getType()
				nType = nTrueType | nFalseType
			end
			local nImmutVariable = nLocalSymbol:makeVariable(nType)
			self.symbolToVariable[nLocalSymbol] = nImmutVariable
		end
	end
	local nAndCase:OrNil(clazz.VariableCase)
	if nFalseStop then
		nAndCase = vTrueBranch._headCase
	elseif nTrueStop then
		nAndCase = vFalseBranch._headCase
	end
	if nAndCase then
		self._case = self._case & nAndCase
		self._headCase = self._headCase & nAndCase
	end
end

function Branch:assertCase(vVariableCase:clazz.VariableCase)
	self._case = self._case & vVariableCase
	self._headCase = self._headCase & vVariableCase
end

function Branch:setStop()
	self._stop = true
end

function Branch:getCase():Ret(clazz.VariableCase)
	return self._case
end

function Branch:getStop():Ret(Boolean)
	return self._stop
end

function Branch:getStack():Ret(clazz.InstStack)
	return self._stack @> clazz.InstStack
end

return Branch
