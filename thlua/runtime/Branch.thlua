
const TermCase = require "thlua.term.TermCase"
const RefineTerm = require "thlua.term.RefineTerm"

const Branch = {}

(@let.clazz = import("thlua.type.TypeClass").clazz)

Branch.__index = Branch
Branch.__tostring = function(self):Ret(String)
	return "Branch"
end

function:class(clazz.Branch) Branch.new(vContext:clazz.Context, vPreBranch:OrNil(clazz.Branch), vTermCase:clazz.TermCase)
	(@let.ShotDict = Dict(clazz.LocalSymbol, clazz.ImmutShot))
	const self = setmetatable({.class
		_context=vContext,
		_stop=false@Boolean,
		_case=nil@clazz.TermCase,
		symbolToShot={}@ShotDict,
		_headCase=vTermCase,
	}, Branch)
	self.symbolToShot = (setmetatable({}, {__index=vPreBranch and vPreBranch.symbolToShot})) @ ShotDict
	local nTermCase:OrNil(clazz.TermCase) = nil
	if vPreBranch then
		nTermCase = vPreBranch:getCase() & vTermCase
	else
		nTermCase = vTermCase
	end
	self._case=nTermCase
	return self
end

function Branch:immutGet(vImmutShot:clazz.ImmutShot):Ret(clazz.RefineTerm)
	local nType = self._case[vImmutShot]
	if nType then
		if not nType:isNever() then
			const nTerm = vImmutShot:getTerm():filter(nType)
			nTerm:initShot(vImmutShot)
			return nTerm
		else
			print("TODO type is never when get symbol"..tostring(vImmutShot))
			return self._context:NeverTerm()
		end
	else
		return vImmutShot:getTerm()
	end
end

function Branch:mutGet(vLocalSymbol:clazz.LocalSymbol):Ret(clazz.RefineTerm)
	local nImmutShot = self.symbolToShot[vLocalSymbol]
	if not nImmutShot then
		-- TODO, consider upvalue symbol??
		nImmutShot = vLocalSymbol:makeShot()
		self.symbolToShot[vLocalSymbol] = nImmutShot
	end
	return self:immutGet(nImmutShot)
end

function Branch:mutMark(vSymbol:clazz.LocalSymbol, vImmutShot:clazz.ImmutShot)
	self.symbolToShot[vSymbol] = vImmutShot
	vImmutShot:addSymbol(vSymbol)
end

function Branch:mutSet(vContext:clazz.Context, vSymbol:clazz.LocalSymbol, vValueTerm:clazz.RefineTerm)
	const nValueType = vValueTerm:getType()
	const nDstType = vSymbol:getType()
	const nCastType = vContext:castLuaType(nValueType, nDstType)
	if nCastType then
		const nCastTerm = vContext:RefineTerm(nCastType)
		const nImmutShot = nCastTerm:attachImmutShot()
		self.symbolToShot[vSymbol] = nImmutShot
		nImmutShot:addSymbol(vSymbol)
	elseif vSymbol:getType():containAll(nValueType) then
		const nImmutShot = vValueTerm:attachImmutShot()
		self.symbolToShot[vSymbol] = nImmutShot
		nImmutShot:addSymbol(vSymbol)
	else
		vContext:error(tostring(nValueType).." can't be assigned to "..tostring(vSymbol:getType()))
	end
end

function Branch:mergeOneBranch(vContext:clazz.Context, vOneBranch:clazz.Branch, vOtherCase:OrNil(clazz.TermCase))
	if vOneBranch:getStop() then
		if vOtherCase then
			self._case = self._case & vOtherCase
			self._headCase = self._headCase & vOtherCase
		end
	else
		const nSymbolToShot = self.symbolToShot
		for nLocalSymbol, nOneShot in pairs(vOneBranch.symbolToShot) do
			const nBeforeShot = nSymbolToShot[nLocalSymbol]
			if nBeforeShot then
				const nOneType = vOneBranch:mutGet(nLocalSymbol):getType()
				if not vOtherCase then
					nSymbolToShot[nLocalSymbol] = nLocalSymbol:makeShot(nOneType)
				else
					const nOtherType = vOtherCase[nBeforeShot] or nBeforeShot:getType()
					const nMergeType = nOneType | nOtherType
					nSymbolToShot[nLocalSymbol] = nLocalSymbol:makeShot(nMergeType)
				end
			end
		end
	end
end

function Branch:merge_from(vContext:clazz.Context, vTrueBranch:clazz.Branch, vFalseBranch:clazz.Branch)
	local nTrueStop = vTrueBranch:getStop()
	local nFalseStop = vFalseBranch:getStop()
	if nTrueStop and nFalseStop then
		self._stop = true
		return
	end
	local nModLocalSymbolDict:Dict(clazz.LocalSymbol, True) = {}
	for nLocalSymbol, _ in pairs(vTrueBranch.symbolToShot) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	for nLocalSymbol, _ in pairs(vFalseBranch.symbolToShot) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	for nLocalSymbol, _ in pairs(nModLocalSymbolDict) do
		if self.symbolToShot[nLocalSymbol] then
			local nType:OrNil(clazz.UAtomUnion)
			if nFalseStop then
				nType = vTrueBranch:mutGet(nLocalSymbol):getType()
			elseif nTrueStop then
				nType = vFalseBranch:mutGet(nLocalSymbol):getType()
			else
				const nTrueType = vTrueBranch:mutGet(nLocalSymbol):getType()
				const nFalseType = vFalseBranch:mutGet(nLocalSymbol):getType()
				nType = nTrueType | nFalseType
			end
			local nImmutShot = nLocalSymbol:makeShot(nType)
			self.symbolToShot[nLocalSymbol] = nImmutShot
		end
	end
	local nAndCase:OrNil(clazz.TermCase)
	if nFalseStop then
		nAndCase = vTrueBranch._headCase
	elseif nTrueStop then
		nAndCase = vFalseBranch._headCase
	end
	if nAndCase then
		self._case = self._case & nAndCase
		self._headCase = self._headCase & nAndCase
	end
end

function Branch:assertCase(vTermCase:clazz.TermCase)
	self._case = self._case & vTermCase
	self._headCase = self._headCase & vTermCase
end

function Branch:setStop()
	self._stop = true
end

function Branch:getCase():Ret(clazz.TermCase)
	return self._case
end

function Branch:getStop():Ret(Boolean)
	return self._stop
end

return Branch
