
const TermCase = require "thlua.term.TermCase"
const RefineTerm = require "thlua.term.RefineTerm"

const Branch = {}

(@let.class = import("thlua.type.TypeClass").class)

Branch.__index = Branch
Branch.__tostring = function(self)::Ret(String)
	return "Branch"
end

function Branch.new(vContext:class.Context, vPreBranch:Option(class.Branch), vTermCase:Option(class.TermCase))::RetClass(class.Branch)
	const self = setmetatable({::Self()
		_context=vContext,
		_stop=false@Boolean,
		case=nil@class.TermCase,
		headCase=vTermCase,
		symbolToShot=nil@Dict(class.LocalSymbol, class.SymbolShot),
	}, Branch)
	self.symbolToShot = setmetatable({}, {__index=vPreBranch and vPreBranch.symbolToShot})
	local nTermCase
	if vPreBranch then
		if vTermCase then
			nTermCase = vPreBranch.case & vTermCase
		else
			nTermCase = vPreBranch.case
		end
	else
		nTermCase = TermCase.new()
	end
	self.case=nTermCase
	return self
end

function Branch:symbol_get(vLocalSymbol:class.LocalSymbol)::Ret(class.RefineTerm)
	local nSymbolShot = self.symbolToShot[vLocalSymbol]
	if not nSymbolShot then
		-- TODO, consider upvalue symbol??
		nSymbolShot = vLocalSymbol:makeShot()
		self.symbolToShot[vLocalSymbol] = nSymbolShot
	end
	local nType = self.case[nSymbolShot]
	if nType then
		if not nType:isNever() then
			const nTerm = self._context:RefineTerm(nType)
			nTerm:add_self(nSymbolShot)
			return nTerm
		else
			print("TODO type is never when get symbol"..tostring(vLocalSymbol), nRefineTerm)
			return self._context:NeverTerm()
		end
	else
		const nRefineTerm = self._context:RefineTerm(nSymbolShot:getType())
		nRefineTerm:add_self(nSymbolShot)
		return nRefineTerm
	end
end

function Branch:symbol_init(vSymbol:class.LocalSymbol, vTerm:class.RefineTerm)
	self._context:getRuntime():recordSymbol(vSymbol)
	const nSymbolShot = vTerm:attachSymbolShot()
	nSymbolShot:addSymbol(vSymbol)
	self.symbolToShot[vSymbol] = nSymbolShot
end

function Branch:symbol_set(vSymbol:class.LocalSymbol, vValueTerm:class.RefineTerm)
	const nValueType = vValueTerm:getType()
	if vSymbol:getType():containAll(nValueType) then
		const nSymbolShot = vValueTerm:attachSymbolShot()
		self.symbolToShot[vSymbol] = nSymbolShot
		nSymbolShot:addSymbol(vSymbol)
		self.case:put_and(nSymbolShot, nValueType)
		self.headCase:put_and(nSymbolShot, nValueType)
	else
		print(tostring(nValueType).." can't be assigned to "..tostring(vSymbol:getType()))
	end
end

function Branch:merge_from(vContext:class.Context, vTrueBranch:class.Branch, vFalseBranch:class.Branch)
	local nModLocalSymbolDict:Dict(class.LocalSymbol, True) = {}
	local nTrueStop = vTrueBranch:getStop()
	for nLocalSymbol, _ in pairs(vTrueBranch.symbolToShot) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	local nFalseStop = vFalseBranch:getStop()
	for nLocalSymbol, _ in pairs(vFalseBranch.symbolToShot) do
		nModLocalSymbolDict[nLocalSymbol] = true
	end
	if (not nTrueStop) or (not nFalseStop) then
		for nLocalSymbol, _ in pairs(nModLocalSymbolDict) do
			if self.symbolToShot[nLocalSymbol] then
				local nType
				if nFalseStop or not vFalseBranch.headCase then
					nType = vTrueBranch:symbol_get(nLocalSymbol):getType()
				elseif nTrueStop or not vTrueBranch.headCase then
					nType = vFalseBranch:symbol_get(nLocalSymbol):getType()
				else
					local nTrueType = vTrueBranch:symbol_get(nLocalSymbol):getType()
					local nFalseType = vFalseBranch:symbol_get(nLocalSymbol):getType()
					nType = nTrueType | nFalseType
				end
				local nSymbolShot = nLocalSymbol:makeShot()
				self.symbolToShot[nLocalSymbol] = nSymbolShot
				self.case:put_and(nSymbolShot, nType)
				self.headCase:put_and(nSymbolShot, nType)
			end
		end
		local nAndCase
		if nFalseStop then
			nAndCase = vTrueBranch.headCase
		elseif nTrueStop then
			nAndCase = vFalseBranch.headCase
		end
		if nAndCase then
			self.case = self.case & nAndCase
			self.headCase = self.headCase & nAndCase
		end
	else
		local nAndCase = vTrueBranch.headCase & vFalseBranch.headCase
		self.case = self.case & nAndCase
		self.headCase = self.headCase & nAndCase
		self._stop = true
	end
end

function Branch:assertCase(vTermCase:class.TermCase)
	self.case = self.case & vTermCase
	self.headCase = self.headCase & vTermCase
end

function Branch:setStop()
	self._stop = true
end

function Branch:getStop()::Ret(Boolean)
	return self._stop
end

return Branch
