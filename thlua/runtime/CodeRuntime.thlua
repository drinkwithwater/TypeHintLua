
const class = require@<let.clazz> "thlua.class"
const Node = require@<let.node> "thlua.code.Node"
const LuaPromise = require@<let.LuaPromise> "thlua.utils.LuaPromise"

const TypeManager = require "thlua.type.TypeManager"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const TermTuple = require "thlua.tuple.TermTuple"
const native = require "thlua.type.native"
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const LetSpace = require "thlua.space.LetSpace"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const StackManager = require "thlua.stack.StackManager"
const SpaceManager = require "thlua.space.SpaceManager"
const OpenStack = require "thlua.stack.OpenStack"
const AutoFunction = require "thlua.type.func.AutoFunction"
const NameReference = require "thlua.space.NameReference"

const ScheduleManager = require "thlua.schedule.ScheduleManager"
const CodeEnv = require "thlua.code.CodeEnv"
const platform = require "thlua.platform"

(@do

	let.uv_async_t = import("luv").uv_async_t
	clazz.StageApi = Interface {
		searchPath=Fn(OrFalse(String), String):Ret(Boolean, String),
		parseFile=Fn(String):Ret(clazz.CodeEnv),
		parseGlobal=Fn(String):Ret(clazz.CodeEnv, String),
		createAsync=Fn(Fn():Dots(Any)):Ret(uv_async_t),
		logger=OrNil(clazz.LevelLogger),
	}

	clazz.LevelLogger = Interface {
		error=Mfn():Dots(Truth),
		warn=Mfn():Dots(Truth),
		info=Mfn():Dots(Truth),
	}

	clazz.Diagnostic = Struct {
		node=clazz.IBaseNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.LoadedState = Struct {
		openFn=clazz.OpenFunction,
		codeEnv=clazz.CodeEnv,
		path=OrNil(String),
		term=OrNil(clazz.RefineTerm),
		stack=OrNil(clazz.OpenStack),
	}

end)

const DefaultStage:clazz.StageApi = {
	searchPath=function(vPrefix, vPath)
		local fileName, err1 = package.searchpath(vPath, vPrefix or "./?.thlua;./?.d.thlua")
		if not fileName then
			return false, err1
		end
		return true, fileName
	end,
	parseFile=function.pass(vFileName)
		local file, err = io.open(vFileName, "r")
		if not file then
			error(err)
		end
		local nContent = assert(file:read("*a"), "file "..vFileName.. " read fail")
		file:close()
		const nCodeEnv = CodeEnv.new(nContent, vFileName)
		return nCodeEnv
	end,
	parseGlobal=function.pass(vPackage)
		local nContent:String = require("thlua.global."..vPackage)
		const nFileName = "@virtual-file:"..vPackage
		const nCodeEnv = CodeEnv.new(nContent, "@virtual-file:"..vPackage)
		return nCodeEnv, nFileName
	end,
	createAsync=function(fn)
		const uv = require "luv"
		return uv.new_async(fn)
	end,
}

const DefaultLogger:clazz.LevelLogger = {
	error=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[ERROR]", nPrefix, ...)
	end,
	warn=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[WARN]", nPrefix, ...)
	end,
	info=function.pass(_, ...)
		local nInfo = debug.getinfo(2)
		local nPrefix = nInfo.source..":"..nInfo.currentline
		print("[INFO]", nPrefix, ...)
	end,
}

const CodeRuntime = class@<clazz.CodeRuntime, false>()

function.open CodeRuntime:ctor(vStage:OrNil(clazz.StageApi))
	self._diaList={}@List(clazz.Diagnostic)
	self._searchPath = false @ OrFalse(String)
	self._stage=vStage or DefaultStage
	self._logger=self._stage.logger or DefaultLogger
	self._pathToFileName={}@Dict(String, String)
	self._loadedDict={}@Dict(String, LoadedState)
	self._scheduleManager=ScheduleManager.new(self)
	-- late init fields
	self._rootNode=nil@!node.Root
	self._typeManager=nil@!clazz.TypeManager
	self._stackManager=nil@!clazz.StackManager
	self._spaceManager=nil@!clazz.SpaceManager
	self._globalTable=nil@!clazz.AutoTable
end

function CodeRuntime:getCodeEnv(vFileName:String):Ret(OrFalse(clazz.CodeEnv))
	const nState = self._loadedDict[vFileName]
	if nState then
		return nState.codeEnv
	else
		return false
	end
end

function CodeRuntime:import(vNode:clazz.IBaseNode, vDst:Truth):Ret(clazz.LocalSpaceValue)
	-- TODO better style?
	if type(vDst) == "string" then
		const nPath = vDst @> String
		const nLoadedState = self:_cacheLoadPath(vNode, nPath)
		const nStack = nLoadedState.stack
		if not nStack then
			error(vNode:toExc("recursive import:"..nPath))
		end
		const nSpace = nStack:getLetSpace()
		return nSpace:getRefer():getSpaceValue()
	elseif BaseAtomType.is(vDst) then
		const nStack = vDst:findRequireStack()
		if nStack then
			const nSpace = nStack:getLetSpace()
			return nSpace:getRefer():getSpaceValue()
		else
			error(vNode:toExc("import can only take type in a require stack"))
		end
	else
		error(vNode:toExc("import can only take string or type as first argument"))
	end
end

const nGlobalPackage:List(String) = {
	"basic",
	"coroutine",
	"debug",
	"io",
	"math",
	"os",
	"package",
	"string",
	"table",
	"utf8",
}

function CodeRuntime:promiseMain(vRootFileUri:String, vUseProfile:OrNil(Boolean))
	self._scheduleManager.useProfile = vUseProfile or false
	self._rootNode=Node.newRootNode(vRootFileUri)
	self._typeManager=TypeManager.new(self, self._rootNode, self._scheduleManager)
	self._stackManager=StackManager.new(self)
	self._spaceManager=SpaceManager.new(self)
	const nRootSpace = self._spaceManager:initRootSpace()
	const nAutoFn = self._stackManager:initRootAutoFn()
	nAutoFn:initAsync(function()
		self._typeManager:lateInit()
		self._globalTable = native.make(self)
		self:buildSimpleGlobal(nRootSpace)
		self._stackManager:getRootStack():rootSetLetSpace(nRootSpace)
		for _, pkg in ipairs(nGlobalPackage) do
			const nLoadedState = self:_cacheLoadGlobal(pkg)
			if pkg == "string" then
				const nRetType = nLoadedState.term!:getType()
				assert(not nRetType:isUnion(), "string lib's return can't be union")
				self._typeManager:lateInitStringLib(nRetType)
			end
		end
		return false, false, function()
			const nLoadedState = self:_cacheLoadFile(self._rootNode, vRootFileUri)
			const nParTuple = self._typeManager:TypeTuple(self._rootNode, {})
			const nRetTuples = self._typeManager:VoidRetTuples(self._rootNode)
			return nParTuple, nRetTuples
		end
	end)
	nAutoFn:startPreBuild()
	nAutoFn:startLateBuild()
	return self._scheduleManager:promiseSchedule()
end

function CodeRuntime:_cacheLoadGlobal(vPkg:String):Ret(LoadedState)
	const nCodeEnv, nFileName = self._stage.parseGlobal(vPkg)
	const nOpenFn = nCodeEnv:callTypingFn(self._stackManager:getRootStack(), self:makeGlobalTerm())
	const nContext = self._stackManager:getRootStack():newNoPushContext(self._rootNode)
	const nTermTuple = nContext:FixedTermTuple({})
	const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
	const nLoadedState:LoadedState = {
		openFn=nOpenFn,
		codeEnv=nCodeEnv,
		term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext),
		stack = nStack,
	}
	self._loadedDict[nFileName] = nLoadedState
	return nLoadedState
end

function CodeRuntime:_cacheLoadFile(vNode:clazz.IBaseNode, vFileName:String):Ret(LoadedState)
	local nLoadedState = self._loadedDict[vFileName]
	if not nLoadedState then
		const nCodeEnv = self._stage.parseFile(vFileName)
		const nOpenFn = nCodeEnv:callTypingFn(self._stackManager:getRootStack(), self:makeGlobalTerm())
		nLoadedState = {
			openFn=nOpenFn,
			codeEnv=nCodeEnv,
		}
		self._loadedDict[vFileName] = nLoadedState
		const nContext = self._stackManager:getRootStack():newNoPushContext(vNode)
		const nTermTuple = nContext:FixedTermTuple({})
		const nRet, nStack = nOpenFn:meta_open_call(nContext, nTermTuple, true)
		nLoadedState.term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext)
		nLoadedState.stack = nStack
	end
	return nLoadedState
end

function CodeRuntime:_cacheLoadPath(vNode:clazz.IBaseNode, vPath:String):Ret(LoadedState)
	local nFileName = self._pathToFileName[vPath]
	if not nFileName then
		const nOkay, nSearchFileName = self._stage.searchPath(self._searchPath, vPath)
		if not nOkay then
			error(Exception.new(nSearchFileName, vNode))
		else
			nFileName = nSearchFileName
		end
	end
	const nLoadedState = self._loadedDict[nFileName] or self:_cacheLoadFile(vNode, nFileName)
	const nOldPath = nLoadedState.path
	if nOldPath and nOldPath ~= vPath then
		self:nodeWarn(vNode, "mixing path:'"..nOldPath.."','"..vPath.."'")
	end
	nLoadedState.path = vPath
	return nLoadedState
end

function CodeRuntime:require(vNode:clazz.IBaseNode, vPath:String):Ret(clazz.RefineTerm, clazz.OpenFunction, clazz.OpenStack)
	const nLoadedState = self:_cacheLoadPath(vNode, vPath)
	const nTerm = nLoadedState.term
	if not nTerm then
		error(Exception.new("recursive require:"..vPath, vNode))
	end
	return nTerm, nLoadedState.openFn, nLoadedState.stack!
end

function CodeRuntime:buildSimpleGlobal(vRootSpace:clazz.LetSpace)
	const nGlobal = {} @ Dict(String, Union(clazz.NameReference, clazz.BaseSpaceCom))
	do.pass
		for k,v in pairs(self._typeManager.type) do
			nGlobal[k] = v
		end
		for k,v in pairs(self._typeManager.generic) do
			nGlobal[k] = v
		end
		local nSpaceManager = self._spaceManager
		local nTypeManager = self._typeManager
		local l = {
			SubType="buildSubType",
			Union="buildUnion",
			Struct="buildStruct",
			OneOf="buildOneOf",
			Interface="buildInterface",
			ExtendInterface="buildExtendInterface",
			ExtendStruct="buildExtendStruct",
			Template="buildTemplate",
			--IDict="buildIDict",
			--IList="buildIList",
			--Dict="buildDict",
			--List="buildList",
			OrNil="buildOrNil",
			OrFalse="buildOrFalse",
			Fn="buildFn",
			Pfn="buildPfn",
			Mfn="buildMfn",
		}
		for k,v in pairs(l) do
			nGlobal[k]=nSpaceManager:BuiltinFn(function(vNode, ...)
				return nTypeManager[v](nTypeManager, vNode, ...)
			end, k)
		end
		local l = {
			easymap="buildEasyMap",
		}
		for k,v in pairs(l) do
			nGlobal[k]=nSpaceManager:BuiltinFn(function(vNode, ...)
				return nSpaceManager[v](nSpaceManager, vNode, ...)
			end, k)
		end
		nGlobal.Literal=nSpaceManager:BuiltinFn(function(vNode, v)
			return nTypeManager:Literal(v)
		end, "Literal")
		nGlobal.namespace=nSpaceManager:BuiltinFn(function(vNode)
			return self._spaceManager:NameSpace(vNode, false)
		end, "namespace")
		nGlobal.import=nSpaceManager:BuiltinFn(function(vNode, vPath)
			return self:import(vNode, vPath)
		end, "import")
		nGlobal.traceFile=nSpaceManager:BuiltinFn(function(vNode, vDepth)
			local nRetNode = vNode
			if vDepth then
				const nSealTask = self._scheduleManager:getTask()
				local nStack = nSealTask!:traceStack()
				for i=2,vDepth do
					if OpenStack.is(nStack) then
						nStack = nStack:getApplyStack()
					else
						return false
					end
				end
				nRetNode = nStack:getNode()
			end
			return platform.uri2path(nRetNode.path)
		end, "traceFile")
		nGlobal.setPath=nSpaceManager:BuiltinFn(function(vNode, vPath)
			self._searchPath = vPath
		end, "setPath")
		nGlobal.foreachPair=nSpaceManager:BuiltinFn(function(vNode, vObject, vFunc)
			const nObject = self._spaceManager:spaceToMustType(vNode, vObject):checkAtomUnion()
			const d = nObject:copyValueDict(nObject)
			for k,v in pairs(d) do
				vFunc(k,v)
			end
		end, "foreachPair")
		nGlobal.literal=nSpaceManager:BuiltinFn(function(vNode, vType)
			vType = self._spaceManager:spaceToMustType(vNode, vType):checkAtomUnion()
			if vType:isUnion() then
				return nil
			else
				if self._typeManager:isLiteral(vType) then
					return vType:getLiteral()
				else
					return nil
				end
			end
		end, "literal")
		nGlobal.same=nSpaceManager:BuiltinFn(function(vNode, vType1, vType2)
			return vType1:includeAll(vType2) and vType2:includeAll(vType1) and true or false
		end, "same")
		nGlobal.print=nSpaceManager:BuiltinFn(function(vNode, ...)
			self:nodeInfo(vNode, ...)
		end, "print")
	end
	for k,v in pairs(nGlobal) do
		assert(not NameReference.is(v), "namerefer in namrefer")
		vRootSpace:referChild(self._rootNode, k):setAssignAsync(self._rootNode, function()
			return v
		end)
	end
end

function CodeRuntime:makeGlobalTerm():Ret(clazz.RefineTerm)
	const nHeadContext = self._stackManager:getRootStack():inplaceOper()
	return nHeadContext:RefineTerm(self._globalTable)
end

function CodeRuntime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IBaseNode, ...:Truth)
	local l:List(String) = {}
	for i=1, select("#", ...) do
		l[i] = tostring(select(i, ...))
	end
	local nMsg = table.concat(l, " ")
	local nDiaList = self._diaList
	nDiaList[#nDiaList + 1] = {
		msg=nMsg,
		node=vNode,
		severity=vSeverity,
	}
end

function CodeRuntime:stackNodeError(vStack:clazz.BaseStack, vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
	const nPrefix = "(open)"
	while OpenStack.is(vStack) do
		const nStackNode = vStack:getNode()
		if nStackNode ~= vNode and not vStack:isRequire() then
			print("[ERROR] "..tostring(nStackNode), nPrefix, ...)
			self:_save(1, nStackNode, nPrefix, ...)
		end
		vStack = vStack:getApplyStack()
	end
end

function CodeRuntime:nodeError(vNode:clazz.IBaseNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function CodeRuntime:nodeWarn(vNode:clazz.IBaseNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function CodeRuntime:nodeInfo(vNode:clazz.IBaseNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function CodeRuntime:getRootNode():Ret(node.Root)
	return self._rootNode
end

function CodeRuntime:makeException(vNode:clazz.IBaseNode, vMsg:String)
	return Exception.new(vMsg, vNode)
end

function CodeRuntime:getAllDiagnostic():Ret(Dict(String, List(clazz.Diagnostic)))
	local nFileToDiaList:Dict(String, List(clazz.Diagnostic)) = {}
	for _, nDia in pairs(self._diaList) do
		const nPath = nDia.node.path
		local nList = nFileToDiaList[nPath]
		if not nList then
			nList = {}
			nFileToDiaList[nPath] = nList
		end
		nList[#nList + 1] = nDia
	end
	const name_FileToDiaList = self:getSpaceManager():getNameDiagnostic()
	for nFile, nList in pairs(name_FileToDiaList) do
		const nOldList = nFileToDiaList[nFile]
		if nOldList then
			table.move(nList, 1, #nList, #nOldList + 1, nOldList)
		else
			nFileToDiaList[nFile] = nList
		end
	end
	return nFileToDiaList
end

function CodeRuntime:getTypeManager():Ret(clazz.TypeManager)
	return self._typeManager
end

function CodeRuntime:getStackManager():Ret(clazz.StackManager)
	return self._stackManager
end

function CodeRuntime:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function CodeRuntime:getSpaceManager():Ret(clazz.SpaceManager)
	return self._spaceManager
end

function CodeRuntime:getStage():Ret(clazz.StageApi)
	return self._stage
end

return CodeRuntime
