
const FieldCompletion = require "thlua.context.FieldCompletion"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const BaseRuntime = require "thlua.runtime.BaseRuntime"
const Namespace = require "thlua.manager.Namespace"
const ListDict = require "thlua.manager.ListDict"
const class = require "thlua.class"

(@do
	let.clazz=import("thlua.type.TypeClass").clazz
	let.node = import("thlua.code.Node").node
	let.InjectFn = import("thlua.code.FocusCode").InjectFn
end)

const CompletionRuntime = class@<clazz.CompletionRuntime, false>(BaseRuntime)

function.open CompletionRuntime:ctor(...)
	self._focusNodeSet = {} @ Dict(clazz.IAstNode, True)
	self._nodeToAutoFnList = ListDict@<clazz.IAstNode, clazz.AutoFunction>()
	self._nodeToBranchList = ListDict@<node.Block, clazz.Branch>()
end

function CompletionRuntime:scheduleAutoFn(vAutoFn:clazz.AutoFunction)
	if self._focusNodeSet[vAutoFn:getNode()] then
		vAutoFn:startTask()
	else
		self._nodeToAutoFnList:putOne(vAutoFn:getNode(), vAutoFn)
	end
end

function.pass CompletionRuntime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IAstNode, ...:Truth)
	-- const nServer = self._loader
	-- nServer:info(vNode, ...)
end

function CompletionRuntime:recordBranch(vNode:node.Block, vBranch:clazz.Branch)
	self._nodeToBranchList:putOne(vNode, vBranch)
end

function CompletionRuntime:focusSchedule(vFuncList:List(node.Function))
	-- 1. set focus functions
	const nSet = self._focusNodeSet
	const nAutoFnList:List(clazz.AutoFunction) = {}
	for _,nNode in pairs(vFuncList) do
		nSet[nNode] = true
		const nList = self._nodeToAutoFnList:pop(nNode)
		if nList then
			for i=1,#nList do
				nAutoFnList[#nAutoFnList + 1] = nList[i]
			end
		end
	end
	for _, nAutoFn in ipairs(nAutoFnList) do
		nAutoFn:startTask()
	end
end

function CompletionRuntime:injectCompletion(vTracePos:Integer, vBlockNode:node.Block, vFn:InjectFn, vServer:Truth):Ret(OrFalse(clazz.FieldCompletion))
	const nBranchList = self._nodeToBranchList:get(vBlockNode)
	if not nBranchList then
		return false
	end
	const nFieldCompletion = FieldCompletion.new()
	-- 3. run inject fn in each branches
	for _, nBranch in pairs(nBranchList) do
		const nStack = nBranch:getStack()
		const nResult = vFn(nStack, function(vIdent)
			-- 1. lookup local symbol
			const nName = vIdent[1]
			local nDefineIdent = vBlockNode.symbolTable[nName]
			while nDefineIdent and nDefineIdent.pos > vTracePos do
				nDefineIdent = nDefineIdent.lookupIdent
			end
			if nDefineIdent then
				const nAutoTerm = nBranch:SYMBOL_GET(vIdent, nDefineIdent, false)
				if RefineTerm.is(nAutoTerm) then
					return nAutoTerm
				else
					return nStack:NIL_TERM(vIdent)
				end
			end
			-- 2. lookup global symbol
			const nName = "_ENV"
			local nDefineIdent = vBlockNode.symbolTable[nName]
			while nDefineIdent and nDefineIdent.pos > vTracePos do
				nDefineIdent = nDefineIdent.lookupIdent
			end
			if nDefineIdent then
				const nEnvTerm = nBranch:SYMBOL_GET(vIdent, nDefineIdent, false)
				assert(RefineTerm.is(nEnvTerm), "auto can't be used here")
				const nAutoTerm = nStack:META_GET(vIdent, nEnvTerm, nStack:LITERAL_TERM(vIdent, vIdent[1]), false)
				if RefineTerm.is(nAutoTerm) then
					return nAutoTerm
				else
					return nStack:NIL_TERM(vIdent)
				end
			else
				return nStack:NIL_TERM(vIdent)
			end
		end)
		if RefineTerm.is(nResult) then
			nResult:getType():putCompletion(nFieldCompletion)
		else
			const nSpace = Namespace.fromExport(nResult)
			if nSpace then
				nSpace:putCompletion(nFieldCompletion)
			end
		end
	end
	return nFieldCompletion
end

return CompletionRuntime
