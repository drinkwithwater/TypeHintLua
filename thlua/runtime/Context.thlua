
const TermTuple = require "thlua.tuple.TermTuple"
const Region = require "thlua.runtime.Region"
const RefineTerm = require "thlua.term.RefineTerm"
const TermCase = require "thlua.term.TermCase"
const ContextClass = require "thlua.runtime.ContextClass"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const Node = require "thlua.code.Node"

const LuaFunction = require "thlua.func.LuaFunction"
const TypeFunction = require "thlua.func.TypeFunction"
const NativeFunction = require "thlua.func.NativeFunction"
const LuaTable = require "thlua.object.LuaTable"
const MetaObject = require "thlua.object.MetaObject"
const Truth = require "thlua.type.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"
const AutoArguments = require "thlua.func.AutoArguments"

const Context = ContextClass()

(@do
	let.class = import("thlua.type.TypeClass").class
end)

function.class Context.new(vRuntime:class.Runtime,
	vApplyNode:class.IAstNode, vSealContext:OrFalse(class.Context), vParentContext:OrFalse(class.Context)):RetClass(class.Context)
	const self = setmetatable({.class
		_runtime=vRuntime,
		_manager=vRuntime:getTypeManager(),
		_node=vApplyNode,
		_namespace=false@Union(False, class.Namespace),
		_region=false@Union(False, class.Region),
		_classFnSet={} @ Dict(class.ClassFactory, True),
		_lateFnSet={} @ Dict(class.LateFnCom, True),
		_typeFn=false @ OrFalse(class.TypeFunction),
	}, Context)
	self._parentContext = vParentContext
	self._sealContext = vSealContext or self
	return self
end

--[[
function.pass Context:testLine(vNode:class.IAstNode, vName:String):Ret(class.IAstNode)
	local nInfo = debug.getinfo(2)
	if nInfo.currentline ~= vNode.l then
		print(nInfo.currentline, vNode.l, vName, vNode.tag, vNode.kind)
	end
	return vNode
end]]

function Context:setTypeFn(vTypeFn:class.TypeFunction)
	self._typeFn = vTypeFn
end

function Context:getTypeFn():Ret(OrFalse(class.TypeFunction))
	return self._typeFn
end

function Context:rootSetNamespace(vRootSpace:class.Namespace)
	assert(not self._namespace, "namespace has been setted")
	self._namespace = vRootSpace
end

function Context:BEGIN(vLexContext:class.Context, vRegionNode:class.IAstNode,
	vLuaFunc:class.LuaFunction, vUpCase:OrFalse(class.TermCase)):Ret(class.Region, class.SpaceTable, class.SpaceTable)
	assert(not self._region, "context can only begin once")
	const nRegion = Region.new(self, vLuaFunc:getFnCom(), vUpCase or TermCase.new())
	self._region = nRegion
	const nSpace = self._runtime:LetNamespace(vLexContext:getNamespace(), vRegionNode)
	self._namespace = nSpace
	return nRegion, nSpace.localExport, nSpace.globalExport
end

-- pack explist to termtuple or lazyfunc
(@let.UPackExpr = Union(class.TermTuple, class.RefineTerm, Fn():Ret(class.RefineTerm)))
function Context:EXPLIST_PACK(vNode:class.IAstNode, vLazy:Boolean, l:List(UPackExpr)):Ret(class.TermTuple):Ret(Fn():Ret(class.TermTuple))
	const nTermFalseList:List(Union(class.RefineTerm, False)) = {}
	const nIndexToFunc:Dict(Integer, Fn():Ret(class.RefineTerm)) = {}
	for i=1, #l-1 do
		const cur = l[i]
		if TermTuple.is(cur) then
			if #cur ~= 1 then
				self._runtime:nodeWarn(vNode, "tuple expect 1 value but get "..#cur)
			end
			nTermFalseList[i] = cur:get(1) or self:RefineTerm(self._manager.type.Nil)
		elseif RefineTerm.is(cur) then
			nTermFalseList[i] = cur
		elseif type(cur) == "function" then
			nIndexToFunc[i] = cur
			nTermFalseList[i] = false
		else
			error("unexcept branch")
		end
	end
	const lazyEvalFunc = function()
		for i, nFunc in pairs(nIndexToFunc) do
			nTermFalseList[i] = nFunc()
		end
	end
	local reFunc:OrNil(Fn():Ret(class.TermTuple))
	const nLastIndex = #l
	const nLast = l[nLastIndex]
	if not nLast then
		reFunc = function()
			return self:TermTuple({})
		end
	else
		-- force cast
		const nTermList = nTermFalseList @!! List(class.RefineTerm)
		if TermTuple.is(nLast) then
			reFunc = function()
				lazyEvalFunc()
				return self:TermTuple(nTermList, nLast)
			end
		else
			if RefineTerm.is(nLast) then
				nTermFalseList[nLastIndex] = nLast
			elseif type(nLast) == "function" then
				nIndexToFunc[nLastIndex] = nLast
				nTermFalseList[nLastIndex] = false
			else
				error("unexcept branch")
			end
			reFunc = function()
				lazyEvalFunc()
				return self:TermTuple(nTermList)
			end
		end
	end
	if vLazy then
		return reFunc
	else
		return reFunc()
	end
end

-- unpack explist to vNum term | termtuple
function.pass Context:EXPLIST_UNPACK(vNode:class.IAstNode, vNum:Number, ...:Union(class.RefineTerm, class.TermTuple))
	const l:List(Union(class.RefineTerm, class.TermTuple)) = {...}
	const re:List(class.RefineTerm) = {}
	for i=1, vNum do
		if i > #l then
			local last = l[#l]
			if TermTuple.is(last) then
				local value = last:get(i - #l + 1)
				if not value then
					self._runtime:nodeError(vNode, "exprlist_unpack but right tuple value not enough")
					re[i] = self:RefineTerm(self._manager.type.Nil)
				else
					re[i] = value
				end
			else
				self._runtime:nodeError(vNode, "exprlist_unpack but right value not enough")
				re[i] = self:RefineTerm(self._manager.type.Nil)
			end
		else
			local cur = l[i]
			if TermTuple.is(cur) then
				if (i < #l and #cur ~= 1) then
					self._runtime:nodeWarn(vNode, "exprlist_unpack except 1 value but has "..#cur)
				end
				re[i] = cur:get(1) or self:RefineTerm(self._manager.type.Nil)
			else
				re[i] = cur
			end
		end
	end
	return table.unpack(re)
end

-- unpack in function's argument & for_in
function.pass Context:TUPLE_UNPACK(vNode:class.IAstNode, vTuple:class.TermTuple, vNum:Number, vUseDots:Boolean)
	const l:List(Union(class.RefineTerm, class.TermTuple)) = {}
	for i=1, vNum do
		l[i] = vTuple:get(i)
	end
	if vUseDots then
		l[vNum + 1] = vTuple:getDots(vNum + 1)
	end
	return table.unpack(l)
end

-- meta items
function Context:META_GET(vNode:class.IAstNode, vTerm:class.RefineTerm, vKeyTerm:class.RefineTerm, vNotnil:Boolean):Ret(class.RefineTerm)
	local nGetContext = self:newSealContext(vNode)
	local nTypeCaseList:List(class.TypeCasePair) = {}
	local nOkay = self:nodePcall(vNode, function()
		vTerm:foreach(function(vType, vTermCase)
			vKeyTerm:foreach(function(vKeyType, vKeyTermCase)
				local nReType = vType:meta_get(nGetContext, vKeyType)
				if vNotnil then
					nReType = nReType:notnilType()
				end
				nTypeCaseList[#nTypeCaseList + 1] = {nReType, vTermCase & vKeyTermCase}
			end)
		end)
	end)
	if nOkay then
		return self._manager:mergeToRefineTerm(nTypeCaseList)
	else
		return self:TruthTerm()
	end
end

function Context:META_SET(vNode:class.IAstNode, vTerm, vKeyTerm, vValueTerm, vOverride)
	local nSetContext = self:newSealContext(vNode)
	self:nodePcall(vNode, function()
		local nNil = self._manager.type.Nil
		vTerm:foreach(function(vType, _)
			vKeyTerm:foreach(function(vKeyType)
				if vOverride then
					vType:meta_set_override(nSetContext, vKeyType, vValueTerm:getType())
				else
					vType:meta_set(nSetContext, vKeyType, vValueTerm:getType())
				end
			end)
		end)
	end)
end

(@let.FuncArgCaseList = List(Struct {class.IAtomType, class.UTypeTuple, class.TermCase}))
(@let.NativePair = Struct {Union(class.NativeFunction, class.LuaFunction), class.TermTuple})
function Context:_apply(vNode:class.IAstNode, vNativePair:OrNil(NativePair), vGenericArgs:List(class.UAllType), vFuncArgCaseList:FuncArgCaseList):Ret(class.TermTuple)
	const ok, err = self:nodePcall(vNode, function():Ret(class.TermTuple)
		const nListLen = #vFuncArgCaseList
		const nNativePair = vNativePair
		if nNativePair then
			if nListLen ~= 0 then
				self._runtime:nodeError(vNode, "can't mix call native function & not-native function")
				return self:TermTuple({})
			end
			return nNativePair[1]:meta_open_call(self:newOpenContext(vNode), nNativePair[2])
		elseif nListLen >= 1 then
			const nType1TupleCaseList:List(Struct {class.UAtomUnion, class.TypeTuple, class.TermCase}) = {}
			const nNil = self._manager.type.Nil
			local nMaxLength = 0
			for i, nFuncArgCase in ipairs(vFuncArgCaseList) do
				local f,a,c = nFuncArgCase[1], nFuncArgCase[2], nFuncArgCase[3]
				const nRetTuples = f:meta_poly_call(self:newSealContext(vNode), vGenericArgs, a)
				nRetTuples:foreachWithFirst(function(vTypeTuple, vFirst)
					local nLength = #vTypeTuple
					if nLength > nMaxLength then
						nMaxLength = nLength
					end
					nType1TupleCaseList[#nType1TupleCaseList + 1] = {
						vFirst:checkAtomUnion(), vTypeTuple, TermCase.new() & c
					}
				end)
			end
			if nMaxLength <= 0 then
				return self:TermTuple({})
			end
			local nTermList:List(class.RefineTerm) = {}
			for i=2,nMaxLength do
				local nCollection = self._manager:TypeCollection()
				for _, nType1TupleCase in pairs(nType1TupleCaseList) do
					nCollection:put(nType1TupleCase[2]:get(i) or nNil)
				end
				local nTypeI = nCollection:mergeToAtomUnion()
				nTermList[i] = self:RefineTerm(nTypeI)
			end
			local nTypeCaseList:List(class.TypeCasePair) = {}
			for _, nType1TupleCase in pairs(nType1TupleCaseList) do
				local nType1 = nType1TupleCase[1]
				local nTypeTuple = nType1TupleCase[2]
				local nCase = nType1TupleCase[3]
				for i=2,nMaxLength do
					nCase:put_and(nTermList[i]!:attachImmutShot(), nTypeTuple:get(i):checkAtomUnion())
				end
				nTypeCaseList[#nTypeCaseList + 1] = {
					nType1, nCase
				}
			end
			nTermList[1] = self._manager:mergeToRefineTerm(nTypeCaseList)
			return self:TermTuple(nTermList)
		else
			self._runtime:nodeError(vNode, "meta_poly_call function can't be Never")
			return self:TermTuple({})
		end
	end)
	if ok then
		return err
	else
		return self:TermTuple({})
	end
end

function Context:META_CALL(vNode:class.IAstNode,
	vFuncTerm:class.RefineTerm, vGenericArgs:List(class.UAllType), vLazyFunc:Fn():Ret(class.TermTuple)):Ret(class.TermTuple)
	local nNativePair:OrNil(NativePair) = nil
	const nFuncArgCaseList:FuncArgCaseList ={}
	const nNil = self._manager.type.Nil
	const nRegion = assert(self._region, "region not setted")
	vFuncTerm:foreach(function(vFuncType, vTermCase)
		local nArgTermTuple:OrNil(class.TermTuple) = nil
		nRegion:withBranch(vTermCase, function()
			nArgTermTuple = vLazyFunc()
		end)
		assert(nArgTermTuple, "must be true here")
		if vFuncType == nNil then
			self._runtime:nodeWarn(vNode, "nil as call func")
		elseif Truth.is(vFuncType) or TypeFunction.is(vFuncType) or NativeFunction.is(vFuncType) or LuaFunction.is(vFuncType) then
			if vFuncType:isNative() then
				if not nNativePair then
					nNativePair = {vFuncType, nArgTermTuple}
				else
					error("can't mix use native function")
				end
			else
				nFuncArgCaseList[#nFuncArgCaseList + 1] = {
					vFuncType, nArgTermTuple:getTypeTuple() , vTermCase
				}
			end
		else
			self._runtime:nodeError(vNode, "TODO non-function-call TODO"..tostring(vFuncType))
		end
	end)
	return self:_apply(vNode, nNativePair, vGenericArgs, nFuncArgCaseList)
end

function Context:META_INVOKE(vNode:class.IAstNode,
	vTerm:class.RefineTerm, vName:String, vGenericArgs:List(class.UAllType), vArgTuple:class.TermTuple):Ret(class.TermTuple)
	const nGetContext = self:newSealContext(vNode)
	local nNativePair:OrNil(NativePair) = nil
	const nFuncArgCaseList:FuncArgCaseList = {}
	const nNil = self._manager.type.Nil
	vTerm:foreach(function(vType, vTermCase)
		if vType == nNil then
			self._runtime:nodeWarn(vNode, "nil as invoke self")
		else
			const nNewArgTuple = self:TermTuple({self:RefineTerm(vType)}, vArgTuple)
			const nFuncType = vType:meta_get_invoke(nGetContext, self:Literal(vName))
			nFuncType:foreach(function(vSingleFuncType)
				if vSingleFuncType == nNil then
					self._runtime:nodeWarn(vNode, "nil as invoke func")
				elseif Truth.is(vSingleFuncType) or TypeFunction.is(vSingleFuncType) or NativeFunction.is(vSingleFuncType) or LuaFunction.is(vSingleFuncType) then
					if vSingleFuncType:isNative() then
						if not nNativePair then
							nNativePair = {vSingleFuncType, nNewArgTuple}
						else
							error("can't mix use native function")
						end
					else
						nFuncArgCaseList[#nFuncArgCaseList + 1] = {
							vSingleFuncType, nNewArgTuple:getTypeTuple(), vTermCase
						}
					end
				else
					self._runtime:nodeError(vNode, "TODO non-function-call TODO"..tostring(vSingleFuncType))
				end
			end)
		end
	end)
	return self:_apply(vNode, nNativePair, vGenericArgs, nFuncArgCaseList)
end

function Context:META_EQ_NE(vNode:class.IAstNode,
	vIsEq:Boolean, vLeftTerm:class.RefineTerm, vRightTerm:class.RefineTerm):Ret(class.RefineTerm)
	const nTypeCaseList:List(class.TypeCasePair) = {}
	vLeftTerm:foreach(function(vLeftType, vLeftTermCase)
		vRightTerm:foreach(function(vRightType, vRightTermCase)
			local nReType:OrNil(class.UAtomUnion) = nil
			if vLeftType:isSingleton() and vRightType:isSingleton() then
				-- TODO check for named type
				const nTypeIsEq = vLeftType == vRightType
				if vIsEq == nTypeIsEq then
					nReType = self._manager.type.True
				else
					nReType = self._manager.type.False
				end
			elseif not (vLeftType & vRightType):isNever() then
				nReType = self._manager.type.Boolean:checkAtomUnion()
			else
				if vIsEq then
					nReType = self._manager.type.False
				else
					nReType = self._manager.type.True
				end
			end
			nTypeCaseList[#nTypeCaseList + 1] = {nReType, vLeftTermCase & vRightTermCase}
		end)
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function Context:META_BOP_SOME(vNode:class.IAstNode, vOper:String, vLeftTerm:class.RefineTerm, vRightTerm:class.RefineTerm):Ret(class.RefineTerm)
	const nBopContext = self:newSealContext(vNode)
	const nCollection = self._manager:TypeCollection()
	vLeftTerm:foreach(function(vLeftType, vLeftTermCase)
		const nLeftHigh, nLeftFunc = vLeftType:meta_bop_func(nBopContext, vOper)
		if nLeftHigh then
			const nRightType = vRightTerm:getType()
			const nTypeTuple = self._manager:Tuple(vLeftType, vRightTerm:getType())
			const nRetTuples = nLeftFunc:meta_poly_call(self:newSealContext(vNode), {vLeftType, nRightType}, nTypeTuple)
			nCollection:put(nRetTuples:getFirstType())
		else
			vRightTerm:foreach(function(vRightType, vRightTermCase)
				const nRightHigh, nRightFunc = vRightType:meta_bop_func(nBopContext, vOper)
				if nRightHigh then
					const nTypeTuple = self._manager:Tuple(vLeftType, vRightType)
					const nRetTuples = nRightFunc:meta_poly_call(self:newSealContext(vNode), {vLeftType, vRightType}, nTypeTuple)
					nCollection:put(nRetTuples:getFirstType())
				else
					if nLeftFunc and nRightFunc and nLeftFunc == nRightFunc then
						const nTypeTuple = self._manager:Tuple(vLeftType, vRightType)
						const nRetTuples = nLeftFunc:meta_poly_call(self:newSealContext(vNode), {vLeftType, vRightType}, nTypeTuple)
						nCollection:put(nRetTuples:getFirstType())
					else
						self._runtime:nodeError(vNode, "invalid bop:"..vOper)
					end
				end
			end)
		end
	end)
	return self._manager:RefineTerm(nCollection:mergeToAtomUnion())
end

function Context:META_UOP(vNode:class.IAstNode, vOper:String, vData:class.RefineTerm):Ret(class.RefineTerm)
	const nUopContext = self:newSealContext(vNode)
	const nTypeCaseList:List(class.TypeCasePair) = {}
	if vOper == "#" then
		vData:foreach(function(vType, vTermCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_len(nUopContext),
				vTermCase
			}
		end)
	else
		vData:foreach(function(vType, vTermCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_uop_some(nUopContext, vOper),
				vTermCase
			}
		end)
	end
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function.open Context:nodePcall(vNode:class.IAstNode, vFunc:Fn(), ...)
	const ok, err = xpcall(vFunc, function(exc):Ret(class.Exception)
		if Exception.is(exc) then
			return exc
		else
			print("[ERROR] "..tostring(vNode), tostring(exc))
			print(debug.traceback())
			return Exception.new("[FATAL]"..tostring(exc), vNode)
		end
	end, ...)
	if not ok then
		error(err)
	end
	return ok, err
end

function Context:getRegion():Ret(class.Region)
	return (assert(self._region, "region not create when context getRegion"))
end

function Context:getParentContext():Ret(OrFalse(class.Context))
	return self._parentContext
end

(@let.VariableOrType = import("thlua.func.AutoArguments").VariableOrType)
function Context:AutoArguments(vNode:class.IAstNode, vArgList:List(VariableOrType), vArgDots:OrFalse(VariableOrType))
	:Ret(class.AutoArguments)
	return AutoArguments.new(self._manager, vNode, vArgList, vArgDots)
end

function Context:FUNC_NEW(
	vNode:class.IAstNode,
	vPrefixHint:class.TLongHintInfo(Nil),
	vHasRet:Boolean,
	vTypeFnGen:Fn(List(class.UAllType)):Ret(class.AutoArguments, class.TLongHintInfo(class.FnLongHint)),
	vFunc:class.GenFunc
):Ret(class.LuaFunction)
	const nBuilder = FunctionBuilder.new(self, vNode, vPrefixHint, vHasRet, vTypeFnGen, vFunc)
	const nLuaFunc = nBuilder:build()
	const nRegion = self._region
	return nLuaFunc, nRegion and nRegion:topBranch():getCase()
end

(@let.PairMaker = import("thlua.builder.TableBuilder").PairMaker)
function Context:TABLE_NEW(vNode:class.IAstNode, vHintInfo:class.TLongHintInfo(class.TableLongHint), vPairMaker:PairMaker):Ret(class.LuaTable)
	local nBuilder = TableBuilder.new(self, vNode, vHintInfo, vPairMaker)
	return nBuilder:build()
end

function Context:EVAL(vNode:class.IAstNode, vTerm:Truth):Ret(class.UAtomUnion)
	if RefineTerm.is(vTerm) then
		return vTerm:getType()
	else
		self:getRuntime():nodeError(vNode, "hint eval fail")
		error("hint eval fail")
	end
end

function Context:HINT(vNode:class.IAstNode, vTerm:class.RefineTerm, vType:class.UAllType):Ret(class.RefineTerm)
	-- TODO check cast valid
	if not vType:containAll(vTerm:getType()) then
		-- self:getRuntime():nodeError(vNode, "@ cast fail")
	end
	return self._manager:RefineTerm(vType)
end

function Context:castLuaType(vSrcType:class.UAllType, vDstType:class.UAllType):Ret(OrFalse(class.UAtomUnion))
	if LuaFunction.is(vSrcType) then
		const nFnPartType = vDstType:fnPartType()
		if TypeFunction.is(nFnPartType) then
			return vSrcType:cast(self, nFnPartType)
		end
	else
		const nSrcTable = vSrcType:objectPartType()
		const nDstObjectPart = vDstType:objectPartType()
		if LuaTable.is(nSrcTable) and not nDstObjectPart:isNever() then
			const nCastResult = nSrcTable:cast(self, vDstType:objectPartType())
			if nCastResult then
				return self._manager:checkedUnion(nSrcTable, nCastResult)
			else
				return false
			end
		end
	end
	return false
end

return Context
