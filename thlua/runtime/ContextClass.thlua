
const RefineTerm = require "thlua.term.RefineTerm"
const Exception = require "thlua.Exception"

(@let.class = import("thlua.type.TypeClass").class)

const function.open ContextClass()
	const Context = {}
	Context.__index=Context
	function Context:__tostring():Ret(String)
		return "context:"..tostring(self:getNode())
	end

	function Context:TermTuple(a:List(class.RefineTerm),b:OrNil(class.TermTuple)):Ret(class.TermTuple)
		return self._manager:TermTuple(a,b)
	end

	function Context:RefineTerm(vType:class.UAllType):Ret(class.RefineTerm)
		return self._manager:RefineTerm(vType)
	end

	function Context:NumberTerm():Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Number)
	end

	function Context:NeverTerm():Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Never)
	end

	function Context:TruthTerm():Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Truth)
	end

	function Context:NilTerm():Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Nil)
	end

	function Context:BooleanTerm(vValue:Boolean):Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager:Boolean(vValue))
	end

	function Context:LiteralTerm(v:Union(String, Number)):Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self:Literal(v))
	end

	function Context:Literal(vValue:Union(String, Number)):Ret(Union(class.StringLiteral, class.NumberLiteral))
		return self._manager:Literal(vValue)
	end

	function Context:error(...:Truth)
		self._runtime:nodeError(self._node, ...)
	end

	function Context:warn(...:Truth)
		self._runtime:nodeWarn(self._node, ...)
	end

	function Context:info(...:Truth)
		self._runtime:nodeInfo(self._node, ...)
	end

	function Context:newSealContext(vNode:class.IAstNode):Ret(class.Context)
		return self._runtime:newContext(vNode, false, self)
	end

	function Context:newOpenContext(vNode:class.IAstNode):Ret(class.Context)
		return self._runtime:newContext(vNode, self._sealContext, self)
	end

	function Context:getNode():Ret(class.IAstNode)
		return self._node
	end

	function Context:getNamespace():Ret(class.Namespace)
		local nSpace = self._namespace
		return assert(nSpace, "space is false when get")
	end

	function Context:getRuntime():Ret(class.Runtime)
		return self._runtime
	end

	function Context:getTypeManager():Ret(class.TypeManager)
		return self._manager
	end

	function Context:recordLateLuaFunction(vFunc:class.LateFnCom)
		if self._sealContext == self then
			self._lateFnSet[vFunc] = true
		else
			self._sealContext:recordLateLuaFunction(vFunc)
		end
	end

	function Context:recordDefineLuaFunction(vFunc:class.ClassReferCom)
		if self._sealContext ~= self then
			self._sealContext:recordDefineLuaFunction(vFunc)
			return
		else
			self._classFnSet[vFunc] = true
		end
	end

	function Context:checkDefineLuaFunction()
		for fn, v in pairs(self._classFnSet) do
			fn:startBuild()
		end
	end

	function Context:checkLateLuaFunction()
		for fn, v in pairs(self._lateFnSet) do
			fn:checkLateRun()
		end
	end

	function Context:seal()
		if self._sealContext == self then
			self:checkDefineLuaFunction()
			self:checkLateLuaFunction()
		end
	end

	return Context
end

return ContextClass
