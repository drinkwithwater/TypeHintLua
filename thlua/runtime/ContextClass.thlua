
local FunctionBuilder = require "thlua.builder.FunctionBuilder"
local TableBuilder = require "thlua.builder.TableBuilder"
local UnionTerm = require "thlua.term.UnionTerm"
local Variable = require "thlua.func.Variable"
local AutoArguments = require "thlua.func.AutoArguments"
local Exception = require "thlua.Exception"

local LuaFunction = require "thlua.func.LuaFunction"
local TypeFunction = require "thlua.func.TypeFunction"
local LuaTable = require "thlua.object.LuaTable"
local Struct = require "thlua.object.Struct"

(@let.class = import("thlua.type.TypeClass").class)

local function ContextClass()::open()
	local Context = {}
	Context.__index=Context
	function Context:__tostring()::Ret(String)
		return "context:"..tostring(self:getNode())
	end

	function Context:TABLE_NEW(vNode, vHinterHandler, vPairMaker)::Ret(class.LuaTable)
		local nData, nHintMethod = TableBuilder.Begin(self, vNode, vPairMaker)
		vHinterHandler(nHintMethod)
		local nTableType = TableBuilder.End(nData)
		return nTableType
	end

	function Context:FUNC_NEW(vNode, vHintCallback, vAutoArgs, vHasRet, vFunc)::Ret(class.LuaFunction)
		local nBuilder = FunctionBuilder.new(self, vNode, vAutoArgs, vHasRet, vFunc)
		local ok, err = pcall(vHintCallback, nBuilder:newLongHint())
		if not ok then
			error(Exception.new(err, vNode))
		end
		local nLuaFunc = nBuilder:build()
		return nLuaFunc
	end

	function Context:AutoArguments(vNode, vArgList, vArgDots)::Ret(class.AutoArguments)
		return AutoArguments.new(self._manager, vNode, vArgList, vArgDots)
	end

	function Context:HINT(vNode, vTerm, vType)::Ret(class.UnionTerm)
		-- TODO check cast valid
		return self._manager:UnionTerm(vType)
	end

	function Context:TermTuple(a,b)::Ret(class.TermTuple)
		return self._manager:TermTuple(a,b)
	end

	function Context:UnionTerm(vType)::Ret(class.UnionTerm)
		return self._manager:UnionTerm(vType)
	end

	function Context:NumberTerm()::Ret(class.UnionTerm)
		return UnionTerm.new(self._manager, self._manager.type.Number)
	end

	function Context:NeverTerm()::Ret(class.UnionTerm)
		return UnionTerm.new(self._manager, self._manager.type.Never)
	end

	function Context:TruthTerm()::Ret(class.UnionTerm)
		return UnionTerm.new(self._manager, self._manager.type.Truth)
	end

	function Context:NilTerm()::Ret(class.UnionTerm)
		return UnionTerm.new(self._manager, self._manager.type.Nil)
	end

	function Context:LiteralTerm(v)
		return UnionTerm.new(self._manager, self:Literal(v))
	end

	function Context:Literal(vValue)::Ret(Union(class.StringLiteral, class.NumberLiteral))
		return self._manager:Literal(vValue)
	end

	function Context:error(...:Truth)
		self._runtime:nodeError(self._node, ...)
	end

	function Context:warn(...:Truth)
		self._runtime:nodeWarn(self._node, ...)
	end

	function Context:info(...:Truth)
		self._runtime:nodeInfo(self._node, ...)
	end

	function Context:newSealContext(vNode:class.AstNode)::Ret(class.Context)
		return self._runtime:newContext(vNode, false)
	end

	function Context:newOpenContext(vNode:class.AstNode)::Ret(class.Context)
		return self._runtime:newContext(vNode, self._sealContext)
	end

	function Context:getNode()::Ret(class.AstNode)
		return self._node
	end

	function Context:getNamespace()::Ret(class.Namespace)
		return self._namespace
	end

	function Context:getRuntime()::Ret(class.Runtime)
		return self._runtime
	end

	function Context:Variable(vIsGeneric)
		return self._manager:Variable(vIsGeneric)
	end

	function Context:getTypeManager()::Ret(class.TypeManager)
		return self._manager
	end

	function Context:recordLateLuaFunction(vFunc)
		if self._sealContext == self then
			self._lateFnDict[vFunc] = true
		else
			self._sealContext:recordLateLuaFunction(vFunc)
		end
	end

	function Context:recordDefineLuaFunction(vFunc)
		if self._sealContext == self then
			self._defineFnDict[vFunc] = true
		else
			self._sealContext:recordDefineLuaFunction(vFunc)
		end
	end

	function Context:checkDefineLuaFunction()
		for fn, v in pairs(self._defineFnDict) do
			fn:checkDefine()
		end
	end

	function Context:checkLateLuaFunction()
		for fn, v in pairs(self._lateFnDict) do
			fn:checkLateRun()
		end
	end

	function Context:seal()
		if self._sealContext == self then
			self:checkDefineLuaFunction()
			self:checkLateLuaFunction()
		end
	end

	function Context:cast(vSrcType, vDstType)::Ret(Boolean)
		vSrcType = vSrcType:checkType()
		vDstType = vDstType:checkType()
		if LuaFunction.is(vSrcType) and TypeFunction.is(vDstType) then
			return vSrcType:cast(self, vDstType)
		elseif LuaTable.is(vSrcType) and Struct.is(vDstType) then
			return vSrcType:cast(self, vDstType)
		end
		return false
	end

	return Context
end

return ContextClass
