
const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const RefineTerm = require "thlua.term.RefineTerm"
const Variable = require "thlua.func.Variable"
const AutoArguments = require "thlua.func.AutoArguments"
const Exception = require "thlua.Exception"

(@let.class = import("thlua.type.TypeClass").class)

const function ContextClass()::open()
	const Context = {}
	Context.__index=Context
	function Context:__tostring()::Ret(String)
		return "context:"..tostring(self:getNode())
	end

	function Context:FUNC_NEW(vNode:class.IAstNode, vHintCallback:Fn(class.FnLongHint),
		vAutoArgs:class.AutoArguments, vHasRet:Boolean, vFunc:class.GenFunc)::Ret(class.LuaFunction)
		local nBuilder = FunctionBuilder.new(self, vNode, vAutoArgs, vHasRet, vFunc)
		local nLongHint = nBuilder:makeLongHint()
		local ok, err = pcall(vHintCallback, nLongHint)
		if not ok then
			error(Exception.new(tostring(err), vNode))
		end
		local nLuaFunc = nBuilder:build()
		const nRegion = self:getRegion()
		return nLuaFunc, nRegion and nRegion:top_branch():getCase()
	end

	(@let.VariableOrType = import("thlua.func.AutoArguments").VariableOrType)
	function Context:AutoArguments(vNode:class.IAstNode, vArgList:List(VariableOrType), vArgDots:VariableOrType)
		::Ret(class.AutoArguments)
		return AutoArguments.new(self._manager, vNode, vArgList, vArgDots)
	end

	function Context:TermTuple(a:List(class.RefineTerm),b:OrNil(class.TermTuple))::Ret(class.TermTuple)
		return self._manager:TermTuple(a,b)
	end

	function Context:RefineTerm(vType:class.UAllType)::Ret(class.RefineTerm)
		return self._manager:RefineTerm(vType)
	end

	function Context:NumberTerm()::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Number)
	end

	function Context:NeverTerm()::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Never)
	end

	function Context:TruthTerm()::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Truth)
	end

	function Context:NilTerm()::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager.type.Nil)
	end

	function Context:BooleanTerm(vValue)::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self._manager:Boolean(vValue))
	end

	function Context:LiteralTerm(v:Union(String, Number))::Ret(class.RefineTerm)
		return RefineTerm.new(self._manager, self:Literal(v))
	end

	function Context:Literal(vValue:Union(String, Number))::Ret(Union(class.StringLiteral, class.NumberLiteral))
		return self._manager:Literal(vValue)
	end

	function Context:error(...:Truth)
		self._runtime:nodeError(self._node, ...)
	end

	function Context:warn(...:Truth)
		self._runtime:nodeWarn(self._node, ...)
	end

	function Context:info(...:Truth)
		self._runtime:nodeInfo(self._node, ...)
	end

	function Context:newSealContext(vNode:class.IAstNode)::Ret(class.Context)
		return self._runtime:newContext(vNode, false, self)
	end

	function Context:newOpenContext(vNode:class.IAstNode)::Ret(class.Context)
		return self._runtime:newContext(vNode, self._sealContext, self)
	end

	function Context:getNode()::Ret(class.IAstNode)
		return self._node
	end

	function Context:getNamespace()::Ret(class.Namespace)
		local nSpace = self._namespace
		return assert(nSpace, "space is false when get")
	end

	function Context:getRuntime()::Ret(class.Runtime)
		return self._runtime
	end

	function Context:Variable(vIsGeneric:Boolean)::Ret(class.Variable)
		return self._manager:Variable(vIsGeneric)
	end

	function Context:getTypeManager()::Ret(class.TypeManager)
		return self._manager
	end

	function Context:recordLateLuaFunction(vFunc:class.LateFnCom)
		if self._sealContext == self then
			self._lateFnSet[vFunc] = true
		else
			self._sealContext:recordLateLuaFunction(vFunc)
		end
	end

	function Context:recordDefineLuaFunction(vFunc:class.ClassFnCom)
		if self._sealContext ~= self then
			self._sealContext:recordDefineLuaFunction(vFunc)
			return
		end
		self._classFnSet[vFunc] = true
		const co = coroutine.running()
		const sid = self._manager:genSessionId()
		self._startClassCoToSid[co] = sid
		self._manager:coWait(co, sid)
	end

	function Context:checkDefineLuaFunction()
		for co, sid in pairs(self._startClassCoToSid) do
			self._manager:coWakeup(co, sid)
		end
		for fn, v in pairs(self._classFnSet) do
			fn:checkDefine()
		end
	end

	function Context:checkLateLuaFunction()
		for fn, v in pairs(self._lateFnSet) do
			fn:checkLateRun()
		end
	end

	function Context:seal()
		if self._sealContext == self then
			self:checkDefineLuaFunction()
			self:checkLateLuaFunction()
		end
	end

	return Context
end

return ContextClass
