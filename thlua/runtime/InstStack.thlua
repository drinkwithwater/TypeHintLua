
const DoBuilder = require "thlua.builder.DoBuilder"
const Branch = require "thlua.runtime.Branch"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.auto.AutoTail"
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoFlag = require "thlua.auto.AutoFlag"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"
const Reference = require "thlua.refer.Reference"
const Node = require "thlua.code.Node"
const Enum = require "thlua.Enum"
const LocalSymbol = require "thlua.term.LocalSymbol"
const ImmutVariable = require "thlua.term.ImmutVariable"

const BaseFunction = require "thlua.func.BaseFunction"
const TypedObject = require "thlua.object.TypedObject"
const OpenTable = require "thlua.object.OpenTable"
const Truth = require "thlua.type.Truth"

const FunctionBuilder = require "thlua.builder.FunctionBuilder"
const TableBuilder = require "thlua.builder.TableBuilder"
const class = require "thlua.class"
const BaseStack = require "thlua.runtime.BaseStack"

const OperContext = require "thlua.context.OperContext"
const ApplyContext = require "thlua.context.ApplyContext"
const LogicContext = require "thlua.context.LogicContext"

(@do
	let.clazz = import($class).clazz
	let.node = import("thlua.code.Node").node
end)

const InstStack = class@<clazz.InstStack, false>(BaseStack)

function InstStack:AUTO(vNode:clazz.IAstNode):Ret(clazz.AutoFlag)
	return AutoFlag
end

function InstStack:BEGIN(vLexStack:clazz.BaseStack, vBlockNode:node.Block):Ret(clazz.LocalSpaceTable, clazz.GlobalSpaceTable)
	assert(not self._namespace, "context can only begin once")
	const nUpState = self._lexShot
	const nRootBranch = Branch.new(self, nUpState and nUpState.uvCase or VariableCase.new(), nUpState and nUpState.branch or false, vBlockNode)
	self._branchStack[1]=nRootBranch
	const nSpace = self._runtime:LetNamespace(vLexStack:getNamespace(), vBlockNode)
	self._namespace = nSpace
	return nSpace.localExport, nSpace.globalExport
end

-- pack explist to termtuple or lazyfunc
function InstStack:EXPRLIST_REPACK(
	vNode:clazz.IAstNode,
	vLazy:Boolean,
	l:List(Union(clazz.UTermTuple, clazz.UAutoTerm, Fn():Ret(clazz.UAutoTerm)))
):Ret(clazz.UTermTuple):Ret(Fn():Ret(clazz.UTermTuple))
	const nPackContext = self:newOperContext(vNode)
	local reFunc:OrNil(Fn():Ret(clazz.UTermTuple))
	const nLastIndex = #l
	const nLast = l[nLastIndex]
	if not nLast then
		reFunc = function()
			return nPackContext:FixedTermTuple({})
		end
	else
		const repackWithoutLast = function():Ret(List(clazz.UAutoTerm))
			const nTermList:List(clazz.UAutoTerm) = {}
			for i=1, #l-1 do
				const cur = l[i]
				if TermTuple.is(cur) then
					if #cur ~= 1 then
						-- self._runtime:nodeWarn(vNode, "tuple expect 1 value but get "..#cur)
					end
					nTermList[i] = cur:get(nPackContext, 1)
				elseif RefineTerm.is(cur) or AutoHolder.is(cur) then
					nTermList[i] = cur
				elseif type(cur) == "function" then
					nTermList[i] = cur()
				else
					error("unexcept branch")
				end
			end
			return nTermList
		end
		-- force cast
		if TermTuple.is(nLast) then
			reFunc = function()
				return nPackContext:UTermTupleByAppend(repackWithoutLast(), nLast)
			end
		else
			reFunc = function()
				const nTermList = repackWithoutLast()
				if RefineTerm.is(nLast) or AutoHolder.is(nLast) then
					nTermList[#nTermList + 1] = nLast
				elseif type(nLast) == "function" then
					nTermList[#nTermList + 1] = nLast()
				else
					error("unexcept branch")
				end
				return nPackContext:UTermTupleByAppend(nTermList, false)
			end
		end
	end
	if vLazy then
		return reFunc
	else
		return reFunc()
	end
end

-- unpack explist to vNum term | termtuple
function InstStack:EXPRLIST_UNPACK(
	vNode:clazz.IAstNode,
	vNum:Number,
	...:Union(clazz.RefineTerm, clazz.FixedTermTuple)
):RetDots(clazz.RefineTerm)
	const nUnpackContext = self:newOperContext(vNode)
	const l:List(Union(clazz.RefineTerm, clazz.FixedTermTuple)) = {...}
	const re:List(clazz.RefineTerm) = {}
	for i=1, vNum do
		if i > #l then
			local last = l[#l]
			if TermTuple.is(last) then
				const nIndex = i - #l + 1
				re[i] = last:get(nUnpackContext, nIndex)
				-- if not last:rawget(nIndex) and not last:getTail() then
					-- self._runtime:nodeError(vNode, "exprlist_unpack but right tuple value not enough")
				-- end
			else
				self._runtime:nodeError(vNode, "exprlist_unpack but right value not enough")
				re[i] = nUnpackContext:RefineTerm(self._manager.type.Nil)
			end
		else
			local cur = l[i]
			if TermTuple.is(cur) then
				re[i] = cur:get(nUnpackContext, 1)
			else
				re[i] = cur
			end
		end
	end
	return table.unpack(re)
end

-- meta items
function InstStack:META_GET(
	vNode:Union(node.Ident_use, node.Index, node.Invoke),
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vNotnil:Boolean
):Ret(clazz.RefineTerm)
	return self:anyNodeMetaGet(vNode, vSelfTerm, vKeyTerm, vNode.notnil or false)
end

function InstStack:META_SET(
	vNode:Union(node.Ident_use, node.Index),
	vSelfTerm:clazz.RefineTerm,
	vKeyTerm:clazz.RefineTerm,
	vValueTerm:clazz.RefineTerm
)
	const nNil = self._manager.type.Nil
	const vContext = self:newNoPushContext(vNode)
	vSelfTerm:foreach(function(vSelfType, _)
		vKeyTerm:foreach(function(vKeyType, _)
			vSelfType:meta_set(vContext, vKeyType, vValueTerm)
		end)
	end)
end

function InstStack:META_CALL(
	vNode:clazz.IAstNode,
	vFuncTerm:clazz.RefineTerm,
	vLazyFunc:Fn():Ret(clazz.UTermTuple)
):Ret(clazz.UOpenReturn)
	const nCtx = self:prepareMetaCall(vNode, vFuncTerm, vLazyFunc)
	return nCtx:mergeReturn()
end

function InstStack:META_INVOKE(
	vNode:node.Invoke,
	vSelfTerm:clazz.RefineTerm,
	vName:String,
	vPolyArgs:List(clazz.UAllType),
	vArgTuple:clazz.FixedTermTuple
):Ret(clazz.UOpenReturn)
	assert(vPolyArgs, "poly args can't be nil here")
	const nNil = self._manager.type.Nil
	return self:withMorePushContextWithCase(vNode, vSelfTerm, function(vContext, vSelfType, vCase)
		if vSelfType == nNil then
			vContext:error("nil as invoke self")
		else
			const nFilterSelfTerm = vContext:RefineTerm(vSelfType)
			const nNewArgTuple = vContext:UTermTupleByAppend({nFilterSelfTerm}, vArgTuple)
			const nFuncTerm = self:META_GET(vNode, nFilterSelfTerm, vContext:RefineTerm(self._manager:Literal(vName)), false)
			nFuncTerm:foreach(function(vSingleFuncType, _)
				if vSingleFuncType == nNil then
					vContext:error("nil as invoke func")
				elseif Truth.is(vSingleFuncType) or BaseFunction.is(vSingleFuncType) then
					vSingleFuncType:meta_invoke(vContext, vSelfType, vPolyArgs, nNewArgTuple)
				else
					vContext:error("TODO non-function type called "..tostring(vSingleFuncType))
				end
			end)
		end
	end):mergeReturn()
end

function InstStack:META_EQ_NE(
	vNode:clazz.IAstNode,
	vIsEq:Boolean,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nCmpContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
		vRightTerm:foreach(function(vRightType, vRightVariableCase)
			local nReType:OrNil(clazz.UAtomUnion) = nil
			if vLeftType:isSingleton() and vRightType:isSingleton() then
				-- TODO check for named type
				const nTypeIsEq = vLeftType == vRightType
				if vIsEq == nTypeIsEq then
					nReType = self._manager.type.True
				else
					nReType = self._manager.type.False
				end
			elseif not (vLeftType & vRightType):isNever() then
				nReType = self._manager.type.Boolean:checkAtomUnion()
			else
				if vIsEq then
					nReType = self._manager.type.False
				else
					nReType = self._manager.type.True
				end
			end
			nTypeCaseList[#nTypeCaseList + 1] = {nReType, vLeftVariableCase & vRightVariableCase}
		end)
	end)
	return nCmpContext:mergeToRefineTerm(nTypeCaseList)
end

function InstStack:META_BOP_SOME(
	vNode:clazz.IAstNode,
	vOper:String,
	vLeftTerm:clazz.RefineTerm,
	vRightTerm:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	return self:withOnePushContext(vNode, function(vContext)
		vLeftTerm:foreach(function(vLeftType, vLeftVariableCase)
			const nLeftHigh, nLeftFunc = vLeftType:meta_bop_func(vContext, vOper)
			if nLeftHigh then
				const nRightType = vRightTerm:getType()
				const nTermTuple = vContext:FixedTermTuple({
					vLeftTerm:filter(vContext, vLeftType), vRightTerm
				})
				vContext:withCase(vLeftVariableCase, function()
					nLeftFunc:meta_call(vContext, nTermTuple)
				end)
			else
				vRightTerm:foreach(function(vRightType, vRightVariableCase)
					const nRightHigh, nRightFunc = vRightType:meta_bop_func(vContext, vOper)
					if nRightHigh then
						const nTermTuple = vContext:FixedTermTuple({
							vLeftTerm:filter(vContext, vLeftType),
							vRightTerm:filter(vContext, vRightType)
						})
						vContext:withCase(vLeftVariableCase & vRightVariableCase, function()
							nRightFunc:meta_call(vContext, nTermTuple)
						end)
					else
						if nLeftFunc and nRightFunc and nLeftFunc == nRightFunc then
							const nTermTuple = vContext:FixedTermTuple({
								vLeftTerm:filter(vContext, vLeftType),
								vRightTerm:filter(vContext, vRightType)
							})
							vContext:withCase(vLeftVariableCase & vRightVariableCase, function()
								nRightFunc:meta_call(vContext, nTermTuple)
							end)
						else
							self._runtime:nodeError(vNode, "invalid bop:"..vOper)
						end
					end
				end)
			end
		end)
	end):mergeFirst()
end

function InstStack:META_UOP(
	vNode:clazz.IAstNode,
	vOper:String,
	vData:clazz.RefineTerm
):Ret(clazz.RefineTerm)
	const nUopContext = self:newOperContext(vNode)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	if vOper == "#" then
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_len(nUopContext),
				vVariableCase
			}
		end)
	else
		vData:foreach(function(vType, vVariableCase)
			nTypeCaseList[#nTypeCaseList + 1] = {
				vType:meta_uop_some(nUopContext, vOper),
				vVariableCase
			}
		end)
	end
	return nUopContext:mergeToRefineTerm(nTypeCaseList)
end

function InstStack:CHUNK_TYPE(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm):Ret(clazz.UAtomUnion)
	return vTerm:getType()
end

function InstStack:FUNC_NEW(vNode:Union(node.Function, node.Chunk),
	vFnNewInfo:clazz.FuncNewInfo,
	vPrefixHint:clazz.TLongHintInfo(clazz.FnPrefixHint),
	vParRetMaker:clazz.GenMaker
):Ret(clazz.RefineTerm)
	const nBranch = self:topBranch()
	const nFnType = FunctionBuilder.new(self, vNode, {
		branch=nBranch,
		uvCase=nBranch:getCase(),
	}, vFnNewInfo, vPrefixHint, vParRetMaker):build()
	return self:_nodeTerm(vNode, nFnType)
end

(@let.PairMaker = import("thlua.builder.TableBuilder").PairMaker)
function InstStack:TABLE_NEW(vNode:clazz.IAstNode, vHintInfo:clazz.TLongHintInfo(clazz.TableLongHint), vPairMaker:PairMaker):Ret(clazz.RefineTerm)
	local nBuilder = TableBuilder.new(self, vNode, vHintInfo, vPairMaker)
	const nTableType = nBuilder:build()
	return self:_nodeTerm(vNode, nTableType)
end

function InstStack:EVAL(vNode:clazz.IAstNode, vTerm:Truth):Ret(clazz.UAtomUnion)
	if RefineTerm.is(vTerm) then
		return vTerm:getType()
	else
		self:getRuntime():nodeError(vNode, "hint eval fail")
		error("hint eval fail")
	end
end

function InstStack:CAST_HINT(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vCastKind:node.CastKindEnum, ...:Any):Ret(clazz.RefineTerm)
	const nCastContext = self:newAssignContext(vNode)
	-- TODO check cast valid
	if vCastKind == Enum.CastKind_POLY then
		const nTypeCaseList:List(clazz.TypeCasePair) = {}
		const nTemplateList:List(clazz.UAllType) = self._manager:easyToTypeList(...)
		vTerm:foreach(function(vType, vVariableCase)
			const nAfterType = vType:castPoly(nCastContext, nTemplateList)
			if nAfterType then
				nTypeCaseList[#nTypeCaseList + 1] = {nAfterType, vVariableCase}
			else
				nTypeCaseList[#nTypeCaseList + 1] = {vType, vVariableCase}
			end
		end)
		return nCastContext:mergeToRefineTerm(nTypeCaseList)
	else
		const nDst = assert(..., "hint type can't be nil")
		const nDstType = self._manager:easyToType(nDst):checkAtomUnion()
		const nSrcType = vTerm:getType()
		if vCastKind == Enum.CastKind_CONIL then
			nCastContext:includeAndCast(nDstType, nSrcType:notnilType(), Enum.CastKind_CONIL)
		elseif vCastKind == Enum.CastKind_COVAR then
			nCastContext:includeAndCast(nDstType, nSrcType, Enum.CastKind_COVAR)
		elseif vCastKind == Enum.CastKind_CONTRA then
			if not (nSrcType:includeAll(nDstType) or nDstType:includeAll(nSrcType)) then
				nCastContext:error("@> cast fail")
			end
		elseif vCastKind ~= Enum.CastKind_FORCE then
			vContext:error("unexcepted castkind:"..tostring(vCastKind))
		end
		return nCastContext:RefineTerm(nDstType)
	end
end

function InstStack:NIL_TERM(vNode:clazz.IAstNode)
	return self:_nodeTerm(vNode, self._manager.type.Nil)
end

function InstStack:HINT_TERM(vNode:node.HintTerm, vType:clazz.UAllType)
	return self:_nodeTerm(vNode, vType:checkAtomUnion())
end

function InstStack:LITERAL_TERM(vNode:clazz.IAstNode, vValue:Union(String, Number, Boolean))
	const nType = self._manager:Literal(vValue)
	return self:_nodeTerm(vNode, nType)
end

function InstStack:SYMBOL_SET(vNode:node.Ident_use, vDefineNode:node.Ident_def, vTerm:clazz.UAutoTerm)
	const nBranch = self:topBranch()
	const nSymbol = nBranch:getSymbolByNode(vDefineNode)
	const nSymbolContext = self:newAssignContext(vNode)
	assert(not ImmutVariable.is(nSymbol), nSymbolContext:newException("immutable symbol can't set "))
	assert(not AutoHolder.is(nSymbol), nSymbolContext:newException("auto symbol can't set "))
	assert(not AutoHolder.is(vTerm), nSymbolContext:newException("TODO.. auto term assign"))
	nBranch:mutSet(nSymbolContext, nSymbol, vTerm)
end

function InstStack:SYMBOL_GET(vNode:node.Ident_use, vDefineNode:node.Ident_def, vAllowAuto:Boolean):Ret(clazz.UAutoTerm)
	return self:topBranch():SYMBOL_GET(vNode, vDefineNode, vAllowAuto)
end

function InstStack:PARAM_PACKOUT(
	vNode:clazz.IAstNode,
	vList:List(clazz.UAutoTerm),
	vDots:OrFalse(clazz.UTermTuple)
):Ret(clazz.UTermTuple)
	return self._headContext:UTermTupleByAppend(vList, vDots)
end

function InstStack:PARAM_UNPACK(
	vNode:node.Ident_def,
	vTermTuple:OrFalse(clazz.UTermTuple), -- false means seal function without cast type
	vIndex:Integer,
	vHintType:Union(clazz.AutoFlag, clazz.UAllType)
):Ret(clazz.UAutoTerm)
	const nHeadContext = self._headContext
	if vHintType == AutoFlag then
		if vTermTuple then
			return vTermTuple:get(nHeadContext, vIndex)
		else
			return AutoHolder.new(vNode, nHeadContext)
		end
	else
		if vTermTuple then
			const nAutoTerm = vTermTuple:get(nHeadContext, vIndex)
			nHeadContext:assignTermToType(nAutoTerm, vHintType)
		end
		-- TODO check type match here...
		return nHeadContext:RefineTerm(vHintType)
	end
end

function InstStack:PARAM_NODOTS_UNPACK(
	vNode:clazz.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer
)
	if vTermTuple then
		self._headContext:matchArgsToNoDots(vNode, vTermTuple, vParNum)
	end
end

function InstStack:PARAM_DOTS_UNPACK(
	vNode:node.Dots,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer,
	vHintDots:Union(clazz.AutoFlag, clazz.UAllType)
):Ret(OrFalse(clazz.UTermTuple))
	if vTermTuple then
		if vHintDots == AutoFlag then
			return self._headContext:matchArgsToAutoDots(vNode, vTermTuple, vParNum)
		else
			return self._headContext:matchArgsToTypeDots(vNode, vTermTuple, vParNum, vHintDots)
		end
	else
		if vHintDots == AutoFlag then
			return self._headContext:UTermTupleByTail({}, AutoTail.new(vNode, self._headContext))
		else
			return self._headContext:UTermTupleByTail({}, DotsTail.new(self._headContext, vHintDots))
		end
	end
end

function InstStack:SYMBOL_NEW(vNode:node.Ident_def, vKind:node.SymbolKindEnum, vModify:Boolean, vTermOrNil:OrNil(clazz.UAutoTerm), vHintType:OrNil(clazz.UAllType)):Ret(clazz.USymbol)
	const nTopBranch = self:topBranch()
	const nSymbolContext = self:newAssignContext(vNode)
	local nTerm = vTermOrNil or nSymbolContext:NilTerm()
	if not vTermOrNil and not vHintType and vKind == Enum.SymbolKind_LOCAL then
		nSymbolContext:warn("define a symbol without any type")
	end
	if vHintType then
		nTerm = nSymbolContext:assignTermToType(nTerm, vHintType)
	else
		const nTermInHolder = nTerm:getRefineTerm()
		if not nTermInHolder then
			if vModify then
				error(nSymbolContext:newException("auto variable can't be modified"))
			elseif vKind == Enum.SymbolKind_LOCAL then
				error(nSymbolContext:newException("auto variable can't be defined as local"))
			end
			return nTopBranch:setSymbolByNode(vNode, nTerm)
		end
		nTerm = nTermInHolder
		const nFromType = nTerm:getType()
		-- convert string literal to string, number literal to number, boolean literal to boolean
		if vModify and vKind == Enum.SymbolKind_LOCAL then
			const nToType = nSymbolContext:getTypeManager():literal2Primitive(nFromType)
			if nFromType ~= nToType then
				nTerm = nSymbolContext:RefineTerm(nToType)
			end
		end
		nFromType:setAssigned(nSymbolContext)
	end
	const nImmutVariable = nTerm:attachImmutVariable()
	if vModify then
		const nLocalSymbol = LocalSymbol.new(nSymbolContext, vNode, nTerm:getType(), nTerm)
		self:topBranch():mutMark(nLocalSymbol, nImmutVariable)
		return nTopBranch:setSymbolByNode(vNode, nLocalSymbol)
	else
		nImmutVariable:setNode(vNode)
		return nTopBranch:setSymbolByNode(vNode, nImmutVariable)
	end
end


function InstStack:IF_ONE(
	vNode:clazz.IAstNode,
	vTerm:clazz.RefineTerm,
	vTrueFunction:Fn(), vBlockNode:node.Block
)
	const nIfContext = self:newOperContext(vNode)
	const nTrueCase = vTerm:caseTrue()
	const nFalseCase = vTerm:caseFalse()
	const nBeforeBranch = self:topBranch()
	if nTrueCase then
		const nTrueBranch = self:_withBranch(nTrueCase, vTrueFunction, vBlockNode)
		nBeforeBranch:mergeOneBranch(nIfContext, nTrueBranch, nFalseCase)
	end
end

function InstStack:IF_TWO(
	vNode:clazz.IAstNode,
	vTerm:clazz.RefineTerm,
	vTrueFunction:Fn(), vTrueBlock:node.Block,
	vFalseFunction:Fn(), vFalseBlock:OrNil(node.Block)
)
	const nIfContext = self:newOperContext(vNode)
	const nTrueCase = vTerm:caseTrue()
	const nFalseCase = vTerm:caseFalse()
	const nBeforeBranch = self:topBranch()
	if nTrueCase then
		const nTrueBranch = self:_withBranch(nTrueCase, vTrueFunction, vTrueBlock)
		if nFalseCase then
			const nFalseBranch = self:_withBranch(nFalseCase, vFalseFunction, vFalseBlock)
			nBeforeBranch:mergeTwoBranch(nIfContext, nTrueBranch, nFalseBranch)
		else
			nBeforeBranch:mergeOneBranch(nIfContext, nTrueBranch, nFalseCase)
		end
	elseif nFalseCase then
		const nFalseBranch = self:_withBranch(nFalseCase, vFalseFunction, vFalseBlock)
		nBeforeBranch:mergeOneBranch(nIfContext, nFalseBranch, nTrueCase)
	end
end

function InstStack:REPEAT(vNode:node.Repeat, vFunc:Fn(), vTerm:clazz.RefineTerm)
	self:_withBranch(VariableCase.new(), vFunc, vNode[1])
end

function InstStack:WHILE(vNode:node.While, vTerm:clazz.RefineTerm, vTrueFunction:Fn())
	const nTrueCase = vTerm:caseTrue()
	self:_withBranch(nTrueCase or VariableCase.new(), vTrueFunction,  vNode[2])
end

function InstStack:DO(vNode:node.Do, vHintInfo:clazz.TLongHintInfo(Nil), vDoFunc:Fn())
	const nBuilder = DoBuilder.new(self, vNode)
	nBuilder:build(vHintInfo)
	if not nBuilder.pass then
		self:_withBranch(VariableCase.new(), vDoFunc, vNode[1])
	end
end

function InstStack:FOR_IN(vNode:node.Forin, vFunc:Fn(clazz.FixedTermTuple), vNextSelfInit:clazz.FixedTermTuple)
	const nForContext = self:newOperContext(vNode)
	const nLenNext = #vNextSelfInit
	if nLenNext < 1 or nLenNext > 3 then
		nForContext:error("FOR_IN iterator error, arguments number must be 1 or 2 or 3")
		return
	end
	const nNext = vNextSelfInit:get(nForContext, 1)
	const nTuple = self:META_CALL(vNode, nNext, function ()
		if nLenNext == 1 then
			return nForContext:FixedTermTuple({})
		else
			const nSelf = vNextSelfInit:get(nForContext, 2)
			if nLenNext == 2 then
				return nForContext:FixedTermTuple({nSelf})
			else
				if nLenNext == 3 then
					const nInit = vNextSelfInit:get(nForContext, 3)
					return nForContext:FixedTermTuple({nSelf, nInit})
				else
					error("NextSelfInit tuple must be 3, this branch is impossible")
				end
			end
		end
	end)
	assert(TermTuple.isFixed(nTuple), "iter func can't return auto term")
	local nFirstTerm = nTuple:get(nForContext, 1)
	const nFirstType = nFirstTerm:getType()
	if not nFirstType:isNilable() then
		self:getRuntime():nodeError(vNode, "FOR_IN must receive function with nilable return")
		return
	end
	if nFirstType:notnilType():isNever() then
		return
	end
	nFirstTerm:foreach(function(vAtomType, vCase)
		if vAtomType:isNilable() then
			return
		end
		const nTermList:List(clazz.RefineTerm) = {nForContext:RefineTerm(vAtomType)}
		--[[for i=2, #nTuple do
			nTermList[i] = nTuple:get(i)
		end]]
		for i=2, #nTuple do
			local nTerm = nTuple:get(nForContext, i)
			const nType = vCase[nTerm:attachImmutVariable()]
			if nType then
				nTerm = nForContext:RefineTerm(nType)
			end
			nTermList[i] = nTerm
		end
		local nNewTuple = nForContext:FixedTermTuple(nTermList)
		self:_withBranch(vCase, function()
			vFunc(nNewTuple)
		end, vNode[3])
	end)
end

function InstStack:FOR_NUM(
	vNode:node.Fornum,
	vStart:clazz.RefineTerm,
	vStop:clazz.RefineTerm,
	vStepOrNil:OrNil(clazz.RefineTerm),
	vFunc:Fn(clazz.RefineTerm),
	vBlockNode:node.Block
)
	const nForContext = self:newOperContext(vNode)
	self:_withBranch(VariableCase.new(), function()
		vFunc(nForContext:RefineTerm(self:getTypeManager().type.Integer))
	end, vBlockNode)
end

function InstStack:LOGIC_OR(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	const nOrContext = self:newLogicContext(vNode)
	const nLeftTrueTerm = nOrContext:logicTrueTerm(vLeftTerm)
	const nLeftFalseCase = vLeftTerm:caseFalse()
	if not nLeftFalseCase then
		return nLeftTrueTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:_withBranch(nLeftFalseCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		return nOrContext:logicCombineTerm(nLeftTrueTerm, nRightTerm, nLeftFalseCase)
	end
end

function InstStack:LOGIC_AND(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	const nAndContext = self:newLogicContext(vNode)
	const nLeftFalseTerm = nAndContext:logicFalseTerm(vLeftTerm)
	const nLeftTrueCase = vLeftTerm:caseTrue()
	if not nLeftTrueCase then
		return nLeftFalseTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:_withBranch(nLeftTrueCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		return nAndContext:logicCombineTerm(nLeftFalseTerm, nRightTerm, nLeftTrueCase)
	end
end

function InstStack:LOGIC_NOT(vNode:clazz.IAstNode, vData:clazz.RefineTerm):Ret(clazz.RefineTerm)
	const nNotContext = self:newLogicContext(vNode)
	return nNotContext:logicNotTerm(vData)
end

function InstStack:BREAK(vNode:clazz.IAstNode)
	self:topBranch():setStop()
end

function InstStack:RETURN(vNode:clazz.IAstNode, vTermTuple:clazz.UTermTuple)
	error("implement RETURN in OpenStack or SealStack")
end

function InstStack:END(vNode:clazz.IAstNode):Ret(clazz.FixedTermTuple, clazz.UAtomUnion)
	error("implement END in OpenStack or SealStack")
	return self._fastOper:FixedTermTuple({}), self._manager.type.String
end

function InstStack:GLOBAL_GET(vNode:node.Ident_use, vIdentENV:node.Ident_def):Ret(clazz.RefineTerm)
	const nEnvTerm = self:SYMBOL_GET(vNode, vIdentENV, false)
	assert(not AutoHolder.is(nEnvTerm), "auto can't be used here")
	return self:META_GET(vNode, nEnvTerm, self:LITERAL_TERM(vNode, vNode[1]), false)
end

function InstStack:GLOBAL_SET(vNode:node.Ident_use, vIdentENV:node.Ident_def, vValueTerm:clazz.UAutoTerm)
	const nEnvTerm = self:SYMBOL_GET(vNode, vIdentENV, false)
	assert(not AutoHolder.is(nEnvTerm), "auto can't be used here")
	assert(not AutoHolder.is(vValueTerm), "auto can't be used here")
	self:META_SET(vNode, nEnvTerm, self:LITERAL_TERM(vNode, vNode[1]), vValueTerm)
end

function InstStack:INJECT_GET(
	vNode:node.Ident_use,
	vInjectGetter:Fn(node.Ident_use):Ret(clazz.RefineTerm)
):Ret(clazz.RefineTerm)
	return vInjectGetter(vNode)
end

function InstStack:INJECT_BEGIN(vNode:clazz.IAstNode):Ret(clazz.LocalSpaceTable, clazz.GlobalSpaceTable)
	const nSpace = assert(self._namespace)
	return nSpace.localExport, nSpace.globalExport
end

return InstStack
