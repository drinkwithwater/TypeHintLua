
const RefineTerm = require "thlua.term.RefineTerm"
const ImmutShot = require "thlua.term.ImmutShot"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const LocalSymbol = {}
LocalSymbol.__index=LocalSymbol
LocalSymbol.__tostring=function(self):Ret(String)
	return "LocalSymbol-"..tostring(self._node).."-"..tostring(self._type)
end

function:class(clazz.LocalSymbol) LocalSymbol.new(vContext:clazz.Context,
		vNode:clazz.IAstNode, vType:clazz.UAtomUnion, vRawTerm:clazz.RefineTerm)
	return setmetatable({.class
		_context=vContext,
		_node=vNode,
		_type=vType,
		_rawTerm=vRawTerm,
	}, LocalSymbol)
end

function LocalSymbol:makeShot(vType:OrNil(clazz.UAtomUnion)):Ret(clazz.ImmutShot)
	const nTerm = self._context:RefineTerm(vType or self._type)
	const nShot = nTerm:attachImmutShot()
	nShot:addSymbol(self)
	return nShot
end

function LocalSymbol:getType():Ret(clazz.UAtomUnion)
	return self._type
end

function LocalSymbol:getNode():Ret(clazz.IAstNode)
	return self._node
end

function LocalSymbol:getName():Ret(String)
	return tostring(self._node)
end

function.open LocalSymbol.is(v):isguard(clazz.LocalSymbol)
	return getmetatable(v) == LocalSymbol
end

return LocalSymbol
