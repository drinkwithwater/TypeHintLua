
const RefineTerm = require "thlua.term.RefineTerm"
const SymbolShot = require "thlua.term.SymbolShot"

(@let.class = import("thlua.type.TypeClass").class)

const LocalSymbol = {}
LocalSymbol.__index=LocalSymbol
LocalSymbol.__tostring=function(self)::Ret(String)
	return "LocalSymbol-"..tostring(self._node).."-"..tostring(self._type)
end

function LocalSymbol.new(vContext:class.UContext,
		vNode:class.AstNode, vType:class.UAtomUnion, vRawTerm:class.RefineTerm)::RetClass(class.LocalSymbol)
	return setmetatable({::Self()
		_context=vContext,
		_node=vNode,
		_type=vType,
		_rawTerm=vRawTerm,
	}, LocalSymbol)
end

function LocalSymbol:makeShot(vType:OrNil(class.UAtomUnion))::Ret(class.SymbolShot)
	const nTerm = self._context:RefineTerm(vType or self._type)
	const nShot = nTerm:attachSymbolShot()
	nShot:addSymbol(self)
	return nShot
end

function LocalSymbol:getType()::Ret(class.UAtomUnion)
	return self._type
end

function LocalSymbol:getNode()::Ret(class.AstNode)
	return self._node
end

function LocalSymbol:getName()::Ret(String)
	return tostring(self._node)
end

return LocalSymbol
