
const Exception = require "thlua.Exception"
const TermTuple = require "thlua.tuple.TermTuple"
const class = require "thlua.class"
const InstStack = require "thlua.runtime.InstStack"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const OpenStack = class@<clazz.OpenStack, false>(InstStack)

function.open OpenStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IAstNode,
	vUpState:OrFalse(clazz.LexState),
	vBodyFn:clazz.OpenFunction,
	vApplyStack:clazz.BaseStack,
	vIsRequire:Boolean
)
	self._applyStack = vApplyStack
	self._bodyFn = vBodyFn
	self._isRequire = vIsRequire
	const nErrCollection = self._manager:TypeCollection()
	nErrCollection:put(self._manager.type.String)
	self._errCollection = nErrCollection
end

function OpenStack:isRequire():Ret(Boolean)
	return self._isRequire
end

function OpenStack:RAISE_ERROR(vContext:clazz.OperContext, vType:clazz.UAllType)
	self._errCollection:put(vType)
end

function OpenStack:RETURN(vNode:clazz.IAstNode, vTermTuple:clazz.UTermTuple)
	assert(TermTuple.isFixed(vTermTuple), Exception.new("can't return auto term", vNode))
	table.insert(self._retList, vTermTuple)
	self:_topBranch():setStop()
end

function OpenStack:mergeEndErrType():Ret(clazz.UAtomUnion)
	return self._errCollection:mergeToAtomUnion()
end

function OpenStack:END(vNode:clazz.IAstNode):Ret(clazz.FixedTermTuple, clazz.UAtomUnion)
	self:getNamespace():close()
	const nRetList = self._retList
	const nLen = #nRetList
	if nLen == 0 then
		return self._fastOper:FixedTermTuple({}), self._errCollection:mergeToAtomUnion()
	elseif nLen == 1 then
		return nRetList[1]!, self._errCollection:mergeToAtomUnion()
	else
		error("TODO : open-function has more than one return")
	end
end

function OpenStack:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	local nStack = self
	while not nStack:isRequire() do
		const nApplyStack = nStack:getApplyStack()
		if OpenStack.is(nApplyStack) then
			nStack = nApplyStack
		else
			return false
		end
	end
	return nStack
end

function OpenStack:getSealStack():Ret(clazz.SealStack)
	return self._applyStack:getSealStack()
end

function OpenStack:getApplyStack():Ret(clazz.BaseStack)
	return self._applyStack
end

return OpenStack
