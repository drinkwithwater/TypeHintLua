
const class = require "thlua.class"
const InstStack = require "thlua.runtime.InstStack"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const OpenStack = class@<clazz.OpenStack, false>(InstStack)

function.open OpenStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IAstNode,
	vUpState:OrFalse(clazz.LexState),
	vBodyFn:clazz.OpenFunction,
	vApplyStack:clazz.BaseStack,
	vIsRequire:Boolean
)
	self._applyStack = vApplyStack
	self._bodyFn = vBodyFn
	self._isRequire = vIsRequire
end

function OpenStack:isRequire():Ret(Boolean)
	return self._isRequire
end

function OpenStack:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	local nStack = self
	while not nStack:isRequire() do
		const nApplyStack = nStack:getApplyStack()
		if OpenStack.is(nApplyStack) then
			nStack = nApplyStack
		else
			return false
		end
	end
	return nStack
end

function OpenStack:getSealStack():Ret(clazz.SealStack)
	return self._applyStack:getSealStack()
end

function OpenStack:getApplyStack():Ret(clazz.BaseStack)
	return self._applyStack
end

return OpenStack
