
const class = require@<let.clazz> "thlua.class"
const Node = require@<let.node> "thlua.code.Node"
const Exception = require "thlua.Exception"
const TermTuple = require "thlua.tuple.TermTuple"
const InstStack = require "thlua.runtime.InstStack"

const OpenStack = class@<clazz.OpenStack, false>(InstStack)
function OpenStack:__tostring()
	return "OpenStack:"..tostring(self._node)
end

function.open OpenStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IBaseNode,
	vUpState:OrFalse(clazz.LexBranchCase),
	vBodyFn:clazz.OpenFunction,
	vApplyStack:clazz.BaseStack,
	vIsRequire:Boolean
)
	self._applyStack = vApplyStack
	self._bodyFn = vBodyFn
	self._isRequire = vIsRequire
	const nErrTypeSet = self._manager:HashableTypeSet()
	nErrTypeSet:putAtom(self._manager.type.String)
	self._errTypeSet = nErrTypeSet
end

function OpenStack:isRequire():Ret(Boolean)
	return self._isRequire
end

function OpenStack:POLY_PARAM_DEDUCE(vNode:node.HintPolyParList, vPolyArgNum:OrFalse(Integer), vPolyArgList:List(clazz.USpaceAny)):RetDots(Nil, clazz.USpaceAny)
	const nNamePolyArgList:List(clazz.USpaceAny) = {}
	if vPolyArgNum then
		for i in ipairs(vNode) do
			nNamePolyArgList[i] = vPolyArgList[i]
		end
		if vNode.dots then
			self._polyDotsNum = vPolyArgNum - #vNode
			self._polyDotsArgs = {table.unpack(vPolyArgList, #vNode + 1)}
		end
		return nil, table.unpack(nNamePolyArgList, 1, #vNode)
	else
		return nil, table.unpack(nNamePolyArgList, 1, #vNode)
	end
end

function OpenStack:RAISE_ERROR(vContext:clazz.OperContext, vType:clazz.UMustType)
	self._errTypeSet:putType(vType:checkAtomUnion())
end

function OpenStack:RETURN(vNode:clazz.IBaseNode, vTermTuple:clazz.UTermTuple)
	assert(TermTuple.isFixed(vTermTuple), Exception.new("can't return auto term", vNode))
	table.insert(self._retList, vTermTuple)
	self:topBranch():setStop()
end

function OpenStack:mergeEndErrType():Ret(clazz.UAtomUnion)
	return self._manager:unifyAndBuild(self._errTypeSet)
end

function OpenStack:END(vNode:clazz.IBaseNode):Ret(clazz.FixedTermTuple, clazz.UAtomUnion)
	self:getLetSpace():close()
	const nRetList = self._retList
	const nLen = #nRetList
	if nLen == 0 then
		return self._fastOper:FixedTermTuple({}), self._manager:unifyAndBuild(self._errTypeSet)
	elseif nLen == 1 then
		return nRetList[1]!, self._manager:unifyAndBuild(self._errTypeSet)
	else
		error(vNode:toExc("TODO : open-function has more than one return"))
	end
end

function OpenStack:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	local nStack = self
	while not nStack:isRequire() do
		const nApplyStack = nStack:getApplyStack()
		if OpenStack.is(nApplyStack) then
			nStack = nApplyStack
		else
			return false
		end
	end
	return nStack
end

function OpenStack:getSealStack():Ret(clazz.SealStack)
	return self._applyStack:getSealStack()
end

function OpenStack:getApplyStack():Ret(clazz.BaseStack)
	return self._applyStack
end

return OpenStack
