
const Region = {}
const Enum = require "thlua.Enum"
const VariableCase = require "thlua.term.VariableCase"
const AutoHolder = require "thlua.auto.AutoHolder"
const AutoTail = require "thlua.auto.AutoTail"
const Branch = require "thlua.runtime.Branch"
const LocalSymbol = require "thlua.term.LocalSymbol"
const ImmutVariable = require "thlua.term.ImmutVariable"
const Exception = require "thlua.Exception"
const TermTuple = require "thlua.tuple.TermTuple"

const DoBuilder = require "thlua.builder.DoBuilder"

const OpenFunction = require "thlua.func.OpenFunction"
const TypeFunction = require "thlua.func.TypeFunction"
const AutoFunction = require "thlua.refer.AutoFunction"
const ClassFactory = require "thlua.refer.ClassFactory"

(@let.clazz = import("thlua.type.TypeClass").clazz)
(@let.node = import("thlua.code.Node").node)

Region.__index = Region
Region.__tostring = function(self):Ret(String)
	return "Region-"..tostring(self._context:getNode())
end

function:class(clazz.Region) Region.new(vContext:clazz.Context, vBodyFn:clazz.URegionFunction, vUpCase:clazz.VariableCase)
	const nRootBranch = Branch.new(vContext, nil, vUpCase)
	const self = setmetatable({.class
		_context=vContext,
		_curBranch=nRootBranch,
		_branchStack={nRootBranch}@List(clazz.Branch),
		_bodyFn=vBodyFn,
		_retList={} @ List(clazz.FixedTermTuple),
	}, Region)
	return self
end

function Region:withBranch(vVariableCase:clazz.VariableCase, vFunc:Fn()):Ret(clazz.Branch)
	const nStack = self._branchStack
	const nNewLen = #nStack + 1
	const nOldBranch = self._curBranch
	const nNewBranch = Branch.new(self._context, nOldBranch, vVariableCase)
	nStack[nNewLen] = nNewBranch
	self._curBranch = nNewBranch
	vFunc()
	nStack[nNewLen] = nil
	self._curBranch = nOldBranch
	return nNewBranch
end

function Region:topBranch():Ret(clazz.Branch)
	return self._curBranch
end

function Region:SYMBOL_SET(vNode:clazz.IAstNode, vSymbol:clazz.LocalSymbol, vTerm:clazz.RefineTerm)
	assert(not AutoHolder.is(vSymbol), "auto symbol can't set"..tostring(vNode))
	assert(not ImmutVariable.is(vSymbol), "immutable symbol can't set"..tostring(vNode))
	const nAssignContext = self._context:newOpenContext(vNode)
	self:topBranch():mutSet(nAssignContext, vSymbol, vTerm)
end

function Region:SYMBOL_GET(vNode:clazz.IAstNode, vSymbol:clazz.USymbol, vAllowAuto:Boolean):Ret(clazz.UAutoTerm)
	local nBranch = self:topBranch()
	if LocalSymbol.is(vSymbol) then
		return nBranch:mutGet(vSymbol)
	elseif ImmutVariable.is(vSymbol) then
		return nBranch:immutGet(vSymbol)
	else
		const nTerm = vSymbol:getRefineTerm()
		if nTerm then
			return nBranch:immutGet(nTerm:attachImmutVariable())
		else
			if not vAllowAuto then
				error(Exception.new("auto term can't be used when it's undeduced", vNode))
			else
				return vSymbol
			end
		end
	end
end

-- unpack in function's argument & for_in
function Region:PARLIST_UNPACK(
	vNode:clazz.IAstNode,
	vTermTuple:clazz.UTermTuple,
	vOpenHintTypeList:OrFalse(List(Union(True, clazz.UAllType))),
	vParNum:Number,
	vUseDots:Boolean
):RetDots(List(clazz.UAutoTerm), OrFalse(clazz.UTermTuple))
	const l:List(clazz.UAutoTerm) = {}
	if not vOpenHintTypeList then
		assert(vParNum == #vTermTuple)
		if vUseDots then
			assert(vTermTuple:getTail())
		else
			assert(not vTermTuple:getTail())
		end
		for i=1, vParNum do
			l[i] = vTermTuple:get(self._context, i)
		end
		if vUseDots then
			return l, vTermTuple:select(self._context, vParNum + 1)
		else
			return l, false
		end
	end
	-- open call unpack
	assert(vParNum == #vOpenHintTypeList)
	for i=1, #vTermTuple do
		if i <= vParNum then
			const nAutoTerm = vTermTuple:get(self._context, i)
			const nHintType = vOpenHintTypeList[i]!
			local nPut:OrNil(clazz.UAutoTerm) = nil
			if nHintType == true then
				-- if auto hint, just return, maybe return auto
				nPut = nAutoTerm
			else
				-- if hint then cast auto or check type contain
				nPut = self._context:assignTermToType(nAutoTerm, nHintType)
			end
			l[i] = nPut
		end
	end
	const nTail = vTermTuple:getTail()
	if not AutoTail.is(nTail) then
		for i=#vTermTuple+1, vParNum do
			const nAutoTerm = vTermTuple:get(self._context, i)
			const nHintType = vOpenHintTypeList[i]!
			local nPut:OrNil(clazz.UAutoTerm) = nil
			if nHintType == true then
				-- if auto hint, just return, maybe return auto
				nPut = nAutoTerm
			else
				-- if hint then cast auto or check type contain
				nPut = self._context:assignTermToType(nAutoTerm, nHintType)
			end
			l[i] = nPut
		end
		if vUseDots then
			-- if unpack with dots then select
			return l, vTermTuple:select(self._context, vParNum + 1)
		else
			return l
		end
	else
		if not vUseDots then
			const nTypeList:List(clazz.UAllType) = {}
			for i=#vTermTuple+1, vParNum do
				const nHintType = vOpenHintTypeList[i]!
				if nHintType == true then
					error(Exception.new("unpack auto dots in par, TODO", vNode))
				end
				nTypeList[#nTypeList + 1] = nHintType
				l[i] = self._context:RefineTerm(nHintType)
			end
			nTail:setAutoCastTuple(self._context:getTypeManager():TypeTuple(vNode, table.unpack(nTypeList)))
			return l, false
		else
			if vParNum > #vTermTuple then
				error(Exception.new("unpack auto dots in par dots, TODO", vNode))
			else
				return l, vTermTuple:select(self._context, vParNum + 1)
			end
		end
	end
end

function Region:SYMBOL_NEW(vNode:clazz.IAstNode, vKind:node.SymbolKindEnum, vModify:Boolean, vTerm:OrNil(clazz.UAutoTerm), vHintType:OrNil(clazz.UAllType)):Ret(clazz.USymbol)
	if AutoHolder.is(vTerm) then
		const nAutoRefineTerm = vTerm:getRefineTerm()
		if not nAutoRefineTerm then
			if vKind ~= Enum.SymbolKind_PARAM then
				error(Exception.new("undeduced auto variable can't be assigned to other variable", vNode))
			end
			return vTerm
		else
			vTerm = nAutoRefineTerm
		end
	end
	const nAssignContext = self._context:newOpenContext(vNode)
	if not vTerm then
		vTerm = nAssignContext:NilTerm()
	end
	if vHintType then
		local nSrcType = vTerm:getType()
		if not nAssignContext:castLuaType(nSrcType, vHintType) then
			if not vHintType:containAll(nSrcType) then
				nAssignContext:error("symbol init but type not match")
			end
		end
		vTerm = nAssignContext:RefineTerm(vHintType)
	else
		-- convert string literal to string, number literal to number, boolean literal to boolean
		if vModify and vKind == Enum.SymbolKind_LOCAL then
			const nFromType = vTerm:getType()
			const nToType = nAssignContext:getTypeManager():literal2Primitive(nFromType)
			if nFromType ~= nToType then
				vTerm = nAssignContext:RefineTerm(nToType)
			end
		end
		nAssignContext:getTypeManager():basingByDefault(vTerm:getType())
	end
	const nImmutVariable = vTerm:attachImmutVariable()
	if vModify then
		local nLocalSymbol = LocalSymbol.new(nAssignContext, vNode, vTerm:getType(), vTerm)
		nAssignContext:getRuntime():recordSymbol(nLocalSymbol)
		self:topBranch():mutMark(nLocalSymbol, nImmutVariable)
		return nLocalSymbol
	else
		return nImmutVariable
	end
end

function Region:IF(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vTrueFunction:Fn(), vFalseFunction:OrNil(Fn()))
	const nTrueCase = vTerm:caseTrue()
	const nFalseCase = vTerm:caseFalse()
	const nBeforeBranch = self:topBranch()
	if nTrueCase then
		const nTrueBranch = self:withBranch(nTrueCase, function()
			vTrueFunction()
		end)
		if nFalseCase and vFalseFunction then
			const nFalseBranch = self:withBranch(nFalseCase, function()
				vFalseFunction()
			end)
			nBeforeBranch:merge_from(self._context, nTrueBranch, nFalseBranch)
		else
			nBeforeBranch:mergeOneBranch(self._context, nTrueBranch, nFalseCase)
		end
	elseif nFalseCase and vFalseFunction then
		const nFalseBranch = self:withBranch(nFalseCase, function()
			vFalseFunction()
		end)
		nBeforeBranch:mergeOneBranch(self._context, nFalseBranch, nTrueCase)
	end
end

function Region:WHILE(vNode:clazz.IAstNode, vTerm:clazz.RefineTerm, vTrueFunction:Fn())
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:withBranch(nTrueCase, function()
			vTrueFunction()
		end)
	else
		self._context:getRuntime():nodeWarn(vNode, "while loop is unreachable scope")
	end
end

function Region:DO(vNode:clazz.IAstNode, vHintInfo:clazz.TLongHintInfo(Nil), vDoFunc:Fn())
	const nBuilder = DoBuilder.new(self._context, vNode)
	nBuilder:build(vHintInfo)
	if not nBuilder.pass then
		vDoFunc()
	end
end

function Region:FOR_IN(vNode:clazz.IAstNode, vFunc:Fn(clazz.FixedTermTuple), vNextSelfInit:clazz.FixedTermTuple)
	const nLenNext = #vNextSelfInit
	if nLenNext < 1 or nLenNext > 3 then
		self._context:getRuntime():nodeError(vNode, "FOR_IN iterator error, arguments number must be 1 or 2 or 3")
		return
	end
	const nNext = vNextSelfInit:get(self._context, 1)
	const nTuple = self._context:META_CALL(vNode, nNext, function ()
		if nLenNext == 1 then
			return self._context:TermTuple({})
		else
			const nSelf = vNextSelfInit:get(self._context, 2)
			if nLenNext == 2 then
				return self._context:TermTuple({nSelf})
			else
				if nLenNext == 3 then
					const nInit = vNextSelfInit:get(self._context, 3)
					return self._context:TermTuple({nSelf, nInit})
				else
					error("NextSelfInit tuple must be 3, this branch is impossible")
				end
			end
		end
	end)
	if #nTuple <= 0 then
		self._context:getRuntime():nodeError(vNode, "FOR_IN must receive at least 1 value when iterator")
		return
	end
	assert(TermTuple.isFixed(nTuple), "iter func can't return auto term")
	local nFirstTerm = nTuple:get(self._context, 1)
	const nFirstType = nFirstTerm:getType()
	if not nFirstType:isNilable() then
		self._context:getRuntime():nodeError(vNode, "FOR_IN must receive nilable type, TODO : still run logic?? ")
		return
	end
	if nFirstType:notnilType():isNever() then
		return
	end
	nFirstTerm:foreach(function(vAtomType, vCase)
		if vAtomType:isNilable() then
			return
		end
		const nTermList:List(clazz.RefineTerm) = {self._context:RefineTerm(vAtomType)}
		--[[for i=2, #nTuple do
			nTermList[i] = nTuple:get(i)
		end]]
		for i=2, #nTuple do
			local nTerm = nTuple:get(self._context, i)
			const nType = vCase[nTerm:attachImmutVariable()]
			if nType then
				nTerm = self._context:RefineTerm(nType)
			end
			nTermList[i] = nTerm
		end
		local nNewTuple = self._context:TermTuple(nTermList)
		self:withBranch(vCase, function()
			vFunc(nNewTuple)
		end)
	end)
end

function Region:FOR_NUM(
	vNode:clazz.IAstNode,
	vStart:clazz.RefineTerm,
	vStop:clazz.RefineTerm,
	vStepOrNil:OrNil(clazz.RefineTerm),
	vFunc:Fn(clazz.RefineTerm)
)
	vFunc(self._context:NumberTerm())
end

function Region:LOGIC_OR(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	local nLeftTrueTerm = vLeftTerm:trueTerm()
	local nLeftFalseCase = vLeftTerm:caseFalse()
	if not nLeftFalseCase then
		return nLeftTrueTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:withBranch(nLeftFalseCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		nRightTerm:and_case(nLeftFalseCase)
		return nLeftTrueTerm | nRightTerm
	end
end

function Region:LOGIC_AND(vNode:clazz.IAstNode, vLeftTerm:clazz.RefineTerm, vRightFunction:Fn():Ret(clazz.RefineTerm)):Ret(clazz.RefineTerm)
	local nLeftFalseTerm = vLeftTerm:falseTerm()
	local nLeftTrueCase = vLeftTerm:caseTrue()
	if not nLeftTrueCase then
		return nLeftFalseTerm
	else
		local nRightTerm:OrNil(clazz.RefineTerm) = nil
		self:withBranch(nLeftTrueCase, function()
			nRightTerm = vRightFunction()
		end)
		assert(nRightTerm, "term must be true value here")
		nRightTerm:and_case(nLeftTrueCase)
		return nLeftFalseTerm | nRightTerm
	end
end

function Region:LOGIC_NOT(vNode:clazz.IAstNode, vData:clazz.RefineTerm):Ret(clazz.RefineTerm)
	return vData:notTerm()
end

function Region:nativeError()
	self:topBranch():setStop()
end

function Region:nativeAssert(vTerm:clazz.RefineTerm)
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:topBranch():assertCase(nTrueCase)
	end
end

function Region:BREAK(vNode:clazz.IAstNode)
	self:topBranch():setStop()
end

function Region:_bodyReturn(vNode:clazz.IAstNode, vTypeTuple:clazz.UTypeTuple)
	const nBodyFn = self._bodyFn
	if AutoFunction.is(nBodyFn) or TypeFunction.is(nBodyFn) then
		const nContext = self._context
		local nOneOkay = false
		local nRetTuples = nBodyFn:getRetTuples()
		if nRetTuples then
			nRetTuples:foreachWithFirst(function(vDstTuple, _)
				if vTypeTuple:castOrIn(nContext, vDstTuple) then
					nOneOkay = true
				end
			end)
			if not nOneOkay then
				nContext:getRuntime():nodeError(vNode, "return check failed")
			end
		else
			error("auto return TODO")
		end
	elseif ClassFactory.is(nBodyFn) then
		const nResultType = nBodyFn:getTypeAwait()
		if nResultType ~= vTypeTuple:get(1):checkAtomUnion() or #vTypeTuple ~= 1 or vTypeTuple:getRepeatType() then
			self._context:getRuntime():nodeError(vNode, "class return check failed")
		end
	end
end

function Region:_bodyEnd(vNode:clazz.IAstNode, vTermTupleList:List(clazz.FixedTermTuple)):Ret(clazz.FixedTermTuple)
	const nBodyFn = self._bodyFn
	if OpenFunction.is(nBodyFn) then
		local nLen = #vTermTupleList
		if nLen == 0 then
			return self._context:TermTuple({})
		elseif nLen == 1 then
			return vTermTupleList[1]!
		else
			error("TermTuple union TODO")
			--[[
			local retTermTuple = vTermTupleList[1]!
			for i=2,nLen do
				retTermTuple = retTermTuple | vTermTupleList[i]!
			end
			return retTermTuple]]
		end
	end
	return self._context:TermTuple({})
end

function Region:RETURN(vNode:clazz.IAstNode, vTermTuple:clazz.FixedTermTuple)
	table.insert(self._retList, vTermTuple)
	if #vTermTuple <= 0 or vTermTuple:getTail() then
		self:_bodyReturn(vNode, vTermTuple:checkTypeTuple())
	else
		const nManager = self._context:getTypeManager()
		const nFirstTerm = vTermTuple:get(self._context, 1)
		nFirstTerm:foreach(function(vAtomType, vCase)
			const nTypeList:List(clazz.UAtomUnion) = {vAtomType}
			for i=2, #vTermTuple do
				local nTerm = vTermTuple:get(self._context, i)
				const nType = vCase[nTerm:attachImmutVariable()]
				if not nType then
					nTypeList[i] = nTerm:getType()
				else
					nTypeList[i] = assert(nTerm:getType():safeIntersect(nType), "unexcepted intersect when return")
				end
			end
			const nTypeTuple = nManager:TypeTuple(vNode, table.unpack(nTypeList))
			self:_bodyReturn(vNode, nTypeTuple)
		end)
	end
	self:topBranch():setStop()
end

function Region:END(vNode:clazz.IAstNode):Ret(clazz.FixedTermTuple)
	local re = self:_bodyEnd(vNode, self._retList)
	self._context:getNamespace():close()
	self._context:seal()
	return re
end

return Region
