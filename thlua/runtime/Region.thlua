
const Region = {}
const TermCase = require "thlua.term.TermCase"
const Branch = require "thlua.runtime.Branch"
const LocalSymbol = require "thlua.runtime.LocalSymbol"

(@let.class = import("thlua.type.TypeClass").class)

Region.__index = Region
Region.__tostring = function(self)::Ret(String)
	return "Region-"..tostring(self._context:getNode())
end

function Region.new(vContext:class.Context, vFnCom:class.UFnCom, vUpCase:class.TermCase)::RetClass(class.Region)
	const nRootBranch = Branch.new(vContext, nil, vUpCase)
	const self = setmetatable({::Self()
		_context=vContext,
		_curBranch=nRootBranch,
		_branchStack={nRootBranch}@List(class.Branch),
		_fnCom=vFnCom,
		_retList={} @ List(class.TermTuple),
	}, Region)
	return self
end

function Region:getFnCom()::Ret(class.UFnCom)
	return self._fnCom
end

function Region:push_branch(vTermCase:class.TermCase)
	local nNewBranch = Branch.new(self._context, self._curBranch, vTermCase)
	self._branchStack[#self._branchStack + 1] = nNewBranch
	self._curBranch = nNewBranch
end

function Region:pop_branch()::Ret(class.Branch)
	local len = #self._branchStack
	self._branchStack[len] = nil
	local old_branch = self._curBranch
	self._curBranch = self._branchStack[len - 1]!
	return old_branch
end

function Region:top_branch()::Ret(class.Branch)
	return self._curBranch
end

function Region:SYMBOL_SET(vNode:class.AstNode, vSymbol:class.LocalSymbol, vTerm:class.RefineTerm, vOverride:Boolean)
	assert(LocalSymbol.is(vSymbol), "set immutable symbol"..tostring(vNode))
	self:top_branch():mutSet(vNode, vSymbol, vTerm)
end

function Region:SYMBOL_GET(vNode:class.AstNode, vSymbol:class.USymbol)::Ret(class.RefineTerm)
	local nBranch = self:top_branch()
	if LocalSymbol.is(vSymbol) then
		return nBranch:mutGet(vSymbol)
	else
		return nBranch:immutGet(vSymbol)
	end
end

function Region:SYMBOL_NEW(vNode:class.AstNode, vImmutable:OrFalse("const", "local"), vTerm:OrNil(class.RefineTerm), vHintType:OrNil(class.UAllType))::Ret(class.USymbol)
	if not vTerm then
		vTerm = self._context:NilTerm()
	end
	if vHintType then
		local nSrcType = vTerm:getType()
		if not self._context:castLuaType(nSrcType, vHintType) then
			if not vHintType:containAll(nSrcType) then
				self._context:getRuntime():nodeError(vNode, "symbol init but type not match")
			end
		end
		vTerm = self._context:RefineTerm(vHintType)
	else
		-- convert string literal to string, number literal to number, boolean literal to boolean
		-- TODO , think symbol in more case, local , args, const, for, ...
		if not vImmutable then
			const nFromType = vTerm:getType()
			const nToType = self._context:getTypeManager():literal2Primitive(nFromType)
			if nFromType ~= nToType then
				vTerm = self._context:RefineTerm(nToType)
			end
		end
	end
	const nImmutShot = vTerm:attachImmutShot()
	if not vImmutable then
		local nLocalSymbol = LocalSymbol.new(self._context, vNode, vTerm:getType(), vTerm)
		self._context:getRuntime():recordSymbol(nLocalSymbol)
		self:top_branch():mutMark(nLocalSymbol, nImmutShot)
		return nLocalSymbol
	else
		return nImmutShot
	end
end

function Region:IF(vNode:class.AstNode, vTerm:class.RefineTerm, vTrueFunction:Fn(), vFalseFunction:OrNil(Fn()))
	const nTrueCase = vTerm:caseTrue()
	const nFalseCase = vTerm:caseFalse()
	const nBeforeBranch = self:top_branch()
	if nTrueCase then
		self:push_branch(nTrueCase)
		vTrueFunction()
		const nTrueBranch = self:pop_branch()
		if nFalseCase and vFalseFunction then
			self:push_branch(nFalseCase)
			vFalseFunction()
			const nFalseBranch = self:pop_branch()
			nBeforeBranch:merge_from(self._context, nTrueBranch, nFalseBranch)
		else
			nBeforeBranch:mergeOneBranch(self._context, nTrueBranch, nFalseCase)
		end
	elseif nFalseCase and vFalseFunction then
		self:push_branch(nFalseCase)
		vFalseFunction()
		const nFalseBranch = self:pop_branch()
		nBeforeBranch:mergeOneBranch(self._context, nFalseBranch, nTrueCase)
	end
end

function Region:WHILE(vNode:class.AstNode, vTerm:class.RefineTerm, vTrueFunction:Fn())
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:push_branch(nTrueCase)
		vTrueFunction()
		self:pop_branch()
	else
		self._context:getRuntime():nodeWarn(vNode, "while loop is unreachable scope")
	end
end

function Region:FOR_IN(vNode:class.AstNode, vFunc:Fn(class.TermTuple), vNext:class.RefineTerm, vSelf:class.RefineTerm, vInit:class.RefineTerm)
	const nTuple = self._context:META_CALL(vNode, vNext, function () return self._context:TermTuple({vSelf, vInit}) end)
	if #nTuple <= 0 then
		self._context:getRuntime():nodeError(vNode, "FOR_IN must receive at least 1 value")
		return
	end
	local nFirstTerm = nTuple:get(1)
	if not nFirstTerm:getType():isNilable() then
		self._context:getRuntime():nodeError(vNode, "FOR_IN must receive nilable type, TODO : run logic when error")
		return
	end
	local nCase = nFirstTerm:caseNotnil()
	if not nCase then
		self._context:getRuntime():nodeError(vNode, "FOR_IN into a empty loop")
		return
	end
	-- TODO, maybe symbolshot info is loss
	const nTermList:List(class.RefineTerm) = {nFirstTerm:notnilTerm()}
	for i=2, #nTuple do
		local nTerm = nTuple:get(i)
		const nType = nCase[nTerm:attachImmutShot()]
		if nType then
			nTerm = self._context:RefineTerm(nType)
		end
		nTermList[i] = nTerm
	end
	--local nNewTuple = self._context:TermTuple({nFirstTerm:notnilTerm()}, nTuple:select(2))
	local nNewTuple = self._context:TermTuple(nTermList)
	-- TODO FOR_IN push branch
	--self:push_branch(nCase)
	vFunc(nNewTuple)
	--self:pop_branch()
end

function Region:FOR_NUM(vNode, vFunc, vStart, vStop, vStepOrNil)
	vFunc(self._context:NumberTerm())
end

function Region:LOGIC_OR(vNode:class.AstNode, vLeftTerm:class.RefineTerm, vRightFunction:Fn():Ret(class.RefineTerm))::Ret(class.RefineTerm)
	local nLeftTrueTerm = vLeftTerm:trueTerm()
	local nLeftFalseCase = vLeftTerm:caseFalse()
	if not nLeftFalseCase then
		return nLeftTrueTerm
	else
		self:push_branch(nLeftFalseCase)
		local nRightTerm = vRightFunction()
		self:pop_branch()
		nRightTerm:and_case(nLeftFalseCase)
		return nLeftTrueTerm | nRightTerm
	end
end

function Region:LOGIC_AND(vNode:class.AstNode, vLeftTerm:class.RefineTerm, vRightFunction:Fn():Ret(class.RefineTerm))::Ret(class.RefineTerm)
	local nLeftFalseTerm = vLeftTerm:falseTerm()
	local nLeftTrueCase = vLeftTerm:caseTrue()
	if not nLeftTrueCase then
		return nLeftFalseTerm
	else
		self:push_branch(nLeftTrueCase)
		local nRightTerm = vRightFunction()
		self:pop_branch()
		nRightTerm:and_case(nLeftTrueCase)
		return nLeftFalseTerm | nRightTerm
	end
end

function Region:LOGIC_NOT(vNode:class.AstNode, vData:class.RefineTerm)::Ret(class.RefineTerm)
	return vData:notTerm()
end

function Region:nativeError()
	self:top_branch():setStop()
end

function Region:nativeAssert(vTerm:class.RefineTerm)
	local nTrueCase = vTerm:caseTrue()
	if nTrueCase then
		self:top_branch():assertCase(nTrueCase)
	end
end

function Region:BREAK(vNode:class.AstNode)
	self:top_branch():setStop()
end

function Region:RETURN(vNode:class.AstNode, vTermTuple:class.TermTuple)
	table.insert(self._retList, vTermTuple)
	if #vTermTuple <= 0 or vTermTuple:getRepeatType() then
		self._fnCom:regionReturn(self._context, vNode, vTermTuple:getTypeTuple())
	else
		const nManager = self._context:getTypeManager()
		const nFirstTerm = vTermTuple:get(1)
		nFirstTerm:foreach(function(vAtomType, vCase)
			const nTypeList:List(class.UAtomUnion) = {vAtomType}
			for i=2, #vTermTuple do
				local nTerm = vTermTuple:get(i)
				const nType = vCase[nTerm:attachImmutShot()] or nTerm:getType()
				nTypeList[i] = nType
			end
			const nTypeTuple = nManager:Tuple(table.unpack(nTypeList))
			self._fnCom:regionReturn(self._context, vNode, nTypeTuple)
		end)
	end
	self:top_branch():setStop()
end

function Region:END(vNode:class.AstNode)::Ret(class.TermTuple)
	local re = self._fnCom:regionEnd(self._context, vNode, self._retList)
	self._context:getNamespace():close()
	self._context:seal()
	return re or self._context:TermTuple({})
end

return Region
