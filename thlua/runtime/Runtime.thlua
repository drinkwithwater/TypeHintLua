
local TypeFunction = require "thlua.func.TypeFunction"
local TypeManager = require "thlua.manager.TypeManager"
local NativeFunction = require "thlua.func.NativeFunction"
local LuaFunction = require "thlua.func.LuaFunction"
local TermTuple = require "thlua.tuple.TermTuple"
local Context = require "thlua.runtime.Context"
local ContextClass = require "thlua.runtime.ContextClass"
local native = require "thlua.native"
local CodeEnv = require "thlua.code.CodeEnv"
local Node = require "thlua.code.Node"
local Namespace = require "thlua.manager.Namespace"

(@var.class = import("thlua.type.TypeClass").class)

(@var.RequireEnv = Struct {
	fn=class.LuaFunction,
	term=Union(False, class.UnionTerm),
	context=class.Context,
})

local Runtime = ContextClass()


function Runtime.new()::RetNew(class.Runtime)
	local self = setmetatable({::New()
		func={},
		typeManager=nil,
	}, {
		__index=Runtime,
	})
	self._requireDict = {}
	self._runtime = self
	self.typeManager = TypeManager.new(self)
	self._manager = self.typeManager
	self._node = Node.newRootNode()
	self._namespace = self:RootNamespace()
	self._lateFnDict = {}
	self._defineFnDict = {}
	self.global_term = native.make(self)
	return self
end

function Runtime:recordLateLuaFunction(vFunc)
	self._lateFnDict[vFunc] = true
end

function Runtime:recordDefineLuaFunction(vFunc)
	self._defineFnDict[vFunc] = true
end

function Runtime:checkDefineLuaFunction()
	for fn, v in pairs(self._defineFnDict) do
		fn:checkDefine()
	end
end

function Runtime:checkLateLuaFunction()
	for fn, v in pairs(self._lateFnDict) do
		fn:checkLateRun()
	end
end

function Runtime:import(vPath)
	-- TODO better style
	self:require(vPath)
	local nContext = self._requireDict[vPath].context
	local nSpace = nContext._namespace
	return nSpace.localExport
end

function Runtime:main(vFileName, vContent)
	local nLuaFunc, nEnv = self:load(vContent, vFileName)
	local nTermTuple = self.typeManager:TermTuple({})
	nLuaFunc:meta_native_call(self:newContext(nEnv:getAstTree()), nTermTuple)
end

function Runtime:newContext(vApplyNode)
	return Context.new(self, vApplyNode)
end

function Runtime:load(vCode, vPath)::Ret(class.LuaFunction, class.CodeEnv)
	local nEnv = CodeEnv.new(vCode, vPath, vPath, self._node)
	local nAfterContent = nEnv:genTypingCode()
	local nFunc, nInfo = load(nAfterContent, "hint:"..vPath, "t", setmetatable({}, {
		__index=function(t,k)
			error("indexing global is logic error")
		end
	}))
	if not nFunc then
		error(nInfo)
	end
	local nRunFunc = nFunc(self, nEnv:getNodeList())
	local nLuaFunc = self.typeManager:LuaFunction()
	nLuaFunc:init(self, self._node)
	nLuaFunc:setUnionFn({
		tag=LuaFunction.OPEN,
		fn=self.typeManager:NativeFunction(nRunFunc),
		isGuard=false,
	})
	return nLuaFunc, nEnv
end

function Runtime:require(vPath)
	local nRequireEnv = self._requireDict[vPath]
	if not nRequireEnv then
		local nOkay, nContent, nFileName = CodeEnv.thluaSearchContent(vPath, true)
		if not nOkay then
				error(nContent)
		end
		local nLuaFunc, nEnv = self:load(nContent, vPath)
		nRequireEnv = {
			term=false,
			fn=nLuaFunc,
			context=false,
		}
		self._requireDict[vPath] = nRequireEnv
		local nTermTuple = self.typeManager:TermTuple({})
		local ret = nLuaFunc:meta_native_call(self:newContext(nEnv:getAstTree()), nTermTuple)
		nRequireEnv.term = ret:get(1)
		nRequireEnv.context = ret:getContext()
	end
	local nTerm = nRequireEnv.term
	if not nTerm then
			error("recursive require:"..vPath)
	end
	return nTerm
end

function Runtime:TreeNamespace()
	return Namespace.new(self._manager, Node.getDebugNode(4))
end

function Runtime:RootNamespace()
	local nSpace = Namespace.new(self._manager, self._node, self._manager:buildSimpleGlobal())
	nSpace:trySetKey("")
	nSpace:close()
	return nSpace
end

function Runtime:VarNamespace(vParentVar, vBlockNode)
	local nSpace = Namespace.new(self._manager, vBlockNode, vParentVar:getKeyToType())
	nSpace:trySetKey("")
	return nSpace
end

function Runtime:makeDebugNode(vDepth)
	return Node.getDebugNode(vDepth)
end

return Runtime
