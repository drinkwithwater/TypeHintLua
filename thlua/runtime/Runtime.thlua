
const TypeFunction = require "thlua.func.TypeFunction"
const TypeManager = require "thlua.manager.TypeManager"
const NativeFunction = require "thlua.func.NativeFunction"
const LuaFunction = require "thlua.func.LuaFunction"
const TermTuple = require "thlua.tuple.TermTuple"
const Context = require "thlua.runtime.Context"
const ContextClass = require "thlua.runtime.ContextClass"
const native = require "thlua.native"
const Node = require "thlua.code.Node"
const Namespace = require "thlua.manager.Namespace"
const LocalSymbol = require "thlua.runtime.LocalSymbol"
const Exception = require "thlua.Exception"
const TermCase = require "thlua.term.TermCase"

(@do
	import("thlua.code.CodeEnv")
	let.class = import("thlua.type.TypeClass").class

	let.ILoader = Interface {
		thluaSearch=member:Fn(String):Ret(Boolean, String),
		thluaParseFile=member:Fn(String):Ret(class.CodeEnv),
	}

	let.LoadedState = Struct {
		fn=class.LuaFunction,
		term=Union(False, class.RefineTerm),
		context=class.Context,
	}

	let.Diagnostic = Struct {
		node=class.IAstNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.FileState = Struct {
		codeEnv=class.CodeEnv,
		diaList=List(Diagnostic),
	}
end)


local Runtime = {}
Runtime.__index=Runtime

function.class Runtime.new(vLoader:ILoader, vMainFileName:String):RetClass(class.Runtime)
	local self = setmetatable({.class
	}, Runtime)
	self._loader = vLoader
	self._mainFileName = vMainFileName
	self._node = Node.newRootNode(vMainFileName)
	self._spaceList = {} @ List(class.Namespace)
	self._manager = TypeManager.new(self)
	self._globalTable = native.make(self)
	self._loadedDict = {} @ Dict(String, LoadedState)
	self._nodeToSymbolSet = {} @ Dict(class.IAstNode, Dict(class.LocalSymbol, True))
	self._fileStateDict = {} @Dict(String, FileState)
	self._rootContext = self:newContext(self._node, false, false)
	self._rootContext:rootSetNamespace(self:RootNamespace())
	return self
end

function Runtime:recordSymbol(vLocalSymbol:class.LocalSymbol)
	local nNode = vLocalSymbol:getNode()
	local nLocalSymbolSet = self._nodeToSymbolSet[nNode]
	if not nLocalSymbolSet then
		nLocalSymbolSet = {} @ Dict(class.LocalSymbol, True)
		self._nodeToSymbolSet[nNode] = nLocalSymbolSet
	end
	nLocalSymbolSet[vLocalSymbol] = true
end

function Runtime:getNodeLocalSymbolSet(vNode:class.IAstNode):Ret(Dict(class.LocalSymbol, True))
	local nLocalSymbolSet = self._nodeToSymbolSet[vNode]
	if not nLocalSymbolSet then
		nLocalSymbolSet = {} @ Dict(class.LocalSymbol, True)
		self._nodeToSymbolSet[vNode] = nLocalSymbolSet
	end
	return nLocalSymbolSet
end

function Runtime:checkAtomUnionFinish()
	for _, space in pairs(self._spaceList) do
		space:check()
	end
end

function Runtime:import(vPath:String):Ret(class.SpaceTable)
	-- TODO better style
	self:require(vPath)
	local nContext = self._loadedDict[vPath]!.context
	local nSpace = nContext:getNamespace()
	return nSpace.localExport
end

function Runtime:main():Ret(Boolean, Nil)
	return pcall(function():Ret()
		local nLuaFunc = self:cacheLoadFile(self._mainFileName)
		local nTermTuple = self._manager:TermTuple({})
		nLuaFunc:meta_open_call(self._rootContext:newOpenContext(nLuaFunc:getNode()), nTermTuple)
		self._rootContext:checkDefineLuaFunction()
		self._rootContext:checkLateLuaFunction()
	end)
end

function Runtime:newContext(vApplyNode:class.IAstNode, vSealContext:OrFalse(class.Context), vParentContext:OrFalse(class.Context)):Ret(class.Context)
	return Context.new(self, vApplyNode, vSealContext, vParentContext)
end

function Runtime:cacheLoadFile(vFileName:String):Ret(class.LuaFunction)
	local nFileState = self._fileStateDict[vFileName]
	local nCodeEnv:OrNil(class.CodeEnv)
	if not nFileState then
		nCodeEnv = self._loader:thluaParseFile(vFileName)
		nFileState = {
			codeEnv = nCodeEnv,
			diaList = {},
		}
		self._fileStateDict[vFileName] = nFileState
	else
		nCodeEnv = nFileState.codeEnv
	end
	return nCodeEnv:getTypingFn()(self, self._rootContext, nCodeEnv:getNodeList())
end

function Runtime:require(vPath:String):Ret(class.RefineTerm)
	local nLoadedState = self._loadedDict[vPath]
	if not nLoadedState then
		local nOkay, nFileName = self._loader:thluaSearch(vPath)
		if not nOkay then
			error(nFileName)
		end
		local nLuaFunc = self:cacheLoadFile(nFileName)
		nLoadedState = {
			term=false,
			fn=nLuaFunc,
			context=false,
		} @ LoadedState
		self._loadedDict[vPath] = nLoadedState
		local nTermTuple = self._manager:TermTuple({})
		local nContext = self._rootContext:newOpenContext(nLuaFunc:getNode())
		local ret = nLuaFunc:meta_open_call(nContext, nTermTuple)
		nLoadedState.term = ret:get(1)
		nLoadedState.context = nContext
	end
	local nTerm = nLoadedState.term
	if not nTerm then
		error("recursive require:"..vPath)
	end
	return nTerm
end

function Runtime:TreeNamespace():Ret(class.Namespace)
	local nSpace = Namespace.new(self._manager, Node.getDebugNode(4))
	self._spaceList[#self._spaceList + 1] = nSpace
	return nSpace
end

function.pass Runtime:buildSimpleGlobal()
	local nGlobal = {}
	for k,v in pairs(self._manager.type) do
		nGlobal[k] = v
	end
	for k,v in pairs(self._manager.generic) do
		nGlobal[k] = v
	end
	local l = {
		Struct="buildStruct",
		Union="buildUnion",
		Intersect="buildIntersect",
		Interface="buildInterface",
		StructExtend="buildStructExtend",
		--IDict="buildIDict",
		--IList="buildIList",
		--Dict="buildDict",
		--List="buildList",
		OrNil="buildOrNil",
		OrFalse="buildOrFalse",
		Fn="buildFn",
		Pfn="buildPfn",
	}
	local nManager = self._manager
	for k,v in pairs(l) do
		nGlobal[k]=function(...)
			return nManager[v](nManager, Node.getDebugNode(3), ...)
		end
	end
	nGlobal.Literal=function(v)
		return nManager:Literal(v)
	end
	nGlobal.namespace=function()
		return self:TreeNamespace().localExport
	end
	nGlobal.import=function(vPath)
		return self:import(vPath)
	end
	nGlobal.member={
		Fn=function(self, ...)
			return nManager:buildMemberFn(Node.getDebugNode(3), ...)
		end,
	}
	nGlobal.foreachPair=function(vObject, vFunc)
		const vObject = vObject:checkAtomUnion()
		const d = vObject:copyValueDict()
		for k,v in pairs(d) do
			vFunc(k,v)
		end
	end
	for k,v in pairs(_G) do
		nGlobal[k]=v
	end
	nGlobal.print=function(...)
		self:nodeInfo(Node.getDebugNode(3), ...)
	end
	return nGlobal
end

function Runtime:RootNamespace():Ret(class.Namespace)
	local nSpace = Namespace.new(self._manager, self._node, self:buildSimpleGlobal())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	nSpace:close()
	return nSpace
end

function Runtime:LetNamespace(vParentLet:class.Namespace, vRegionNode:class.IAstNode):Ret(class.Namespace)
	local nSpace = Namespace.new(self._manager, vRegionNode, vParentLet:getKeyToType())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	return nSpace
end

function Runtime:makeSymbol_ENV(vNode:class.IAstNode):Ret(class.LocalSymbol)
	local nTerm = self._rootContext:RefineTerm(self._globalTable)
	return LocalSymbol.new(self._rootContext, vNode, self._globalTable, nTerm)
end

function Runtime:_save(vSeverity:Union(1,2,3,4), vNode:class.IAstNode, ...:Truth)
	local l:List(String) = {}
	for i=1, select("#", ...) do
		l[i] = tostring(select(i, ...))
	end
	local nMsg = table.concat(l, " ")
	local nDiaList = self._fileStateDict[vNode.path]!.diaList
	nDiaList[#nDiaList + 1] = {
		msg=nMsg,
		node=vNode,
		severity=vSeverity,
	}
end

function Runtime:nodeError(vNode:class.IAstNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function Runtime:nodeWarn(vNode:class.IAstNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function Runtime:nodeInfo(vNode:class.IAstNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function Runtime:getAllDiagnostic():Ret(Dict(String, List(Diagnostic)))
	local nFileToDiaList:Dict(String, List(Diagnostic)) = {}
	for nFileName, nState in pairs(self._fileStateDict) do
		nFileToDiaList[nFileName] = nState.diaList
	end
	return nFileToDiaList
end

function Runtime:getNode():Ret(class.IAstNode)
	return self._node
end

function Runtime:getTypeManager():Ret(class.TypeManager)
	return self._manager
end

return Runtime
