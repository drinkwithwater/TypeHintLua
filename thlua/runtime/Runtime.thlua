
local TypeFunction = require "thlua.func.TypeFunction"
local TypeManager = require "thlua.manager.TypeManager"
local NativeFunction = require "thlua.func.NativeFunction"
local LuaFunction = require "thlua.func.LuaFunction"
local TermTuple = require "thlua.tuple.TermTuple"
local Context = require "thlua.runtime.Context"
local ContextClass = require "thlua.runtime.ContextClass"
local native = require "thlua.native"
local Node = require "thlua.code.Node"
local Namespace = require "thlua.manager.Namespace"
local Symbol = require "thlua.runtime.Symbol"
local Exception = require "thlua.Exception"
local TermCase = require "thlua.term.TermCase"

(@do
	let.class = import("thlua.type.TypeClass").class

	let.ILoader = Struct {
		thluaSearch=Mfn(String):Ret(Boolean, String),
		thluaParseFile=Mfn(String):Ret(class.LuaFunction),
	}

	let.LoadedState = Struct {
		fn=class.LuaFunction,
		term=Union(False, class.UnionTerm),
		context=class.Context,
	}
end)


local Runtime = ContextClass()


function Runtime.new(vLoader:ILoader, vMainFileName:String)::RetClass(class.Runtime)
	local self = setmetatable({::Self()
	}, {
		__index=Runtime,
	})
	self._loader = vLoader
	self._runtime = self
	self._mainFileName = vMainFileName
	self._node = Node.newRootNode(vMainFileName)
	self._spaceList = {} @ List(class.Namespace)
	self._manager = TypeManager.new(self)
	self._namespace = self:RootNamespace()
	self._namespace:close()
	self._globalTable = native.make(self)
	self._loadedDict = {}
	self._lateFnDict = {} @ Dict(class.LuaFunction, True)
	self._defineFnDict = {} @ Dict(class.LuaFunction, True)
	self._nodeToSymbolSet = {} @ Dict(class.AstNode, Dict(class.AstNode, True))
	self._fileNameToExcList= {}
	return self
end

function Runtime:recordSymbol(vSymbol)
	local nNode = vSymbol:getNode()
	local nSymbolSet = self._nodeToSymbolSet[nNode]
	if not nSymbolSet then
		nSymbolSet = {}
		self._nodeToSymbolSet[nNode] = nSymbolSet
	end
	nSymbolSet[vSymbol] = true
end

function Runtime:getNodeSymbolSet(vNode)
	local nSymbolSet = self._nodeToSymbolSet[vNode]
	if not nSymbolSet then
		nSymbolSet = {}
		self._nodeToSymbolList = nSymbolSet
	end
	return nSymbolSet
end

function Runtime:recordLateLuaFunction(vFunc)
	self._lateFnDict[vFunc] = true
end

function Runtime:recordDefineLuaFunction(vFunc)
	self._defineFnDict[vFunc] = true
end

function Runtime:checkDefineLuaFunction()
	for fn, v in pairs(self._defineFnDict) do
		fn:checkDefine()
	end
end

function Runtime:checkTypeFinish()
	for _, space in pairs(self._spaceList) do
		space:check()
	end
end

function Runtime:checkLateLuaFunction()
	for fn, v in pairs(self._lateFnDict) do
		fn:checkLateRun()
	end
end

function Runtime:import(vPath)
	-- TODO better style
	self:require(vPath)
	local nContext = self._loadedDict[vPath].context
	local nSpace = nContext:getNamespace()
	return nSpace.localExport
end

function Runtime:main()
	return pcall(function()
		local nLuaFunc = self:cacheLoadFile(self._mainFileName)
		local nTermTuple = self._manager:TermTuple({})
		nLuaFunc:meta_native_call(nLuaFunc:newInplaceContext(), nTermTuple)
		self:checkDefineLuaFunction()
		--self:checkLateLuaFunction()
	end)
end

function Runtime:newContext(vApplyNode)
	return Context.new(self, vApplyNode)
end

function Runtime:cacheLoadFile(vFileName)::Ret(class.LuaFunction)
	if not self._fileNameToExcList[vFileName] then
		self._fileNameToExcList[vFileName] = {}
	end
	local nCodeEnv = self._loader:thluaParseFile(vFileName)
	return nCodeEnv:getTypingFn()(self, nCodeEnv:getNodeList())
end

function Runtime:require(vPath)
	local nLoadedState = self._loadedDict[vPath]
	if not nLoadedState then
		local nOkay, nFileName = self._loader:thluaSearch(vPath)
		if not nOkay then
			error(nFileName)
		end
		local nLuaFunc = self:cacheLoadFile(nFileName)
		nLoadedState = {
			term=false,
			fn=nLuaFunc,
			context=false,
		}
		self._loadedDict[vPath] = nLoadedState
		local nTermTuple = self._manager:TermTuple({})
		local nContext = nLuaFunc:newInplaceContext()
		local ret = nLuaFunc:meta_native_call(nContext, nTermTuple)
		nLoadedState.term = ret:get(1)
		nLoadedState.context = nContext
	end
	local nTerm = nLoadedState.term
	if not nTerm then
		error("recursive require:"..vPath)
	end
	return nTerm
end

function Runtime:TreeNamespace()
	local nSpace = Namespace.new(self._manager, Node.getDebugNode(4))
	self._spaceList[#self._spaceList + 1] = nSpace
	return nSpace
end

function Runtime:RootNamespace()::Ret(class.Namespace)
	local nSpace = Namespace.new(self._manager, self._node, self._manager:buildSimpleGlobal())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	nSpace:close()
	return nSpace
end

function Runtime:LetNamespace(vParentLet, vBlockNode)
	local nSpace = Namespace.new(self._manager, vBlockNode, vParentLet:getKeyToType())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	return nSpace
end

function Runtime:makeDebugNode(vDepth)
	return Node.getDebugNode(vDepth)
end

function Runtime:makeSymbol_ENV(vNode)
	local nTerm = self:UnionTerm(self._globalTable)
	return Symbol.new(self, false, vNode, self._globalTable, nTerm)
end

function Runtime:nodeError(vNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	local l = {}
	for i=1, select("#", ...) do
		l[i] = tostring(select(i, ...))
	end
	local nMsg = table.concat(l, " ")
	local nException = Exception.new(nMsg, vNode)
	local nExcList = self._fileNameToExcList[vNode.path]
	if not nExcList then
		nExcList = {}
		self._fileNameToExcList[vNode.path] = nExcList
	end
	nExcList[#nExcList + 1] = Exception.new(nMsg, vNode)
end

function Runtime:nodeWarn(vNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
end

function Runtime:nodeInfo(vNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
end

function Runtime:getNormalException()
	return self._fileNameToExcList
end

return Runtime
