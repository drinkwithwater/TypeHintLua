
const TypedFunction = require "thlua.func.TypedFunction"
const TypeManager = require "thlua.manager.TypeManager"
const OpenFunction = require "thlua.func.OpenFunction"
const TermTuple = require "thlua.tuple.TermTuple"
const native = require "thlua.native"
const Node = require "thlua.code.Node"
const Namespace = require "thlua.manager.Namespace"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const BaseStack = require "thlua.runtime.BaseStack"
const OpenStack = require "thlua.runtime.OpenStack"
const SealStack = require "thlua.runtime.SealStack"
const AutoFunction = require "thlua.func.AutoFunction"

const ScheduleManager = require "thlua.manager.ScheduleManager"
const class = require "thlua.class"

(@do
	import("thlua.code.CodeEnv")
	let.clazz = import("thlua.type.TypeClass").clazz

	clazz.ILoader = Interface {
		thluaSearch=Mfn(String):Ret(Boolean, String),
		thluaParseFile=Mfn(String):Ret(clazz.CodeEnv),
	}

	clazz.Diagnostic = Struct {
		node=clazz.IAstNode,
		msg=String,
		severity=Union(1,2,3,4),
	}

	let.LoadedState = Struct {
		fn=clazz.OpenFunction,
		term=OrNil(clazz.RefineTerm),
		stack=OrNil(clazz.BaseStack),
	}

end)


const Runtime = class@<clazz.Runtime, false>()

function.open Runtime:ctor(vLoader:clazz.ILoader, vMainFileName:String)
	self._loader=vLoader
	self._mainFileName=vMainFileName
	self._node=Node.newRootNode(vMainFileName)
	self._spaceList={}@List(clazz.Namespace)
	self._loadedDict={}@Dict(String, LoadedState)
	self._fileEnvDict={}@Dict(String, clazz.CodeEnv)
	self._diaList={}@List(clazz.Diagnostic)
	self._scheduleManager=ScheduleManager.new()
	self._manager = TypeManager.new(self, self._node, self._scheduleManager)
	self._globalTable=nil@!clazz.AutoTable
	self._rootStack=nil@!clazz.SealStack
end

function Runtime:checkAtomUnionFinish()
	for _, space in pairs(self._spaceList) do
		space:check()
	end
end

function Runtime:import(vPath:String):Ret(clazz.SpaceTable)
	-- TODO better style?
	self:require(vPath)
	const nStack = self._loadedDict[vPath]!.stack!
	const nSpace = nStack:getNamespace()
	return nSpace.localExport
end

function Runtime:main():Ret(Boolean, Nil)
	const t1 = os.clock()
	const a,b = pcall(function()
		const nAutoFn = AutoFunction.new(self._manager, self._node, false, false)
		const nRootStack = nAutoFn:getStack()
		self._rootStack = nRootStack
		self._manager:lateInit()
		self._globalTable = native.make(self)
		nRootStack:rootSetNamespace(self:RootNamespace())
		nAutoFn:buildAsync(function()
			return false, false, function()
				const nLuaFunc = self:cacheLoadFile(self._mainFileName)
				const nNoPushContext = self._rootStack:newNoPushContext(self._node)
				const nTermTuple = nNoPushContext:FixedTermTuple({})
				nLuaFunc:meta_open_call(nNoPushContext, nTermTuple)
				self._rootStack:seal()
				const nParTuple = self._manager:TypeTuple(self._node)
				const nRetTuples = self._manager:VoidRetTuples(self._node)
				return nParTuple, nRetTuples
			end
		end)
		nAutoFn:startTask()
	end)
	const t2 = os.clock()
	print(t2-t1)
	-- self:diffTestExpect()
	return a,b
end

function Runtime:SealStack(...):Ret(clazz.SealStack)
	return SealStack.new(self, ...)
end

function Runtime:OpenStack(...):Ret(clazz.OpenStack)
	return OpenStack.new(self, ...)
end

function Runtime:cacheLoadFile(vFileName:String):Ret(clazz.OpenFunction)
	local nCodeEnv = self._fileEnvDict[vFileName]
	if not nCodeEnv then
		nCodeEnv = self._loader:thluaParseFile(vFileName)
		self._fileEnvDict[vFileName] = nCodeEnv
	end
	return nCodeEnv:getTypingFn()(self._rootStack, self:makeGlobalTerm(), nCodeEnv:getNodeList(), false)
end

function Runtime:require(vPath:String):Ret(clazz.RefineTerm)
	if not self._loadedDict[vPath] then
		const nOkay, nFileName = self._loader:thluaSearch(vPath)
		if not nOkay then
			error(nFileName)
		end
		const nLuaFunc = self:cacheLoadFile(nFileName)
		const nLoadedState:LoadedState = {
			fn=nLuaFunc,
		}
		self._loadedDict[vPath] = nLoadedState
		const nContext = self._rootStack:newNoPushContext(self._node)
		const nTermTuple = nContext:FixedTermTuple({})
		const nRet, nStack = nLuaFunc:meta_open_call(nContext, nTermTuple)
		nLoadedState.term = TermTuple.is(nRet) and nRet:checkFixed(nContext, 1) or nRet:checkRefineTerm(nContext)
		nLoadedState.stack = nStack
	end
	const nTerm = self._loadedDict[vPath]!.term
	if not nTerm then
		error("recursive require:"..vPath)
	end
	return nTerm
end

function Runtime:TreeNamespace():Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, Node.getDebugNode(4))
	self._spaceList[#self._spaceList + 1] = nSpace
	return nSpace
end

function.pass Runtime:buildSimpleGlobal():Ret(Truth)
	local nGlobal = {}
	for k,v in pairs(self._manager.type) do
		nGlobal[k] = v
	end
	for k,v in pairs(self._manager.generic) do
		nGlobal[k] = v
	end
	local l = {
		Union="buildUnion",
		Struct="buildStruct",
		Interface="buildInterface",
		ExtendInterface="buildExtendInterface",
		ExtendStruct="buildExtendStruct",
		Template="buildTemplate",
		--IDict="buildIDict",
		--IList="buildIList",
		--Dict="buildDict",
		--List="buildList",
		OrNil="buildOrNil",
		OrFalse="buildOrFalse",
		Fn="buildFn",
		Pfn="buildPfn",
		Mfn="buildMfn",
	}
	local nManager = self._manager
	for k,v in pairs(l) do
		nGlobal[k]=function(...)
			return nManager[v](nManager, Node.getDebugNode(3), ...)
		end
	end
	nGlobal.Literal=function(v)
		return nManager:Literal(v)
	end
	nGlobal.namespace=function()
		return self:TreeNamespace().localExport
	end
	nGlobal.import=function(vPath)
		return self:import(vPath)
	end
	nGlobal.foreachPair=function(vObject, vFunc)
		const vObject = vObject:checkAtomUnion()
		const d = vObject:copyValueDict()
		for k,v in pairs(d) do
			vFunc(k,v)
		end
	end
	for k,v in pairs(_G) do
		nGlobal[k]=v
	end
	nGlobal.print=function(...)
		self:nodeInfo(Node.getDebugNode(3), ...)
	end
	const nRetGlobal = {}
	for k,v in pairs(nGlobal) do
		nRetGlobal[self._manager:Literal(k)] = v
	end
	return nRetGlobal
end

function Runtime:RootNamespace():Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, self._node, self:buildSimpleGlobal())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	nSpace:close()
	return nSpace
end

function Runtime:LetNamespace(vParentLet:clazz.Namespace, vRegionNode:clazz.IAstNode):Ret(clazz.Namespace)
	local nSpace = Namespace.new(self._manager, vRegionNode, vParentLet:getKeyToType())
	self._spaceList[#self._spaceList + 1] = nSpace
	nSpace:trySetKey("")
	return nSpace
end

function Runtime:makeGlobalTerm():Ret(clazz.RefineTerm)
	const nHeadContext = self._rootStack:inplaceOper()
	return nHeadContext:RefineTerm(self._globalTable)
end

function Runtime:_save(vSeverity:Union(1,2,3,4), vNode:clazz.IAstNode, ...:Truth)
	local l:List(String) = {}
	for i=1, select("#", ...) do
		l[i] = tostring(select(i, ...))
	end
	local nMsg = table.concat(l, " ")
	local nDiaList = self._diaList
	nDiaList[#nDiaList + 1] = {
		msg=nMsg,
		node=vNode,
		severity=vSeverity,
	}
end

function Runtime:nodeError(vNode:clazz.IAstNode, ...:Truth)
	print("[ERROR] "..tostring(vNode), ...)
	self:_save(1, vNode, ...)
end

function Runtime:nodeWarn(vNode:clazz.IAstNode, ...:Truth)
	print("[WARN] "..tostring(vNode), ...)
	self:_save(2, vNode, ...)
end

function Runtime:nodeInfo(vNode:clazz.IAstNode, ...:Truth)
	print("[INFO] "..tostring(vNode), ...)
	self:_save(3, vNode, ...)
end

function Runtime:getAllDiagnostic():Ret(Dict(String, List(clazz.Diagnostic)))
	local nFileToDiaList:Dict(String, List(clazz.Diagnostic)) = {}
	for _, nDia in pairs(self._diaList) do
		const nPath = nDia.node.path
		local nList = nFileToDiaList[nPath]
		if not nList then
			nList = {}
			nFileToDiaList[nPath] = nList
		end
		nList[#nList + 1] = nDia
	end
	return nFileToDiaList
end

function Runtime:getNode():Ret(clazz.IAstNode)
	return self._node
end

function Runtime:getTypeManager():Ret(clazz.TypeManager)
	return self._manager
end

function Runtime:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function Runtime:getRootStack():Ret(clazz.SealStack)
	return self._rootStack
end

return Runtime
