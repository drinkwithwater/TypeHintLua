
const TermTuple = require "thlua.tuple.TermTuple"
const Exception = require "thlua.Exception"
const class = require "thlua.class"
const InstStack = require "thlua.runtime.InstStack"
const ClassFactory = require "thlua.type.func.ClassFactory"
const SealFunction = require "thlua.type.func.SealFunction"
const AutoFunction = require "thlua.type.func.AutoFunction"

(@do
	let.clazz = import($class).clazz
	let.node = import("thlua.code.Node").node
end)

const SealStack = class@<clazz.SealStack, false>(InstStack)

function.open SealStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IBaseNode,
	vUpState:OrFalse(clazz.LexCapture),
	vBodyFn:Union(clazz.ClassFactory, clazz.AutoFunction)
)
	self._classFnSet={} @ OrFalse(Dict(clazz.ClassFactory, True))
	self._autoFnSet={} @ OrFalse(Dict(clazz.AutoFunction, True))
	self._bodyFn = vBodyFn
	self._classTable=false@OrFalse(clazz.ClassTable)
end

function SealStack:setClassTable(vClassTable:clazz.ClassTable)
	self._classTable = vClassTable
end

function SealStack:getClassTable():Ret(OrFalse(clazz.ClassTable))
	return self._classTable
end

function SealStack:_returnCheck(vContext:clazz.ReturnContext, vTypeTuple:clazz.UTypeTuple)
	const nBodyFn = self._bodyFn
	if AutoFunction.is(nBodyFn) then
		local nOneOkay = false
		local nRetTuples = nBodyFn:getRetTuples()
		if nRetTuples then
			const nMatchSucc, nCastSucc = vContext:returnMatchTuples(vTypeTuple, nRetTuples)
			if not nMatchSucc then
				vContext:error("return match failed")
			elseif not nCastSucc then
				vContext:error("return cast failed")
			end
		end
	elseif ClassFactory.is(nBodyFn) then
		const nResultType = nBodyFn:getClassTable(true)
		if nResultType ~= vTypeTuple:get(1):checkAtomUnion() or #vTypeTuple ~= 1 or vTypeTuple:getRepeatType() then
			vContext:error("class return not match")
		end
	end
end

function SealStack:RAISE_ERROR(vContext:clazz.OperContext, vRaiseErr:clazz.UMustType)
	const nBodyFn = self._bodyFn
	assert(SealFunction.is(nBodyFn))
	const nRetTuples = nBodyFn:getRetTuples()
	const nString = self._manager.type.String
	if nRetTuples then
		const nHintErr = nRetTuples:getErrType()
		if not nHintErr:includeAll(vRaiseErr) then
			if nString:includeAll(nHintErr) then
				--vContext:error("can't implicit throw a non-string error")
			else
				--vContext:error("err type not match")
			end
		end
	else
		if not nString:includeAll(vRaiseErr) then
			--vContext:error("can't implicit throw a non-string error")
		end
	end
end

function SealStack:RETURN(vNode:clazz.IBaseNode, vTermTuple:clazz.UTermTuple)
	assert(TermTuple.isFixed(vTermTuple), Exception.new("can't return auto term", vNode))
	const nRetContext = self:newReturnContext(vNode)
	table.insert(self._retList, vTermTuple)
	if #vTermTuple <= 0 or vTermTuple:getTail() then
		self:_returnCheck(nRetContext, vTermTuple:checkTypeTuple())
	else
		const nManager = self:getTypeManager()
		nRetContext:unfoldTermTuple(vTermTuple, function(vFirst, vTypeTuple, _)
			self:_returnCheck(nRetContext, vTypeTuple)
		end)
	end
	self:topBranch():setStop()
end

function SealStack:END(vNode:clazz.IBaseNode):Ret(clazz.FixedTermTuple, clazz.UAtomUnion)
	self:getNamespace():close()
	const nBodyFn = self._bodyFn
	const nRetList = self._retList
	if AutoFunction.is(nBodyFn) and not nBodyFn:getRetTuples() then
		const nLen = #nRetList
		if nLen == 0 then
			return self._fastOper:FixedTermTuple({}), self._manager.type.String
		elseif nLen == 1 then
			return nRetList[1]!, self._manager.type.String
		else
			const nFirstTuple = nRetList[1]!:checkTypeTuple()
			for i=2,#nRetList do
				const nOtherTuple = nRetList[i]!:checkTypeTuple()
				if not (nFirstTuple:includeTuple(nOtherTuple) and nOtherTuple:includeTuple(nFirstTuple)) then
					error("auto-function can't implicit return mixing type, explicit hint with :Ret(xxx) ")
				end
			end
			return nRetList[1]!, self._manager.type.String
		end
	else
		return nil@!clazz.FixedTermTuple, nil@!clazz.UAtomUnion
	end
end

function SealStack:seal()
	const nClassFnSet = assert(self._classFnSet, "class set must be true here")
	self._classFnSet = false
	for fn, v in pairs(nClassFnSet) do
		fn:startPreBuild()
		fn:startLateBuild()
	end
	const nAutoFnSet = assert(self._autoFnSet, "maker set must be true here")
	self._autoFnSet = false
	for fn, v in pairs(nAutoFnSet) do
		fn:startPreBuild()
		self._runtime:lateSchedule(fn)
	end
end

function SealStack:getSealStack():Ret(clazz.SealStack)
	return self
end

function SealStack:scheduleSealType(vType:clazz.SealFunction)
	if ClassFactory.is(vType) then
		const nSet = self._classFnSet
		if nSet then
			nSet[vType] = true
		else
			vType:startPreBuild()
			vType:startLateBuild()
		end
	elseif AutoFunction.is(vType) then
		const nSet = self._autoFnSet
		if nSet then
			nSet[vType] = true
		else
			vType:startPreBuild()
			self._runtime:lateSchedule(vType)
		end
	end
end

function SealStack:rootSetNamespace(vRootSpace:clazz.Namespace)
	assert(not self._letspace, "namespace has been setted")
	self._letspace = self._runtime:LetNamespace(vRootSpace, self._node)
end

function SealStack:getBodyFn():Ret(Union(clazz.AutoFunction,clazz.ClassFactory))
	return self._bodyFn @> Union(clazz.AutoFunction,clazz.ClassFactory)
end

function SealStack:isRoot():Ret(Boolean)
	return not self._lexCapture
end

return SealStack
