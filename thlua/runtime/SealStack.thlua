
const class = require "thlua.class"
const InstStack = require "thlua.runtime.InstStack"

(@do
	let.clazz = import("thlua.type.TypeClass").clazz
end)

const SealStack = class@<clazz.SealStack, false>(InstStack)

function.open SealStack:ctor(
	vRuntime:clazz.Runtime,
	vNode:clazz.IAstNode,
	vUpValueCase:OrFalse(clazz.VariableCase),
	vBodyFn:Union(clazz.ClassFactory, clazz.AutoFunction)
)
	self._classFnSet={} @ OrFalse(Dict(clazz.ClassFactory, True))
	self._funcMakerSet={} @ OrFalse(Dict(clazz.AutoFunction, True))
	self._bodyFn = vBodyFn
	self._classTable=false@OrFalse(clazz.ClassTable)
end

function SealStack:setClassTable(vClassTable:clazz.ClassTable)
	self._classTable = vClassTable
end

function SealStack:getClassTable():Ret(OrFalse(clazz.ClassTable))
	return self._classTable
end

function SealStack:seal()
	const nClassFnSet = assert(self._classFnSet, "class set must be true here")
	self._classFnSet = false
	for fn, v in pairs(nClassFnSet) do
		fn:startTask()
	end
	const nFuncMakerSet = assert(self._funcMakerSet, "maker set must be true here")
	self._funcMakerSet = false
	for fn, v in pairs(nFuncMakerSet) do
		fn:startTask()
	end
end

function SealStack:getSealStack():Ret(clazz.SealStack)
	return self
end

function SealStack:recordClassFactory(vFunc:clazz.ClassFactory)
	const nSet = self._classFnSet
	if nSet then
		nSet[vFunc] = true
	else
		vFunc:startTask()
	end
end

function SealStack:recordAutoFunction(vFunc:clazz.AutoFunction)
	const nSet = self._funcMakerSet
	if nSet then
		nSet[vFunc] = true
	else
		vFunc:startTask()
	end
end

function SealStack:rootSetNamespace(vRootSpace:clazz.Namespace)
	assert(not self._namespace, "namespace has been setted")
	self._namespace = vRootSpace
end

return SealStack
