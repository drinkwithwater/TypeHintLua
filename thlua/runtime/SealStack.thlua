
const class = require "thlua.class"
const InstStack = require "thlua.runtime.InstStack"
const ClassFactory = require "thlua.func.ClassFactory"
const AutoFunction = require "thlua.func.AutoFunction"

(@do
	let.clazz = import($class).clazz
	let.node = import("thlua.code.Node").node
end)

const SealStack = class@<clazz.SealStack, false>(InstStack)

function.open SealStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IAstNode,
	vUpState:OrFalse(clazz.LexState),
	vBodyFn:Union(clazz.ClassFactory, clazz.AutoFunction)
)
	self._classFnSet={} @ OrFalse(Dict(clazz.ClassFactory, True))
	self._autoFnSet={} @ OrFalse(Dict(clazz.AutoFunction, True))
	self._bodyFn = vBodyFn
	self._classTable=false@OrFalse(clazz.ClassTable)
end

function SealStack:setClassTable(vClassTable:clazz.ClassTable)
	self._classTable = vClassTable
end

function SealStack:getClassTable():Ret(OrFalse(clazz.ClassTable))
	return self._classTable
end

function SealStack:seal()
	const nClassFnSet = assert(self._classFnSet, "class set must be true here")
	self._classFnSet = false
	for fn, v in pairs(nClassFnSet) do
		fn:startTask()
	end
	const nAutoFnSet = assert(self._autoFnSet, "maker set must be true here")
	self._autoFnSet = false
	for fn, v in pairs(nAutoFnSet) do
		self._runtime:scheduleAutoFn(fn)
	end
end

function SealStack:getSealStack():Ret(clazz.SealStack)
	return self
end

function SealStack:scheduleSealType(vType:clazz.SealFunction)
	if ClassFactory.is(vType) then
		const nSet = self._classFnSet
		if nSet then
			nSet[vType] = true
		else
			vType:startTask()
		end
	elseif AutoFunction.is(vType) then
		const nSet = self._autoFnSet
		if nSet then
			nSet[vType] = true
		else
			self._runtime:scheduleAutoFn(vType)
		end
	end
end

function SealStack:rootSetNamespace(vRootSpace:clazz.Namespace)
	assert(not self._namespace, "namespace has been setted")
	self._namespace = vRootSpace
end

function SealStack:getBodyFn():Ret(Union(clazz.AutoFunction,clazz.ClassFactory))
	return self._bodyFn @> Union(clazz.AutoFunction,clazz.ClassFactory)
end

function SealStack:isRoot():Ret(Boolean)
	return not self._lexState
end

return SealStack
