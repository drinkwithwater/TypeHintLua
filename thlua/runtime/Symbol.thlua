
local UnionTerm = require "thlua.term.UnionTerm"
(@var.class = import("thlua.type.TypeClass").class)

local Symbol = {}
Symbol.__index=Symbol
Symbol.__tostring=function(self)
	return "Symbol-"..tostring(self._node).."-"..tostring(self._type)
end

function Symbol.new(vContext:class.Context, vRegion:class.Region,
		vNode:class.AstNode, vType:class.IKeyType)::RetNew(class.Symbol)
	return setmetatable({::Self()
		_region=vRegion,
		_node=vNode,
		_type=vType,
	}, Symbol)
end

function Symbol:getType()
	return self._type
end

function Symbol:getName()
	return tostring(self._node)
end

function Symbol:GET()
	return self._region:top_branch():symbol_get(self)
end

function Symbol:SET(vTerm)
	return self._region:top_branch():symbol_set(self, vTerm)
end

return Symbol
