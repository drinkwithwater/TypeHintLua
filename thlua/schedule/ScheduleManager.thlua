
const ScheduleEvent = require "thlua.schedule.ScheduleEvent"
const Exception = require "thlua.Exception"
const class = require@<let.clazz> "thlua.class"

const LuaPromise = require@<let.LuaPromise> "thlua.utils.LuaPromise"
const ScheduleTask = require "thlua.schedule.ScheduleTask"
const SealTask = require "thlua.schedule.SealTask"
const HintTask = require "thlua.schedule.HintTask"

(@do
	let.uv_async_t = import("luv").uv_async_t
	let.ProfileInfo = Struct {
		counter = Integer,
		start = OrFalse(Integer),
		accumulate = Integer,
		name = String,
	}
end)

const ScheduleManager = class@<clazz.ScheduleManager, false>()

function.open ScheduleManager:ctor(vRuntime:clazz.CodeRuntime)
	self._coToTask={} @ Dict(Thread, clazz.ScheduleTask)
	self._sealTaskList={}@List(OrFalse(clazz.SealTask))
	self._hintTaskList={}@List(clazz.HintTask)
	self._selfCo=coroutine.running()
	self._runtime = vRuntime
	self._mainPromise = LuaPromise.new@<Nil>()
	self._tickAsync = nil @! OrNil(uv_async_t)
	self.useProfile = false @Boolean
end

function ScheduleManager:newHintTask(vHintHost:clazz.UHintHost)
	const nTask = HintTask.new(self, vHintHost)
	self._coToTask[nTask:getSelfCo()] = nTask
	return nTask
end

function ScheduleManager:newSealTask(vSealStack:clazz.SealStack)
	const nTask = SealTask.new(self, vSealStack)
	self._coToTask[nTask:getSelfCo()] = nTask
	return nTask
end

function ScheduleManager:getTask():Ret(clazz.ScheduleTask)
	return self._coToTask[coroutine.running()]!
end

function ScheduleManager:tryGetSealTask():Ret(OrNil(clazz.SealTask))
	const nTask = self._coToTask[coroutine.running()]!
	if SealTask.is(nTask) then
		return nTask
	else
		return nil
	end
end

function ScheduleManager:checkRecursive(vWaitingTask:clazz.ScheduleTask, vDependTask:clazz.ScheduleTask)
	-- seal stack can't wait async hint type
	if SealTask.is(vWaitingTask) and HintTask.is(vDependTask) then
		vDependTask:errorWaitByStack(vWaitingTask:getStack())
	end
	local nCurTask = vDependTask
	const nTaskList:List(clazz.ScheduleTask) = {}
	while nCurTask do
		nTaskList[#nTaskList + 1] = nCurTask
		if nCurTask == vWaitingTask then
			const nNodeList:List(clazz.IBaseNode) = {}
			for _, nTask in ipairs(nTaskList) do
				nNodeList[#nNodeList + 1] = nTask:getNode() or nil
			end
			const nFirstNode = nNodeList[1]
			if not nFirstNode then
				error("recursive build type")
			else
				error(Exception.new("recursive build type", nFirstNode, table.unpack(nNodeList, 2)))
			end
		else
			const nWaitEvent = nCurTask:getWaitEvent()
			if nWaitEvent then
				const nNextTask = nWaitEvent:getTask()
				if nNextTask then
					nCurTask = nNextTask
					continue
				end
			end
			break
		end
	end
end

function ScheduleManager:_tickTask():Ret(Boolean)
	const nHintTaskList = self._hintTaskList
	while true do
		const nDepth = #nHintTaskList
		const nTask = nHintTaskList[nDepth]
		if not nTask then
			break
		end
		nHintTaskList[nDepth] = nil
		nTask:resume()
	end
	const nTaskList = self._sealTaskList
	const depth = #nTaskList
	if depth <= 0 then
		return false
	end
	const nTask = nTaskList[depth]
	if not nTask then
		nTaskList[depth] = nil
	else
		const stay = nTask:resume()
		if not stay then
			nTaskList[depth] = false
		end
	end
	return #nTaskList > 0
end

function ScheduleManager:cancelSchedule()
	const tickAsync = assert(self._tickAsync, "cancelSchedule called but not schedule??")
	if not tickAsync:is_closing() then
		tickAsync:close(function()
			const mainPromise = self._mainPromise
			if mainPromise:isPending() then
				mainPromise:reject("interrupt by cancelSchedule()")
			end
		end)
	end
end

function ScheduleManager:promiseSchedule():Ret(LuaPromise(Nil))
	assert(not self._tickAsync, "promiseSchedule called more than once")
	const mainPromise = self._mainPromise
	local counter = 0
	self._tickAsync = self._runtime:getStage().createAsync(function()
		counter = counter + 1
		const ok, retOrErr = pcall(self._tickTask, self)
		if ok then
			if retOrErr then
				self._tickAsync!:send()
			else
				self._tickAsync!:close()
				mainPromise:resolve(nil)
			end
		else
			if Exception.is(retOrErr) then
				self._runtime:nodeError(retOrErr.node, retOrErr.msg)
			else
				self._runtime:nodeError(self._runtime:getRootNode(), retOrErr)
			end
			self._tickAsync!:close()
			mainPromise:resolve(nil)
		end
	end)
	self._tickAsync!:send()
	return mainPromise
end

function ScheduleManager:pushSchedule(vTask:clazz.ScheduleTask)
	if SealTask.is(vTask) then
		const nList = self._sealTaskList
		nList[#nList + 1] = vTask
	else
		const nList = self._hintTaskList
		nList[#nList + 1] = vTask @> clazz.HintTask
	end
	const nCurTask = self._coToTask[coroutine.running()]
	if SealTask.is(nCurTask) then
		coroutine.yield(true)
	end
end

function ScheduleManager:makeWildEvent():Ret(clazz.ScheduleEvent)
	return ScheduleEvent.new(self, false)
end

function ScheduleManager:getRuntime()
	return self._runtime
end

function ScheduleManager:dump()
	const nFnToProfile:Dict(AnyFunction, clazz.ProfileInfo) = {}
	for k, nTask in pairs(self._coToTask) do
		for fn, profile in pairs(nTask:getFnToProfile()) do
			const nCurProfile = nFnToProfile[fn]
			if not nCurProfile then
				nFnToProfile[fn] = {
					accumulate = profile.accumulate,
					counter = profile.counter,
					name = profile.name,
					start = false,
				}
			else
				nCurProfile.accumulate = nCurProfile.accumulate + profile.accumulate
				nCurProfile.counter = nCurProfile.counter + profile.counter
			end
		end
	end
	const l:List(clazz.ProfileInfo) = {}
	for k, profile in pairs(nFnToProfile) do
		if profile.counter > 1 then
			l[#l+1] = profile
		end
	end
	table.sort(l, function(a,b)
		return a.counter < b.counter
	end)
	local nAllTime = 0.0001 -- for divide zero error
	for _, profile in pairs(l) do
		nAllTime = nAllTime + profile.accumulate
	end
	for _, profile in pairs(l) do
		print(string.format("%.5f", profile.accumulate/nAllTime), profile.counter, profile.name)
	end
end


return ScheduleManager
