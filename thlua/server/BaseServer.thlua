
const json = require "thlua.server.json"
const methodHandler = require "thlua.server.methodHandler"
const Exception = require "thlua.Exception"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const CompletionRuntime = require "thlua.runtime.CompletionRuntime"
const DiagnosticRuntime = require "thlua.runtime.DiagnosticRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const class = require "thlua.class"

(@do
	let.clazz=import("thlua.type.TypeClass").clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const BaseServer = class@<lsp.BaseServer, clazz.ILoader>()

function.open BaseServer:ctor()
	self.initialize=false@Boolean
	self.shutdown=false@Boolean
	self._root=""@String
	self._fileStateDict={}@Dict(String, lsp.FileState)
end

function.pass BaseServer:getMethodHandler():Ret(Truth)
	return methodHandler
end

function BaseServer:syncFile(vContent:String, vFileName:String, vVersion:Integer):Ret(Boolean)
	local nFileState = self._fileStateDict[vFileName]
	if not nFileState then
		nFileState = FileState.new(vFileName)
		self._fileStateDict[vFileName] = nFileState
	end
	return nFileState:syncContent(vContent, vVersion)
end

function BaseServer:thluaSearch(vPath:String):Ret(Boolean, String)
	local thluaPath = self._root.."/?.thlua"
	local fileName, err1 = package.searchpath(vPath, thluaPath)
	if not fileName then
		return false, err1
	end
	return true, fileName
end

function BaseServer:thluaParseFile(vFileName:String)
	if not self._fileStateDict[vFileName] then
		local file, err = io.open(vFileName, "r")
		if not file then
			error(err)
		end
		const nContent = file:read("*a")
		file:close()
		self:syncFile(nContent, vFileName, -1)
	end
	return self._fileStateDict[vFileName]!:checkLatestEnv()
end

function BaseServer:checkFileState(vFileName:String):Ret(lsp.FileState)
	return (assert(self._fileStateDict[vFileName], "file not existed:"..vFileName))
end

function BaseServer:mainLoop()
	self:notify("$/status/report", {
		text="hello",
		tooltip="hello",
	})
	while not self.shutdown do
		self:rpc()
	end
end

local function reqToStr(vRequest:lsp.RequestMessage):Ret(String)
	return "["..tostring(vRequest.method)..(vRequest.id and ("$"..vRequest.id) or "").."]"
end

function.pass BaseServer:rpc()
	local request = self:readRequest()
	local methodName = request.method
	local nId = request.id
	if not methodName then
		if nId then
			self:writeError(nId, ErrorCodes.ParseError, "method name not set", "")
		else
			self:warn(reqToStr(request), "method name not set")
		end
		return
	end
	const handler = self:getMethodHandler()[methodName]
	if not handler then
		if nId then
			self:writeError(nId, ErrorCodes.MethodNotFound, "method not found", "method="..tostring(methodName))
		else
			self:warn(reqToStr(request), "method not found")
		end
		return
	end
	const result = handler(self, request.params)
	if result then
		if nId then
			self:writeResult(nId, result)
			self:info("write response:$"..tostring(nId))
		else
			self:warn(reqToStr(request), "request without id ")
		end
		return
	else
		if nId then
			self:warn(reqToStr(request), "request with id but no resposne")
		end
	end
end

function BaseServer:readRequest():Ret(lsp.RequestMessage)
	-- 1 get header
	local length:Integer = -1
	while true do
		local line = io.read("*l")
		if not line then
			error("io.read fail")
		end
		line = line:gsub("\13", "")
		if line == "" then
			break
		end
		local key, val = line:match("([^:]+): (.+)")
		if not key or not val then
			error("header format error:"..line)
		end
		if key == "Content-Length" then
			length = assert(math.tointeger(val), "Content-Length can't convert to integer"..tostring(val))
		end
	end

	if length < 0 then
		error("Content-Length failed in rpc")
	end

	-- 2 get body
	local data = io.read(length)
	if not data then
		error("read nothing")
	end
	data = data:gsub("\13", "")
	local obj, err = json.decode(data)
	if type(obj) ~= "table" then
		error("json decode error:"..tostring(err))
	end
	const req = obj @? lsp.RequestMessage
	if req.jsonrpc ~= "2.0" then
		error("json-rpc is not 2.0, "..tostring(req.jsonrpc))
	end
	self:info("recv:"..reqToStr(req) ) -- , json.encode(obj.params))
	return req
end

function BaseServer:writeError(vId:Union(Number, String, Nil), vCode:Number, vMsg:String, vData:String):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		error = {
			code = vCode,
			message = vMsg,
			data = vData,
		}
	})
end

function BaseServer:writeResult(vId:Union(Number, String, Nil), vResult:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		result = vResult,
	})
end

function BaseServer:notify(vMethod:String, vParams:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		method = vMethod,
		params = vParams,
	})
end

function BaseServer:getPlatform():Ret(String)
	if package.config:sub(1,1) == "\\" then
		return "win"
	else
		return "not-win"
	end
end

function BaseServer:_write(vPacket:Truth)
	local data:String = json.encode(vPacket)
	if self:getPlatform() == "win" then
		data = ("Content-Length: %d\n\n%s"):format(#data, data)
	else
		data = ("Content-Length: %d\r\n\r\n%s"):format(#data, data)
	end
	io.write(data)
	io.flush()
end

local MessageType = {}

MessageType.ERROR = 1
MessageType.WARNING = 2
MessageType.INFO = 3
MessageType.DEBUG = 4

function BaseServer:packToString(vDepth, ...:Truth):Ret(String)
	local nInfo = debug.getinfo(vDepth)
	local nPrefix = nInfo.source..":"..nInfo.currentline
	local l = {nPrefix} @ List(String)
	for i=1,select("#", ...) do
		l[#l + 1] = tostring(select(i, ...))
	end
	return table.concat(l, " ")
end

function BaseServer:error(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.ERROR,
	})
end

function BaseServer:warn(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.WARNING,
	})
end

function BaseServer:info(...:Any)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.INFO,
	})
end

function BaseServer:debug(...)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.DEBUG,
	})
end

function BaseServer:setRoot(vRoot:String)
	--self.root = vRoot:gsub("/*$", "")
	--self:info("root:", self.root, vRoot)
	self._root = vRoot
end

function BaseServer:uriToPath(vUri:String):Ret(String)
	const nPath = vUri:gsub("+", ""):gsub("%%(..)", function(c)
		return string.char(tonumber(c, 16))
	end)
	if self:getPlatform() == "win" then
		return (nPath:gsub("^file:///", ""):gsub("/$", ""))
	else
		return (nPath:gsub("^file://", ""):gsub("/$", ""))
	end
end

function BaseServer:pathToUri(vPath:String):Ret(String)
	if self:getPlatform() == "win" then
		const nUri = vPath:gsub("\\", "/"):gsub("([a-zA-Z]):", function(driver)
			return driver.."%3A"
		end)
		return "file:///"..nUri
	else
		return "file://"..vPath
	end
end

return BaseServer
