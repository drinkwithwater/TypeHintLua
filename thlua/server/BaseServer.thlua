
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const lpath = require "path"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const class = require "thlua.class"
const platform = require "thlua.platform"

(@do
	let.clazz=import($class).clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const BaseServer = class@<lsp.BaseServer, false>()

function.open BaseServer:ctor(vGlobalPath:OrNil(String))
	self.initialize=false@Boolean
	self.shutdown=false@Boolean
	self._rootPath=""@String
	self._fileStateDict={}@Dict(String, lsp.FileState)
	self._globalPath = vGlobalPath or lpath.cwd().."/global"
end

function.pass BaseServer:getMethodHandler():Ret(Truth)
	error("get method handler is not implement in BaseServer")
end

function BaseServer:attachFileState(vFileUri:String):Ret(lsp.FileState)
	local nFileState = self._fileStateDict[vFileUri]
	if not nFileState then
		const nNewState = FileState.new(self, vFileUri)
		self._fileStateDict[vFileUri] = nNewState
		return nNewState
	else
		return nFileState
	end
end

function BaseServer:makeLoader():Ret(clazz.FileLoader)
	return {
		thluaSearch=function(vRuntime, vPath)
			const nSearchPath = vRuntime:getSearchPath() or lpath.abs(self._rootPath.."/?.thlua")..";"..lpath.abs(self._rootPath.."/?.d.thlua")
			const nList:List(String) = {}
			const nSet:Dict(String, True) = {}
			for nOnePath in nSearchPath:gmatch("[^;]+") do
				const nAbsPath = lpath.abs(nOnePath)
				if not nSet[nAbsPath] then
					nList[#nList + 1] = nAbsPath
				end
			end
			const nSearchPath = table.concat(nList, ";")
			local fileName, err1 = package.searchpath(vPath, nSearchPath)
			if not fileName then
				return false, err1
			end
			return true, platform.path2uri(fileName)
		end,
		thluaParseFile=function(vRuntime, vFileUri)
			if not self._fileStateDict[vFileUri] then
				self:attachFileState(vFileUri):syncFile()
			end
			return self._fileStateDict[vFileUri]!:checkLatestEnv()
		end,
		thluaGlobalFile=function(vRuntime, vPackage)
			const nFilePath = self._globalPath.."/"..vPackage..".d.thlua"
			const nFileUri = platform.path2uri(nFilePath)
			if not self._fileStateDict[nFileUri] then
				self:attachFileState(nFileUri):syncFile()
            end
			return self._fileStateDict[nFileUri]!:checkLatestEnv(), nFileUri
		end,
	}
end

function BaseServer:checkFileState(vFileUri:String):Ret(lsp.FileState)
	return (assert(self._fileStateDict[vFileUri], "file not existed:"..vFileUri))
end

function BaseServer:mainLoop()
	self:notify("$/status/report", {
		text="hello",
		tooltip="hello",
	})
	self:info("global path:", self._globalPath)
	while not self.shutdown do
		self:rpc()
	end
end

local function reqToStr(vRequest:lsp.RequestMessage):Ret(String)
	return "["..tostring(vRequest.method)..(vRequest.id and ("$"..vRequest.id) or "").."]"
end

function.pass BaseServer:rpc()
	local request = self:readRequest()
	local methodName = request.method
	local nId = request.id
	if not methodName then
		if nId then
			self:writeError(nId, ErrorCodes.ParseError, "method name not set", "")
		else
			self:warn(reqToStr(request), "method name not set")
		end
		return
	end
	const handler = self:getMethodHandler()[methodName]
	if not handler then
		if nId then
			self:writeError(nId, ErrorCodes.MethodNotFound, "method not found", "method="..tostring(methodName))
		else
			self:warn(reqToStr(request), "method not found")
		end
		return
	end
	const result = handler(request.params)
	if result then
		if nId then
			self:writeResult(nId, result)
			-- self:info("write response:$"..tostring(nId))
		else
			self:warn(reqToStr(request), "request without id ")
		end
		return
	else
		if nId then
			self:warn(reqToStr(request), "request with id but no resposne")
		end
	end
end

function BaseServer:readRequest():Ret(lsp.RequestMessage)
	-- 1 get header
	local length:Integer = -1
	while true do
		local line = io.read("l")
		if not line then
			error("io.read fail")
		end
		line = line:gsub("\13", "")
		if line == "" then
			break
		end
		local key, val = line:match("([^:]+): (.+)")
		if not key or not val then
			error("header format error:"..line)
		end
		if key == "Content-Length" then
			length = assert(math.tointeger(val), "Content-Length can't convert to integer"..tostring(val))
		end
	end

	if length < 0 then
		error("Content-Length failed in rpc")
	end

	-- 2 get body
	local data = io.read(length)
	if not data then
		error("read nothing")
	end
	data = data:gsub("\13", "")
	local obj, err = json.decode(data)
	if type(obj) ~= "table" then
		error("json decode error:"..tostring(err))
	end
	const req = obj @? lsp.RequestMessage
	if req.jsonrpc ~= "2.0" then
		error("json-rpc is not 2.0, "..tostring(req.jsonrpc))
	end
	-- self:info("recv:"..reqToStr(req) ) -- , json.encode(obj.params))
	return req
end

function BaseServer:writeError(vId:Union(Integer, String, Nil), vCode:Integer, vMsg:String, vData:String):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		error = {
			code = vCode,
			message = vMsg,
			data = vData,
		}
	})
end

function BaseServer:writeResult(vId:Union(Integer, String, Nil), vResult:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		result = vResult,
	})
end

function BaseServer:notify(vMethod:String, vParams:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		method = vMethod,
		params = vParams,
	})
end

function BaseServer:_write(vPacket:Truth)
	local data:String = json.encode(vPacket)
	if platform.iswin() then
		data = ("Content-Length: %d\n\n%s"):format(#data, data)
	else
		data = ("Content-Length: %d\r\n\r\n%s"):format(#data, data)
	end
	io.write(data)
	io.flush()
end

local MessageType = {}

MessageType.ERROR = 1
MessageType.WARNING = 2
MessageType.INFO = 3
MessageType.DEBUG = 4

function BaseServer:packToString(vDepth, ...:Truth):Ret(String)
	local nInfo = debug.getinfo(vDepth)
	local nPrefix = nInfo.source..":"..nInfo.currentline
	local l = {nPrefix} @ List(String)
	for i=1,select("#", ...) do
		l[#l + 1] = tostring(select(i, ...))
	end
	return table.concat(l, " ")
end

function BaseServer:error(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.ERROR,
	})
end

function BaseServer:warn(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.WARNING,
	})
end

function BaseServer:info(...:Any)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.INFO,
	})
end

function BaseServer:debug(...)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.DEBUG,
	})
end

function BaseServer:setRoot(vRoot:String)
	--self.root = vRoot:gsub("/*$", "")
	--self:info("root:", self.root, vRoot)
	self._rootPath = vRoot
end

return BaseServer
