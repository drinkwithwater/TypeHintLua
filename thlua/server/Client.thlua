
local json = require "thlua.server.json"
local methodHandler = require "thlua.server.methodHandler"
local ErrorCodes = require "thlua.server.protocol".ErrorCodes

(@var.lsp=import("thlua.server.protocol").lsp)

local Client = {}

Client.__index = Client

function Client.new()::RetNew(lsp.Client)
	return setmetatable({::Self()
		initialize=false,
		shutdown=false,
		root=false,
	}, Client)
end

function Client:mainLoop()
	while not self.shutdown do
		self:rpc()
	end
end

function Client:rpc()::Ret()
	local request = self:readRequest()
	local methodName = request.method
	local nId = request.id
	if not methodName then
		if nId then
			self:writeError(nId, ErrorCodes.ParseError, "method name not set", "")
		else
			self:warn("method name not set", "method="..tostring(methodName))
		end
		return
	end
	local handler = methodHandler[methodName]
	if not handler then
		if nId then
			self:writeError(nId, ErrorCodes.MethodNotFound, "method not found", "method="..tostring(methodName))
		else
			self:warn("method not found", "method="..tostring(methodName))
		end
		return
	end
	local result = handler(self, request.params)
	if result then
		if nId then
			self:writeResult(nId, result)
		else
			self:warn("request without id ")
		end
		return
	end
end

function Client:readRequest()::Ret(Truth)
	-- 1 get header
	local length
	while true do
		local line = io.read("*l")
		if not line then
			error("io.read fail")
		end
		line = line:gsub("\13", "")
		if line == "" then
			break
		end
		local key, val = line:match("([^:]+): (.+)")
		if not key or not val then
			error("header format error:"..line)
		end
		if key == "Content-Length" then
			length = math.tointeger(val)
		end
	end

	if not length then
		error("Content-Length failed in rpc")
	end

	-- 2 get body
	local data = io.read(length)
	data = data:gsub("\13", "")
	local obj, err = json.decode(data)
	if type(obj) ~= "table" then
		error("json decode error:"..tostring(err))
	end
	if obj.jsonrpc ~= "2.0" then
		error("json-rpc is not 2.0, "..tostring(obj.jsonrpc))
	end
	self:info("recv data:", data)
	return obj
end

function Client:writeError(vId:Union(Number, String, Nil), vCode:Number, vMsg:String, vData:String)::Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId or json.null,
		error = {
			code = vCode,
			message = vMsg,
			data = vData,
		}
	})
end

function Client:writeResult(vId:Union(Number, String, Nil), vResult:Truth)::Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId or json.null,
		result = vResult,
	})
end

function Client:notify(vMethod:String, vParams:Truth)::Ret()
	self:_write({
		jsonrpc = "2.0",
		method = vMethod,
		params = vParams,
	})
end

function Client:_write(vPacket:Truth)
	local data = json.encode(vPacket)
	io.write("Content-Length: "..#data.."\r\n\r\n"..data)
	io.flush()
end

local MessageType = {}

MessageType.ERROR = 1
MessageType.WARNING = 2
MessageType.INFO = 3
MessageType.DEBUG = 4

local function packToString(...:Truth)::Ret(String)
	local l = {}
	for i=1,select("#", ...) do
		l[#l + 1] = tostring(select(i, ...))
	end
	return table.concat(l, " ")
end

function Client:error(...:Truth)::Ret()
	self:notify("window/logMessage", {
		message = packToString(...),
		type = MessageType.ERROR,
	})
end

function Client:warn(...:Truth)::Ret()
	self:notify("window/logMessage", {
		message = packToString(...),
		type = MessageType.WARNING,
	})
end

function Client:info(...:Truth)::Ret()
	self:notify("window/logMessage", {
		message = packToString(...),
		type = MessageType.INFO,
	})
end

function Client:debug(...)
	self:notify("window/logMessage", {
		message = packToString(...),
		type = MessageType.DEBUG,
	})
end

return Client
