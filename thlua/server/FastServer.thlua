
const lpath = require "path"
const FieldCompletion = require "thlua.context.FieldCompletion"
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const SeverityEnum = require "thlua.runtime.SeverityEnum"
const CompletionRuntime = require "thlua.runtime.CompletionRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const ApiServer = require "thlua.server.ApiServer"
const ParseEnv = require "thlua.code.ParseEnv"
const class = require "thlua.class"
const platform = require "thlua.platform"

(@do
	let.clazz=import($class).clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const FastServer = class@<lsp.FastServer, false>(ApiServer)

function.open FastServer:ctor(...)
	self._runtime=nil@OrNil(clazz.CompletionRuntime)
end

function FastServer:getInitializeResult():Ret(lsp.InitializeResult)
	self:info("fast server")
	return {
		capabilities = {
			textDocumentSync = {
				change = 2, -- 1 is non-incremental, 2 is incremental
				openClose = true,
				save = { includeText = true },
			},
			definitionProvider = true,
			hoverProvider = true,
			completionProvider = {
				triggerCharacters = {".",":"},
				resolveProvider = false
			},
			--referencesProvider = true,
			--documentLocalSymbolProvider = false,
			--documentHighlightProvider = false,
			--workspaceLocalSymbolProvider = false,
			--codeActionProvider = false,
			--documentFormattingProvider = false,
			--documentRangeFormattingProvider = false,
			--renameProvider = false,
		},
	}
end

function FastServer:rerun(vFileUri:String)
	local rootFileUri = lpath.isfile(self._rootPath .. "/throot.thlua")
	if not rootFileUri then
		rootFileUri = vFileUri
		self:info("throot.thlua not found, run single file:", rootFileUri)
	else
		rootFileUri = platform.path2uri(rootFileUri)
		self:info("throot.thlua found:", rootFileUri)
	end
	const nRuntime=CompletionRuntime.new(self:makeLoader())
	const ok, exc = nRuntime:pmain(rootFileUri)
	if not ok then
		if not self._runtime then
			self._runtime = nRuntime
		end
	else
		self._runtime = nRuntime
	end
	collectgarbage()
end

function FastServer:checkRuntime():Ret(clazz.CompletionRuntime)
	return assert(self._runtime)
end

function FastServer:publishFileToDiaList(vFileToDiaList:Dict(String, List(clazz.Diagnostic)), vFilePusher:OrNil(Fn(String, lsp.FileState, List(lsp.Diagnostic))))
	for nFileName, nFileState in pairs(self._fileStateDict) do
		const nRawDiaList:List(clazz.Diagnostic) = vFileToDiaList[nFileName] or {}
		const nVersion = nFileState:getVersion()
		const nDiaList:List(lsp.Diagnostic) = {}
		const nSplitCode = nFileState:getSplitCode()
		for _, dia in ipairs(nRawDiaList) do
			local nNode = dia.node
			const nLineContent = nSplitCode:getLine(nNode.l)
			const nRangeEnd = nNode.pos == nNode.posEnd and {
				nNode.l, nNode.c + (nLineContent and #nLineContent + 10 or 100)
			} or {nSplitCode:fixupPos(nNode.posEnd)}
			local nMsg = dia.msg
			nDiaList[#nDiaList + 1] = {
				range={
					start={
						line=nNode.l-1,
						character=nNode.c-1,
					},
					["end"]={
						line=nRangeEnd[1]-1,
						character=nRangeEnd[2]-1,
					}
				},
				message=nMsg,
				severity=dia.severity,
			}
		end
		if vFilePusher then
			vFilePusher(nFileName, nFileState, nDiaList)
		end
		if #nDiaList > 0 then
			nFileState:setCheckFlag(true)
		end
		self:_write({
			jsonrpc = "2.0",
			method = "textDocument/publishDiagnostics",
			params = {
				uri=nFileName,
				version=nVersion,
				diagnostics=json.array(nDiaList),
			},
		})
	end
end

function FastServer:onDidChange(vParams:lsp.DidChangeTextDocumentParams)
	const nFileUri = vParams.textDocument.uri
	if self:attachFileState(nFileUri):syncChangeMayRerun(vParams) then
		self:rerun(nFileUri)
	end
	const nRuntime = self._runtime
	self:publishFileToDiaList(nRuntime and nRuntime:getNameDiagnostic(true) or {}, function(nFileName, nFileState, nDiaList)
		const nExc = nFileState:getLatestException()
		if nExc then
			const nNode = nExc.node
			nDiaList[#nDiaList + 1] = {
				range={
					start={
						line=nNode.l-1,
						character=0,
					},
					["end"]={
						line=nNode.l-1,
						character=100,
					}
				},
				message=nExc.msg,
				severity=SeverityEnum.Error,
			}
		end
	end)
end

function FastServer:scanAllFile()
	const nRmList:List(String) = {}
	for nUri, nFileState in pairs(self._fileStateDict) do
		const ok = pcall(function()
			nFileState:syncFile()
		end)
		if not ok then
			nRmList[#nRmList + 1] = nUri
		end
	end
	for _, nUri in pairs(nRmList) do
		self._fileStateDict[nUri] = nil
	end
end

function FastServer:onDidOpen(vParams:lsp.DidOpenTextDocumentParams)
	const nContent = vParams.textDocument.text
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:attachFileState(nFileUri)
	if nFileState:contentMismatch(nContent) then
		self:scanAllFile()
		if nFileState:syncContent(nContent, vParams.textDocument.version) then
			self:rerun(nFileUri)
		end
	end
end

function FastServer:onDidSave(vParams:lsp.DidSaveTextDocumentParams)
	const nFileUri = vParams.textDocument.uri
	const nContent = vParams.text
	const nFileState = self:attachFileState(nFileUri)
	if nContent then
		if nFileState:contentMismatch(nContent) then
			self:scanAllFile()
			self:warn("content mismatch when save")
		end
	end
	if nFileState:onSaveAndGetChange() then
		self:rerun(nFileUri)
	end
end

function FastServer:onDefinition(vParams:lsp.DefinitionParams):Ret(OrNil(List(lsp.Location)))
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:checkFileState(nFileUri)
	const nCompletionRuntime = self:checkRuntime()
	const nNodeSet, nErrMsg = nCompletionRuntime:gotoNodeByParams(
		true, nFileUri, nFileState:getSplitCode(), vParams.position)
	if not nNodeSet then
		self:info("goto definition fail:", nErrMsg)
		return nil
	else
		const nRetList:List(lsp.Location) = {}
		for nLookupNode, _ in pairs(nNodeSet) do
			nRetList[#nRetList + 1] = {
				uri=nLookupNode.path,
				range={
					start={ line=nLookupNode.l - 1, character=nLookupNode.c-1, },
					["end"]={ line=nLookupNode.l - 1, character=nLookupNode.c - 1 },
				}
			}
		end
		return nRetList
	end
end

function FastServer:onCompletion(vParams:lsp.CompletionParams):Ret(OrNil(List(lsp.CompletionItem)))
	const nCompletionRuntime = self._runtime!
	-- 1. get succ env
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:checkFileState(nFileUri)
	const nSuccEnv = self:checkRuntime():getCodeEnv(nFileUri)
	if not nSuccEnv then
		self:info("completion fail for some code error", nFileUri)
		return nil
	end
	-- 2. cut code
	const nSplitCode = nFileState:getSplitCode()
	const nPos = nSplitCode:lspToPos(vParams.position)
	const nWrongContent = nSplitCode:getContent():sub(1, nPos-1)
	-- 3. parsing with error
	const nInjectFn, nInjectTrace = CodeEnv.genInjectFnByError(nSplitCode, nFileUri, nWrongContent)
	if not nInjectFn then
		return nil
	end
	-- TODO, using nInjectNode.pos maybe not right such as local a = a.fds ...
	const nInjectNode, nTraceList = assert(nInjectTrace.capture.injectNode), nInjectTrace.traceList
	const nBlockNode, nFuncList = nSuccEnv:traceBlockRegion(nTraceList)
	nCompletionRuntime:focusSchedule(nFuncList)
	-- 4. run inject
	const nFieldCompletion = nCompletionRuntime:injectCompletion(nInjectNode.pos, nBlockNode, nInjectFn, self)
	if not nFieldCompletion then
		self:info("completion fail for no branch", nBlockNode, nBlockNode.tag)
		return nil
	end
	const nRetList:List(lsp.CompletionItem) = {}
	nFieldCompletion:foreach(function(vKey, vKind)
		nRetList[#nRetList + 1] = {
			label=vKey,
			kind=vKind,
		}
	end)
	return json.array(nRetList)
end

function FastServer:onHover(vParams:lsp.HoverParams)
	--[[
	local nFileName = self:uriToPath(vParams.textDocument.uri)
	local nDefineNode = self:searchDefine(nFileName, vParams.position.line + 1, vParams.position.character + 1)
	if nDefineNode then
		local nLocalSymbolSet = self:checkRuntime():getNodeLocalSymbolSet(nDefineNode)
		local l = {}
		for nLocalSymbol, _ in pairs(nLocalSymbolSet) do
			l[#l + 1] = tostring(nLocalSymbol:getType())
		end
		local value = table.concat(l, ",")
		return {
			contents = {
				kind="plaintext",
				value=value
			} @ MarkupContent
		}
	end]]
end

return FastServer
