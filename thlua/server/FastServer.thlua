
const FieldCompletion = require "thlua.context.FieldCompletion"
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const CompletionRuntime = require "thlua.runtime.CompletionRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const ApiServer = require "thlua.server.ApiServer"
const ParseEnv = require "thlua.code.ParseEnv"
const class = require "thlua.class"

(@do
	let.clazz=import("thlua.type.TypeClass").clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const FastServer = class@<lsp.FastServer, false>(ApiServer)

function.open FastServer:ctor()
	self._runtime=nil@OrNil(clazz.CompletionRuntime)
end

function FastServer:getInitializeResult():Ret(lsp.InitializeResult)
	self:info("fast server")
	return {
		capabilities = {
			textDocumentSync = {
				openClose = true,
				change = 2, -- 1 is non-incremental, 2 is incremental
				save = { includeText = true },
			},
			definitionProvider = true,
			hoverProvider = true,
			completionProvider = {
				triggerCharacters = {".",":"},
				resolveProvider = false
			},
			--referencesProvider = true,
			--documentLocalSymbolProvider = false,
			--documentHighlightProvider = false,
			--workspaceLocalSymbolProvider = false,
			--codeActionProvider = false,
			--documentFormattingProvider = false,
			--documentRangeFormattingProvider = false,
			--renameProvider = false,
		},
	}
end

function FastServer:rerun(vFileName:String)
	local ok, mainFileName = self:thluaSearch("main")
	if not ok then
		mainFileName = vFileName
		self:info("main.thlua not found, run single file:", mainFileName)
	else
		self:info("main.thlua found:", mainFileName)
	end
	const nRuntime=CompletionRuntime.new(self)
	const ok, exc = nRuntime:pmain(mainFileName)
	if not ok then
		if not self._runtime then
			self._runtime = nRuntime
		end
		return
	end
	self._runtime = nRuntime
	collectgarbage()
end

function FastServer:checkRuntime():Ret(clazz.CompletionRuntime)
	return assert(self._runtime)
end

function FastServer:onDidChange(vParams:lsp.DidChangeTextDocumentParams)
	const nFileUri = vParams.textDocument.uri
	if self:attachFileState(nFileUri):syncChangeMayRerun(vParams) then
		self:rerun(nFileUri)
	end
end

function FastServer:onDidOpen(vParams:lsp.DidOpenTextDocumentParams)
	const nContent = vParams.textDocument.text
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:attachFileState(nFileUri)
	if nFileState:contentMismatch(nContent) then
		if nFileState:syncContent(nContent, vParams.textDocument.version) then
			self:rerun(nFileUri)
		end
	end
end

function FastServer:onDidSave(vParams:lsp.DidSaveTextDocumentParams)
	const nFileUri = vParams.textDocument.uri
	const nContent = vParams.text
	const nFileState = self:attachFileState(nFileUri)
	if nContent then
		if nFileState:contentMismatch(nContent) then
			self:warn("content mismatch when save")
		end
	end
	if nFileState:onSaveAndGetChange() then
		self:rerun(nFileUri)
	end
end

function FastServer:onDefinition(vParams:lsp.DefinitionParams):Ret(OrNil(lsp.Location))
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:checkFileState(nFileUri)
	const nSplitCode = nFileState:getSplitCode()
	const nLine = vParams.position.line + 1
	const nColumn = vParams.position.character + 1
	const nPos = nSplitCode:lcToPos(nLine, nColumn)
	-- 1. find Ident_use to targe Ident_def
	const nRightEnv = nFileState:getRightEnv()
	if nRightEnv then
		const nNode = nRightEnv:searchIdent(nPos)
		if nNode then
			const nDefineNode = nNode.kind == "def" and nNode or nNode.defineIdent
			if nDefineNode then
				return {
					uri=vParams.textDocument.uri,
					range={
						start={ line=nDefineNode.l - 1, character=nDefineNode.c-1, },
						["end"]={ line=nDefineNode.l - 1, character=nDefineNode.c - 1 },
					}
				}
			end
		end
	end
	-- 2. other case, get position in succ env, find by expr lookup
	const nCompletionRuntime = self:checkRuntime()
	const nSuccEnv = nCompletionRuntime:getCodeEnv(nFileUri)
	if not nSuccEnv then
		self:info("goto definition fail, maybe some error in code")
		return nil
	end
	if nSuccEnv:getSplitCode():getLine(nLine) ~= nSplitCode:getLine(nLine) then
		self:info("TODO, if line not same, need rerun or check if split code has syntax error")
		return nil
	end
	const nPos = nSuccEnv:getSplitCode():lcToPos(nLine, nColumn)
	-- 3. search expr
	const nExprNode, nFocusList = nSuccEnv:searchExprBySuffix(nPos)
	if nExprNode then
		nCompletionRuntime:focusSchedule(nFocusList)
		const nLookupNode = nCompletionRuntime:getLookupNode(nExprNode)
		if not nLookupNode then
			self:info("not found lookup node"..tostring(nExprNode), nExprNode.tag)
			return nil
		end
		return {
			uri=nLookupNode.path,
			range={
				start={ line=nLookupNode.l - 1, character=nLookupNode.c-1, },
				["end"]={ line=nLookupNode.l - 1, character=nLookupNode.c - 1 },
			}
		}
	end
	-- 4. search hint expr
	const nHintExprNode, nBlockNode, nFocusList = nSuccEnv:searchHintExprBySuffix(nPos)
	if not nHintExprNode then
		self:info("no target expr")
		return nil
	end
	const nExprContent = nSuccEnv:getSplitCode():getContent():sub(nHintExprNode.pos, nHintExprNode.posEnd - 1)
	const nWrongContent = string.rep(" ", nHintExprNode.pos) .. "(@" .. nExprContent .. "."
	const nInjectFn, nInjectTrace = CodeEnv.genInjectFnByError(nSplitCode, nFileUri, nWrongContent)
	if not nInjectFn then
		return nil
	end
	nCompletionRuntime:focusSchedule(nFocusList)
	-- 4. run inject
	const nFieldCompletion = nCompletionRuntime:injectCompletion(nInjectTrace.pos, nBlockNode, nInjectFn, self)
	if not nFieldCompletion then
		self:info("completion fail for no branch", nBlockNode, nBlockNode.tag)
		return nil
	end
	const nLookupNode = nCompletionRuntime:injectLookupDefinition(nInjectTrace.pos, nBlockNode, nInjectFn)
	if not nLookupNode then
		return nil
	end
	return {
		uri=nLookupNode.path,
		range={
			start={ line=nLookupNode.l - 1, character=nLookupNode.c-1, },
			["end"]={ line=nLookupNode.l - 1, character=nLookupNode.c - 1 },
		}
	}
end

function FastServer:onCompletion(vParams:lsp.CompletionParams):Ret(OrNil(List(lsp.CompletionItem)))
	const nCompletionRuntime = self._runtime!
	-- 1. get succ env
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:checkFileState(nFileUri)
	const nSuccEnv = self:checkRuntime():getCodeEnv(nFileUri)
	if not nSuccEnv then
		self:info("completion fail for some code error")
		return nil
	end
	-- 2. cut code
	const nSplitCode = nFileState:getSplitCode()
	const nPos = nSplitCode:lcToPos(vParams.position.line+1, vParams.position.character+1)
	const nWrongContent = nSplitCode:getContent():sub(1, nPos-1)
	-- 3. parsing with error
	const nInjectFn, nInjectTrace = CodeEnv.genInjectFnByError(nSplitCode, nFileUri, nWrongContent)
	if not nInjectFn then
		return nil
	end
	-- TODO, using nInjectNode.pos maybe not right such as local a = a.fds ...
	const nInjectNode, nTraceList = assert(nInjectTrace.capture.injectNode), nInjectTrace.traceList
	const nBlockNode, nFuncList = nSuccEnv:traceBlockRegion(nTraceList)
	nCompletionRuntime:focusSchedule(nFuncList)
	-- 4. run inject
	const nFieldCompletion = nCompletionRuntime:injectCompletion(nInjectNode.pos, nBlockNode, nInjectFn, self)
	if not nFieldCompletion then
		self:info("completion fail for no branch", nBlockNode, nBlockNode.tag)
		return nil
	end
	const nRetList:List(lsp.CompletionItem) = {}
	nFieldCompletion:foreach(function(vKey, vValue)
		nRetList[#nRetList + 1] = {
			label=vKey,
			kind=2,
		}
	end)
	return json.array(nRetList)
end

function FastServer:onHover(vParams:lsp.HoverParams)
	--[[
	local nFileName = self:uriToPath(vParams.textDocument.uri)
	local nDefineNode = self:searchDefine(nFileName, vParams.position.line + 1, vParams.position.character + 1)
	if nDefineNode then
		local nLocalSymbolSet = self:checkRuntime():getNodeLocalSymbolSet(nDefineNode)
		local l = {}
		for nLocalSymbol, _ in pairs(nLocalSymbolSet) do
			l[#l + 1] = tostring(nLocalSymbol:getType())
		end
		local value = table.concat(l, ",")
		return {
			contents = {
				kind="markdown",
				value=value
			} @ MarkupContent
		}
	end]]
end

return FastServer
