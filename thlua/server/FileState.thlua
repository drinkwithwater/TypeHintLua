
const CodeEnv = require "thlua.code.CodeEnv"
const Exception = require "thlua.Exception"
const SplitCode = require "thlua.code.SplitCode"
const class = require "thlua.class"

(@do
	let.clazz=import("thlua.type.TypeClass").clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const FileState = class@<lsp.FileState, false>()

const CHANGE_ANYTHING = 1
const CHANGE_NONBLANK = 2

function.open FileState:ctor(vFileName:String)
	self._rightEnv = false@OrFalse(clazz.CodeEnv)
	self._fileName = vFileName
	self._splitCode = SplitCode.new("")
	self._errOrEnv = nil@!Union(clazz.Exception, clazz.CodeEnv)
	self._version = (-1) @Integer
	self._changeState = false @OrFalse($CHANGE_ANYTHING, $CHANGE_NONBLANK)
end

function FileState:onSaveAndGetChange():Ret(Boolean)
	if self._changeState then
		self._changeState = false
		return true
	end
	return false
end

function FileState:getWellformedRange(vRange:lsp.Range):Ret(lsp.Range)
	const nStart = vRange.start
	const nEnd = vRange["end"]
	if nStart.line > nEnd.line or (nStart.line == nEnd.line and nStart.character > nEnd.character) then
		return { start=nEnd, ["end"]=nStart }
	else
		return vRange
	end
end

function FileState:syncChangeMayRerun(vParams:lsp.DidChangeTextDocumentParams):Ret(Boolean)
	const nCanRerun = self:syncChangeNoRerun(vParams)
	if nCanRerun then
		self._changeState = false
		return true
	else
		return false
	end
end

function FileState:syncChangeNoRerun(vParams:lsp.DidChangeTextDocumentParams):Ret(Boolean)
	const nChanges = vParams.contentChanges
	local nSplitCode = self._splitCode
	local nLineChange = false
	for _, nChange in ipairs(nChanges) do
		const nRawRange = nChange.range
		if nRawRange then
			const nRange = self:getWellformedRange(nRawRange)
			const nChangeText = nChange.text
			const nContent = nSplitCode:getContent()
			const nRangeStart = nRange.start
			const nRangeEnd = nRange["end"]
			const nStartPos = nSplitCode:lcToPos(nRangeStart.line + 1, nRangeStart.character + 1)
			const nFinishPos = nSplitCode:lcToPos(nRangeEnd.line + 1, nRangeEnd.character + 1)
			const nNewContent = nContent:sub(1, nStartPos - 1) .. nChangeText .. nContent:sub(nFinishPos, #nContent)
			const nRemoveText = nContent:sub(nStartPos, nFinishPos-1)
			if nChangeText:find("[\r\n]") or nRemoveText:find("[\r\n]") then
				nLineChange = true
			end
			if nChangeText:find("[^%s]") or nRemoveText:find("[^%s]") then
				self._changeState = CHANGE_NONBLANK
			end
			nSplitCode = SplitCode.new(nNewContent)
		else
			nSplitCode = SplitCode.new(nChange.text)
		end
		if not self._changeState then
			self._changeState = CHANGE_ANYTHING
		end
	end
	self._splitCode = nSplitCode
	self._version = vParams.textDocument.version
	const nRight = self:_checkRight()
	if nRight then
		if self._changeState == CHANGE_NONBLANK and nLineChange then
			return true
		else
			return false
		end
	else
		return false
	end
end

function FileState:_checkRight():Ret(Boolean)
	const nOkay, nCodeEnv = pcall(CodeEnv.new, self._splitCode:getContent(), self._fileName)
	if nOkay then
		self._rightEnv = nCodeEnv
		self._errOrEnv = nCodeEnv
		return true
	else
		if type(nCodeEnv) == "table" then
			self._errOrEnv = nCodeEnv
		end
		return false
	end
end

function FileState:syncContent(vContent:String, vVersion:Integer):Ret(Boolean)
	self._version = vVersion
	self._splitCode = SplitCode.new(vContent)
	self._changeState = false
	return self:_checkRight()
end

function FileState:getRightEnv():Ret(OrFalse(clazz.CodeEnv))
	return self._rightEnv
end

function FileState:contentMismatch(vContent:String):Ret(Boolean)
	const nSplitCode = self._splitCode
	const nContent = nSplitCode:getContent()
	if nContent ~= vContent then
		return true
	else
		return false
	end
end

function FileState:getLatestException():Ret(OrFalse(clazz.Exception))
	const nLatest = self._errOrEnv
	if Exception.is(nLatest) then
		return nLatest
	end
	return false
end

function FileState:checkLatestEnv():Ret(clazz.CodeEnv)
	const nLatest = self._errOrEnv
	if CodeEnv.is(nLatest) then
		return nLatest
	else
		error(nLatest)
	end
end

function FileState:getSplitCode():Ret(clazz.SplitCode)
	return self._splitCode
end

function FileState:getVersion():Ret(Integer)
	return self._version
end

return FileState
