
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const lpath = require "path"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const class = require "thlua.class"
const platform = require "thlua.platform"
const uv = require@<let.uv_async_t> "luv"
const stdio = require "thlua.server.stdio"
const LuaPromise = require@<let.LuaPromise> "thlua.utils.LuaPromise"
const ApiProvider = require "thlua.server.ApiProvider"

(@do
	let.clazz=import($class).clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const LangServer = class@<lsp.LangServer, clazz.LevelLogger>()

function.open LangServer:ctor(vGlobalPath:OrNil(String))
	self.initialize=false@Boolean
	self.shutdown=false@Boolean
	self._rootPath=""@String
	self._globalPath = vGlobalPath or lpath.cwd().."/global"
	const nApiProvider = ApiProvider.new(self)
	self._provider = nApiProvider
	self._methodHandler = {
		initialize={
			fallback=false,
			call=function(vParam)
				return self:onInitialize(vParam)
			end,
		},
		shutdown={
			fallback=false,
			call=function()
				self:onShutdown()
			end,
		},
		exit={
			fallback=false,
			call=function()
				self:onExit()
			end,
		},
		["textDocument/didOpen"]={
			fallback=false,
			call=function(vParam)
				nApiProvider:onDidOpen(vParam)
			end,
		},
		["textDocument/didChange"]={
			fallback=false,
			call=function(vParam)
				nApiProvider:onDidChange(vParam)
			end,
		},
		["textDocument/didSave"]={
			fallback=false,
			call=function(vParam)
				nApiProvider:onDidSave(vParam)
			end,
		},
		["textDocument/didClose"]={
			fallback=false,
			call=function(vParam)
				nApiProvider:onDidClose(vParam)
			end,
		},
		["textDocument/completion"]={
			fallback=json.array({}),
			call=function(vParam)
				return nApiProvider:onCompletion(vParam)
			end,
		},
		["textDocument/definition"]={
			fallback=json.array({}),
			call=function(vParam)
				return nApiProvider:onDefinition(vParam)
			end,
		},
		["textDocument/typeDefinition"]={
			fallback=json.array({}),
			call=function(vParam)
				return nApiProvider:onTypeDefinition(vParam)
			end,
		},
		["textDocument/references"]={
			fallback=json.array({}),
			call=function(vParam)
				return nApiProvider:onReferences(vParam)
			end,
		},
		["textDocument/hover"]={
			fallback=json.array({}),
			call=function(vParam)
				return nApiProvider:onHover(vParam)
			end,
		}
	}
end

function LangServer:makeStageApi():Ret(clazz.StageApi)
	return {
		searchPath=function(vPrefix, vPath)
			const nSearchPath = vPrefix or lpath.abs(self._rootPath.."/?.thlua")..";"..lpath.abs(self._rootPath.."/?.d.thlua")
			const nList:List(String) = {}
			const nSet:Dict(String, True) = {}
			for nOnePath in nSearchPath:gmatch("[^;]+") do
				const nAbsPath = lpath.abs(nOnePath)
				if not nSet[nAbsPath] then
					nList[#nList + 1] = nAbsPath
				end
			end
			const nSearchPath = table.concat(nList, ";")
			local fileName, err1 = package.searchpath(vPath, nSearchPath)
			if not fileName then
				return false, err1
			end
			return true, platform.path2uri(fileName)
		end,
		parseFile=function(vFileUri)
			return self._provider:attachFileState(vFileUri, true):checkLatestEnv()
		end,
		parseGlobal=function(vPackage)
			const nFilePath = self._globalPath.."/"..vPackage..".d.thlua"
			const nFileUri = platform.path2uri(nFilePath)
			return self._provider:attachFileState(nFileUri, true):checkLatestEnv(), nFileUri
		end,
		createAsync=function(fn)
			return uv.new_async(fn)
		end,
	}
end

function LangServer:mainLoop()
	self:notify("$/status/report", {
		text="hello",
		tooltip="hello",
	})
	self:info("global path:", self._globalPath)
	local rpcAsync = nil@!uv_async_t
	rpcAsync = uv.new_async(function()
		self:_readRequest():next@<Nil>(function(msg)
			self:_handleRequest(msg)
			rpcAsync:send()
		end)
	end)
	rpcAsync:send()
	uv.run()
end

local function reqToStr(vRequest:lsp.RequestMessage):Ret(String)
	return "["..tostring(vRequest.method)..(vRequest.id and ("$"..vRequest.id) or "").."]"
end

function.pass LangServer:_handleRequest(request:lsp.RequestMessage)
	local methodName = request.method
	local nId = request.id
	if not methodName then
		if nId then
			self:writeError(nId, ErrorCodes.ParseError, "method name not set", "")
		else
			self:warn(reqToStr(request), "method name not set")
		end
		return
	end
	const handler = self._methodHandler[methodName]
	if not handler then
		if nId then
			self:writeError(nId, ErrorCodes.MethodNotFound, "method not found", "method="..tostring(methodName))
		else
			self:warn(reqToStr(request), "method not found")
		end
		return
	end
	const ok, result = xpcall(handler.call, function(err)
		return tostring(err) --  .." "..tostring(debug.traceback())
	end, request.params)
	const response = ok and result or handler.fallback
	if not ok then
		self:error("request handle method="..methodName..",error="..tostring(result))
	end
	if response then
		if nId then
			self:writeResult(nId, response)
			-- self:info("write response:$"..tostring(nId))
		else
			self:warn(reqToStr(request), "request without id ")
		end
	else
		if nId then
			self:warn(reqToStr(request), "request with id but no response")
		end
	end
end

function LangServer:_readRequest():Ret(LuaPromise(lsp.RequestMessage))
	-- 1 get header
	local nLength:Integer = -1
	const nHeadPromise = LuaPromise.new@<Nil>()
	const function readhead()
		stdio.readline():next@<Nil>(function(line)
			if not line then
				nHeadPromise:reject("read failed")
				return
			end
			line = line:gsub("\13", "")
			if line == "" then
				nHeadPromise:resolve(nil)
				return
			end
			local key, val = line:match("([^:]+): (.+)")
			if not key or not val then
				nHeadPromise:reject("header format error:"..line)
			end
			if key == "Content-Length" then
				const toInt = math.tointeger(val)
				if not toInt then
					nHeadPromise:reject("Content-Length can't convert to integer"..tostring(val))
					return
				else
					nLength = toInt
				end
			end
			readhead()
		end)
	end
	readhead()

	-- 2 get body
	const nBodyPromise = LuaPromise.new@<lsp.RequestMessage>()
	nHeadPromise:next@<Nil>(function(_)
		if nLength < 0 then
			nBodyPromise:reject("Content-Length failed in rpc")
			return
		end
		stdio.readlen(nLength):next@<Nil>(function(data)
			data = data:gsub("\13", "")
			local obj, err = json.decode(data)
			if type(obj) ~= "table" then
				nBodyPromise:reject("json decode error:"..tostring(err))
				return
			end
			const req = obj @? lsp.RequestMessage
			if req.jsonrpc ~= "2.0" then
				nBodyPromise:reject("json-rpc is not 2.0, "..tostring(req.jsonrpc))
				return
			end
			nBodyPromise:resolve(obj)
		end, function(err)
			nBodyPromise:reject(err)
		end)
	end):forget()
	return nBodyPromise
end

function LangServer:writeError(vId:Union(Integer, String, Nil), vCode:Integer, vMsg:String, vData:String):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		error = {
			code = vCode,
			message = vMsg,
			data = vData,
		}
	})
end

function LangServer:writeResult(vId:Union(Integer, String, Nil), vResult:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		id = vId,
		result = vResult,
	})
end

function LangServer:notify(vMethod:String, vParams:Truth):Ret()
	self:_write({
		jsonrpc = "2.0",
		method = vMethod,
		params = vParams,
	})
end

function LangServer:_write(vPacket:Truth)
	local data:String = json.encode(vPacket)
	data = ("Content-Length: %d\r\n\r\n%s"):format(#data, data)
	stdio.writeout(data)
	--[[
	if platform.iswin() then
		data = ("Content-Length: %d\n\n%s"):format(#data, data)
	else
		data = ("Content-Length: %d\r\n\r\n%s"):format(#data, data)
	end
	io.write(data)
	io.flush()
	]]
end

local MessageType = {}

MessageType.ERROR = 1
MessageType.WARNING = 2
MessageType.INFO = 3
MessageType.DEBUG = 4

function LangServer:packToString(vDepth, ...:Truth):Ret(String)
	local nInfo = debug.getinfo(vDepth)
	local nPrefix = nInfo.source..":"..nInfo.currentline
	local l = {nPrefix} @ List(String)
	for i=1,select("#", ...) do
		l[#l + 1] = tostring(select(i, ...))
	end
	return table.concat(l, " ")
end

function LangServer:error(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.ERROR,
	})
end

function LangServer:warn(...:Truth):Ret()
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.WARNING,
	})
end

function LangServer:info(...:Any)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.INFO,
	})
end

function LangServer:debug(...)
	const str = self:packToString(3, ...)
	self:notify("window/logMessage", {
		message = str,
		type = MessageType.DEBUG,
	})
end

function LangServer:setRootPath(vRoot:String)
	--self.root = vRoot:gsub("/*$", "")
	--self:info("root:", self.root, vRoot)
	self._rootPath = vRoot
end

function LangServer:getRootPath()
	return self._rootPath
end

function LangServer:onInitialize(vParams:lsp.InitializeParams):Ret(lsp.InitializeResult)
	if self.initialize then
		error("already initialized!")
	else
		self.initialize = true
	end
	_G.print=function(...:Any)
		self:notify("window/logMessage", {
			message = self:packToString(3, "[print]", ...),
			type = MessageType.INFO,
		})
	end @? $print
	const rootUri = vParams.rootUri
	const root  = vParams.rootPath or (rootUri and platform.uri2path(rootUri))
	self:info("Config.root = ", root, vParams.rootPath, vParams.rootUri)
	self:info("Platform = ", platform.iswin() and "win" or "not-win")
	if root then
		self:setRootPath(root)
	end
	return {
		capabilities = {
			textDocumentSync = {
				change = 1, -- 1 is non-incremental, 2 is incremental
				openClose = true,
				save = { includeText = true },
			},
			definitionProvider = true,
			referencesProvider = true,
			hoverProvider = true,
			completionProvider = {
				triggerCharacters = {".",":"},
				resolveProvider = false
			},
			--referencesProvider = true,
			--documentLocalSymbolProvider = false,
			--documentHighlightProvider = false,
			--workspaceLocalSymbolProvider = false,
			--codeActionProvider = false,
			--documentFormattingProvider = false,
			--documentRangeFormattingProvider = false,
			--renameProvider = false,
		},
	}
end

function LangServer:onShutdown()
	self.shutdown=true
	os.exit()
end

function LangServer:onExit()
	if self.shutdown then
		os.exit()
	else
		os.exit()
	end
end

function LangServer:debugTest()
	--const a = assert(io.open("d:/debug.txt", "w"))
	const a = assert(io.open("/mnt/d/debug.txt", "w"))
	a:write("yesyesyes")
	a:close()
end

return LangServer
