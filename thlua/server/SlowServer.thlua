
const lpath = require "path"
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const DiagnosticRuntime = require "thlua.runtime.DiagnosticRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const ApiServer = require "thlua.server.ApiServer"
const FastServer = require "thlua.server.FastServer"
const class = require "thlua.class"
const platform = require "thlua.platform"
const SeverityEnum = require "thlua.runtime.SeverityEnum"

(@do
	let.clazz=import($class).clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const SlowServer = class@<lsp.SlowServer, false>(FastServer)

function SlowServer:checkDiagnosticRuntime()
	return assert(self._runtime) @> clazz.DiagnosticRuntime
end

function SlowServer:getInitializeResult():Ret(lsp.InitializeResult)
	self:info("slow server")
	return {
		capabilities = {
			textDocumentSync = {
				change = 1, -- 1 is non-incremental, 2 is incremental
				openClose = true,
				save = { includeText = true },
			},
			referencesProvider = true,
		},
	}
end


return SlowServer
