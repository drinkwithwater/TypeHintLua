
const lpath = require "path"
const json = require "thlua.server.json"
const Exception = require "thlua.Exception"
const ErrorCodes = require "thlua.server.protocol".ErrorCodes
const DiagnosticRuntime = require "thlua.runtime.DiagnosticRuntime"
const CodeEnv = require "thlua.code.CodeEnv"
const FileState = require "thlua.server.FileState"
const ApiServer = require "thlua.server.ApiServer"
const FastServer = require "thlua.server.FastServer"
const class = require "thlua.class"
const platform = require "thlua.platform"
const SeverityEnum = require "thlua.runtime.SeverityEnum"

(@do
	let.clazz=import($class).clazz
	let.lsp=import("thlua.server.protocol").lsp
	let.node=import("thlua.code.Node").node
end)

const SlowServer = class@<lsp.SlowServer, false>(FastServer)

function SlowServer:checkDiagnosticRuntime()
	return assert(self._runtime) @> clazz.DiagnosticRuntime
end

function SlowServer:getInitializeResult():Ret(lsp.InitializeResult)
	self:info("slow server")
	return {
		capabilities = {
			textDocumentSync = {
				change = 2, -- 1 is non-incremental, 2 is incremental
				openClose = true,
				save = { includeText = true },
			},
			referencesProvider = true,
		},
	}
end

function SlowServer:publishNormal()
	const nRuntime = self:checkDiagnosticRuntime()
	local nFileToList = nRuntime:getAllDiagnostic()
	self:publishFileToDiaList(nFileToList)
end

function SlowServer:publishNoAttach(vExceptionUri:OrNil(String))
	for nFileName, nFileState in pairs(self._fileStateDict) do
		if not nFileState:getCheckFlag() then
			const nDiaList:List(lsp.Diagnostic) = {}
			nDiaList[1] = {
				range={
					start={
						line=0,
						character=0,
					},
					["end"]={
						line=0,
						character=10,
					}
				},
				message=vExceptionUri and "exception happend in "..tostring(lpath.name(vExceptionUri)) or "current file("..lpath.name(nFileName)..") maybe not required",
				severity=SeverityEnum.Warn,
			}
			self:_write({
				jsonrpc = "2.0",
				method = "textDocument/publishDiagnostics",
				params = {
					uri=nFileName,
					version=nFileState:getVersion(),
					diagnostics=json.array(nDiaList),
				},
			})
		end
	end
end

function SlowServer:publishException(vException:Union(clazz.Exception, String)):Ret(String)
	local nNode:OrNil(clazz.IBaseNode) = nil
	local nMsg:String = ""
	if Exception.is(vException) then
		nNode = vException.node or self._runtime!:getNode()
		nMsg = vException.msg or "exception's msg field is missing"
	else
		nNode = self._runtime!:getNode()
		nMsg = "root error:"..tostring(vException)
	end
	const nFileState = self._fileStateDict[nNode.path]
	if not nFileState then
		self:error("exception in unknown file:", nNode.path)
	else
		nFileState:setCheckFlag(true)
		self:_write({
			jsonrpc = "2.0",
			method = "textDocument/publishDiagnostics",
			params = {
				uri=nNode.path,
				version=nFileState:getVersion(),
				diagnostics={ {
					range={
						start={
							line=nNode.l-1,
							character=0,
						},
						["end"]={
							line=nNode.l-1,
							character=100,
						}
					},
					message=nMsg,
				} }
			},
		})
	end
	return nNode.path
end

function SlowServer:rerun(vFileUri:String)
	for nUri, nFileState in pairs(self._fileStateDict) do
		nFileState:setCheckFlag(false)
	end
	local rootFileUri = lpath.isfile(self._rootPath .. "/throot.thlua")
	if not rootFileUri then
		rootFileUri = vFileUri
		self:info("throot.thlua not found, run single file:", rootFileUri)
	else
		rootFileUri = platform.path2uri(rootFileUri)
		self:info("throot.thlua found:", rootFileUri)
	end
	const nRuntime=DiagnosticRuntime.new(self:makeLoader())
	const ok, exc = nRuntime:pmain(rootFileUri)
	if not ok then
		if not self._runtime then
			self._runtime = nRuntime
		end
		const nUri = self:publishException(exc @? Union(clazz.Exception, String))
		self:publishNoAttach(nUri)
	else
		self._runtime = nRuntime
		collectgarbage()
		self:publishNormal()
		self:publishNoAttach()
	end
end

function SlowServer:onDidChange(vParams:lsp.DidChangeTextDocumentParams)
	self:attachFileState(vParams.textDocument.uri):syncChangeNoRerun(vParams)
end

function SlowServer:onDidOpen(vParams:lsp.DidOpenTextDocumentParams)
	const nContent = vParams.textDocument.text
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:attachFileState(nFileUri)
	if nFileState:contentMismatch(nContent) then
		self:scanAllFile()
		nFileState:syncContent(nContent, vParams.textDocument.version)
		self:rerun(nFileUri)
	end
end

function SlowServer:onDidSave(vParams:lsp.DidSaveTextDocumentParams)
	const nFileUri = vParams.textDocument.uri
	const nContent = vParams.text
	const nFileState = self:attachFileState(nFileUri)
	nFileState:onSaveAndGetChange()
	self:rerun(nFileUri)
end

function SlowServer:onReferences(vParams:lsp.ReferenceParams):Ret(OrNil(List(lsp.Location)))
	const nFileUri = vParams.textDocument.uri
	const nFileState = self:checkFileState(nFileUri)
	const nDiagnosticRuntime = self:checkDiagnosticRuntime()
	const nNodeSet, nErrMsg = nDiagnosticRuntime:gotoNodeByParams(
		false, nFileUri, nFileState:getSplitCode(), vParams.position)
	if not nNodeSet then
		self:info("find references fail:", nErrMsg)
		return nil
	else
		const nRetList:List(lsp.Location) = {}
		for nLookupNode, _ in pairs(nNodeSet) do
			nRetList[#nRetList + 1] = {
				uri=nLookupNode.path,
				range={
					start={ line=nLookupNode.l - 1, character=nLookupNode.c-1, },
					["end"]={ line=nLookupNode.l - 1, character=nLookupNode.c + 10 },
				}
			}
		end
		return nRetList
	end
end

return SlowServer
