

(@do
    let.lsp=import("thlua.server.protocol").lsp

    let.Position = Struct {
        line=Number,
        character=Number,
    }

    let.Range=Struct {
        start=Position,
        ["end"]=Position,
    }

    let.TextDocumentIdentifier = Struct {
        uri=String,
    }

    lsp.VersionedTextDocumentIdentifier = Struct {
        version=Number,
        uri=String,
    }

    let.DidChangeTextDocumentParams = Struct {
        textDocument=lsp.VersionedTextDocumentIdentifier,
        contentChanges=List(Struct {
            range=Range,
            rangeLength=Option(Number),
            text=String,
        }),
    } 

    let.DidOpenTextDocumentParams = Struct {
        textDocument = Struct {
            uri=String,
            languageId=String,
            version=Number,
            text=String,
        }
    }

    let.DefinitionParams = Struct {
        textDocument = TextDocumentIdentifier,
        position=Position,
    }

    let.PublishDiagnosticsParams = Struct {
        uri=String,
        version=Option(Number),
        diagnostics=List(Struct {
            range=Range,
            severity=Option(Struct {
            }),
            code=Option(Union(Number, String)),
            codeDescription=Option(Struct {
                href=String,
            }),
            source=Option(String),
            message=String,
            tags=Option(List(Union(1,2))),
            -- relatedInformation
            -- data
        }),
    }

end)


return {
    didChange=function(vClient:lsp.Client, vParams:DidChangeTextDocumentParams)::Ret()
        local ok, errNode = vClient.runtime:trySyncFile(vParams.textDocument.uri, vParams.contentChanges[1].text)
        if not ok then
            vClient:publishError(vParams.textDocument, errNode)
        else
            vClient:publishError(vParams.textDocument, nil)
        end
    end,
    didOpen=function(vClient:lsp.Client, vParams:DidOpenTextDocumentParams)::Ret()
        -- vClient.runtime:main(vParams.textDocument.uri, vParams.textDocument.text)
        local ok, errNode = vClient.runtime:trySyncFile(vParams.textDocument.uri, vParams.textDocument.text)
        if not ok then
            vClient:publishError(vParams.textDocument, errNode)
        else
            vClient:publishError(vParams.textDocument, nil)
        end
    end,
    didSave=function(vClient:lsp.Client, vParams)::Ret()
    end,
    didClose=function(vClient:lsp.Client, vParams)::Ret()
    end,
    definition=function(vClient:lsp.Client, vParams:DefinitionParams)::Ret()
    end,
}