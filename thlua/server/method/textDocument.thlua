
local json = require "thlua.server.json"
local CodeEnv = require "thlua.code.CodeEnv"
local Exception = require "thlua.Exception"

(@do
	let.lsp=import("thlua.server.protocol").lsp

	lsp.Position = Struct {
		line=Number,
		character=Number,
	}

	lsp.Range=Struct {
		start=lsp.Position,
		["end"]=lsp.Position,
	}

	let.TextDocumentIdentifier = Struct {
		uri=String,
	}

	lsp.VersionedTextDocumentIdentifier = Struct {
		version=Number,
		uri=String,
	}

	do
		let.TextDocumentPositionParams = Interface {
			textDocument=TextDocumentIdentifier
		}

		let.ProgressToken = Union(Integer, String)

		let.WorkDoneProgressParams = Interface {
			workDoneToke=OrNil(ProgressToken),
		}

		let.PartialResultParams = Interface {
			partialResultToken=OrNil(ProgressToken)
		}

		let.ReferenceParams = ExtendStruct ({
			context = Struct {
				includeDecleration = Boolean,
			}
		}, let.TextDocumentPositionParams, let.WorkDoneProgressParams, let.PartialResultParams)

		let.TypeDefinitionParams = ExtendStruct ({
		}, let.TextDocumentPositionParams, let.WorkDoneProgressParams, let.PartialResultParams)

	end

	let.DidChangeTextDocumentParams = Struct {
		textDocument=lsp.VersionedTextDocumentIdentifier,
		contentChanges=List(Struct {
			range=lsp.Range,
			rangeLength=OrNil(Number),
			text=String,
		}),
	}

	let.DidSaveTextDocumentParams = Struct {
		textDocument=lsp.VersionedTextDocumentIdentifier,
		text=OrNil(String),
	}

	let.DidCloseTextDocumentParams = Struct {
		textDocument=lsp.VersionedTextDocumentIdentifier,
	}

	let.DidOpenTextDocumentParams = Struct {
		textDocument = Struct {
			uri=String,
			languageId=String,
			version=Number,
			text=String,
		}
	}

	let.DefinitionParams = Struct {
		textDocument = TextDocumentIdentifier,
		position=lsp.Position,
	}

	let.HoverParams = Struct {
		textDocument = TextDocumentIdentifier,
		position=lsp.Position,
	}

	let.CompletionParams = Struct {
		textDocument = TextDocumentIdentifier,
		position=lsp.Position,
		context=OrNil(Struct {
			triggerKind=Union(1,2,3),
			triggerCharacter=OrNil(String),
		}),
	}

	let.PublishDiagnosticsParams = Struct {
		uri=String,
		version=OrNil(Number),
		diagnostics=List(Struct {
			range=lsp.Range,
			severity=OrNil(Struct {
			}),
			code=OrNil(Union(Number, String)),
			codeDescription=OrNil(Struct {
				href=String,
			}),
			source=OrNil(String),
			message=String,
			tags=OrNil(List(Union(1,2))),
			-- relatedInformation
			-- data
		}),
	}

	let.Location = Struct {
		uri=String,
		range=lsp.Range,
	}

	let.CompletionItem = Struct {
		label=String,
		labelDetails=OrNil(Struct{}),
		kind=Union(Nil,1,2,3,4,5,6,7,8),
		--tags=CompletionItemTag,
		detail=OrNil(String),
		documentation=OrNil(String),
		deprecated=OrNil(Boolean),
		preselect=OrNil(Boolean),
		sortText=OrNil(String),
		filterText=OrNil(String),
		insertText=OrNil(String),
		--....
	}

	let.MarkupContent = Struct {
		kind=Union("markdown", "plaintext"),
		value=String,
	}

end)

return {
	didChange=function(vClient:lsp.Client, vParams:DidChangeTextDocumentParams)
		const nContentChange = vParams.contentChanges[1]
		if nContentChange then
			const nContent = nContentChange.text
			const nFileName = vClient:uriToPath(vParams.textDocument.uri)
			vClient:syncFile(nContent, nFileName, vParams.textDocument.version)
		else
			vClient:error("content change is empty onDidChange")
		end
		--vClient:rerun(nFileName)
	end,
	didOpen=function(vClient:lsp.Client, vParams:DidOpenTextDocumentParams)
		local nContent = vParams.textDocument.text
		local nFileName = vClient:uriToPath(vParams.textDocument.uri)
		vClient:syncFile(nContent, nFileName, vParams.textDocument.version)
		vClient:rerun(nFileName)
	end,
	didSave=function(vClient:lsp.Client, vParams:DidSaveTextDocumentParams)
		local nFileName = vClient:uriToPath(vParams.textDocument.uri)
		vClient:rerun(nFileName)
	end,
	didClose=function(vClient:lsp.Client, vParams:DidCloseTextDocumentParams)
	end,
	definition=function(vClient:lsp.Client, vParams:DefinitionParams):Ret(Location)
		local nFileName = vClient:uriToPath(vParams.textDocument.uri)
		local nDefineNode = vClient:searchDefine(nFileName, vParams.position.line + 1, vParams.position.character + 1)
		if nDefineNode then
			return {
				uri=vParams.textDocument.uri,
				range={
					start={ line=nDefineNode.l - 1, character=nDefineNode.c-1, },
					["end"]={ line=nDefineNode.l - 1, character=nDefineNode.c - 1 },
				}
			}
		end
	end,
	completion=function(vClient:lsp.Client, vParams:CompletionParams):Ret(List(CompletionItem))
		local nFileName = vClient:uriToPath(vParams.textDocument.uri)
		const nSuccEnv = vClient:getSuccCodeEnv(nFileName)
		if not nSuccEnv then
			return {}
		end
		local nDirtyEnv = vClient:getDirtyCodeEnv(nFileName)
		local nPos = nDirtyEnv:lcToPos(vParams.position.line+1, vParams.position.character+1)
		local nContent = nDirtyEnv:getContent():sub(1, nPos)
		local nCompletionEnv = CodeEnv.new(nContent, nFileName, -1)
		local nErrNode = nCompletionEnv:getAstTree()
		local nDefineNode
		if nErrNode.tag == "Error" then
			nDefineNode = nSuccEnv:searchNameByError(nErrNode)
		else
			print("TODO... completionEnv has no syntax error")
			--[[nDefineNode = searchIdDefine(vClient, vParams.textDocument.uri, {
				vParams.position.line,
				vParams.position.character,
			})]]
			return {}
		end
		if nDefineNode then
			local nLocalSymbolSet = vClient.runtime:getNodeLocalSymbolSet(nDefineNode)
			local nNameToType = {}
			for nLocalSymbol, _ in pairs(nLocalSymbolSet) do
				local nType = nLocalSymbol:getType()
				for k, v in pairs(nType:getCompletion()) do
					nNameToType[k] = v
				end
			end
			local l = {}
			for k,v in pairs(nNameToType) do
				l[#l + 1] = {
					label=k
				}
			end
			return l
		end
	end,
	hover=function(vClient:lsp.Client, vParams:HoverParams)
		local nFileName = vClient:uriToPath(vParams.textDocument.uri)
		local nDefineNode = vClient:searchDefine(nFileName, vParams.position.line + 1, vParams.position.character + 1)
		if nDefineNode then
			local nLocalSymbolSet = vClient.runtime:getNodeLocalSymbolSet(nDefineNode)
			local l = {}
			for nLocalSymbol, _ in pairs(nLocalSymbolSet) do
				l[#l + 1] = tostring(nLocalSymbol:getType())
			end
			local value = table.concat(l, ",")
			return {
				contents = {
					kind="markdown",
					value=value
				} @ MarkupContent
			}
		end
	end,
	references=function(vClient:lsp.Client, vParams:ReferenceParams) end,
	typeDefinition=function(vClient:lsp.Client, vParams:TypeDefinitionParams) end,
}
