
const SeverityEnum = require "thlua.runtime.SeverityEnum"

const ErrorCodes = {
	ParseError = -32700;
	InvalidRequest = -32600;
	MethodNotFound = -32601;
	InvalidParams = -32602;
	InternalError = -32603;

	--[[ reserved start ]]
	jsonrpcReservedErrorRangeStart = -32099;


	--[[
	 * Error code indicating that a server received a notification or
	 * request before the server has received the `initialize` request.
	 *]]
	ServerNotInitialized = -32002;
	UnknownErrorCode = -32001;

	--[[ reserved end ]]
	jsonrpcReservedErrorRangeEnd = -32000;

	--[[ reserved start ]]
	lspReservedErrorRangeStart = -32899;

	--[[
	 * A request failed but it was syntactically correct, e.g the
	 * method name was known and the parameters were valid. The error
	 * message should contain human readable information about why
	 * the request failed.
	 *
	 * @since 3.17.0
	 *]]
	RequestFailed = -32803;

	--[[**
	 * The server cancelled the request. This error code should
	 * only be used for requests that explicitly support being
	 * server cancellable.
	 *
	 * @since 3.17.0
	 *]]
	ServerCancelled = -32802;

	--[[**
	 * The server detected that the content of a document got
	 * modified outside normal conditions. A server should
	 * NOT send this error code if it detects a content change
	 * in it unprocessed messages. The result even computed
	 * on an older state might still be useful for the client.
	 *
	 * If a client decides that a result is not of any use anymore
	 * the client should cancel the request.
	 *]]
	ContentModified = -32801;

	--[[**
	 * The client has canceled a request and a server as detected
	 * the cancel.
	 *]]
	RequestCancelled = -32800;

	--[[ reserved end ]]
	lspReservedErrorRangeEnd = -32800;
}

(@do

let.lsp=namespace()

lsp.URI = String

lsp.RequestMessage = Struct {
	jsonrpc = String,
	id = Number|String,
	method = String,
	params = Truth|Nil,
}

lsp.ResponseMessage = Struct {
	jsonrpc = String,
	id = Number|String|Nil,
	result = Number|String|Boolean|Truth|Nil,
	error = lsp.ResponseError
}

lsp.ResponseError = Struct {
	code = Number,
	message = String,
	data = Truth|Nil,
}

lsp.InitializeParams = Struct {
	processId=Number|Nil,
	clientInfo=Struct({
		name=String|Nil,
		version=String,
	}) | Nil,
	locale=String|Nil,
	rootPath=String|Nil,
	rootUri=String|Nil,
	capabilities=Struct{
		workspace=Struct{} | Nil,
		textDocument=Struct{} | Nil,
		notebookDocument=Struct{} | Nil,
		window=Struct{} | Nil,
		general=Struct{} | Nil,
		experimental=Struct{} | Nil,
	},
	initializationOptions=Truth,
	trace=Union("off", "messages", "compact", "verbose")
}

lsp.InitializeResult = Struct {
	capabilities=Struct{
		completionProvider=OrNil(Struct{
			triggerCharacters=List(String),
			resolveProvider=Boolean,
		}),
		definitionProvider=OrNil(Boolean),
		textDocumentSync=OrNil(Struct{
			openClose=Boolean,
			change=Union(1,2), -- 1 is non-incremental, 2 is incremental
			save=Struct{
				includeText=Boolean,
			},
		}),
		hoverProvider = OrNil(Boolean),
		referencesProvider = OrNil(Boolean),
		documentLocalSymbolProvider = OrNil(Boolean),
	},
	serverInfo=OrNil(Struct {
		name=String,
		version=String|Nil,
	}),
}

lsp.DiagnosticSeverity = Union(1,2,3,4) -- ValueOf(SeverityEnum)

lsp.Diagnostic = Struct {
	range=lsp.Range,
	severity=lsp.DiagnosticSeverity,
	code=OrNil(Integer, String),
	codeDescription=OrNil(Struct {
		href=lsp.URI,
	}),
	source=OrNil(String),
	message=String,
}

end)

return {
	ErrorCodes=ErrorCodes,
	SeverityEnum=SeverityEnum,
}
