
const SeverityEnum = require "thlua.runtime.SeverityEnum"

const ErrorCodes = {
	ParseError = -32700;
	InvalidRequest = -32600;
	MethodNotFound = -32601;
	InvalidParams = -32602;
	InternalError = -32603;

	--[[ reserved start ]]
	jsonrpcReservedErrorRangeStart = -32099;


	--[[
	 * Error code indicating that a server received a notification or
	 * request before the server has received the `initialize` request.
	 *]]
	ServerNotInitialized = -32002;
	UnknownErrorCode = -32001;

	--[[ reserved end ]]
	jsonrpcReservedErrorRangeEnd = -32000;

	--[[ reserved start ]]
	lspReservedErrorRangeStart = -32899;

	--[[
	 * A request failed but it was syntactically correct, e.g the
	 * method name was known and the parameters were valid. The error
	 * message should contain human readable information about why
	 * the request failed.
	 *
	 * @since 3.17.0
	 *]]
	RequestFailed = -32803;

	--[[**
	 * The server cancelled the request. This error code should
	 * only be used for requests that explicitly support being
	 * server cancellable.
	 *
	 * @since 3.17.0
	 *]]
	ServerCancelled = -32802;

	--[[**
	 * The server detected that the content of a document got
	 * modified outside normal conditions. A server should
	 * NOT send this error code if it detects a content change
	 * in it unprocessed messages. The result even computed
	 * on an older state might still be useful for the client.
	 *
	 * If a client decides that a result is not of any use anymore
	 * the client should cancel the request.
	 *]]
	ContentModified = -32801;

	--[[**
	 * The client has canceled a request and a server as detected
	 * the cancel.
	 *]]
	RequestCancelled = -32800;

	--[[ reserved end ]]
	lspReservedErrorRangeEnd = -32800;
}

(@do

let.lsp=namespace()

lsp.URI = String

lsp.RequestMessage = Struct {
	jsonrpc = String,
	id = Union(Integer,String),
	method = String,
	params = OrNil(Truth),
}

lsp.ResponseMessage = Struct {
	jsonrpc = String,
	id = OrNil(Integer,String),
	result = OrNil(Integer,String,Boolean,Truth),
	error = lsp.ResponseError
}

lsp.ResponseError = Struct {
	code = Integer,
	message = String,
	data = OrNil(Truth),
}

lsp.InitializeParams = Struct {
	processId=OrNil(Integer),
	clientInfo=OrNil(Struct{
		name=OrNil(String),
		version=String,
	}),
	locale=OrNil(String),
	rootPath=OrNil(String),
	rootUri=OrNil(String),
	capabilities=Struct{ -- ClientCapabilities
		workspace=OrNil(Struct{
			didChangeWatchedFiles=OrNil(Struct { -- DidChangeWatchedFilesClientCapabilities;
				--[[
					* Did change watched files notification supports dynamic registration.
					* Please note that the current protocol doesn't support static
					* configuration for file changes from the server side.
				]]
				dynamicRegistration=OrNil(Boolean),
				--[[
					* Whether the client has support for relative patterns
					* or not.
					*
					* @since 3.17.0
				]]
				relativePatternSupport=OrNil(Boolean),
			})
		}),
		textDocument=OrNil(Struct{}),
		notebookDocument=OrNil(Struct{}),
		window=OrNil(Struct{}),
		general=OrNil(Struct{}),
		experimental=OrNil(Struct{}),
	},
	initializationOptions=Truth,
	trace=Union("off", "messages", "compact", "verbose")
}


lsp.FileOperationRegistrationOptions = Struct {
	filters=List(Struct { -- FileOperationFilter
		schema=OrNil(String),
		pattern=Struct { -- FileOperationPattern
			--[[
				* The glob pattern to match. Glob patterns can have the following syntax:
				* - `*` to match one or more characters in a path segment
				* - `?` to match on one character in a path segment
				* - `**` to match any number of path segments, including none
				* - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}`
				*   matches all TypeScript and JavaScript files)
				* - `[]` to declare a range of characters to match in a path segment
				*   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
				* - `[!...]` to negate a range of characters to match in a path segment
				*   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but
				*   not `example.0`)
			]]
			glob=String,
			matches=OrNil("file", "folder"),
			options=OrNil(Struct { -- FileOperationPatternOptions
				ignoreCase=OrNil(Boolean),
			})
		},
	})
}

lsp.InitializeResult = Struct {
	capabilities=Struct{ -- ServerCapabilities
		completionProvider=OrNil(Struct{
			triggerCharacters=List(String),
			resolveProvider=Boolean,
		}),
		definitionProvider=OrNil(Boolean),
		textDocumentSync=OrNil(Struct{
			openClose=Boolean,
			change=Union(1,2), -- 1 is non-incremental, 2 is incremental
			save=Struct{
				includeText=Boolean,
			},
		}),
		hoverProvider = OrNil(Boolean),
		referencesProvider = OrNil(Boolean),
		documentLocalSymbolProvider = OrNil(Boolean),
		workspace = OrNil(Struct{
			workspaceFolders=OrNil(Struct { -- WorkspaceFoldersServerCapabilities
				supported=OrNil(Boolean),
				changeNotifications=OrNil(String, Boolean),
			}),
			fileOperations=OrNil(Struct {
				didCreate=OrNil(lsp.FileOperationRegistrationOptions),
				willCreate=OrNil(lsp.FileOperationRegistrationOptions),
				didRename=OrNil(lsp.FileOperationRegistrationOptions),
				willRename=OrNil(lsp.FileOperationRegistrationOptions),
				didDelete=OrNil(lsp.FileOperationRegistrationOptions),
				willDelete=OrNil(lsp.FileOperationRegistrationOptions),
			})
		})
	},
	serverInfo=OrNil(Struct {
		name=String,
		version=OrNil(String),
	}),
}

lsp.DiagnosticSeverity = Union(1,2,3,4) -- ValueOf(SeverityEnum)

lsp.Diagnostic = Struct {
	range=lsp.Range,
	severity=lsp.DiagnosticSeverity,
	code=OrNil(Integer, String),
	codeDescription=OrNil(Struct {
		href=lsp.URI,
	}),
	source=OrNil(String),
	message=String,
	tags=OrNil(List(Union(1,2))),
}

lsp.DidChangeWatchedFilesRegistrationOptions = Struct {
	watchers=List(Struct { --FileSystemWatcher
		--[[
			* The glob pattern to watch relative to the base path. Glob patterns can have
			* the following syntax:
			* - `*` to match one or more characters in a path segment
			* - `?` to match on one character in a path segment
			* - `**` to match any number of path segments, including none
			* - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript
			*   and JavaScript files)
			* - `[]` to declare a range of characters to match in a path segment
			*   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
			* - `[!...]` to negate a range of characters to match in a path segment
			*   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`,
			*   but not `example.0`)
			*
			* @since 3.17.0
		]]
		globPattern=String,
		--[[
			* The kind of events of interest. If omitted it defaults
			* to WatchKind.Create | WatchKind.Change | WatchKind.Delete
			* which is 7.
		]]
		kind=OrNil(Integer);
	})
}

lsp.RegistrationParams = Struct {
	registrations=List(Struct { -- Registration
		id=String,
		method=String,
		registerOptions=OrNil(lsp.DidChangeWatchedFilesRegistrationOptions),
	})
}

lsp.DidChangeWatchedFilesParams = Struct {
	changes=List(Struct { -- FileEvent:w
		uri=String,
		--[[
			* The file got created.
			*/
			export const Created = 1;
			/**
			* The file got changed.
			*/
			export const Changed = 2;
			/**
			* The file got deleted.
			*/
			export const Deleted = 3;
		]]
		type=Union(1,2,3),
	})
}

end)

return {
	ErrorCodes=ErrorCodes,
	SeverityEnum=SeverityEnum,
	DiagnosticTag={
		Unnecessary=1,
		Deprecated=2,
	}
}
