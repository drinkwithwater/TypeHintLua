
const uv = require "luv"
const LuaPromise = require@<let.LuaPromise> "thlua.utils.LuaPromise"

const stdin = uv.new_pipe(false)
uv.pipe_open(stdin, 0)
const stdout = uv.new_pipe(false)
uv.pipe_open(stdout, 1)
const stderr = uv.new_pipe(false)
uv.pipe_open(stderr, 2)
--const a = assert(io.open("/mnt/d/debug.txt", "w"))

const stdio = {}

(@do
    let.ReadState = Interface {
        promise=LuaPromise(String),
        info=Union(Integer, True), -- int means readlen, true means readline
    }
end)

local buffer = ""
local readState = nil @ OrNil(ReadState)
local readCallback = function()
    if readState then
        const nPromise = readState.promise
        const nInfo = readState.info
        if nInfo == true then
            const index = buffer:find("\n")
            if index then
                readState = nil
                const line = buffer:sub(1, index-1)
                buffer = buffer:sub(index+1)
                nPromise:resolve(line)
            end
        else
            if #buffer >= nInfo then
                readState = nil
                const data = buffer:sub(1, nInfo)
                buffer = buffer:sub(nInfo + 1)
                nPromise:resolve(data)
            end
        end
    end
end

local readStarted = false @ Boolean
const function readStart()
    if readStarted then
        return
    end
    readStarted = true
    stdin:read_start(function(interrupt, dataOrErr)
        --[[
        --a:write(tostring(interrupt).."\t"..tostring(dataOrErr).."\n")
        --a:flush()
        if stdio.debugPrint then
            stdio.debugPrint!('on read', interrupt, dataOrErr)
        end
        ]]
        if interrupt then
            if readState then
                const nPromise = readState.promise
                readState = nil
                nPromise:reject("stdin stop by err:"..tostring(dataOrErr))
            end
            error("read stop")
            --stdin:read_stop()
            return
        end
        if not dataOrErr then
            if readState then
                const nPromise = readState.promise
                readState = nil
                nPromise:reject("stdin stop by empty")
            end
            error("read stop")
            --stdin:read_stop()
            return
        end
        buffer = buffer .. dataOrErr
        readCallback()
    end)
end

function stdio.readline():Ret(LuaPromise(String))
    readStart()
    assert(not readState, "is readline...")
    const nPromise = LuaPromise.new@<String>()
    readState = {
        promise=nPromise,
        info=true,
    }
    readCallback()
    return nPromise
end

function stdio.readlen(vLen:Integer):Ret(LuaPromise(String))
    readStart()
    assert(not readState, "is readlen...")
    const nPromise = LuaPromise.new@<String>()
    readState = {
        promise=nPromise,
        info=vLen,
    }
    readCallback()
    return nPromise
end

function stdio.writeerr(data:String)
    stderr:write(data)
end

function stdio.writeout(data:String)
    stdout:write(data)
end

return stdio