
const class = require@<let.clazz> "thlua.class"
const BaseTypeCom = require "thlua.space.BaseTypeCom"
const Exception = require "thlua.Exception"

const AsyncTypeCom = class@<clazz.AsyncTypeCom, false>(BaseTypeCom)

function AsyncTypeCom.__tostring(self:clazz.AsyncTypeCom)
	const l:List(String) = {}
	const nTypeSet = self._typeSet
	if nTypeSet then
		for i, v in pairs(nTypeSet:getDict()) do
			l[i] = tostring(v)
		end
		return "AsyncTypeCom("..table.concat(l, ",")..")"
	else
		return "AsyncTypeCom(?)"
	end
end

function.open AsyncTypeCom:ctor(_, _)
	self._typeSet=false@OrFalse(clazz.FrozenTypeSet)
	self._listBuildEvent=self._task:makeEvent()
end

function AsyncTypeCom:getSetAwait():Ret(clazz.FrozenTypeSet)
	if not self._typeSet then
		self._listBuildEvent:wait()
	end
	return (assert(self._typeSet, "type list not setted"))
end

function AsyncTypeCom:setTypeAsync(vNode:clazz.IBaseNode, vFn:Fn():Ret(clazz.UMustType))
	assert(not self._assignNode, "async type has setted")
	self._assignNode = vNode
	self._task:runAsync(function()
		const nResultType = vFn()
		if AsyncTypeCom.is(nResultType) then
			self._typeSet = nResultType:getSetAwait()
			self._listBuildEvent:wakeup()
			self._resultType = nResultType:checkAtomUnion()
			self._resultBuildEvent:wakeup()
		else
			const nResultType = nResultType:checkAtomUnion()
			self._typeSet = nResultType:getTypeSet()
			self._resultType = nResultType
			self._listBuildEvent:wakeup()
			self._resultBuildEvent:wakeup()
		end
	end)
end

function AsyncTypeCom:setSetAsync(vNode:clazz.IBaseNode, vGetSetLateRunner:Fn():Ret(clazz.HashableTypeSet, OrNil(Fn(clazz.UAtomUnion))))
	assert(not self._assignNode, "async type has setted")
	self._assignNode = vNode
	self._task:runAsync(function()
		const nHashableTypeSet , nLateRunner = vGetSetLateRunner()
		-- step 1. set list
		const nFrozenTypeSet = self._typeManager:unifyTypeSet(nHashableTypeSet)
		self._typeSet = nFrozenTypeSet
		for k, v in pairs(nFrozenTypeSet:getDict()) do
			if v:mayRecursive() then
				self._mayRecursive = true
			end
		end
		self._listBuildEvent:wakeup()
		const nTypeNum = nFrozenTypeSet:getNum()
		-- step 2. merge to result type
		local nResultType:OrNil(clazz.UAtomUnion) = nil
		if nTypeNum == 0 then
			nResultType = self._typeManager.type.Never
		elseif nTypeNum == 1 then
			const _, nFirstType = next(nFrozenTypeSet:getDict())
			nResultType = nFirstType!
		else
			nResultType = nFrozenTypeSet:_buildType()
		end
		self._resultType = nResultType
		self._resultBuildEvent:wakeup()
		if nLateRunner then
			nLateRunner(nResultType)
		end
	end)
end

function AsyncTypeCom:foreachAwait(vFunc)
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nTypeSet = self:getSetAwait()
		for _, v in pairs(nTypeSet:getDict()) do
			vFunc(v)
		end
	end
end

function AsyncTypeCom:isNever():Ret(Boolean)
	return self:getSetAwait():getNum() <= 0
end

return AsyncTypeCom