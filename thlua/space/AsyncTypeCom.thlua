
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const class = require "thlua.class"
const Exception = require "thlua.Exception"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AsyncTypeCom = class@<clazz.AsyncTypeCom, clazz.IType>(BaseSpaceCom)

function AsyncTypeCom.__tostring(self:clazz.AsyncTypeCom)
	const l:List(String) = {}
	const nTypeSet = self._typeSet
	if nTypeSet then
		for i, v in pairs(nTypeSet:getDict()) do
			l[i] = tostring(v)
		end
		return "AsyncTypeCom("..table.concat(l, ",")..")"
	else
		return "AsyncTypeCom(?)"
	end
end

function.open AsyncTypeCom:ctor(_, _)
	const nManager = self._manager
	const nTask = nManager:getScheduleManager():newTask(self._node)
	self._task=nTask
	self._assignNode=false@OrFalse(clazz.IBaseNode)
	self._mayRecursive=false@Boolean
	self._typeSet=false@OrFalse(clazz.HashableTypeSet)
	self._resultType=false@OrFalse(clazz.UAtomUnion)
	self._listBuildEvent=nTask:makeEvent()
	self._resultBuildEvent=nTask:makeEvent()
	self.id=nManager:genTypeId()
end

function AsyncTypeCom:detailString(v, vVerbose)
	return "AsyncTypeCom detail string TODO"
	--[[
	const nCom = self._com
	if not nCom then
		return "Reference("..(tostring(self._key) or tostring(self._assignNode))..")"
	else
		if AsyncTypeCom.is(nCom) then
			return "Reference("..tostring(nCom:getTypeNowait())..")"
		else
			return "TemplateReference("..(tostring(self._key) or tostring(self._assignNode))..")"
		end
	end
	]]
end

function AsyncTypeCom:getResultType():Ret(OrFalse(clazz.UAtomUnion))
	return self._resultType
end

function AsyncTypeCom:getTypeNowait():Ret(Union(clazz.AsyncTypeCom, clazz.UAtomUnion))
	return self._resultType or self
end

function AsyncTypeCom:checkAtomUnion():Ret(clazz.UAtomUnion)
	if not self._resultType then
		self._resultBuildEvent:wait()
	end
	return (assert(self._resultType, "result type not setted"))
end

function AsyncTypeCom:mayRecursive():Ret(Boolean)
	return self._mayRecursive
end

function AsyncTypeCom:getSetAwait():Ret(clazz.HashableTypeSet)
	if not self._typeSet then
		self._listBuildEvent:wait()
	end
	return (assert(self._typeSet, "type list not setted"))
end

function AsyncTypeCom:setTypeAsync(vNode:clazz.IBaseNode, vFn:Fn():Ret(clazz.UMustType))
	assert(not self._assignNode, "async type has setted")
	self._assignNode = vNode
	self._task:runAsync(function()
		const nResultType = vFn()
		if AsyncTypeCom.is(nResultType) then
			self._typeSet = nResultType:getSetAwait()
			self._listBuildEvent:wakeup()
			self._resultType = nResultType:checkAtomUnion()
			self._resultBuildEvent:wakeup()
		else
			self._typeSet = nResultType:getTypeSet()
			self._resultType = nResultType
			self._listBuildEvent:wakeup()
			self._resultBuildEvent:wakeup()
		end
	end)
end

function AsyncTypeCom:setSetAsync(vNode:clazz.IBaseNode, vGetSetLateRunner:Fn():Ret(clazz.HashableTypeSet, OrNil(Fn(clazz.UAtomUnion))))
	assert(not self._assignNode, "async type has setted")
	self._assignNode = vNode
	self._task:runAsync(function()
		const nTypeSet , nLateRunner = vGetSetLateRunner()
		-- step 1. set list
		self._typeSet = self._manager:unifyTypeSet(nTypeSet)
		for k, v in pairs(nTypeSet:getDict()) do
			if v:mayRecursive() then
				self._mayRecursive = true
			end
		end
		self._listBuildEvent:wakeup()
		const nTypeNum = nTypeSet:getNum()
		-- step 2. merge to result type
		local nResultType:OrNil(clazz.UAtomUnion) = nil
		if nTypeNum == 0 then
			nResultType = self._manager.type.Never
		elseif nTypeNum == 1 then
			const _, nFirstType = next(nTypeSet:getDict())
			nResultType = nFirstType!
		else
			nResultType = nTypeSet:_buildType()
		end
		self._resultType = nResultType
		self._resultBuildEvent:wakeup()
		if nLateRunner then
			nLateRunner(nResultType)
		end
	end)
end

function AsyncTypeCom:foreachAwait(vFunc:Fn(clazz.IAtomType))
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nTypeSet = self:getSetAwait()
		for _, v in pairs(nTypeSet:getDict()) do
			vFunc(v)
		end
	end
end

function AsyncTypeCom:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	const nResultType = self:getTypeNowait()
	if not nResultType:isAsync() then
		return nResultType:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	else
		local nAllInclude:Boolean = true
		vRight:foreachAwait(function(vAtomType)
			if not nAllInclude then
				return
			end
			local nCurInclude:Boolean = false
			nResultType:foreachAwait(function(vType)
				if nCurInclude then
					return
				elseif vType:assumeIncludeAtom(vAssumeSet, vAtomType, vSelfType) then
					nCurInclude = true
				end
			end)
			if not nCurInclude then
				nAllInclude = false
			end
		end)
		return nAllInclude
	end
end

function AsyncTypeCom:assumeIntersectSome(vAssumeSet, vRight)
	const nResultType = self:getTypeNowait()
	if not nResultType:isAsync() then
		return nResultType:assumeIntersectSome(vAssumeSet, vRight)
	else
		local nSomeIntersect:Boolean = false
		vRight:foreachAwait(function(vAtomType)
			if nSomeIntersect then
				return
			end
			local nCurIntersect:Boolean = false
			nResultType:foreachAwait(function(vType)
				if nCurIntersect then
					return
				elseif vType:assumeIntersectAtom(vAssumeSet, vAtomType) then
					nCurIntersect = true
				end
			end)
			if nCurIntersect then
				nSomeIntersect = true
			end
		end)
		return nSomeIntersect
	end
end

function AsyncTypeCom:foreachAwait(vFunc)
	const nResultType = self:getTypeNowait()
	if not nResultType:isAsync() then
		nResultType:foreach(vFunc)
	else
		local nTypeSet = nResultType:getSetAwait()
		for _, v in pairs(nTypeSet:getDict()) do
			vFunc(v)
		end
	end
end

function AsyncTypeCom:intersectAtom(vRightType)
	return self:checkAtomUnion():intersectAtom(vRightType)
end

function AsyncTypeCom:includeAtom(vRightType)
	return self:checkAtomUnion():includeAtom(vRightType)
end

function AsyncTypeCom:includeAll(vRight)
	return self:assumeIncludeAll(nil, vRight)
end

function AsyncTypeCom:safeIntersect(vRight)
	return self:checkAtomUnion():safeIntersect(vRight)
end

function AsyncTypeCom:intersectSome(vRight)
	return self:assumeIntersectSome(nil, vRight)
end

function AsyncTypeCom:isAsync():Ret(True)
	return true
end

function AsyncTypeCom:isNever():Ret(Boolean)
	return self:getSetAwait():getNum() <= 0
end

function AsyncTypeCom:getManager()
	return self._manager
end

return AsyncTypeCom
