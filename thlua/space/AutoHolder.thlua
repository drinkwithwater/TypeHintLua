
const class = require@<let.clazz> "thlua.class"
const BaseTypeCom = require "thlua.space.BaseTypeCom"
const Exception = require "thlua.Exception"

(@do
	let.node = import("thlua.code.Node").node
end)

const AutoHolder = class@<clazz.AutoHolder, false>(BaseTypeCom)
AutoHolder.__tostring = function(self:clazz.AutoHolder)
	return "auto@"..tostring(self._node)
end

function.open AutoHolder:ctor(_, _)
	self._term=false@OrFalse(clazz.RefineTerm)
end

function AutoHolder:checkRefineTerm(vContext:clazz.OperContext):Ret(clazz.RefineTerm)
	const nTerm = self._term
	if nTerm then
		return nTerm
	end
	error(Exception.new("undeduced auto param is used", vContext:getNode()))
end

function AutoHolder:getRefineTerm():Ret(OrFalse(clazz.RefineTerm))
	return self._term
end

function AutoHolder:getType():Ret(OrFalse(clazz.UAtomUnion))
	return self._resultType
end

function AutoHolder:getSetAwait():Ret(clazz.HashableTypeSet)
	if not self._resultType then
		self._resultBuildEvent:wait()
	end
	return assert(self._resultType, "result type setted"):getTypeSet()
end

function AutoHolder:assignDeduceTypeAsync(vContext:clazz.AssignContext, vNode:clazz.IBaseNode, vFn:Fn():Ret(clazz.UMustType))
	assert(not self._assignNode, "async type has setted")
	self._assignNode = vNode
	self._task:runAsync(function()
		const nResultType = vFn():checkAtomUnion()
		self._resultType = nResultType
		const nTerm = vContext:RefineTerm(nResultType)
		self._term = nTerm
		self._resultBuildEvent:wakeup()
	end)
end

function AutoHolder:foreachAwait(vFunc)
	self:checkAtomUnion():foreach(vFunc)
end

function AutoHolder:isNever():Ret(Boolean)
	return self:checkAtomUnion():isNever()
end

return AutoHolder
