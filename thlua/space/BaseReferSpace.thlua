
const AsyncTypeCom = require "thlua.space.AsyncTypeCom"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const SpaceValue = require "thlua.space.SpaceValue"
const BuiltinFnCom = require "thlua.space.BuiltinFnCom"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const BaseReferSpace = class@<clazz.BaseReferSpace, false>(BaseSpaceCom)
BaseReferSpace.__tostring=function(_):Ret(String)
	error("not implement, namespace or letspace's tostring expected")
	return ""
end

function.open BaseReferSpace:ctor(_, _, vRefer:clazz.NameReference, ...)
	self._key2child={} @ Dict(String, clazz.NameReference) -- (vIndexTable and setmetatable({}, {__index=vIndexTable}) or {})@StringToRefer,
	self._refer = vRefer
end

function.pass BaseReferSpace:referChild(vNode:clazz.IBaseNode, vKey:String):Ret(clazz.NameReference)
	error("abstract namespace get child not implement")
end

function.pass BaseReferSpace:spaceCompletion(vCompletion:clazz.FieldCompletion, vValue:clazz.BaseSpaceValue)
	error("abstract namespace putCompletion not implement")
end

function BaseReferSpace:getRefer():Ret(clazz.NameReference)
	return self._refer @> clazz.NameReference
end

return BaseReferSpace
