
const Exception = require "thlua.Exception"
const Node = require "thlua.code.Node"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const BuiltinFnCom = class@<clazz.BuiltinFnCom, false>(BaseSpaceCom)
BuiltinFnCom.__tostring=function(self:clazz.BuiltinFnCom):Ret(String)
    return "BuiltinFn-"..self._name
end

function.open BuiltinFnCom:ctor(_, _, vFunc:AnyFunction, vName:String)
    self._func=vFunc
    self._name=vName
end

function BuiltinFnCom:flatCall(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.USpaceAny)
    const ok, ret = pcall(self._func, vNode, ...)
    if ok then
        return ret
    else
        if Exception.is(ret) then
            error(ret)
        else
            error(vNode:toExc(tostring(ret)))
        end
    end
end

return BuiltinFnCom
