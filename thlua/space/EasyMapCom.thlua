
const SpaceValue = require "thlua.space.SpaceValue"
const AsyncTypeCom = require "thlua.space.AsyncTypeCom"
const TemplateCom = require "thlua.space.TemplateCom"
const ScheduleEvent = require "thlua.manager.ScheduleEvent"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const EasyMapCom = class@<clazz.EasyMapCom, false>(BaseSpaceCom)
EasyMapCom.__tostring=function(self):Ret(String)
	return "easymap-"
end

function.open EasyMapCom:ctor(_, _)
	self._atom2value = {} @ Dict(clazz.IAtomType, Union(clazz.AsyncTypeCom, clazz.TemplateCom, clazz.ScheduleEvent))
end

function EasyMapCom:_asyncBuild(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny, vFunc:Fn(Union(clazz.AsyncTypeCom, clazz.TemplateCom)):Ret(clazz.AsyncTypeCom)):Ret(clazz.AsyncTypeCom)
	const nTypeCom = self._manager:AsyncTypeCom(vNode)
	nTypeCom:setSetAsync(vNode, function()
		const nKeyMustType = self._manager:easyToMustType(vNode, vKey):checkAtomUnion()
		const nTypeSet = self._manager:HashableTypeSet()
		nKeyMustType:foreach(function(vAtomType)
			local nCurValue = self._atom2value[vAtomType]
			if not nCurValue then
				const nEvent = self._manager:getScheduleManager():makeWildEvent()
				self._atom2value[vAtomType] = nEvent
				nEvent:wait()
				nCurValue = self._atom2value[vAtomType]
			elseif ScheduleEvent.is(nCurValue) then
				nCurValue:wait()
				nCurValue = self._atom2value[vAtomType]
			end
			if AsyncTypeCom.is(nCurValue) or TemplateCom.is(nCurValue) then
				nTypeSet:putSet(vFunc(nCurValue):getSetAwait())
			else
				error(vNode:toExc("easymap's value must be type or template when get"))
			end
		end)
		return nTypeSet
	end)
	return nTypeCom
end

function EasyMapCom:flatCall(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny, ...:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	const nTuple = self._manager:spacePack(vNode, ...)
	return self:_asyncBuild(vNode, vKey, function(vCom)
		if TemplateCom.is(vCom) then
			return vCom:cacheCall(vNode, nTuple)
		else
			return vCom
		end
	end)
end

function EasyMapCom:getValue(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	return self:_asyncBuild(vNode, vKey, function(vCom)
		if AsyncTypeCom.is(vCom) then
			return vCom
		else
			error(vNode:toExc("easymap's value, type expected here"))
		end
	end)
end

function EasyMapCom:setValue(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny, vValue:clazz.USpaceAny)
	const nTask = self._manager:getScheduleManager():newTask(vNode)
	nTask:runAsync(function()
		const nKeyMustType = self._manager:easyToMustType(vNode, vKey):checkAtomUnion()
		assert(BaseAtomType.is(nKeyMustType), vNode:toExc("easymap's key must be atom type when set"))
		local nWaitEvent = self._atom2value[nKeyMustType]
		if not nWaitEvent then
			const nEvent = nTask:makeEvent()
			self._atom2value[nKeyMustType] = nEvent
			nWaitEvent = nEvent
		elseif not ScheduleEvent.is(nWaitEvent) then
			error(vNode:toExc("easymap set one key multi times"))
		end
		const nRefer = SpaceValue.checkRefer(vValue)
		const nCom = nRefer and nRefer:getComAwait() or vValue
		if AsyncTypeCom.is(nCom) or TemplateCom.is(nCom) then
			self._atom2value[nKeyMustType] = nCom
			nWaitEvent:wakeup()
		else
			error(vNode:toExc("easymap's value must be type or template when set"))
		end
	end)
end

return EasyMapCom
