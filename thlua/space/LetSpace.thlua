
const class = require "thlua.class"
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const SpaceValue = require "thlua.space.SpaceValue"

(@do
	let.clazz = import($class).clazz
end)

const LetSpace = class@<clazz.LetSpace, false>(BaseReferSpace)
LetSpace.__tostring=function(self):Ret(String)
    if self._parentSpace then
        return "letspace-" .. tostring(self._node)
    else
        return "letspace-root"
    end
end

function.open LetSpace:ctor(_, _, _, vParentOrDict:OrFalse(clazz.LetSpace))
    self._parentSpace = false @ OrFalse(clazz.LetSpace)
    self._envTable = nil@! clazz.EnvSpaceValue
	self._closed = false @ Boolean
	if vParentOrDict then
        self._parentSpace = vParentOrDict
        self._envTable = SpaceValue.envCreate(self, self._refer @> clazz.NameReference, self._typeManager:getRuntime():getSpaceManager():getRootSpace(), self._typeManager.spaceG)
	end
    self._key2child["let"] = self._refer @> clazz.NameReference
end

function LetSpace:parentHasKey(vKey:String):Ret(Boolean)
    const nParent = self._parentSpace
	return nParent and nParent:chainGet(vKey) and true or false
end

function LetSpace:chainGet(vKey:String):Ret(OrNil(clazz.NameReference))
    const nParent = self._parentSpace
	return self._key2child[vKey] or (nParent and nParent:chainGet(vKey) or nil)
end

function LetSpace:export():Ret(clazz.LocalSpaceValue, clazz.EnvSpaceValue)
    return (self._refer @> clazz.NameReference):getSpaceValue(), self._envTable
end

function LetSpace:spaceCompletion(vCompletion:clazz.FieldCompletion, vValue:clazz.BaseSpaceValue)
    const nWhat = getmetatable(vValue).__what
    if nWhat == "_ENV" then
        for k,v in pairs(self._key2child) do
            vCompletion:putSpaceField(k, v)
        end
        const nParent = self._parentSpace
        if nParent then
            nParent:spaceCompletion(vCompletion, vValue)
        end
    else
        for k,v in pairs(self._key2child) do
            vCompletion:putSpaceField(k, v)
        end
    end
end

function LetSpace:referChild(vNode:clazz.IBaseNode, vKey:String):Ret(clazz.NameReference)
	local rawgetV = self._key2child[vKey]
	if not rawgetV then
        if self._closed then
            error(vNode:toExc("space has been closed"))
        end
        if self:parentHasKey(vKey) then
            error(vNode:toExc("'let' can only get symbol in current level key="..tostring(vKey)))
        end
        if self._closed then
            error(vNode:toExc("namespace closed, can't create key="..tostring(vKey)))
        end
        rawgetV = self._typeManager:NameReference(self, vKey)
        self._key2child[vKey] = rawgetV
	end
    rawgetV:pushReferNode(vNode)
    return rawgetV
end

function LetSpace:close()
	self._closed=true
end

return LetSpace
