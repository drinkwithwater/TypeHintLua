
const class = require "thlua.class"
const Namespace = require "thlua.space.Namespace"
const SpaceValue = require "thlua.space.SpaceValue"
const Exception = require "thlua.Exception"
const StringLiteral = require "thlua.type.basic.StringLiteral"

(@do
	let.clazz = import($class).clazz
end)

const Letspace = class@<clazz.Letspace, false>(Namespace)
Letspace.__tostring=function(self):Ret(String)
	return "letspace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function.open Letspace:ctor(_, _, _, vParentOrDict:Union(Dict(clazz.IAtomType, clazz.Reference), clazz.Letspace))
    self._parentSpace = false @ OrFalse(clazz.Letspace)
    self._envTable = SpaceValue.envCreate(self._refer)
	if Letspace.is(vParentOrDict) then
        self._parentSpace = vParentOrDict
    else
		for k,v in pairs(vParentOrDict) do
			self._key2child[k] = v
		end
	end
end

function Letspace:parentHasKey(vKeyType:clazz.IAtomType):Ret(Boolean)
    const nParent = self._parentSpace
	return nParent and nParent:pureGet(vKeyType) and true or false
end

function Letspace:pureGet(vKeyType:clazz.IAtomType):Ret(OrNil(clazz.Reference))
    const nParent = self._parentSpace
	return self._key2child[vKeyType] or (nParent and nParent:pureGet(vKeyType) or nil)
end

function Letspace:export():Ret(clazz.LocalSpaceValue, clazz.EnvSpaceValue, Truth)
    return self._refer:getSpaceValue(), self._envTable, _G
end

function Letspace:putCompletion(vCompletion)
	for k,v in pairs(self._key2child) do
		if StringLiteral.is(k) then
			vCompletion:putSpaceField(k:getLiteral(), v)
		end
	end
    const nParent = self._parentSpace
    if nParent then
        nParent:putCompletion(vCompletion)
    end
end

function Letspace:getChild(vNode:clazz.IBaseNode, vKeyType:clazz.IAtomType):Ret(clazz.Reference)
	local rawgetV = self._key2child[vKeyType]
	if not rawgetV then
        if self:parentHasKey(vKeyType) then
            error(Exception.new("'let' can only get symbol in current level key="..tostring(vKeyType), vNode))
        end
        if self._closed then
            error(Exception.new("namespace closed, can't create key="..tostring(vKeyType), vNode))
        end
        rawgetV = self._manager:Reference(tostring(vKeyType))
        rawgetV:pushReferNode(vNode)
        self._key2child[vKeyType] = rawgetV
	end
    return rawgetV
end

return Letspace
