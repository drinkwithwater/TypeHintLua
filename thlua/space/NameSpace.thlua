
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const NameSpace = class@<clazz.NameSpace, false>(BaseReferSpace)
NameSpace.__tostring=function(self):Ret(String)
	return "namespace-" .. tostring(self._node)
end

function.open NameSpace:ctor(_, _, _, vParent:OrFalse(clazz.NameSpace))
	self._parentSpace = vParent
end

function NameSpace:referChild(vNode:clazz.IBaseNode, vKey:String):Ret(clazz.NameReference)
	local rawgetV = self._key2child[vKey]
	if not rawgetV then
		rawgetV = self._spaceManager:NameReference(self, vKey)
		self._key2child[vKey] = rawgetV
	end
	rawgetV:pushReferNode(vNode)
	return rawgetV
end

function NameSpace:spaceCompletion(vCompletion:clazz.FieldCompletion, vValue:clazz.BaseSpaceValue)
	for k,v in pairs(self._key2child) do
        vCompletion:putSpaceField(k, v)
	end
end

return NameSpace
