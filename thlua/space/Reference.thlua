
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Node = require "thlua.code.Node"

const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const BaseUnionType = require "thlua.type.union.BaseUnionType"

const Namespace = require "thlua.space.Namespace"
const Treespace = require "thlua.space.Treespace"
const Letspace = require "thlua.space.Letspace"
const AsyncTypeCom = require "thlua.space.AsyncTypeCom"
const TemplateCom = require "thlua.space.TemplateCom"
const BuiltinFnCom = require "thlua.space.BuiltinFnCom"
const EasyMapCom = require "thlua.space.EasyMapCom"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"

const SpaceValue = require "thlua.space.SpaceValue"

const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const Reference = {}
Reference.__index = Reference

function Reference.__tostring(self:clazz.Reference):Ret(String)
	return "Reference tostring TODO"
end

function:class(clazz.Reference) Reference.new(vManager:clazz.TypeManager, vParentNodeOrSpace:Union(clazz.IBaseNode, clazz.Namespace), vKey:String)
	const self = setmetatable({.class
		_manager = vManager,
		_parentNodeOrSpace=vParentNodeOrSpace,
		_key=vKey,
		_assignNode=false@OrFalse(clazz.IBaseNode),
		_referNodes={}@List(clazz.IBaseNode),
		_com=false@OrFalse(clazz.BaseSpaceCom),
		_task = nil@!clazz.ScheduleTask,
		_assignComEvent = nil@!clazz.ScheduleEvent,
		_spaceValue=nil@!clazz.LocalSpaceValue,
	}, Reference)
	self._spaceValue = SpaceValue.create(self)
	const nTask = vManager:getScheduleManager():newTask(self)
	self._task = nTask
	self._assignComEvent = nTask:makeEvent()
	return self
end

function Reference:initWithSpace@<T>(vNode:clazz.IBaseNode, vData:T):Ret(Cond(T, clazz.Letspace, clazz.Treespace))
	assert(not self._assignNode, vNode:toExc("init space called after assignNode"))
	self._assignNode = vNode
	if vData then
		const nSpace = Letspace.new(self._manager, vNode, self, vData)
		self._com = nSpace
		return nSpace
	else
		const nSpace = Treespace.new(self._manager, vNode, self)
		self._com = nSpace
		return nSpace
	end
end

function Reference:getSpaceValue()
	return self._spaceValue
end

function Reference:getComNowait():Ret(OrFalse(clazz.BaseSpaceCom))
	return self._com
end

function Reference:getComAwait():Ret(clazz.BaseSpaceCom)
	if not self._com then
		self._assignComEvent:wait()
	end
	const nCom = assert(self._com, "com not setted after wait finish")
	return nCom
end

function Reference:waitAsyncTypeCom(vNode:clazz.IBaseNode):Ret(clazz.AsyncTypeCom)
	const nCom = self:getComAwait()
	assert(AsyncTypeCom.is(nCom), vNode:toExc("type expected, but got some other value"))
	return nCom
end

function Reference:waitTemplateCom(vNode:clazz.IBaseNode):Ret(clazz.TemplateCom)
	const nCom = self:getComAwait()
	assert(TemplateCom.is(nCom), vNode:toExc("template expected, but got some other value"))
	return nCom
end

function Reference:_setComAndWakeup(vCom:clazz.BaseSpaceCom)
	self._com = vCom
	self._assignComEvent:wakeup()
end

function Reference:setAssignAsync(vNode:clazz.IBaseNode, vGetFunc:Fn():Ret(Any))
	assert(not self._assignNode, vNode:toExc("refer has been setted:"..tostring(self)))
	self._assignNode = vNode
	self._task:runAsync(function()
		const nAssignValue = vGetFunc()
		const nRefer = SpaceValue.checkRefer(nAssignValue)
		if nRefer then
			self:_setComAndWakeup(nRefer:getComAwait())
		elseif BaseSpaceCom.is(nAssignValue) then
			self:_setComAndWakeup(nAssignValue)
		else
			if BaseAtomType.is(nAssignValue) then
				const nCom = self._manager:AsyncTypeCom(vNode)
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			elseif BaseUnionType.is(nAssignValue) then
				const nCom = self._manager:AsyncTypeCom(vNode)
				nCom:setTypeAsync(vNode, function()
					return nAssignValue
				end)
				self:_setComAndWakeup(nCom)
			else
				error(vNode:toExc("namespace assign an illegal value"))
			end
		end
	end)
end

function Reference:getAssignNode():Ret(OrFalse(clazz.IBaseNode))
	return self._assignNode
end

function Reference:getReferNodes():Ret(List(clazz.IBaseNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:clazz.IBaseNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:triggerGet(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny):Ret(clazz.USpaceValue)
	const nCom = self._com
	if type(vKey) == "string" then
		if Namespace.is(nCom) then
			const nChild = nCom:getChild(vNode, vKey @> String)
			return nChild:getSpaceValue()
		else
			error(vNode:toExc("namespace expected here"))
		end
	else
		assert(EasyMapCom.is(nCom), vNode:toExc("illegal indexing key"))
		return nCom:getValue(vNode, vKey)
	end
end

function Reference:triggerSet(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny, vValue:clazz.USpaceAny)
	const nCom = self._com
	if type(vKey) == "string" then
		if Namespace.is(nCom) then
			const nChild = nCom:getChild(vNode, vKey @> String)
			if Reference.is(nChild) then
				nChild:setAssignAsync(vNode, function() return vValue end)
			else
				error(vNode:toExc("assign conflict: key="..tostring(vKey)))
			end
		else
			error(vNode:toExc("namespace expected here"))
		end
	else
		assert(EasyMapCom.is(nCom), vNode:toExc("illegal indexing key"))
		nCom:setValue(vNode, vKey, vValue)
	end
end

function Reference:globalGet(vNode:clazz.IBaseNode, vKey:clazz.USpaceAny):Ret(clazz.BaseSpaceValue)
	const nCom = self._com
	assert(Letspace.is(nCom), vNode:toExc("only letspace com can take global index"))
	assert(type(vKey) == "string", vNode:toExc("key must be string when global index"))
	const nRefer = nCom:pureGet(vKey @> String)
	if Reference.is(nRefer) then
		return nRefer:getSpaceValue()
	elseif not nRefer then
        error(vNode:toExc("key with empty value, key="..tostring(vKey)))
	else
		return nRefer
	end
end

function Reference:triggerCall(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.USpaceAny)
	const nCom = self._com
	if BuiltinFnCom.is(nCom) then
		return nCom:call(vNode, ...)
	end
	const nArgList:List(clazz.USpaceAny) = {...}
	const nArgNum = select("#", ...)
	if TemplateCom.is(nCom) then
		return nCom:call(vNode, nArgNum, nArgList)
	elseif nCom then
		error(vNode:toExc("template reference expected here"))
	end
	const nTypeCom = self._manager:AsyncTypeCom(vNode)
	nTypeCom:setTypeAsync(vNode, function()
		const nCom = self:waitTemplateCom(vNode)
		return nCom:call(vNode, nArgNum, nArgList)
	end)
	return nTypeCom
end

function.open Reference.is(v):isguard(clazz.Reference)
	return getmetatable(v) == Reference
end

return Reference
