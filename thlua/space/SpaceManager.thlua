

const CodeEnv = require "thlua.code.CodeEnv"
const SeverityEnum = require "thlua.runtime.SeverityEnum"
const EasyMapCom = require "thlua.space.EasyMapCom"
const BuiltinFnCom = require "thlua.space.BuiltinFnCom"
const FieldCompletion = require "thlua.stack.context.FieldCompletion"
const TermTuple = require "thlua.tuple.TermTuple"
const RefineTerm = require "thlua.term.RefineTerm"
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const SpaceValue = require "thlua.space.SpaceValue"
const ListDict = require "thlua.utils.ListDict"
const NameReference = require "thlua.space.NameReference"

const BaseUnionType = require "thlua.type.union.BaseUnionType"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const AsyncTypeCom = require "thlua.space.AsyncTypeCom"
const AutoHolder = require "thlua.space.AutoHolder"

const TupleBuilder = require "thlua.tuple.TupleBuilder"
const class = require@<let.clazz> "thlua.class"

(@do
	let.node = import("thlua.code.Node").node
	let.InjectFn = import("thlua.code.CodeEnv").InjectFn
end)

const SpaceManager = class@<clazz.SpaceManager, false>()
function.open SpaceManager:ctor(vRuntime:clazz.BaseRuntime)
	self.spaceG = setmetatable({}, {__index=_G})
	self._runtime=vRuntime
	self._rootSpace=nil@OrNil(clazz.LetSpace)
	self._invalidReferSet = {} @ Dict(clazz.NameReference, True)
end

function SpaceManager:invalidReference(vRefer:clazz.NameReference)
	self._invalidReferSet[vRefer] = true
end

function SpaceManager:getNameDiagnostic(vUseWarn:OrNil(Boolean)):Ret(Dict(String, List(clazz.Diagnostic)))
	local nFileToDiaList:Dict(String, List(clazz.Diagnostic)) = {}
	for nRefer, _ in pairs(self._invalidReferSet) do
		const nNodes = nRefer:getReferNodes()
		for _, node in ipairs(nNodes) do
			const nPath = node.path
			local nList = nFileToDiaList[nPath]
			if not nList then
				nList = {}
				nFileToDiaList[nPath] = nList
			end
			nList[#nList + 1] = {
				msg="here refer not setted : "..tostring(nRefer),
				node=node,
				severity=vUseWarn and SeverityEnum.Warn or SeverityEnum.Error,
			}
		end
	end
	return nFileToDiaList
end

function SpaceManager:prebuildRootSpace():Ret(clazz.LetSpace)
	assert(not self._rootSpace, "root space is built")
	const nRefer = NameReference.new(self._runtime, self._runtime:getRootNode(), "")
	const nRootSpace = nRefer:initWithLetSpace(self._runtime:getRootNode(), false)
	self._rootSpace = nRootSpace
	return nRootSpace
end

function SpaceManager:getRootSpace():Ret(clazz.LetSpace)
	return self._rootSpace!
end

function SpaceManager:NameReference(vParentSpace:Union(clazz.IBaseNode, clazz.BaseReferSpace), vName:String):Ret(clazz.NameReference)
	const nRefer = NameReference.new(self._runtime, vParentSpace, vName)
	return nRefer
end

function SpaceManager:LetSpace(vRegionNode:clazz.IBaseNode, vParentLet:clazz.LetSpace):Ret(clazz.LetSpace)
	const nRefer = NameReference.new(self._runtime, vParentLet, "")
	const nSpace = nRefer:initWithLetSpace(self._runtime:getRootNode(), vParentLet)
	return nSpace
end

function SpaceManager:NameSpace(vNode:node.Debug, vParent:OrFalse(clazz.NameSpace)):Ret(clazz.NameSpace)
	const nRefer = NameReference.new(self._runtime, vParent or vNode, "")
	const nSpace = nRefer:initWithNameSpace(vNode, vParent)
	return nSpace
end

function SpaceManager:buildEasyMap(vNode:clazz.IBaseNode):Ret(clazz.EasyMapCom)
	return EasyMapCom.new(self, vNode)
end

function SpaceManager:BuiltinFn(vFn:AnyFunction, vName:String):Ret(clazz.BuiltinFnCom)
	return BuiltinFnCom.new(self, self._runtime:getRootNode(), vFn, vName)
end

function SpaceManager:spacePack(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.TupleBuilder)
	return TupleBuilder.new(self._runtime:getTypeManager(), vNode, ...)
end

function SpaceManager:spaceToMustType(vNode:clazz.IBaseNode, vData:clazz.USpaceAny):Ret(clazz.UMustType)
	local t = type(vData)
	if t == "table" then
		if AutoHolder.is(vData) or AsyncTypeCom.is(vData) or BaseAtomType.is(vData) or BaseUnionType.is(vData) then
			return vData
		else
			const nRefer = SpaceValue.checkRefer(vData)
			if nRefer then
				return nRefer:waitTypeCom(vNode)
			else
				if NameReference.is(vData) then
					return vData:waitTypeCom(vNode)
				else
					error(vNode:toExc("to type failed"))
				end
			end
		end
	elseif t == "number" or t == "string" or t == "boolean"then
		return self._runtime:getTypeManager():Literal(vData @> Union(Number, String, Boolean))
	elseif t == "nil" then
		error(vNode:toExc("can't trans nil into type in hint space"))
	else
		error(vNode:toExc("can't trans this value into type in hint space"))
	end
end

function SpaceManager:getRuntime()
	return self._runtime
end

return SpaceManager