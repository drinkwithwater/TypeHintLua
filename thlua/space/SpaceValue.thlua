
const Exception = require "thlua.Exception"
const Node = require "thlua.code.Node"
const type = type

(@do
	let.clazz = import("thlua.class").clazz
	clazz.USpaceValue = Union(clazz.BaseSpaceCom, clazz.BaseSpaceValue)
end)

const SpaceValue = {.open}

const function:class(clazz.BaseSpaceValue) __createBaseTable(vRefer:clazz.NameReference)
	-- abstract class
	return setmetatable({.class}, {
		__index={},
		__tostring=function(_)
			return "abstract class"
		end,
		__what=false@OrFalse("_ENV"),
		__refer=vRefer,
	})
end

function:class(clazz.LocalSpaceValue) SpaceValue.create(vRefer:clazz.NameReference):extends(clazz.BaseSpaceValue)
    return setmetatable({.class
    }, {
		__index=function(_:Truth,vKey:clazz.USpaceAny):Ret(clazz.USpaceValue)
			const nNode = Node.newDebugNode()
			if type(vKey) == "string" then
				return vRefer:triggerReferChild(nNode, vKey @> String):getSpaceValue()
			else
				const nCom = vRefer:nowaitEasyMapCom(nNode)
				return nCom:getValue(nNode, vKey)
			end
		end,
		__newindex=function(_:Truth,vKey:clazz.USpaceAny,vValue:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			if type(vKey) == "string" then
				const nChild = vRefer:triggerReferChild(nNode, vKey @> String)
				nChild:setAssignAsync(nNode, function() return vValue end)
			else
				const nCom = vRefer:nowaitEasyMapCom(nNode)
				nCom:setValue(nNode, vKey, vValue)
			end
		end,
		__tostring=function(_)
			return "`"..tostring(vRefer)
		end,
		__call=function(_:Truth, ...:clazz.USpaceAny):Ret(clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			return vRefer:triggerCall(nNode, ...)
		end,
		__what=false,
		__refer=vRefer,
    })
end

function:class(clazz.EnvSpaceValue) SpaceValue.envCreate(vLetSpace:clazz.LetSpace, vRefer:clazz.NameReference, vRootSpace:clazz.LetSpace, vLuaGlobal:Truth):extends(clazz.BaseSpaceValue)
    return setmetatable({.class
		_G=vRootSpace:getRefer():getSpaceValue(),
		lua=vLuaGlobal,
    }, {
		__index=function(_:Truth,vKey:clazz.USpaceAny):Ret(clazz.BaseSpaceValue)
			if type(vKey) == "string" then
				const nRefer = vLetSpace:chainGet(vKey @> String)
				if nRefer then
					return nRefer:getSpaceValue()
				else
					const nNode = Node.newDebugNode()
					error(nNode:toExc("key with empty value, key="..tostring(vKey)))
				end
			else
				const nNode = Node.newDebugNode()
				error(nNode:toExc("key must be string when global indexing"))
			end
		end,
		__newindex=function(t:Truth,k:clazz.USpaceAny,v:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			error(nNode:toExc("global can't assign "))
		end,
		__tostring=function(_)
			return "`_ENV:"..tostring(vLetSpace)
		end,
		__call=function(_:Truth, ...:clazz.USpaceAny)
			const nNode = Node.newDebugNode()
			error(nNode:toExc("this value can't call"))
		end,
		__what="_ENV",
		__refer=vRefer,
    })
end

function.open SpaceValue.checkRefer(v):mapguard({[clazz.NameReference]=clazz.BaseSpaceValue})
	local nMeta = getmetatable(v)
	if type(nMeta) == "table" then
		local self = nMeta.__refer
		if self then
			return self
		end
	end
	return nil
end

return SpaceValue