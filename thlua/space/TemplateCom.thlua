
const class = require "thlua.class"
const Exception = require "thlua.Exception"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const BaseReadyType = require "thlua.type.basic.BaseReadyType"

(@let.clazz = import($class).clazz)

const TemplateCom = class@<clazz.TemplateCom, false>(BaseSpaceCom)

function.open TemplateCom:ctor(_, _, vFunc:clazz.PolyLambda, vParamInfo:clazz.ParamInfo)
	self._paramInfo=vParamInfo
	self._func=vFunc
	self._cache={}@Dict(String, clazz.AsyncTypeCom)
end

function TemplateCom:cacheCall(vNode:clazz.IBaseNode, vTupleBuilder:clazz.TupleBuilder):Ret(clazz.AsyncTypeCom)
	vTupleBuilder:argsMatch(vNode, self._paramInfo)
	const nAsyncTypeCom = self._typeManager:AsyncTypeCom(vNode)
	nAsyncTypeCom:setTypeAsync(vNode, function()
		const nKey = vTupleBuilder:calcNowaitPolyArgHash()
		const nValue = self._cache[nKey]
		if not nValue then
			self._cache[nKey] = nAsyncTypeCom
			return self._func(vTupleBuilder)
		else
			return nValue
		end
	end)
	return nAsyncTypeCom
end

return TemplateCom
