
const class = require "thlua.class"
const Exception = require "thlua.Exception"
const BaseSpaceCom = require "thlua.space.BaseSpaceCom"
const BaseReadyType = require "thlua.type.basic.BaseReadyType"

(@let.clazz = import($class).clazz)

const TemplateCom = class@<clazz.TemplateCom, false>(BaseSpaceCom)

function.open TemplateCom:ctor(_, _, vFunc:AnyFunction, vParNum:Integer)
	self._parNum=vParNum
	self._func=vFunc
	self._cache={}@Dict(String, clazz.AsyncTypeCom)
end

function TemplateCom:call(vNode:clazz.IBaseNode, vArgNum:Integer, vArgList:List(clazz.USpaceAny)):Ret(clazz.AsyncTypeCom)
	const nDirtyProcessor = self._manager:getDirtyProcessor()
	const nFn = self._func
	const nAsyncTypeCom = self._manager:AsyncTypeCom(vNode)
	nAsyncTypeCom:setTypeAsync(vNode, function()
		if vArgNum ~= self._parNum then
			error(vNode:toExc("template args num not match"))
		end
		const nMustList:List(clazz.UMustType) = {}
		for i=1, vArgNum do
			nMustList[i] = nDirtyProcessor:easyToMustType(vNode, vArgList[i])
		end
		const nKey = self._manager:signTemplateArgs(nMustList)
		const nValue = self._cache[nKey]
		if not nValue then
			self._cache[nKey] = nAsyncTypeCom
			const ok, exc = pcall(nFn, table.unpack(nMustList))
			if ok then
				return nDirtyProcessor:easyToMustType(vNode, exc)
			else
				if Exception.is(exc) then
					error(exc)
				else
					error(vNode:toExc(tostring(exc)))
				end
			end
		else
			return nValue
		end
	end)
	return nAsyncTypeCom
end

return TemplateCom
