
const Namespace = require "thlua.space.Namespace"
const Node = require "thlua.code.Node"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const Treespace = class@<clazz.Treespace, false>(Namespace)
Treespace.__tostring=function(self):Ret(String)
	return "treespace-" .. tostring(self._node).."|"..tostring(self._key or "!keynotset")
end

function Treespace:getChild(vNode:clazz.IBaseNode, vKey:String):Ret(clazz.Reference)
	local rawgetV = self._key2child[vKey]
	if not rawgetV then
		rawgetV = self._manager:Reference(vKey)
		self._key2child[vKey] = rawgetV
	end
	rawgetV:pushReferNode(vNode)
	return rawgetV
end

function Treespace:spaceCompletion(vCompletion:clazz.FieldCompletion, vValue:clazz.BaseSpaceValue)
	for k,v in pairs(self._key2child) do
        vCompletion:putSpaceField(k, v)
	end
end

return Treespace
