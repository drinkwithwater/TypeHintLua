
const class = require@<let.clazz> "thlua.class"
const AutoFlag = require "thlua.code.AutoFlag"
const AutoHolder = require "thlua.auto.AutoHolder"
const Node = require@<let.node> "thlua.code.Node"
const Exception = require "thlua.Exception"
const TermTuple = require "thlua.tuple.TermTuple"
const InstStack = require "thlua.stack.InstStack"

const DeduceStack = class@<clazz.DeduceStack, false>(InstStack)
function DeduceStack:__tostring()
	return "DeduceStack:"..tostring(self._node)
end

function DeduceStack:RAISE_ERROR(vContext:clazz.OperContext, vType:clazz.UMustType)
	-- do nothing
end

function.open DeduceStack:ctor(
	vRuntime:clazz.BaseRuntime,
	vNode:clazz.IBaseNode,
	vUpState:OrFalse(clazz.LexBranchCase),
	vBodyFn:clazz.SealPolyFunction,
	vApplyStack:clazz.BaseStack
)
	self._bodyFn = vBodyFn
	self._applyStack = vApplyStack
end

function DeduceStack:PARAM_UNPACK(
	vNode:node.Ident_def,
	vTermTuple:clazz.UTermTuple,
	vIndex:Integer,
	vHintType:Union(clazz.AutoFlag, clazz.USpaceAny)
):Ret(clazz.UAutoTerm)
	const nHeadContext = self._headContext
	if vHintType == AutoFlag then
		-- maybe param with autoFlag has no effect for deduce, so just return a Truth term
		return nHeadContext:RefineTerm(self._typeManager.type.Truth)
	else
		if AutoHolder.is(vHintType) then
			const nTerm = vTermTuple:get(nHeadContext, vIndex)
			if AutoHolder.is(nTerm) then
				error(self._node:toExc("type deduce failed"))
			else
				vHintType:assignDeduceTypeAsync(nHeadContext, self._node, function()
					return nTerm:getType()
				end)
				return nTerm
			end
		else
			const nHintType = self._typeManager:easyToMustType(self._node, vHintType)
			return nHeadContext:RefineTerm(nHintType)
		end
	end
end

function DeduceStack:PARAM_NODOTS_UNPACK(
	vNode:node.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer
)
	-- do nothing here
end

function DeduceStack:PARAM_DOTS_UNPACK(
	vNode:node.IAstNode,
	vTermTuple:OrFalse(clazz.UTermTuple),
	vParNum:Integer,
	vHintDots:Union(clazz.AutoFlag, clazz.USpaceAny)
):Ret(False)
	if AutoHolder.is(vHintDots) then
		print("TODO, poly as dots type")
		return false
	else
		-- nothing to do
		return false
	end
end

function DeduceStack:getSealStack():Ret(clazz.SealStack)
	return self._applyStack:getSealStack()
end

function DeduceStack:getApplyStack():Ret(clazz.BaseStack)
	return self._applyStack
end

return DeduceStack
