

const NameReference = require "thlua.space.NameReference"
const CodeEnv = require "thlua.code.CodeEnv"
const RefineTerm = require "thlua.term.RefineTerm"
const SpaceValue = require "thlua.space.SpaceValue"
const FieldCompletion = require "thlua.stack.context.FieldCompletion"
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const AutoFunction = require "thlua.type.func.AutoFunction"
const ListDict = require "thlua.utils.ListDict"
const class = require@<let.clazz> "thlua.class"
const OpenStack = require "thlua.stack.OpenStack"
const SealStack = require "thlua.stack.SealStack"
const DeduceStack = require "thlua.stack.DeduceStack"

(@do
	let.node = import("thlua.code.Node").node
	let.InjectFn = import("thlua.code.CodeEnv").InjectFn
end)

const StackManager = class@<clazz.StackManager, false>()
function.open StackManager:ctor(vRuntime:clazz.CodeRuntime)
	self._runtime=vRuntime
	self._nodeToBranchList = ListDict@<node.Block, clazz.Branch>()
	self._nodeToApplyContextList = ListDict@<clazz.IBaseNode, clazz.ApplyContext>()
	self._rootStack = nil @!clazz.SealStack
end

function StackManager:initRootFn(vHeadFn:Fn():Ret(Fn()))
	const nAutoFn = self:_createScheduleFn(vHeadFn)
	self._rootStack = nAutoFn:getBuildStack()
end

function StackManager:_createScheduleFn(vHeadFn:Fn():Ret(Fn())):Ret(clazz.AutoFunction)
	const nTypeManager = self._runtime:getTypeManager()
	const nRootNode = self._runtime:getRootNode()
	const nAutoFn = AutoFunction.new(nTypeManager, nRootNode, false)
	nAutoFn:initAsync(function()
		const nBodyFn = vHeadFn()
		return false, false, function()
			nBodyFn()
			const nParTuple = nTypeManager:TypeTuple(nRootNode, {})
			const nRetTuples = nTypeManager:VoidRetTuples(nRootNode)
			return nParTuple, nRetTuples
		end
	end)
	nAutoFn:startPreBuild()
	nAutoFn:startLateBuild()
	return nAutoFn
end

function StackManager:recordBranch(vNode:node.Block, vBranch:clazz.Branch)
	self._nodeToBranchList:putOne(vNode, vBranch)
end

function StackManager:recordApplyContext(vNode:clazz.IBaseNode, vContext:clazz.ApplyContext)
	self._nodeToApplyContextList:putOne(vNode, vContext)
end

function StackManager:_injectForeach(vTracePos:Integer, vBlockNode:node.Block, vFn:InjectFn, vCallback:Fn(Union(clazz.RefineTerm, clazz.USpaceAny)))
	const nBranchList = self._nodeToBranchList:get(vBlockNode)
	if not nBranchList then
		return
	end
	-- 3. run inject fn in each branches
	self:_createScheduleFn(function()
		for _, nBranch in pairs(nBranchList) do
			const nStack = nBranch:getStack()
			const nResult = vFn(nStack, function(vIdent)
				-- 1. lookup local symbol
				const nName = vIdent[1]
				local nDefineIdent = vBlockNode.symbolTable[nName]
				while nDefineIdent and nDefineIdent.pos > vTracePos do
					nDefineIdent = nDefineIdent.lookupIdent
				end
				if nDefineIdent then
					const nAutoTerm = nBranch:SYMBOL_GET(vIdent, nDefineIdent, false)
					if RefineTerm.is(nAutoTerm) then
						return nAutoTerm
					else
						return nStack:NIL_TERM(vIdent)
					end
				end
				-- 2. lookup global symbol
				const nName = "_ENV"
				local nDefineIdent = vBlockNode.symbolTable[nName]
				while nDefineIdent and nDefineIdent.pos > vTracePos do
					nDefineIdent = nDefineIdent.lookupIdent
				end
				if nDefineIdent then
					const nEnvTerm = nBranch:SYMBOL_GET(vIdent, nDefineIdent, false)
					assert(RefineTerm.is(nEnvTerm), "auto can't be used here")
					const nAutoTerm = nStack:META_GET(vIdent, nEnvTerm, nStack:LITERAL_TERM(vIdent, vIdent[1]), false)
					if RefineTerm.is(nAutoTerm) then
						return nAutoTerm
					else
						return nStack:NIL_TERM(vIdent)
					end
				else
					return nStack:NIL_TERM(vIdent)
				end
			end)
			vCallback(nResult)
		end
	end)
	self._runtime:getScheduleManager():lateSchedule()
end

function StackManager:injectCompletion(vTracePos:Integer, vBlockNode:node.Block, vFn:InjectFn, vServer:Truth):Ret(clazz.FieldCompletion)
	const nFieldCompletion = FieldCompletion.new()
	self:_injectForeach(vTracePos, vBlockNode, vFn, function(vResult)
		if RefineTerm.is(vResult) then
			vResult:getType():putCompletion(nFieldCompletion)
		else
			const nRefer = SpaceValue.checkRefer(vResult)
			const nSpace = nRefer and nRefer:getComNowait()
			if BaseReferSpace.is(nSpace) then
				nSpace:spaceCompletion(nFieldCompletion, vResult)
			end
		end
	end)
	return nFieldCompletion
end

function StackManager:hoverNode(vNode:Union(node.Expr, node.Ident)):Ret(False, String):Ret(String)
	const nBlockNode = vNode:getBlockOutHint()
	if not nBlockNode then
		return false, "expr not in a block"
	end
	const nCodeEnv = self._runtime:getCodeEnv(vNode.path)
	if not nCodeEnv then
		return false, "code env not found"
	end
	const nInjectFn, nInjectTrace = CodeEnv.genInjectByExpr(nCodeEnv:getSplitCode(), vNode.path, vNode)
	if not nInjectFn then
		return false, "gen inject fn fail:"..tostring(nInjectTrace)
	end
	const nStrList:List(String) = {}
	self:_injectForeach(nInjectTrace.pos, nBlockNode, nInjectFn, function(vResult)
		if RefineTerm.is(vResult) then
			nStrList[#nStrList + 1] = tostring(vResult:getType())
		else
			nStrList[#nStrList + 1] = tostring(vResult)
		end
	end)
	return table.concat(nStrList, ",")
end

function StackManager:gotoNode(vIsLookup:Boolean, vNode:Union(node.Expr, node.Ident)):Ret(False, String):Ret(Dict(clazz.IBaseNode, True))
	const nCodeEnv = self._runtime:getCodeEnv(vNode.path)
	if not nCodeEnv then
		return false, "goto failed, code env not found"
	end
	if vNode.tag == "Ident" then
		-- 1. lookup Ident_use and Ident_def
		const nIdentNode = vNode
		if vIsLookup then
			if nIdentNode.kind == "def" then
				return false, "goto failed, lookup not work for Ident_def"
			end
			const nDefineNode = nIdentNode.defineIdent
			if nDefineNode then
				return {[nDefineNode]=true}
			-- else, global identity, don't return, continue
			end
		else
			if nIdentNode.kind == "use" and nIdentNode.defineIdent then
				return false, "goto failed, lookdown not work for Ident_use"
			end
			if nIdentNode.kind == "def" then
				return false, "symbol find reference TODO"
			end
		end
	else
		-- 2. lookup expr
		const nExprNode = vNode
		-- self:focusSchedule(nExprNode:getFocusList())
		if not nExprNode:inHintSpace() then
			-- 3. normal lua expr
			const nNodeSet = vIsLookup and self:exprLookup(nExprNode) or self:exprLookdown(nExprNode)
			if not next(nNodeSet) then
				return false, "no lookup or lookdown expr node searched, node="..tostring(nExprNode)..",tag="..(nExprNode.tag)
			end
			return nNodeSet
		else
			-- 4. hint expr
			const nInjectFn, nInjectTrace = CodeEnv.genInjectByExpr(nCodeEnv:getSplitCode(), vNode.path, nExprNode)
			if not nInjectFn then
				return false, "gen inject fn fail"
			end
			const nBlockNode = nExprNode:getBlockOutHint()
			if not nBlockNode then
				return false, "fatal error : expr not in a block"
			end
			-- run inject for hint expr
			return vIsLookup
				and self:injectLookup(nInjectTrace.pos, nBlockNode!, nInjectFn)
				or self:injectLookdown(nInjectTrace.pos, nBlockNode!, nInjectFn)
		end
	end
end

function StackManager:injectLookup(vTracePos:Integer, vBlockNode:node.Block, vFn:InjectFn):Ret(Dict(clazz.IBaseNode, True))
	local nNodeSet:Dict(clazz.IBaseNode, True) = {}
	self:_injectForeach(vTracePos, vBlockNode, vFn, function(vResult)
		if NameReference.is(vResult) then
			const nAssignNode = vResult:getAssignNode()
			if nAssignNode then
				nNodeSet[nAssignNode] = true
			end
		else
			const nRefer = SpaceValue.checkRefer(vResult)
			if nRefer then
				const nAssignNode = nRefer:getAssignNode()
				if nAssignNode then
					nNodeSet[nAssignNode] = true
				end
			end
		end
	end)
	return nNodeSet
end

function StackManager:injectLookdown(vTracePos:Integer, vBlockNode:node.Block, vFn:InjectFn):Ret(Dict(clazz.IBaseNode, True))
	-- TODO not implement
	return {}
end

function StackManager:exprLookup(vNode:clazz.IBaseNode):Ret(Dict(clazz.IBaseNode, True))
	const nNodeSet:Dict(clazz.IBaseNode, true) = {}
	const nCtxList:List(clazz.ApplyContext) = self._nodeToApplyContextList:get(vNode) or {}
	for _, nContext in ipairs(nCtxList) do
		nContext:outLookupNode(nNodeSet)
	end
	return nNodeSet
end

function StackManager:exprLookdown(vNode:clazz.IBaseNode):Ret(Dict(clazz.IBaseNode, True))
	const nNodeSet:Dict(clazz.IBaseNode, true) = {}
	const nCtxList:List(clazz.ApplyContext) = self._nodeToApplyContextList:get(vNode) or {}
	for _, nContext in ipairs(nCtxList) do
		nContext:outLookdownNode(nNodeSet)
	end
	return nNodeSet
end

function StackManager:SealStack(...):Ret(clazz.SealStack)
	return SealStack.new(self._runtime, ...)
end

function StackManager:DeduceStack(...):Ret(clazz.DeduceStack)
	return DeduceStack.new(self._runtime, ...)
end

function StackManager:OpenStack(...):Ret(clazz.OpenStack)
	return OpenStack.new(self._runtime, ...)
end

function StackManager:getRootStack():Ret(clazz.SealStack)
	return self._rootStack
end

return StackManager