
const class = require@<let.clazz> "thlua.class"

const Struct = require "thlua.type.object.Struct"
const TypedObject = require "thlua.type.object.TypedObject"
const RefineTerm = require "thlua.term.RefineTerm"
const VariableCase = require "thlua.term.VariableCase"
const AutoHolder = require "thlua.space.AutoHolder"
const TypedFunction = require "thlua.type.func.TypedFunction"
const AutoTable = require "thlua.type.object.AutoTable"
const AutoFunction = require "thlua.type.func.AutoFunction"

const TermTuple = require "thlua.tuple.TermTuple"
const AutoFlag = require "thlua.code.AutoFlag"
const AutoHolder = require "thlua.space.AutoHolder"
const DotsTail = require "thlua.tuple.DotsTail"
const AutoTail = require "thlua.space.AutoTail"

const ListDict = require "thlua.utils.ListDict"
const OperContext = require "thlua.stack.context.OperContext"
const CodeKindEnum = require "thlua.code.CodeKindEnum"

(@do
	let.node = import("thlua.code.Node").node
	clazz.AutoFnCastDict = clazz.ListDict(clazz.AutoFunction, clazz.UAtomUnion)
end)

const AssignContext = class@<clazz.AssignContext, false>(OperContext)

function.open AssignContext:ctor(...)
	self._finish = false @ Boolean
end

function AssignContext:matchArgsToTypeDots(
	vNode:clazz.IBaseNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer,
	vHintDots:clazz.UMustType
):Ret(clazz.UTermTuple)
	const nTailTermList:List(clazz.UAutoTerm) = {}
	for i=vParNum + 1, #vTermTuple do
		const nTerm = vTermTuple:get(self, i)
		nTailTermList[#nTailTermList + 1] = self:assignTermToType(nTerm, vHintDots)
	end
	const nTermTail = vTermTuple:getTail()
	if AutoTail.is(nTermTail) then
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			nTermTail:sealTailFrom(self, 1, vHintDots)
		else
			nTermTail:sealTailFrom(self, nMore + 1, vHintDots)
		end
	end
	return self:UTermTupleByTail({}, DotsTail.new(self, vHintDots))
end

function AssignContext:matchArgsToAutoDots(
	vNode:clazz.IBaseNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer
):Ret(clazz.UTermTuple)
	const nTailTermList:List(clazz.UAutoTerm) = {}
	for i=vParNum + 1, #vTermTuple do
		nTailTermList[#nTailTermList + 1] = vTermTuple:get(self, i)
	end
	const nTermTail = vTermTuple:getTail()
	if not AutoTail.is(nTermTail) then
		if nTermTail then
			return self:UTermTupleByTail(nTailTermList, DotsTail.new(self, nTermTail:getRepeatType()))
		else
			return self:UTermTupleByTail(nTailTermList)
		end
	else
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			return self:UTermTupleByTail(nTailTermList, nTermTail)
		else
			return self:UTermTupleByTail(nTailTermList, nTermTail:openTailFrom(self, nMore + 1))
		end
	end
end

function AssignContext:matchArgsToNoDots(
	vNode:clazz.IBaseNode,
	vTermTuple:clazz.UTermTuple,
	vParNum:Integer
)
	for i=vParNum + 1, #vTermTuple do
		vTermTuple:get(self, i)
		self:error("parameters is not enough")
	end
	const nTermTail = vTermTuple:getTail()
	if AutoTail.is(nTermTail) then
		const nMore = vParNum - #vTermTuple
		if nMore <= 0 then
			nTermTail:sealTailFrom(self, 1, true)
		else
			nTermTail:sealTailFrom(self, nMore + 1, true)
		end
	end
end

function AssignContext:matchArgsToTypeTuple(
	vNode:clazz.IBaseNode,
	vTermTuple:clazz.UTermTuple,
	vTypeTuple:clazz.UTypeTuple
)
	const nParNum = #vTypeTuple
	for i=1, #vTermTuple do
		const nAutoTerm = vTermTuple:get(self, i)
		const nHintType = vTypeTuple:get(i)
		self:assignTermToType(nAutoTerm, nHintType)
	end
	for i=#vTermTuple + 1, nParNum do
		const nAutoTerm = vTermTuple:get(self, i)
		const nHintType = vTypeTuple:get(i)
		self:assignTermToType(nAutoTerm, nHintType)
	end
	const nDotsType = vTypeTuple:getRepeatType()
	if nDotsType then
		self:matchArgsToTypeDots(vNode, vTermTuple, nParNum, nDotsType)
	else
		self:matchArgsToNoDots(vNode, vTermTuple, nParNum)
	end
end

---------------------------------------------------------
-- 1. castable auto-function always cast success -----
-- 2. castable auto-table may cast failed -----
-- 3. castable auto-function is saved for late cast -----
-- 4. if table cast success, then table's field auto-function is saved for late cast ---------
--------------------------------------------------------
function AssignContext:tryIncludeCast(
	vAutoFnCastDict:clazz.AutoFnCastDict,
	vDstType:clazz.UAtomUnion,
	vSrcType:clazz.UAtomUnion
):Ret(False):Ret(clazz.UAtomUnion, Boolean)
	const nTypeSet = self._typeManager:HashableTypeSet()
	const nDstFnPart = vDstType:partTypedFunction()
	const nDstObjPart = vDstType:partTypedObject()
	local nIncludeSucc = true
	local nCastSucc = true
	local nPutFnPart = false
	local nPutObjPart = false
	vSrcType:foreach(function(vSubType)
		if AutoTable.is(vSubType) and vSubType:isCastable() and not nDstObjPart:isNever() then
			nPutObjPart = true
			local nMatchOne = false
			nDstObjPart:foreach(function(vAtomType)
				if TypedObject.is(vAtomType) then
					const nAutoFnCastDict = vSubType:castMatchOne(self, vAtomType)
					if nAutoFnCastDict then
						vAutoFnCastDict:putAll(nAutoFnCastDict)
						nTypeSet:putAtom(vAtomType)
						nMatchOne = true
					end
				end
			end)
			if not nMatchOne then
				nCastSucc = false
			end
		elseif AutoFunction.is(vSubType) and vSubType:isCastable() and not nDstFnPart:isNever() then
			vAutoFnCastDict:putOne(vSubType, nDstFnPart)
			nPutFnPart = true
		elseif vDstType:includeAtom(vSubType) then
			nTypeSet:putAtom(vSubType)
		else
			nIncludeSucc = false
		end
	end)
	if not nIncludeSucc then
		return false
	else
		if nPutFnPart then
			nTypeSet:putType(nDstFnPart)
		end
		if not nCastSucc and nPutObjPart then
			nTypeSet:putType(nDstObjPart)
		end
		return self._typeManager:unifyAndBuild(nTypeSet), nCastSucc
	end
end

function AssignContext:includeAndCast(vDstType:clazz.UAtomUnion, vSrcType:clazz.UAtomUnion, vWhen:OrNil(String)):Ret(OrFalse(clazz.UAtomUnion))
	const nFnLateDict = self:newAutoFnCastDict()
	const nIncludeType, nCastSucc = self:tryIncludeCast(nFnLateDict, vDstType, vSrcType)
	if nIncludeType then
		self:runLateCast(nFnLateDict)
	end
	if not nIncludeType or not nCastSucc then
		const nLogPrefix = nIncludeType and "type cast fail " or "type not match "
		const nLogSuffix = vWhen and "when "..tostring(vWhen) or ""
		if vSrcType:includeAtom(self._typeManager.type.Truth) or vWhen == CodeKindEnum.CastKind_COVAR then
			self:warn(nLogPrefix..nLogSuffix)
		else
			self:error(nLogPrefix..nLogSuffix)
		end
	end
	return nIncludeType
end

function AssignContext:assignTermToType(vAutoTerm:clazz.UAutoTerm, vDstType:clazz.UMustType):Ret(clazz.RefineTerm)
	const nSrcType = vAutoTerm:getType()
	const nDstType = vDstType:checkAtomUnion()
	if not nSrcType then
		vAutoTerm:assignDeduceTypeAsync(self, self._node, function()
			return nDstType
		end)
	else
		self:includeAndCast(nDstType, nSrcType)
	end
	-- TODO, maybe add some case here?
	return self:RefineTerm(nDstType)
end

function AssignContext:finish()
	assert(not self._finish, "context finish can only called once")
	self._finish = true
end

function AssignContext:newAutoFnCastDict()
	return ListDict@<clazz.AutoFunction, clazz.UAtomUnion>()
end

function AssignContext:runLateCast(vDict:clazz.AutoFnCastDict)
	vDict:forKList(function(vAutoFn, vTypeFnList)
		for _, nTypeFn in ipairs(vTypeFnList) do
			if TypedFunction.is(nTypeFn) then
				vAutoFn:checkWhenCast(self, nTypeFn)
			end
		end
	end)
end

function AssignContext:unfoldTermTuple(vTermTuple:clazz.FixedTermTuple, vFunc:Fn(clazz.UAtomUnion, clazz.UTypeTuple, OrNil(clazz.VariableCase)))
	const nFirstTerm = vTermTuple:get(self, 1)
	if #vTermTuple == 0 then
		vFunc(nFirstTerm:getType(), vTermTuple:checkTypeTuple(), nil)
		return
	end
	const nTail = vTermTuple:getTail()
	const nRepeatType = nTail and nTail:getRepeatType()
	nFirstTerm:foreach(function(vAtomType, vCase)
		const nTypeList:List(clazz.UMustType) = {vAtomType}
		for i=2, #vTermTuple do
			local nTerm = vTermTuple:get(self, i)
			const nType = vCase[nTerm:attachImmutVariable()]
			if not nType then
				nTypeList[i] = nTerm:getType()
			else
				nTypeList[i] = assert(nTerm:getType():safeIntersect(nType), "unexcepted intersect when return")
			end
		end
		const nTypeTuple = self._typeManager:TypeTuple(self._node, nTypeList)
		const nTypeTuple = nRepeatType and nTypeTuple:withDots(nRepeatType) or nTypeTuple
		vFunc(vAtomType, nTypeTuple, vCase)
	end)
end

return AssignContext
