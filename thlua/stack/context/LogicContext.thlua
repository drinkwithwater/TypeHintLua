
const class = require@<let.clazz> "thlua.class"
const OpenFunction = require "thlua.type.func.OpenFunction"
const OperContext = require "thlua.stack.context.OperContext"
const VariableCase = require "thlua.term.VariableCase"
const Exception = require "thlua.Exception"

const LogicContext = class@<clazz.LogicContext, false>(OperContext)

function.open LogicContext:ctor(
	...
)
end

function LogicContext:logicCombineTerm(vLeft:clazz.RefineTerm, vRight:clazz.RefineTerm, vRightAndCase:clazz.VariableCase):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vLeft:foreach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase}
	end)
	vRight:foreach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase & vRightAndCase}
	end)
	return self:mergeToRefineTerm(nTypeCaseList)
end

function LogicContext:logicNotTerm(vTerm:clazz.RefineTerm):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	const nBuiltinType = self._typeManager.type
	vTerm:trueEach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = { nBuiltinType.False, vCase }
	end)
	vTerm:falseEach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = { nBuiltinType.True, vCase }
	end)
	return self:mergeToRefineTerm(nTypeCaseList)
end

function LogicContext:logicTrueTerm(vTerm:clazz.RefineTerm):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vTerm:trueEach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase}
	end)
	return self:mergeToRefineTerm(nTypeCaseList)
end

function LogicContext:logicFalseTerm(vTerm:clazz.RefineTerm):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vTerm:falseEach(function(vType, vCase)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase}
	end)
	return self:mergeToRefineTerm(nTypeCaseList)
end

return LogicContext
