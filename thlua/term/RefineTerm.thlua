
local SymbolShot = require "thlua.term.SymbolShot"
local TermCase = require "thlua.term.TermCase"
local Nil = require "thlua.type.Nil"

(@let.class = import("thlua.type.TypeClass").class)

local RefineTerm = {}
RefineTerm.__index=RefineTerm
RefineTerm.__bor=function(vLeft:class.RefineTerm, vRight:class.RefineTerm)
	local nTypeCaseList:List(class.TypeCasePair) = {}
	vLeft:foreach(function(vType, vCase)
			nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase}
	end)
	vRight:foreach(function(vType, vCase)
			nTypeCaseList[#nTypeCaseList + 1] = {vType, vCase}
	end)
	return vLeft._manager:mergeToRefineTerm(nTypeCaseList)
end
RefineTerm.__tostring=function(self:class.RefineTerm)::Ret(String)
	local l:List(String) = {}
	for nType, nTermCase in pairs(self._typeToCase) do
		l[#l + 1] = tostring(nType) .."=>"..tostring(nTermCase)
	end
	return "RefineTerm("..table.concat(l, ",")..")"
end

function RefineTerm.new(
	vManager:class.TypeManager,
	vType:class.UAtomUnion,
	vTypeToCase:Option(Dict(class.IAtomType, class.TermCase)))::RetClass(class.RefineTerm)
	local self = setmetatable({::Self()
		_manager=vManager,
		_typeToCase=vTypeToCase or {}@Dict(class.IAtomType, class.TermCase),
		_type=vType,
		_symbolShot=false @ Union(False, class.SymbolShot),
		const=false,
	}, RefineTerm)
	vType:foreach(function(vType)
		if not self._typeToCase[vType] then
			self._typeToCase[vType] = TermCase.new()
		end
	end)
	return self
end

function RefineTerm:foreach(func:Fn(class.IAtomType, class.TermCase))
	for nType, nTermCase in pairs(self._typeToCase) do
		func(nType, nTermCase)
	end
end

function RefineTerm.is(v)::isguard(class.RefineTerm)
	return getmetatable(v) == RefineTerm
end

function RefineTerm:caseIsType(vGuardType:class.LuaTable)::Ret(Option(class.TermCase))
	local nCase = nil
	self._type:foreach(function(vType)
		if vType:containAll(vGuardType) then
			nCase = self._typeToCase[vType]
		end
	end)
	if not nCase then
		return nil
	else
		local nReCase = TermCase.new() & nCase
		local nSymbolShot = self._symbolShot
		if nSymbolShot then
			nReCase:put_and(nSymbolShot, vGuardType)
		end
		return nReCase
	end
end

function RefineTerm:caseIsNotType(vGuardType:class.LuaTable)::Ret(Option(class.TermCase))
	local reCase = nil
	self._type:foreach(function(vType)
		local nCase = self._typeToCase[vType]
		if vGuardType ~= vType then
			if not reCase then
				reCase = nCase
			else
				reCase = reCase | nCase
			end
		end
	end)
	return reCase
end

function RefineTerm:caseTrue()
	local reCase = nil
	self._type:trueType():foreach(function(vType)
		local nCase = self._typeToCase[vType]
		if not reCase then
			reCase = nCase
		else
			reCase = reCase | nCase
		end
	end)
	return reCase
end

function RefineTerm:notnilTerm()::Ret(class.RefineTerm)
	local nNotnilType = self._type:notnilType()
	local nTypeCaseList:List(class.TypeCasePair) = {}
	nNotnilType:foreach(function(vType)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, self._typeToCase[vType]!}
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:caseNotnil()
	local reCase = nil
	self._type:foreach(function(vType)
		if not Nil.is(vType) then
			local nCase = self._typeToCase[vType]
			if not reCase then
				reCase = nCase
			else
				reCase = reCase | nCase
			end
		end
	end)
	return reCase
end

-- return TermCase | nil
function RefineTerm:caseFalse()
	local reCase = nil
	self._type:falseType():foreach(function(vType)
		local nCase = self._typeToCase[vType]
		if not reCase then
			reCase = nCase
		else
			reCase = reCase | nCase
		end
	end)
	return reCase
end

function RefineTerm:falseTerm()::Ret(class.RefineTerm)
	local nFalseType = self._type:falseType()
	local nTypeCaseList:List(class.TypeCasePair) = {}
	nFalseType:foreach(function(vType)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, self._typeToCase[vType]!}
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:trueTerm()::Ret(class.RefineTerm)
	local nTrueType = self._type:trueType()
	local nTypeCaseList:List(class.TypeCasePair) = {}
	nTrueType:foreach(function(vType)
		nTypeCaseList[#nTypeCaseList + 1] = {vType, self._typeToCase[vType]!}
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:notTerm()::Ret(class.RefineTerm)
	local nTypeCaseList:List(class.TypeCasePair) = {}
	self._type:falseType():foreach(function(vType)
	nTypeCaseList[#nTypeCaseList + 1] = {
		self._manager.type.True,
		self._typeToCase[vType]!
	}
	end)
	self._type:trueType():foreach(function(vType)
	nTypeCaseList[#nTypeCaseList + 1] = {
		self._manager.type.False,
		self._typeToCase[vType]!
	}
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:getType()::Ret(class.UAtomUnion)
	return self._type
end

function RefineTerm:and_case(vCase1)
	for nType, nCase2 in pairs(self._typeToCase) do
		self._typeToCase[nType] = vCase1 & nCase2
	end
end

function RefineTerm:add_self(vSymbolShot:class.SymbolShot)
	self._symbolShot = vSymbolShot
	for nType, nTermCase in pairs(self._typeToCase) do
		local nNewTermCase = TermCase.new() & nTermCase
		local nSymbolShot = self._symbolShot
		if nSymbolShot then
			nNewTermCase:put_and(nSymbolShot, nType)
		end
		self._typeToCase[nType] = nNewTermCase
	end
end

function RefineTerm:filter(vType:class.UAllType)::Ret(class.RefineTerm)
	local nTypeCaseList:List(class.TypeCasePair) = {}
	vType:foreach(function(vSubType)
		local nContainType = self._type:containAtom(vSubType)
		if nContainType then
			local nCase = self._typeToCase[nContainType]!
			nTypeCaseList[#nTypeCaseList + 1] = {vSubType, nCase}
		else
			nTypeCaseList[#nTypeCaseList + 1] = {vSubType, TermCase.new()}
		end
	end)
	return self._manager:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:attachSymbolShot()::Ret(class.SymbolShot)
	local nSymbolShot = self._symbolShot
	if not nSymbolShot then
		nSymbolShot = SymbolShot.new(self._type)
		self._symbolShot = nSymbolShot
	end
	return nSymbolShot
end

return RefineTerm
