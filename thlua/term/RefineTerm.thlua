
const ImmutVariable = require "thlua.term.ImmutVariable"
const VariableCase = require "thlua.term.VariableCase"
const Nil = require "thlua.type.Nil"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const RefineTerm = {}
RefineTerm.__index=RefineTerm
RefineTerm.__tostring=function(self:clazz.RefineTerm):Ret(String)
	const l:List(String) = {}
	for nType, nVariableCase in pairs(self._typeToCase) do
		l[#l + 1] = tostring(nType) .."=>"..tostring(nVariableCase)
	end
	return "RefineTerm("..table.concat(l, ",")..")"
end

function:class(clazz.RefineTerm) RefineTerm.new(
	vNode:clazz.IAstNode,
	vType:clazz.UAtomUnion,
	vTypeToCase:OrNil(Dict(clazz.IAtomType, clazz.VariableCase)))
	const self = setmetatable({.class
		_node=vNode,
		_typeToCase=vTypeToCase or {}@Dict(clazz.IAtomType, clazz.VariableCase),
		_type=vType,
		_symbolVariable=false @ Union(False, clazz.ImmutVariable),
	}, RefineTerm)
	vType:foreach(function(vType)
		if not self._typeToCase[vType] then
			self._typeToCase[vType] = VariableCase.new()
		end
	end)
	return self
end

function RefineTerm:checkRefineTerm(vContext:clazz.OperContext):Ret(clazz.RefineTerm)
	return self
end

function RefineTerm:foreach(func:Fn(clazz.IAtomType, clazz.VariableCase))
	for nType, nVariableCase in pairs(self._typeToCase) do
		func(nType, nVariableCase)
	end
end

function.open RefineTerm.is(v):isguard(clazz.RefineTerm)
	return getmetatable(v) == RefineTerm
end

function RefineTerm:caseIsType(vGuardType:clazz.ClassTable):Ret(OrNil(clazz.VariableCase))
	local nCase:OrNil(clazz.VariableCase) = nil
	self._type:foreach(function(vType)
		if vType:includeAll(vGuardType) then
			nCase = self._typeToCase[vType]
		end
	end)
	if not nCase then
		return nil
	else
		const nReCase = VariableCase.new() & nCase
		const nImmutVariable = self._symbolVariable
		if nImmutVariable then
			nReCase:put_and(nImmutVariable, vGuardType)
		end
		return nReCase
	end
end

function RefineTerm:caseIsNotType(vGuardType:clazz.ClassTable):Ret(OrNil(clazz.VariableCase))
	local reCase:OrNil(clazz.VariableCase) = nil
	self._type:foreach(function(vType)
		const nCase = self._typeToCase[vType]!
		if vGuardType ~= vType then
			if not reCase then
				reCase = nCase
			else
				reCase = reCase | nCase
			end
		end
	end)
	return reCase
end

function RefineTerm:caseTrue():Ret(OrNil(clazz.VariableCase))
	local reCase:OrNil(clazz.VariableCase) = nil
	self._type:trueType():foreach(function(vType)
		const nCase = self._typeToCase[vType]!
		if not reCase then
			reCase = nCase
		else
			reCase = reCase | nCase
		end
	end)
	return reCase
end

function RefineTerm:caseNotnil():Ret(OrNil(clazz.VariableCase))
	local reCase:OrNil(clazz.VariableCase) = nil
	self._type:foreach(function(vType)
		if not Nil.is(vType) then
			const nCase = self._typeToCase[vType]!
			if not reCase then
				reCase = nCase
			else
				reCase = reCase | nCase
			end
		end
	end)
	return reCase
end

-- return VariableCase | nil
function RefineTerm:caseFalse():Ret(OrNil(clazz.VariableCase))
	local reCase:OrNil(clazz.VariableCase) = nil
	self._type:falseType():foreach(function(vType)
		const nCase = self._typeToCase[vType]!
		if not reCase then
			reCase = nCase
		else
			reCase = reCase | nCase
		end
	end)
	return reCase
end

function RefineTerm:falseEach(vFunc:Fn(clazz.IAtomType, clazz.VariableCase))
	const nTypeToCase = self._typeToCase
	self._type:falseType():foreach(function(vType)
		vFunc(vType, nTypeToCase[vType]!)
	end)
end

function RefineTerm:trueEach(vFunc:Fn(clazz.IAtomType, clazz.VariableCase))
	const nTypeToCase = self._typeToCase
	self._type:trueType():foreach(function(vType)
		vFunc(vType, nTypeToCase[vType]!)
	end)
end

function RefineTerm:getRefineTerm():Ret(clazz.RefineTerm)
	return self
end

function RefineTerm:getType():Ret(clazz.UAtomUnion)
	return self._type
end

function RefineTerm:initVariable(vImmutVariable:clazz.ImmutVariable)
	assert(not self._symbolVariable, "term can only set symbolshot once")
	self._symbolVariable = vImmutVariable
	for nType, nVariableCase in pairs(self._typeToCase) do
		const nNewVariableCase = VariableCase.new() & nVariableCase
		const nImmutVariable = self._symbolVariable
		if nImmutVariable then
			nNewVariableCase:put_and(nImmutVariable, nType)
		end
		self._typeToCase[nType] = nNewVariableCase
	end
end

function RefineTerm:includeAtomCase(vType:clazz.IAtomType):Ret(clazz.IAtomType, clazz.VariableCase):Ret(False, Nil)
	const nIncludeType = self._type:includeAtom(vType)
	if nIncludeType then
		return nIncludeType, self._typeToCase[nIncludeType]!
	else
		return false, nil
	end
end

function RefineTerm:filter(vContext:clazz.OperContext, vType:clazz.UAtomUnion):Ret(clazz.RefineTerm)
	const nTypeCaseList:List(clazz.TypeCasePair) = {}
	vType:foreach(function(vSubType)
		const nIncludeType = self._type:includeAtom(vSubType)
		if nIncludeType then
			const nCase = self._typeToCase[nIncludeType]!
			nTypeCaseList[#nTypeCaseList + 1] = {vSubType, nCase}
		else
			nTypeCaseList[#nTypeCaseList + 1] = {vSubType, VariableCase.new()}
		end
	end)
	return vContext:mergeToRefineTerm(nTypeCaseList)
end

function RefineTerm:attachImmutVariable():Ret(clazz.ImmutVariable)
	local nImmutVariable = self._symbolVariable
	if not nImmutVariable then
		nImmutVariable = ImmutVariable.new(self)
		self:initVariable(nImmutVariable)
	end
	return nImmutVariable
end

return RefineTerm
