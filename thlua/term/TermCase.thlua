

const TermCase = {}

(@let.class = import("thlua.type.TypeClass").class)

TermCase.__index = TermCase
TermCase.__bor=function(vLeftTermCase:class.TermCase, vRightTermCase:class.TermCase):Ret(class.TermCase)
	const nNewTermCase = TermCase.new()
	for nImmutShot, nLeftType in pairs(vLeftTermCase) do
		const nRightType = vRightTermCase[nImmutShot]
		if nRightType then
			nNewTermCase[nImmutShot] = nLeftType | nRightType
		end
	end
	return nNewTermCase
end
TermCase.__band=function(vLeftTermCase:class.TermCase, vRightTermCase:class.TermCase):Ret(class.TermCase)
	const nNewTermCase = TermCase.new()
	for nImmutShot, nLeftType in pairs(vLeftTermCase) do
		const nRightType = vRightTermCase[nImmutShot]
		if nRightType then
			nNewTermCase[nImmutShot] = nLeftType & nRightType
		else
			nNewTermCase[nImmutShot] = nLeftType
		end
	end
	for nImmutShot, nRightType in pairs(vRightTermCase) do
		if not vLeftTermCase[nImmutShot] then
			nNewTermCase[nImmutShot] = nRightType
		end
	end
	return nNewTermCase
end
TermCase.__tostring=function(self:class.TermCase):Ret(String)
	const l:List(String)={"TermCase("}
	for nImmutShot, vType in pairs(self) do
		l[#l + 1] = tostring(nImmutShot).."->"..tostring(vType)
	end
	l[#l + 1] = ")"
	return table.concat(l,"|")
end

function.class TermCase.new():RetClass(class.TermCase)
	return setmetatable({.class:Init({
		[class.ImmutShot]=class.UAtomUnion
	})
	}, TermCase)
end

function TermCase:put_and(vImmutShot:class.ImmutShot, vType:class.UAtomUnion)
	const nCurType = self[vImmutShot]
	if not nCurType then
		self[vImmutShot] = vType
	else
		self[vImmutShot] = nCurType & vType
	end
end

function TermCase:empty():Ret(Boolean)
	if next(self) then
		return true
	else
		return false
	end
end

function.open TermCase.is(t):RetIs(class.TermCase)
	return getmetatable(t) == TermCase
end

return TermCase
