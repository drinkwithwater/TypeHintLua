
const AutoTupleTail = require "thlua.tuple.AutoTupleTail"
const Reference = require "thlua.refer.Reference"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const AutoTuple = {}
AutoTuple.__index = AutoTuple

function:class(clazz.AutoTuple) AutoTuple.new(vManager:clazz.TypeManager, vArgList:List(clazz.UAllType), vDots:OrFalse(clazz.UAllType, True))
	const self = setmetatable({.class
		_manager=vManager,
		_argList={}@List(clazz.UAllType),
		_dots=false@OrFalse(clazz.UAllType, clazz.AutoTupleTail),
	}, AutoTuple)
	if vDots == true then
		self._dots = AutoTupleTail.new(vManager)
	else
		self._dots = vDots
	end
	return self
end

function.open AutoTuple.is(t):isguard(clazz.AutoTuple)
	return getmetatable(t) == AutoTuple
end

return AutoTuple
