
(@let.clazz = import("thlua.type.TypeClass").clazz)

const DotsTail = {}
DotsTail.__index=DotsTail

function:class(clazz.DotsTail) DotsTail.new(vContext:clazz.OperContext, vRepeatType:clazz.UAllType)
	const self = setmetatable({.class
		_context=vContext,
		_manager=vContext:getTypeManager(),
		_termList={}@List(clazz.RefineTerm),
		_repeatType=vRepeatType,
	}, DotsTail)
	return self
end

function DotsTail:getRepeatType():Ret(clazz.UAllType)
	return self._repeatType
end

function DotsTail:getMore(vContext:clazz.OperContext, vMore:Integer):Ret(clazz.RefineTerm)
	const nTermList = self._termList
	const nTerm = nTermList[vMore]
	if nTerm then
		return nTerm
	else
		for i=#nTermList + 1, vMore do
			nTermList[i] = vContext:RefineTerm(self._repeatType:mustType():checkAtomUnion():withnilType())
		end
		return nTermList[vMore]!
	end
end

function.open DotsTail.is(t):isguard(clazz.DotsTail)
	return getmetatable(t) == DotsTail
end

return DotsTail
