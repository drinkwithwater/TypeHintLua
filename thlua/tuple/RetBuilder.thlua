
const RetTuples = require "thlua.tuple.RetTuples"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const RetBuilder = class@<clazz.RetBuilder, false>()

function.open RetBuilder:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode)
	self._manager = vManager
	self._tupleList = {} @ List(clazz.UTypeTuple)
	self._node=vNode
end

function RetBuilder:RetDots(vFirst:clazz.UAllType, ...:clazz.UAllType)
	-- TODO check ... is type
	const nTypeList:List(clazz.UAllType) = {vFirst, ...}
	const nLen = #nTypeList
	assert(nLen > 0, "RetDots must take at least 1 value")
	const nDotsType = nTypeList[nLen]!
	nTypeList[#nTypeList] = nil
	const nTypeTuple = self._manager:TypeTuple(self._node, table.unpack(nTypeList)):Dots(nDotsType)
	const nTupleList = self._tupleList
	nTupleList[#nTupleList + 1] = nTypeTuple
end

function RetBuilder:Ret(...:clazz.UAllType)
	const nTypeTuple = self._manager:TypeTuple(self._node, ...)
	const nTupleList = self._tupleList
	nTupleList[#nTupleList + 1] = nTypeTuple
end

function RetBuilder:build():Ret(clazz.RetTuples)
	const nTupleList = self._tupleList
	if #nTupleList == 0 then
		return self._manager:VoidRetTuples(self._node)
	else
		return RetTuples.new(self._manager, self._node, nTupleList)
	end
end

return RetBuilder
