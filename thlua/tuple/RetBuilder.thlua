
const RetTuples = require "thlua.tuple.RetTuples"
const TupleBuilder = require "thlua.tuple.TupleBuilder"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const RetBuilder = class@<clazz.RetBuilder, false>()

function.open RetBuilder:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode)
	self._manager = vManager
	self._dirtyProcessor = vManager:getDirtyProcessor()
	self._tupleBuilderList = {} @ List(clazz.TupleBuilder)
	self._errType = false@OrFalse(clazz.UAllType)
	self._node=vNode
end

function RetBuilder:chainRetDots(vNode:clazz.IBaseNode, ...:Any)
	const nTupleList = self._tupleBuilderList
	nTupleList[#nTupleList + 1] = TupleBuilder.new(self._manager, vNode, true, ...)
end

function RetBuilder:chainRet(vNode:clazz.IBaseNode, ...:Any)
	const nTupleList = self._tupleBuilderList
	nTupleList[#nTupleList + 1] = TupleBuilder.new(self._manager, vNode, false, ...)
end

function RetBuilder:chainErr(vNode:clazz.IBaseNode, vErrType:Any)
	self._errType = self._dirtyProcessor:easyToAllType(vNode, vErrType)
end

function RetBuilder:isEmpty()
	return #self._tupleBuilderList == 0 and not self._errType
end

function RetBuilder:build():Ret(clazz.RetTuples)
	const nBuilderList = self._tupleBuilderList
	const nErrType = self._errType
	const nErrMustType = nErrType and self._dirtyProcessor:easyToMustType(self._node, nErrType)
	if #nBuilderList == 0 then
		return self._manager:VoidRetTuples(self._node, nErrMustType or nil)
	else
		const nTupleList = {} @ List(clazz.UTypeTuple)
		for i,builder in ipairs(nBuilderList) do
			nTupleList[i] = builder:build()
		end
		return RetTuples.new(self._manager, self._node, nTupleList, nErrMustType or false)
	end
end

return RetBuilder
