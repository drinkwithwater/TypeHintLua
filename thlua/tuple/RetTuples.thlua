
const RetTuples = {}
RetTuples.__index=RetTuples
RetTuples.__tostring=function(self)
	return self:detailString({}, false)
end

(@let.clazz = import("thlua.type.TypeClass").clazz)

function:class(clazz.RetTuples) RetTuples.new(vManager:clazz.TypeManager,
	vFirstType:clazz.UAllType, vFirstToTuple:Dict(clazz.UAllType, clazz.UTypeTuple))
	local nTupleCount = 0
	for k,v in pairs(vFirstToTuple) do
		nTupleCount = nTupleCount + 1
	end
	const self = setmetatable({.class
		_manager=vManager,
		_firstType=vFirstType,
		_firstToTuple=vFirstToTuple,
		_tupleCount=nTupleCount,
	}, RetTuples)
	return self
end

function RetTuples:getTupleCount():Ret(Number)
	return self._tupleCount
end

function RetTuples:detailString(vCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	local re:List(String) = {}
	for _, t in pairs(self._firstToTuple) do
		re[#re+1] = t:detailString(vCache, vVerbose)
	end
	return "("..table.concat(re, "|")..")"
end

function RetTuples:assumeIncludeTuples(vAssumeSet:OrNil(Dict(Integer, Boolean)), vRetTuples:clazz.RetTuples):Ret(Boolean)
	for _, t in pairs(vRetTuples._firstToTuple) do
		if not self:assumeIncludeTuple(vAssumeSet, t) then
			return false
		end
	end
	return true
end

function RetTuples:containTuples(vRetTuples:clazz.RetTuples):Ret(Boolean)
	return self:assumeIncludeTuples(nil, vRetTuples)
end

function RetTuples:assumeIncludeTuple(vAssumeSet:OrNil(Dict(Integer, Boolean)), vRightTypeTuple:clazz.UTypeTuple):Ret(Boolean)
	for _, t in pairs(self._firstToTuple) do
		if t:assumeIncludeTuple(vAssumeSet, vRightTypeTuple) then
			return true
		end
	end
	return false
end

function RetTuples:containTuple(vRightTypeTuple:clazz.TypeTuple):Ret(Boolean)
	return self:assumeIncludeTuple(nil, vRightTypeTuple)
end

function RetTuples:foreachWithFirst(vFunc:Fn(clazz.UTypeTuple, clazz.UAllType):Ret())
	for nFirst, nTuple in pairs(self._firstToTuple) do
		vFunc(nTuple, nFirst)
	end
end

function RetTuples:getFirstType():Ret(clazz.UAllType)
	return self._firstType
end

function.open RetTuples.is(t):isguard(clazz.RetTuples)
	return getmetatable(t) == RetTuples
end

return RetTuples
