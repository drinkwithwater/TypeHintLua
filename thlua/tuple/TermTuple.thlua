
const DotsTail = require "thlua.tuple.DotsTail"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const TermTuple = {}

TermTuple.__index=TermTuple
TermTuple.__tostring=function(self:clazz.TermTuple):Ret(String)
	const re:List(String) = {}
	for i=1, #self do
		re[i] = tostring(self._list[i])
	end
	const nTail = self._tail
	if nTail then
		re[#re + 1] = tostring(nTail) .."*"
	end
	return "TermTuple("..table.concat(re, ",")..")"
end

TermTuple.__len=function(self:clazz.TermTuple)
	return #self._list
end

function:class(clazz.TermTuple) TermTuple.new(vContext:clazz.Context, vTermList:List(clazz.RefineTerm), vTail:OrFalse(clazz.UAllType), vTypeTuple:OrFalse(clazz.UTypeTuple))
	const self = setmetatable({.class
		_context=vContext,
		_manager=vContext:getTypeManager(),
		_list=vTermList,
		_tail=vTail and DotsTail.new(vContext, vTail) or false,
		_typeTuple=vTypeTuple,
	}, TermTuple)
	return self
end

function TermTuple:select(i:Integer):Ret(clazz.TermTuple)
	const nList:List(clazz.RefineTerm) = {}
	for n=i,#self._list do
		nList[#nList + 1] = self._list[n]
	end
	return self._context:TermTuple(nList, self:getTail())
end

function TermTuple:rawget(i:Number):Ret(OrNil(clazz.RefineTerm))
	return self._list[i]
end

function TermTuple:get(vContext:clazz.Context, i:Number):Ret(clazz.RefineTerm)
	const more = i - #self
	if more <= 0 then
		return self._list[i]!
	else
		const nTail = self._tail
		if nTail then
			return nTail:get(vContext, more)
		else
			return self._manager:RefineTerm(self._manager.type.Nil)
		end
	end
end

function TermTuple:getContext():Ret(clazz.Context)
	return self._context
end

function TermTuple:getDots(vContext:clazz.Context, vStart:Integer):Ret(clazz.TermTuple)
	return self:checkTypeTuple():select(vStart):makeTermTuple(vContext)
end

function TermTuple:checkTypeTuple():Ret(clazz.UTypeTuple)
	local nTypeTuple = self._typeTuple
	if not nTypeTuple then
		const nList:List(clazz.UAllType) = {}
		for i,v in ipairs(self._list) do
			nList[i] = v:getType()
		end
		nTypeTuple = self._manager:TypeTuple(self._context:getNode(), table.unpack(nList))
		const nTail = self._tail
		if nTail then
			nTypeTuple = nTypeTuple:Dots(nTail:getRepeatType())
		end
		self._typeTuple = nTypeTuple
		return nTypeTuple
	else
		return nTypeTuple
	end
end

function TermTuple:getTail():Ret(Union(clazz.UAllType, False))
	const nTail = self._tail
	if nTail then
		return nTail:getRepeatType()
	else
		return false
	end
end

function.open TermTuple.is(t):isguard(clazz.TermTuple)
	return getmetatable(t) == TermTuple
end

return TermTuple
