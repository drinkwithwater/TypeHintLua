
const class = require "thlua.class"

(@do
    let.clazz = import($class).clazz
    clazz.USpaceTuple = Interface({
        [Integer]=clazz.USpaceAny,
        n=Integer,
    }, {__len=Integer})
end)

const TupleBuilder = class@<clazz.TupleBuilder, false>()

function.open TupleBuilder:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, ...:clazz.USpaceAny)
	self._manager = vManager
	self._node = vNode
    self._num = select("#", ...)
    self._list = {...} @ List(clazz.USpaceAny)
    self._dots = nil @ clazz.USpaceAny
end

function TupleBuilder:setRetDots()
    const num = self._num
    assert(num > 0, self._node:toExc("RetDots must take at least 1 value"))
    self._num = num - 1
    const l = self._list
    self._dots = l[num]
    l[num] = nil
end

function TupleBuilder:chainDots(vDots:clazz.USpaceAny)
    const nNode = self._node
    assert(not self._dots, nNode:toExc("Dots has been setted"))
    assert(vDots ~= nil, nNode:toExc("Dots can't take nil"))
    self._dots = vDots
end

function TupleBuilder:buildTuple():Ret(clazz.UTypeTuple)
    const nNode = self._node
    const nSpaceTuple = self._list
    const nTypeList:List(clazz.UMustType) = {}
    for i=1, self._num do
        nTypeList[i] = self._manager:easyToMustType(nNode, nSpaceTuple[i])
    end
    const nTypeTuple = self._manager:TypeTuple(nNode, nTypeList)
    const nDotsType = self._dots
    if nDotsType == nil then
        return nTypeTuple
    else
        const nDotsMustType = self._manager:easyToMustType(nNode, nDotsType)
        return nTypeTuple:withDots(nDotsMustType)
    end
end

function TupleBuilder:getArgNum():Ret(Integer)
    return self._num
end

function TupleBuilder:getArgList():Ret(List(clazz.USpaceAny))
    return self._list
end

function TupleBuilder:buildPolyArgs():Ret(List(clazz.UMustType))
    const nNode = self._node
    const nSpaceTuple = self._list
    const nTypeList:List(clazz.UMustType) = {}
    for i=1, self._num do
        nTypeList[i] = self._manager:easyToMustType(nNode, nSpaceTuple[i])
    end
    return nTypeList
end

return TupleBuilder
