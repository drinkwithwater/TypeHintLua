
const Reference = require "thlua.refer.Reference"
const BaseTypeTuple = require "thlua.tuple.BaseTypeTuple"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"
const Nil = require "thlua.type.basic.Nil"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const TypeTuple = class@<clazz.TypeTuple, false>(BaseTypeTuple)

function.open TypeTuple:ctor(...)
	self._repeatType=false
end

function TypeTuple:getRepeatType():Ret(False)
	return false
end

function TypeTuple:withDots(vType:clazz.UAllType):Ret(clazz.TypeTupleDots)
	const nWithNil = self._manager:buildUnion(self._node, vType, self._manager.type.Nil)
	return TypeTupleDots.new(self._manager, self._node, self._list, vType, nWithNil)
end

function TypeTuple:leftAppend(vType:clazz.UAllType):Ret(clazz.TypeTuple)
	return TypeTuple.new(self._manager, self._node, {vType, table.unpack(self._list)})
end

function TypeTuple:get(i:Integer):Ret(clazz.UAllType)
	return self._list[i] or self._manager.type.Nil
end

function TypeTuple:select(i:Integer):Ret(clazz.TypeTuple)
	return self._manager:TypeTuple(self._node, {table.unpack(self._list, i)})
end

return TypeTuple
