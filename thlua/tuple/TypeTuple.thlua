
const Reference = require "thlua.type.Reference"
const TupleClass = require "thlua.tuple.TupleClass"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"
const Nil = require "thlua.type.Nil"
const TypeTuple = TupleClass()

(@let.class = import("thlua.type.TypeClass").class)

function TypeTuple.new(vManager:class.TypeManager, vList:List(class.UAllType))::RetClass(class.TypeTuple)
	const self = setmetatable({::Self()
		_manager=vManager,
		_structSign=(false @ Union(String, False)),
		_list=vList,
		_repeatType=false,
	}, TypeTuple)
	return self
end

function TypeTuple:getRepeatType()::Ret(False)
	return false
end

function TypeTuple:Dots(vType:class.UAllType)::Ret(class.TypeTupleDots)
	return TypeTupleDots.new(self._manager, self._list, vType)
end

function TypeTuple:replaceFirst(vType:class.UAtomUnion)::Ret(class.TypeTuple)
	const nTuple = self._manager:Tuple(vType, table.unpack(self._list, 2))
	return nTuple
end

function TypeTuple:get(i:Number)::Ret(class.UAllType)
	return self._list[i] or self._manager.type.Nil
end

function TypeTuple:castOrIn(vContext:class.Context, vDstTypeTuple:class.UTypeTuple)::Ret(Boolean)
	if #self < #vDstTypeTuple then
		for i=#self + 1, #vDstTypeTuple do
			if not vDstTypeTuple:get(i):isNilable() then
				return false
			end
		end
	elseif #vDstTypeTuple < #self then
		for i=#vDstTypeTuple + 1, #self do
			const nSelfi = self:get(i):checkAtomUnion()
			const nDstRepeatType = vDstTypeTuple:getRepeatType()
			if not Nil.is(nSelfi) and nDstRepeatType and not nDstRepeatType:containAll(nSelfi) then
				return false
			end
		end
	end
	for i, nDstType in ipairs(vDstTypeTuple._list) do
		const nSrcType = self:get(i)
		if not vContext:castLuaType(nSrcType, nDstType) then
			if not nDstType:containAll(nSrcType) then
				return false
			end
		end
	end
	return true
end

function TypeTuple:select(i)::Ret(class.TypeTuple)
	return self._manager:Tuple(table.unpack(self._list, i))
end

function TypeTuple.is(t)::isguard(class.TypeTuple)
	return getmetatable(t) == TypeTuple
end

return TypeTuple
