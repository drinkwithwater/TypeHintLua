
const BaseTypeTuple = require "thlua.tuple.BaseTypeTuple"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const TypeTupleDots = class@<clazz.TypeTupleDots, false>(BaseTypeTuple)

function.open TypeTupleDots:ctor(_,_,_,
	vRepeatType:clazz.UAllType,
	vRepeatTypeWithNil:clazz.UAllType
)
	self._repeatType=vRepeatType
	self._repeatTypeWithNil=vRepeatTypeWithNil
end

function TypeTupleDots:getRepeatType():Ret(clazz.UMustType)
	return self._manager:getDirtyProcessor():easyToMustType(self._node, self._repeatType)
end

function TypeTupleDots:leftAppend(vType:clazz.UAllType):Ret(clazz.TypeTupleDots)
	return TypeTupleDots.new(self._manager, self._node, {vType, table.unpack(self._list)} @ List(clazz.UAllType), self._repeatType, self._repeatTypeWithNil)
end

function TypeTupleDots:get(i:Integer):Ret(clazz.UAllType)
	if i <= #self then
		return self._list[i]!
	else
		return self._repeatTypeWithNil
	end
end

function TypeTupleDots:select(i:Integer):Ret(clazz.TypeTupleDots)
	const nList: List(clazz.UAllType) = {table.unpack(self._list, i)}
	return TypeTupleDots.new(self._manager, self._node, nList, self._repeatType, self._repeatTypeWithNil)
end

return TypeTupleDots
