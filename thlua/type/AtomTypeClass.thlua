

local TypeClass = require "thlua.type.TypeClass"
local Exception = require "thlua.Exception"
local OPER_ENUM = require "thlua.type.OPER_ENUM"

local function AtomTypeClass()::open()
	local t = TypeClass()
	--- meta method --------------
	function t:meta_set?(vContext, vKeyType, vValueType)
		vContext:error(Exception.new(tostring(self).." can't take set index"))
	end
	function t:meta_set_override?(vContext, vKeyType, vValueType)
		vContext:warn(Exception.new(tostring(self).." can't take set_override"))
		self:meta_set(vContext, vKeyType, vValueType)
	end
	function t:meta_get?(vContext, vKeyType)
		vContext:error(Exception.new(tostring(self).." can't take get index"))
		return self._manager.type.Never
	end
	function t:meta_call?(vContext, vTypeTuple)
		vContext:error(Exception.new(tostring(self).." can't take call"))
		return self._manager:VoidRetTuples()
	end
	function t:meta_bop_func?(vContext, vOper)
		if OPER_ENUM.mathematic[vOper] then
			return false, self._manager.builtin.bop.mathematic
		elseif OPER_ENUM.bitwise[vOper] then
			return false, self._manager.builtin.bop.bitwise
		elseif OPER_ENUM.comparison[vOper] then
			return false, self._manager.builtin.bop.comparison
		elseif vOper == ".." then
			return false, self._manager.builtin.bop.concat
		else
			vContext:error("invalid bop:"..tostring(vOper))
			return false, nil
		end
	end
	function t:meta_len?(vContext)
		vContext:error(Exception.new(tostring(self).." can't take len oper"))
		return self._manager.type.Number
	end
	function t:meta_uop_some?(vContext, vOper)
		vContext:error(Exception.new(tostring(self).." can't take uop :"..vOper))
		return self._manager.type.Number
	end
	--- native method --------------
	function t:native_rawget?(vContext, vKeyType, vSilent)
		vContext:error(Exception.new(tostring(self).." rawget not implement"))
		return self._manager.type.Nil
	end
	function t:native_rawset?(vContext, vKeyType, vValueType, vOverride)
		vContext:error(Exception.new(tostring(self).." rawset not implement"))
	end
	function t:native_type?()
		return self._manager.type.String
	end
	function t:native_getmetatable?()
		error(Exception.new(tostring(self).." getmetatable not implement"))
	end
	function t:native_setmetatable?()
		error(Exception.new(tostring(self).." setmetatable not implement"))
	end
	return t
end

return AtomTypeClass
