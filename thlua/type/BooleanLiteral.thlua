
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const AtomTypeClass = require "thlua.type.AtomTypeClass"

const BooleanLiteral = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function:class(class.BooleanLiteral) BooleanLiteral.new(vManager:class.TypeManager, vLiteral:Boolean):impl(class.BooleanLiteral, class.IAtomType)
	const self = setmetatable({.class
		_manager=vManager,
		literal=vLiteral,
		id=vManager:genTypeId(),
		bits=vLiteral and TYPE_BITS.TRUE or TYPE_BITS.FALSE,
	}, BooleanLiteral)
	return self
end

function BooleanLiteral:detailString(v, vVerbose)
	if vVerbose then
		return "Literal("..tostring(self.literal)..")"
	else
		return self.literal and "True" or "False"
	end
end

function BooleanLiteral:isSingleton()
	return true
end

function BooleanLiteral:assumeIntersectAtom(vAssumeSet, vType)
	if self == vType then
		return self
	elseif vType == self._manager.type.Truth then
		return self.literal and self
	else
		return false
	end
end

function BooleanLiteral:assumeContainAtom(vAssumeSet, vType)
	if vType == self then
		return self
	else
		return false
	end
end

function BooleanLiteral:native_type()
	return self._manager:Literal("boolean")
end

function BooleanLiteral:trueType()
	if self.literal then
		return self
	else
		return self._manager.type.Never
	end
end

function BooleanLiteral:falseType()
	if self.literal then
		return self._manager.type.Never
	else
		return self
	end
end

function.open BooleanLiteral.is(v):isguard(class.BooleanLiteral)
	return getmetatable(v) == BooleanLiteral
end

return BooleanLiteral
