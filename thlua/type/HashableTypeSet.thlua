
const class = require@<let.clazz> "thlua.class"
const FrozenTypeSet = require "thlua.type.FrozenTypeSet"

const HashableTypeSet = {}
HashableTypeSet.__index = HashableTypeSet

function:class(clazz.HashableTypeSet) HashableTypeSet.new(vManager:clazz.TypeManager)
    const self = setmetatable({.class
        _typeManager = vManager,
        _typeDict = {} @ Dict(Integer, clazz.IAtomType),
        _typeResult = false @ OrFalse(clazz.UAtomUnion),
        _num = 0 @ Integer,
        _addValue = 0 @ Integer,
        _xorValue = 0 @ Integer,
        _hash = 0 @ Integer,
    }, HashableTypeSet)
    return self
end

--[[
function:class(clazz.AsyncTypeSet) HashableTypeSet.newAsync(vManager:clazz.TypeManager, vTypeCom:clazz.AsyncTypeCom)
    const self = setmetatable({.class
        _typeManager = vManager,
        _asyncTypeCom = vTypeCom,
        _typeDict = {} @ Dict(Integer, clazz.IAtomType),
        _typeResult = false @ OrFalse(clazz.UAtomUnion),
        _num = 0 @ Integer,
        _addValue = 0 @ Integer,
        _xorValue = 0 @ Integer,
        _hash = 0 @ Integer,
        _next = false @ OrFalse(clazz.HashableTypeSet),
    }, HashableTypeSet)
    return self
end
]]

function HashableTypeSet:putSet(vTypeSet:clazz.FrozenTypeSet)
    for k,v in pairs(vTypeSet._typeDict) do
        self:putAtom(v)
    end
end

function HashableTypeSet:initFromUnion(vUnionType:clazz.IUnionType)
    vUnionType:foreach(function(vAtomType)
        self:putAtom(vAtomType)
    end)
    self._typeResult = vUnionType
end

function HashableTypeSet:initFromAtom(vAtomType:clazz.IAtomType)
    self:putAtom(vAtomType)
    self._typeResult = vAtomType
end

function HashableTypeSet:putType(vType:clazz.UAtomUnion)
    vType:foreach(function(vAtomType)
        self:putAtom(vAtomType)
    end)
end

function HashableTypeSet:putAtom(vAtomType:clazz.IAtomType):Ret(Boolean)
    const nId = vAtomType.id
    const nTypeDict = self._typeDict
    if not nTypeDict[nId] then
        nTypeDict[nId] = vAtomType
        self._addValue = self._addValue + nId
        self._xorValue = self._xorValue ^ nId
        self._hash = (self._xorValue << 32) + self._addValue
        self._num = self._num + 1
        return true
    else
        return false
    end
end

function HashableTypeSet:getDict()
    return self._typeDict
end

function HashableTypeSet:getNum()
    return self._num
end

function HashableTypeSet.hashType(vType:clazz.UAtomUnion):Ret(Integer)
    local addValue = 0
    local xorValue = 0
    vType:foreach(function(vAtomType)
        const nId = vAtomType.id
        addValue = addValue + nId
        xorValue = xorValue ^ nId
    end)
    return (xorValue << 32) + addValue
end

function HashableTypeSet:getHash()
    return self._hash
end

function HashableTypeSet:getResultType():Ret(OrFalse(clazz.UAtomUnion))
    return self._typeResult
end

function HashableTypeSet:frozen()
    return FrozenTypeSet.new(self._typeManager, self)
end

return HashableTypeSet