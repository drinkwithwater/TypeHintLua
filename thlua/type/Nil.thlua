
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"

local Nil = AtomTypeClass()

(@var.class = import("thlua.type.TypeClass").class)

function Nil.new(vManager:class.TypeManager)::NewTable(class.Nil, class.IAtomType)
	local self = setmetatable({::New()
		_manager=vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.NIL,
	}, Nil)
	return self
end

function Nil:detailString(v:Truth)::Ret(String)
	return "Nil"
end

function Nil:native_getmetatable()
	return self._manager.type.Nil
end

function Nil:native_type()
	return self._manager:Literal(self.name)
end

function Nil:isSingleton()
	return true
end

function Nil:_intersectOneNotRefer(vType)
    if self == vType then
        return self
    else
        return false
    end
end

function Nil:_containOneNotRefer(vType)
	if self == vType then
		return self
	else
		return false
	end
end

function Nil:trueType()
    return self._manager.type.Never
end

function Nil:falseType()
    return self
end

function Nil:notnilType()
    return self._manager.type.Never
end

return Nil
