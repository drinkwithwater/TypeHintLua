
local NumberLiteral = require "thlua.type.NumberLiteral"
local OPER_ENUM = require "thlua.type.OPER_ENUM"
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"

local Number = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function Number.new(vManager:class.TypeManager)::RetClass(class.Number, class.IAtomType)
	local self = setmetatable({::Self()
		_manager = vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.NUMBER,
	}, Number)
	return self
end

function Number:detailString(v)
	return "Number"
end

function Number:native_getmetatable()
end

function Number:native_tostring()
	return self._manager.type.String
end

function Number:native_type()
	return self._manager:Literal("number")
end

function Number:_intersectOneNotRefer(vType)
    if NumberLiteral.is(vType) then
        return vType
    elseif (vType.bits & TYPE_BITS.NUMBER) == TYPE_BITS.NUMBER then
        return self
    else
        return false
    end
end

function Number:_containOneNotRefer(vType)
	if NumberLiteral.is(vType) then
		return self
	elseif self == vType then
		return self
	else
		return false
	end
end

function Number:isSingleton()
	return false
end

return Number
