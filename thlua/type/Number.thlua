
const NumberLiteral = require "thlua.type.NumberLiteral"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const AtomTypeClass = require "thlua.type.AtomTypeClass"

const Number = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function:class(class.Number) Number.new(vManager:class.TypeManager):impl(class.Number, class.IAtomType)
	const self = setmetatable({.class
		_manager = vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.NUMBER,
	}, Number)
	return self
end

function Number:detailString(v, vVerbose)
	return "Number"
end

function Number:meta_uop_some(vContext, vOper)
	return self
end

function Number:native_getmetatable(vContext)
	return self._manager.type.Nil
end

function Number:native_type()
	return self._manager:Literal("number")
end

function Number:assumeIntersectAtom(vAssumeSet, vType)
	if NumberLiteral.is(vType) then
		return vType
	elseif Number.is(vType) then
		return self
	else
		return false
	end
end

function Number:assumeContainAtom(vAssumetSet, vType)
	if NumberLiteral.is(vType) then
		return self
	elseif self == vType then
		return self
	else
		return false
	end
end

function Number:isSingleton()
	return false
end

function.open Number.is(v):isguard(class.Number)
	return getmetatable(v) == Number
end

return Number
