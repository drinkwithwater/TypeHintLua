
const TypeClass = require "thlua.type.TypeClass"
const TypeCollection = require "thlua.manager.TypeCollection"
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const LuaTable = require "thlua.object.LuaTable"

local Reference = TypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function Reference.new(vManager:class.TypeManager, vKeyOrFalse:OrFalse(String))::RetClass(class.Reference, class.IType)
	local self = setmetatable({::Self()
		_manager=vManager,
		_key=vKeyOrFalse,
		_assignNode=false@OrFalse(class.IAstNode),
		_referNodes={}@List(class.IAstNode),
		id=vManager:genTypeId(),
		bits=false,
		_waitRefer=false@OrFalse(class.Reference),
		_listType=false@OrFalse(List(class.IAtomType)),
		_resultType=false@OrFalse(class.UAtomUnion),
		_thread=false@OrFalse(Truth), -- TODO coroutine type
		_waitListThreads={} @ List(Truth),
		_waitResultThreads={} @ List(Truth),
	}, Reference)
	return self
end

function Reference:detailString(v, vVerbose)
	return "Reference("..(self._key or tostring(self._assignNode))..")"
end

function Reference:setRawAsync(vNode:class.IAstNode,
	vGetList:Fn():Ret(Union(List(class.IAtomType), class.Reference)),
	vLaterCall:OrNil(Fn(class.UAtomUnion)))::nocheck()
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	const coRunFn = function()
		-- step 1. get list
		const nListOrRefer = vGetList()
		if Reference.is(nListOrRefer) then
			self._listType = nListOrRefer:getListAwait()
		else
			self._listType = nListOrRefer
		end
		local l = self._waitListThreads
		for i=#l,1,-1 do
			assert(coroutine.resume(l[i]))
		end
		-- step 2. merge to result
		if Reference.is(nListOrRefer) then
			self._resultType = nListOrRefer:getTypeAwait()
		else
			if #nListOrRefer == 0 then
				self._resultType = self._manager.type.Never
			elseif #nListOrRefer == 1 then
				self._resultType = nListOrRefer[1]
			else
				local nCollection = self._manager:TypeCollection()
				for _, v in ipairs(nListOrRefer) do
					nCollection:put(v)
				end
				self._resultType = nCollection:mergeToAtomUnion()
			end
		end
		const nResultType = self._resultType
		if not nResultType:isUnion() then
			const nKey = self._key
			if nKey then
				nResultType:addNamedReference(self, nKey)
			end
		end
		local l = self._waitResultThreads
		for i=#l,1,-1 do
			assert(coroutine.resume(l[i]))
		end
		-- step 3. later call
		if vLaterCall then
			vLaterCall(nResultType)
		end
	end
	const co = coroutine.create(function()
		const ok, nExc = pcall(coRunFn)
		if not ok then
			if Exception.is(nExc) then
				nExc:fixNode(vNode)
				error(nExc)
			else
				error(Exception.new(tostring(nExc), vNode))
			end
		end
	end)
	self._manager.coToRefer[co] = self
	self._thread = co
	assert(coroutine.resume(co))
end

function Reference:recurGetWaitByCond(vCondFn:Fn(class.Reference):Ret(Boolean))::Ret(OrFalse(class.Reference))
	local nCurRefer:OrFalse(class.Reference) = self
	while nCurRefer do
		if vCondFn(nCurRefer) then
			return nCurRefer
		end
		nCurRefer = nCurRefer._waitRefer
	end
	return false
end

function Reference:getTypeAwait()::Ret(class.UAtomUnion)
	local nReturn = self._resultType
	if not nReturn then
		local co, _ = coroutine.running()
		local nWaitingRefer = self._manager.coToRefer[co]
		if not nWaitingRefer then
			const nNamedRefer = self:recurGetWaitByCond(function(vRefer)
				return vRefer._key and true
			end) or self
			error(tostring(nNamedRefer)..",can only call getTypeAwait in Reference's coroutine:")
		else
			if self:recurGetWaitByCond(function(vRefer) return vRefer == nWaitingRefer end) then
				error(Exception.new("recursive build type"))
			end
		end
		nWaitingRefer._waitRefer = self
		local l = self._waitResultThreads
		l[#l+1] = coroutine.running()
		coroutine.yield()
		nWaitingRefer._waitRefer = false
	end
	return (assert(self._resultType, "result type not setted"))
end

function Reference:getListAwait()::Ret(List(class.IAtomType))
	local nReturn = self._listType
	if not nReturn then
		local co, _ = coroutine.running()
		local nWaitingRefer = self._manager.coToRefer[co]
		assert(nWaitingRefer, "can only call getListAwait in Reference's coroutine:"..tostring(self))
		nWaitingRefer._waitRefer = self
		local nCurRefer = self._waitRefer
		while nCurRefer do
			if nCurRefer == self then
				error(Exception.new("recursive build type"))
			else
				nCurRefer = nCurRefer._waitRefer
			end
		end
		local l = self._waitListThreads
		l[#l+1] = coroutine.running()
		coroutine.yield()
		nWaitingRefer._waitRefer = false
	end
	return (assert(self._listType, "type list not setted"))
end

function Reference:getAssignNode()::Ret(OrFalse(class.IAstNode))
	return self._assignNode
end

function Reference:getReferNode()::Ret(List(class.IAstNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:class.IAstNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:getResultType()::Ret(OrFalse(class.UAtomUnion))
	return self._resultType
end

function Reference:checkAtomUnion()::Ret(class.UAtomUnion)
	local nReferType = self._resultType
	if not nReferType then
		error(Exception.new("reference "..tostring(self).." has not been setted"))
	end
	return nReferType
end

function Reference:isNilable()
	return self:checkAtomUnion():isNilable()
end

function Reference:isUnion()::Ret(Boolean)
	return self:checkAtomUnion():isUnion()
end

function Reference:isReference()::Ret(True)
	return true
end

function Reference:foreachAwait(vFunc)
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nListType = self:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:foreach(vFunc)
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		error("TODO"..debug.traceback())
		local nListType = self:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:intersectAtom(vType:class.IAtomType)::Ret(OrFalse(class.UAtomUnion))
	return self:checkAtomUnion():intersectAtom(vType)
end

function Reference:containAtom(vRightType)
	local nType = self:getTypeAwait()
	return nType:containAtom(vRightType)
end

function Reference:assumeContainAll(vAssumeSet, vRightType)::Ret(Boolean)
	local nResultType = self._resultType
	if nResultType then
		return nResultType:assumeContainAll(vAssumeSet, vRightType)
	end
	local nTypeList = self:getListAwait()
	local nAllContain:Boolean = true
	vRightType:foreachAwait(function(vAtomType)
		if not nAllContain then
			return
		end
		local nCurContain:Boolean = false
		for _, nType in ipairs(nTypeList) do
			if nType:assumeContainAtom(vAssumeSet, vAtomType) then
				nCurContain = true
				break
			end
		end
		if not nCurContain then
			nAllContain = false
		end
	end)
	return nAllContain
end

function Reference:objectPartType()
	return self:checkAtomUnion():objectPartType()
end

function Reference:fnPartType()
	return self:checkAtomUnion():fnPartType()
end

function Reference:trueType()
	return self:checkAtomUnion():trueType()
end

function Reference:falseType()
	return self:checkAtomUnion():falseType()
end

function Reference.is(v)::isguard(class.Reference)
	return getmetatable(v) == Reference
end

return Reference
