
const TypeClass = require "thlua.type.TypeClass"
const TypeCollection = require "thlua.manager.TypeCollection"
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const LuaTable = require "thlua.object.LuaTable"

local Reference = TypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function Reference.new(vManager:class.TypeManager, vKeyOrFalse:OrFalse(String))::RetClass(class.Reference, class.IType)
	local self = setmetatable({::Self()
		_manager=vManager,
		_key=vKeyOrFalse,
		_assignNode=false@OrFalse(class.IAstNode),
		_referNodes={}@List(class.IAstNode),
		id=vManager:genTypeId(),
		bits=false,
		_mayRecursive=false@Boolean,
		_selfCo=nil@Thread,
		_typeList=false@OrFalse(List(class.IAtomType)),
		_resultType=false@OrFalse(class.UAtomUnion),
		_waitListCoToSid={} @ Dict(Thread, Integer),
		_waitResultCoToSid={} @ Dict(Thread, Integer),
	}, Reference)
	self._selfCo = coroutine.create(function(vRunFn:Fn())
		const ok, nExc = pcall(vRunFn)
		if not ok then
			if Exception.is(nExc) then
				nExc:fixNode(self:getAssignNode())
				error(nExc)
			else
				error(Exception.new(tostring(nExc), self:getAssignNode()))
			end
		end
	end)
	return self
end

function Reference:getSelfCo()::Ret(Thread)
	return self._selfCo
end

function Reference:detailString(v, vVerbose)
	return "Reference("..(self._key or tostring(self._assignNode))..")"
end

function Reference:setRawAsync(vNode:class.IAstNode,
	vGetList:Fn():Ret(Union(List(class.IAtomType), class.Reference)),
	vLaterCall:OrNil(Fn(class.UAtomUnion)))::nocheck()
	assert(not self._assignNode, Exception.new("refer has been setted:"..tostring(self), vNode))
	self._assignNode = vNode
	const coRunFn = function()
		-- step 1. get list
		const nListOrRefer = vGetList()
		if Reference.is(nListOrRefer) then
			self._typeList = nListOrRefer:getListAwait()
			self._mayRecursive = nListOrRefer:mayRecursive()
		else
			self._typeList = nListOrRefer
			for k, v in ipairs(nListOrRefer) do
				if v:mayRecursive() then
					self._mayRecursive = true
				end
			end
		end
		for co, sid in pairs(self._waitListCoToSid) do
			self._manager:coWakeup(co, sid)
		end
		-- step 2. merge to result
		if Reference.is(nListOrRefer) then
			self._resultType = nListOrRefer:getTypeAwait()
		else
			if #nListOrRefer == 0 then
				self._resultType = self._manager.type.Never
			elseif #nListOrRefer == 1 then
				self._resultType = nListOrRefer[1]
			else
				local nCollection = self._manager:TypeCollection()
				for _, v in ipairs(nListOrRefer) do
					nCollection:put(v)
				end
				self._resultType = nCollection:mergeToAtomUnion()
			end
		end
		const nResultType = self._resultType
		if not nResultType:isUnion() then
			const nKey = self._key
			if nKey then
				nResultType:addNamedReference(self, nKey)
			end
		end
		for co, sid in pairs(self._waitResultCoToSid) do
			self._manager:coWakeup(co, sid)
		end
		-- step 3. later call
		if vLaterCall then
			vLaterCall(nResultType)
		end
	end
	self._manager:coStart(self._selfCo, coRunFn)
end

function Reference:getTypeAwait()::Ret(class.UAtomUnion)
	local nReturn = self._resultType
	if not nReturn then
		const nSessionId = self._manager:genSessionId()
		const nCurCo = coroutine.running()
		self._waitResultCoToSid[nCurCo] = nSessionId
		self._manager:coWait(nCurCo, nSessionId, self._selfCo)
	end
	return (assert(self._resultType, "result type not setted"))
end

function Reference:getListAwait()::Ret(List(class.IAtomType))
	local nReturn = self._typeList
	if not nReturn then
		const nSessionId = self._manager:genSessionId()
		const nCurCo = coroutine.running()
		self._waitListCoToSid[nCurCo] = nSessionId
		self._manager:coWait(nCurCo, nSessionId, self._selfCo)
	end
	return (assert(self._typeList, "type list not setted"))
end

function Reference:getAssignNode()::Ret(OrFalse(class.IAstNode))
	return self._assignNode
end

function Reference:getReferNode()::Ret(List(class.IAstNode))
	return self._referNodes
end

function Reference:pushReferNode(vNode:class.IAstNode)
	const nNodes = self._referNodes
	nNodes[#nNodes + 1] = vNode
end

function Reference:getResultType()::Ret(OrFalse(class.UAtomUnion))
	return self._resultType
end

function Reference:checkAtomUnion()::Ret(class.UAtomUnion)
	return self:getTypeAwait()
end

function Reference:isNilable()
	return self:checkAtomUnion():isNilable()
end

function Reference:isUnion()::Ret(Boolean)
	return self:checkAtomUnion():isUnion()
end

function Reference:isReference()::Ret(True)
	return true
end

function Reference:foreachAwait(vFunc)
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		local nListType = self:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:foreach(vFunc)
	const nResultType = self._resultType
	if nResultType then
		nResultType:foreach(vFunc)
	else
		error("TODO"..debug.traceback())
		local nListType = self:getListAwait()
		for _, v in ipairs(nListType) do
			vFunc(v)
		end
	end
end

function Reference:intersectAtom(vType:class.IAtomType)::Ret(OrFalse(class.UAtomUnion))
	const nType = self:getTypeAwait()
	return nType:intersectAtom(vType)
end

function Reference:containAtom(vRightType)
	const nType = self:getTypeAwait()
	return nType:containAtom(vRightType)
end

function Reference:assumeIntersectAny(vAssumeSet, vRight)
	const nResultType = self:getResultType()
	if nResultType then
		return nResultType:assumeIntersectAny(vAssumeSet, vRight)
	else
		local nAnyIntersect:Boolean = false
		const nTypeList = self:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if nAnyIntersect then
				return
			end
			local nCurIntersect:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeIntersectAtom(vAssumeSet, vAtomType) then
					nCurIntersect = true
					break
				end
			end
			if nCurIntersect then
				nAnyIntersect = true
			end
		end)
		return nAnyIntersect
	end
end

function Reference:assumeContainAll(vAssumeSet, vRight)
	const nResultType = self:getResultType()
	if nResultType then
		return nResultType:assumeContainAll(vAssumeSet, vRight)
	else
		local nAllContain:Boolean = true
		const nTypeList = self:getListAwait()
		vRight:foreachAwait(function(vAtomType)
			if not nAllContain then
				return
			end
			local nCurContain:Boolean = false
			for _, nType in ipairs(nTypeList) do
				if nType:assumeContainAtom(vAssumeSet, vAtomType) then
					nCurContain = true
					break
				end
			end
			if not nCurContain then
				nAllContain = false
			end
		end)
		return nAllContain
	end
end

function Reference:mayRecursive()
	self:getListAwait()
	return self._mayRecursive
end

function Reference:objectPartType()
	return self:checkAtomUnion():objectPartType()
end

function Reference:fnPartType()
	return self:checkAtomUnion():fnPartType()
end

function Reference:trueType()
	return self:checkAtomUnion():trueType()
end

function Reference:falseType()
	return self:checkAtomUnion():falseType()
end

function Reference.is(v)::isguard(class.Reference)
	return getmetatable(v) == Reference
end

return Reference
