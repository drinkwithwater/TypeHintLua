
local OPER_ENUM = require "thlua.type.OPER_ENUM"
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"

local StringLiteral = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function StringLiteral.new(vManager:class.TypeManager, vLiteral:String)::RetClass(class.StringLiteral, class.IAtomType)
	local self = setmetatable({::Self()
		_manager=vManager,
		literal=vLiteral,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.STRING,
	}, StringLiteral)
	return self
end

function StringLiteral:getLiteral()::Ret(String)
	return self.literal
end

function StringLiteral:detailString(v, vVerbose)::Ret(String)
	if vVerbose then
		return "Literal('"..self.literal.."')"
	else
		return "'"..self.literal.."'"
	end
end

function StringLiteral:_intersectOneNotRefer(vType)::Ret(Union(False, class.StringLiteral))
	if vType:containAtom(self) then
		return self
	else
		return false
	end
end

function StringLiteral:atomContainAssume(vAssumeSet, vType)::Ret(Union(False, class.StringLiteral))
	if vType == self then
		return self
	else
		return false
	end
end

function StringLiteral:isSingleton()::Ret(True)
	return true
end

function StringLiteral:meta_len(vContext)
	return self._manager.type.Number
end

function StringLiteral.is(v)::isguard(class.StringLiteral)
	return getmetatable(v) == StringLiteral
end

return StringLiteral
