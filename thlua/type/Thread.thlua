
local TYPE_BITS = require "thlua.type.TYPE_BITS"
const BaseAtomType = require "thlua.type.BaseAtomType"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const Thread = class@<clazz.Thread, false>(BaseAtomType)

function.open Thread:ctor(vManager:clazz.TypeManager)
	self.bits = TYPE_BITS.THREAD
end

function Thread:detailString(vToStringCache, vVerbose)
	return "Thread"
end

function Thread:native_getmetatable(vContext)
	return self._manager.type.Nil
end

function Thread:native_type()
	return self._manager:Literal("thread")
end

function Thread:isSingleton()
	return false
end

function Thread:assumeIntersectAtom(vAssumeSet, vType)
	if vType:assumeIncludeAtom(nil, self) then
		return self
	else
		return false
	end
end

function Thread:assumeIncludeAtom(vAssumeSet, vType)
	if Thread.is(vType) then
		return self
	else
		return false
	end
end

return Thread
