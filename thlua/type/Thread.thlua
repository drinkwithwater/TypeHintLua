
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"

local Thread = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function:class(class.Thread) Thread.new(vManager:class.TypeManager):impl(class.Thread, class.IAtomType)
	local self = setmetatable({.class
		_manager=vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.THREAD,
	}, Thread)
	return self
end

function Thread:detailString(vToStringCache, vVerbose)
	return "Thread"
end

function Thread:native_getmetatable?(vContext)
	return self._manager.type.Nil
end

function Thread:native_type()
	return self._manager:Literal("thread")
end

function Thread:isSingleton()
	return false
end

function Thread:assumeIntersectAtom(vAssumeSet, vType)
	if vType:assumeContainAtom(nil, self) then
		return self
	else
		return false
	end
end

function Thread:assumeContainAtom(vAssumeSet, vType)
	if Thread.is(vType) then
		return self
	else
		return false
	end
end

function.open Thread.is(v):isguard(class.Thread)
	return getmetatable(v) == Thread
end

return Thread
