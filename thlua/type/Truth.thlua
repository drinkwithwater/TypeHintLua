
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local AtomTypeClass = require "thlua.type.AtomTypeClass"

local Truth = AtomTypeClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class Truth.new(vManager:class.TypeManager):RetClass(class.Truth, class.IAtomType)
	local self = setmetatable({.class
		_manager=vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.TRUTH,
	}, Truth)
	return self
end

function Truth:detailString(vToStringCache, vVerbose)
	return "Truth"
end

function Truth:native_setmetatable(vContext, vMetaTableType)
end

function Truth:native_getmetatable(vContext)
	return self
end

function Truth:native_type()
	-- TODO use TypeSet
	return self._manager.type.String
end

function Truth:native_rawget(vContext, vKeyType)
	return self
end

function Truth:native_rawset(vContext, vKeyType, vValueTypeSet, vOverride)
end

function Truth:meta_get(vContext, vKeyType)
	return self
end

function Truth:meta_set(vContext, vKeyType, vValueTypeSet)
end

function Truth:meta_set_override(vContext, vKeyType, vValueTypeSet)
end

function Truth:meta_call(vContext, vTypeTuple)
	return self._manager:VoidRetTuples()
end

function Truth:meta_pairs(vContext)
	return false
end

function Truth:meta_ipairs(vContext)
	return false
end

function Truth:native_next(vContext, vInitType)
	return self._manager.type.Never, {}
end

function Truth:isSingleton()
	return false
end

function Truth:isNative():Ret(False)
	return false
end

function Truth:assumeIntersectAtom(vAssumeSet, vType)
	local nManagerType = self._manager.type
	if vType == nManagerType.Nil then
		return false
	elseif vType == nManagerType.False then
		return false
	else
		return vType
	end
end

function Truth:assumeContainAtom(vAssumeSet, vType)
	local nManagerType = self._manager.type
	if vType == nManagerType.Nil then
		return false
	elseif vType == nManagerType.False then
		return false
	else
		return self
	end
end

function Truth.is(v):isguard(class.Truth)
	return getmetatable(v) == Truth
end

return Truth
