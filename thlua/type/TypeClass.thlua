
(@do

let.node = import("thlua.code.Node").node

let.clazz = namespace()

clazz.MetaIndexField = Struct {
	keyType=clazz.UAtomUnion,
	valueDict=Dict(clazz.IAtomType, clazz.UAtomUnion),
	fnType=OrFalse(clazz.TypeFunction, clazz.LuaFunction),
}

clazz.TLongHintInfo = Template(function(vHandler)
	return Struct {
		attrSet = Dict(String, Literal(1)),
		caller = Fn(vHandler),
	}
end)

clazz.RelationEnum = Union("<", ">", "=", "~", "&")

clazz.IAstNode = node.IAstNode

clazz.UIndexType = Union(clazz.LuaFunction, clazz.LuaTable, clazz.TypeFunction)

clazz.LspCompletion = Dict(String, True)

clazz.UAtomUnion = Union(clazz.IAtomType, clazz.IUnionType)
clazz.UAllType = Union(clazz.IAtomType, clazz.IUnionType, clazz.Reference)
clazz.USymbol = Union(clazz.ImmutShot, clazz.LocalSymbol)

clazz.UObjectAtomUnion = Union(clazz.MetaObject, clazz.LuaTable, clazz.ObjectUnion, clazz.Never)
clazz.UFnAtomUnion = Union(clazz.PolyFunction, clazz.TypeFunction, clazz.LuaFunction, clazz.OpenFunction, clazz.FuncUnion, clazz.AnyFunction, clazz.Never)
clazz.TypeCasePair = Struct {clazz.UAtomUnion, clazz.TermCase}
clazz.UMemberAllType = Union(clazz.UAllType, clazz.MemberFunction)
clazz.MemberDict = Dict(clazz.IAtomType, clazz.UMemberAllType)

clazz.IType = Interface ({
	_manager=clazz.TypeManager,
	id=Number,
	foreach=member:Fn(Fn(clazz.IAtomType)),
	foreachAwait=member:Fn(Fn(clazz.IAtomType)),

	isNilable=member:Fn():Ret(Boolean),
	isNever=member:Fn():Ret(Boolean),

	unionSign=member:Fn():Ret(String),

	detailString=member:Fn(Dict(Truth, String), Boolean):Ret(String),

	intersectSome=member:Fn(clazz.UAllType):Ret(Boolean),
	safeIntersect=member:Fn(clazz.UAllType):Ret(OrFalse(clazz.UAtomUnion)),
	assumeIntersectSome=member:Fn(OrNil(Dict(Integer, Boolean)), clazz.UAllType):Ret(Boolean),
	intersectAtom=member:Fn(clazz.IAtomType):Ret(Union(Boolean, clazz.UAtomUnion)),

	containAll=member:Fn(clazz.UAllType):Ret(Boolean),
	assumeContainAll=member:Fn(OrNil(Dict(Integer, Boolean)), clazz.UAllType):Ret(Boolean),
	containAtom=member:Fn(clazz.IAtomType):Ret(OrFalse(clazz.IAtomType)),

	mayRecursive=member:Fn():Ret(Boolean),

	notnilType=member:Fn():Ret(clazz.UAtomUnion),
	trueType=member:Fn():Ret(clazz.UAtomUnion),
	falseType=member:Fn():Ret(clazz.UAtomUnion),
	objectPartType=member:Fn():Ret(clazz.UObjectAtomUnion),
	fnPartType=member:Fn():Ret(clazz.UFnAtomUnion),

	same=member:Fn(clazz.UAllType):Ret(Boolean),
}, {
	__bor=Fn(clazz.UAllType, clazz.UAllType):Ret(clazz.UAtomUnion),
	__band=Fn(clazz.UAllType, clazz.UAllType):Ret(clazz.UAtomUnion),
})

clazz.IAssumeRelationBase = Interface {
	assumeContainAtom=member:Fn(OrNil(Dict(Integer, Boolean)), clazz.IAtomType):Ret(OrFalse(clazz.IAtomType)),
	assumeIntersectAtom=member:Fn(OrNil(Dict(Integer, Boolean)), clazz.IAtomType):Ret(Union(Boolean, clazz.UAtomUnion)),
}

clazz.IMetaNative = Interface {
	native_rawget=member:Fn(clazz.Context, clazz.IAtomType):Ret(clazz.UAtomUnion),
	native_rawset=member:Fn(clazz.Context, clazz.IAtomType, clazz.UAtomUnion, Union(Nil, Boolean)),
	native_next=member:Fn(clazz.Context, clazz.UAtomUnion):Ret(clazz.UAtomUnion, Dict(clazz.IAtomType, clazz.UAtomUnion)),

	meta_get=member:Fn(clazz.Context, clazz.IAtomType):Ret(clazz.UAtomUnion),
	meta_set=member:Fn(clazz.Context, clazz.IAtomType, clazz.UAtomUnion),
}

clazz.IAtomType = Intersect(clazz.IType, clazz.IAssumeRelationBase, clazz.IMetaNative, Interface {
	bits=Number,
	isReference=member:Fn():Ret(False),
	linkNamedReference=member:Fn(clazz.TypeReferCom),
	checkAtomUnion=member:Fn():Ret(clazz.IAtomType),

	isSingleton=member:Fn():Ret(Boolean),
	isUnion=member:Fn():Ret(False),
	isStrNumLiteral=member:Fn():Ret(Boolean),

	checkBaseObjectType=member:Fn():Ret(OrFalse(clazz.MetaObject)),

	castPoly=member:Fn(clazz.Context, List(clazz.UAllType)):Ret(OrFalse(clazz.TypeFunction)),

	meta_call=member:Fn(clazz.Context, clazz.UTypeTuple):Ret(clazz.RetTuples),
	meta_invoke=member:Fn(clazz.Context, clazz.IAtomType, List(clazz.UAllType), clazz.UTypeTuple):Ret(clazz.RetTuples),

	meta_pairs=member:Fn(clazz.Context):Ret(OrFalse(clazz.TypeTuple)),
	meta_ipairs=member:Fn(clazz.Context):Ret(OrFalse(clazz.TypeTuple)),
	meta_len=member:Fn(clazz.Context):Ret(clazz.UAtomUnion),
	meta_uop_some=member:Fn(clazz.Context, String):Ret(clazz.UAtomUnion),
	meta_bop_func=member:Fn(clazz.Context, String):Ret(True, clazz.IAtomType):Ret(False, Union(clazz.IAtomType, Nil)),

	meta_set_override=member:Fn(clazz.Context, clazz.IAtomType, clazz.UAtomUnion),
	meta_get_invoke=member:Fn(clazz.Context, clazz.IAtomType):Ret(clazz.UAtomUnion),

	native_getmetatable=member:Fn(clazz.Context):Ret(clazz.UAtomUnion),
	native_setmetatable=member:Fn(clazz.Context, clazz.LuaTable),

	native_tostring=member:Fn():Ret(clazz.String),
	native_type=member:Fn():Ret(clazz.UAtomUnion),
})

clazz.IUnionType = Intersect(clazz.IType, clazz.IAssumeRelationBase, Interface {
	bits=Number,
	isReference=member:Fn():Ret(False),
	checkAtomUnion=member:Fn():Ret(clazz.IUnionType),

	initTypeId=member:Fn(Integer),

	isUnion=member:Fn():Ret(True),

	putAwait=member:Fn(clazz.IAtomType),
})

clazz.URegionFunction = Union(clazz.TypeFunction, clazz.OpenFunction)
clazz.GenFunc = Fn(clazz.URegionFunction, clazz.Context, clazz.TermTuple, List(clazz.UAllType), OrFalse(clazz.UAllType)):Ret(clazz.TermTuple)
clazz.OpenCaller = Fn(clazz.Context, clazz.TermTuple):Ret(clazz.TermTuple):Ret(clazz.RefineTerm)


end)

const OPER_ENUM = require "thlua.type.OPER_ENUM"
const function.open TypeClass()
	const t = {.open}
	t.__index=t
	function t.__tostring(self)
		return self:detailString({}, false)
	end
	function t:foreachAwait(vFunc)
		self:foreach(vFunc)
	end
	function t:isReference()
		return false
	end
	function t:checkAtomUnion()
		return self
	end
	function t:isNilable()
		return false
	end
	function t:intersectAtom(vRight)
		return self:assumeIntersectAtom(nil, vRight)
	end
	function t:containAtom(vRight)
		return self:assumeContainAtom(nil, vRight)
	end
	function t:assumeIntersectSome(vAssumeSet, vRight)
		local nSomeIntersect:Boolean = false
		vRight:foreachAwait(function(vSubType)
			if not nSomeIntersect and self:assumeIntersectAtom(vAssumeSet, vSubType) then
				nSomeIntersect = true
			end
		end)
		return nSomeIntersect
	end
	function t:assumeContainAll(vAssumeSet, vRight)
		local nAllContain:Boolean = true
		vRight:foreachAwait(function(vSubType)
			if nAllContain and not self:assumeContainAtom(vAssumeSet, vSubType) then
				nAllContain = false
			end
		end)
		return nAllContain
	end
	function t:intersectSome(vRight)
		return self:assumeIntersectSome(nil, vRight)
	end
	function t:containAll(vRight)
		return self:assumeContainAll(nil, vRight)
	end
	function t:safeIntersect(vRight)
		const nLeft = self:isReference() and self:checkAtomUnion() or self
		const nRight = vRight:isReference() and vRight:checkAtomUnion() or vRight
		if not nRight:isUnion() then
			const nIntersect = nLeft:assumeIntersectAtom(nil, nRight)
			if nIntersect == true then
				return false
			else
				return nIntersect or self._manager.type.Never
			end
		else
			const nCollection = self._manager:TypeCollection()
			nRight:foreach(function(vSubType)
				local nIntersect = nLeft:assumeIntersectAtom(nil, vSubType)
				if nIntersect then
					if nIntersect == true then
						return
					else
						nCollection:put(nIntersect)
					end
				end
			end)
			return nCollection:mergeToAtomUnion()
		end
	end
	function t.__band(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
		const nTypeOrFalse = vLeft:safeIntersect(vRight)
		if nTypeOrFalse then
			return nTypeOrFalse
		else
			error("unexpected intersect")
		end
	end
	function t:isUnion()
		return false
	end
	function t:foreach(vFunc)
		error("foreach TODO")
	end
	function t:unionSign()
		return tostring(self.id)
	end
	function t.__bor(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
		return vLeft._manager:checkedUnion(vLeft, vRight)
	end
	function t:isNever()
			return false
	end
	function t:notnilType()
		return self:checkAtomUnion()
	end
	function t:trueType()
			return self:checkAtomUnion()
	end
	function t:mayRecursive()
		return false
	end
	function t:objectPartType()
			return self._manager.type.Never
	end
	function t:fnPartType()
			return self._manager.type.Never
	end
	function t:falseType()
			return self._manager.type.Never
	end
	function t:same(vType):Ret(Boolean)
		if vType:isReference() then
			vType = vType:checkAtomUnion()
		end
		if self:isReference() then
			return self:checkAtomUnion() == vType
		else
			return self == vType
		end
	end
	function t:getCompletion():Ret(clazz.LspCompletion)
		return {}
	end
	return t
end

return TypeClass
