
(@do

let.node = import("thlua.code.Node").node

let.class = namespace()

class.MetaIndexField = Struct {
	keyType=class.UAtomUnion,
	valueDict=Dict(class.IAtomType, class.UAtomUnion),
	fnType=OrFalse(class.TypeFunction, class.LuaFunction),
}

class.TLongHintInfo = function(vHandler)
	return Struct {
		attrSet = Dict(String, Literal(1)),
		caller = Fn(vHandler),
	}
end

class.RelationEnum = Union("<", ">", "=", "~", "&")

class.IAstNode = node.IAstNode

class.UIndexType = Union(class.LuaFunction, class.LuaTable, class.TypeFunction)

class.LspCompletion = Dict(String, True)

class.GenFunc = Fn(class.Context, class.TermTuple):Ret(class.TermTuple)
class.GenNativeFunc = Fn(class.Context, class.TermTuple):Ret(class.TermTuple):Ret(class.RefineTerm)
class.GenericFunction = Fn():Dots(class.UAllType):Ret(class.UAllType)

class.UAtomUnion = Union(class.IAtomType, class.IUnionType)
class.UAllType = Union(class.IAtomType, class.IUnionType, class.Reference)
class.USymbol = Union(class.ImmutShot, class.LocalSymbol)

class.UObjectAtomUnion = Union(class.MetaObject, class.LuaTable, class.ObjectUnion, class.Never)
class.UFnAtomUnion = Union(class.TypeFunction, class.LuaFunction, class.NativeFunction, class.FuncUnion, class.Never)
class.TypeCasePair = Struct {class.UAtomUnion, class.TermCase}
class.UMemberAllType = Union(class.UAllType, class.MemberFunction)
class.MemberDict = Dict(class.IAtomType, class.UMemberAllType)

class.IType = Interface ({
	_manager=class.TypeManager,
	id=Number,
	foreach=Mfn(Fn(class.IAtomType)),
	foreachAwait=Mfn(Fn(class.IAtomType)),

	isNilable=Mfn():Ret(Boolean),
	isNever=Mfn():Ret(Boolean),

	unionSign=Mfn():Ret(String),

	detailString=Mfn(Dict(Truth, String), Boolean):Ret(String),

	intersectAny=Mfn(class.UAllType):Ret(Boolean),
	safeIntersect=Mfn(class.UAllType):Ret(OrFalse(class.UAtomUnion)),
	assumeIntersectAny=Mfn(OrNil(Dict(Integer, Boolean)), class.UAllType):Ret(Boolean),
	intersectAtom=Mfn(class.IAtomType):Ret(Union(Boolean, class.UAtomUnion)),

	containAll=Mfn(class.UAllType):Ret(Boolean),
	assumeContainAll=Mfn(OrNil(Dict(Integer, Boolean)), class.UAllType):Ret(Boolean),
	containAtom=Mfn(class.IAtomType):Ret(OrFalse(class.IAtomType)),

	mayRecursive=Mfn():Ret(Boolean),

	notnilType=Mfn():Ret(class.UAtomUnion),
	trueType=Mfn():Ret(class.UAtomUnion),
	falseType=Mfn():Ret(class.UAtomUnion),
	objectPartType=Mfn():Ret(class.UObjectAtomUnion),
	fnPartType=Mfn():Ret(class.UFnAtomUnion),

	same=Mfn(class.UAllType):Ret(Boolean),
}, {
	__bor=Fn(class.UAllType, class.UAllType):Ret(class.UAtomUnion),
	__band=Fn(class.UAllType, class.UAllType):Ret(class.UAtomUnion),
})

class.IAssumeRelationBase = Interface {
	assumeContainAtom=Mfn(OrNil(Dict(Integer, Boolean)), class.IAtomType):Ret(OrFalse(class.IAtomType)),
	assumeIntersectAtom=Mfn(OrNil(Dict(Integer, Boolean)), class.IAtomType):Ret(Union(Boolean, class.UAtomUnion)),
}

class.IMetaNative = Interface {
	native_rawget=Mfn(class.Context, class.IAtomType):Ret(class.UAtomUnion),
	native_rawset=Mfn(class.Context, class.IAtomType, class.UAtomUnion, Union(Nil, Boolean)),
	native_next=Mfn(class.Context, class.UAtomUnion):Ret(class.UAtomUnion, Dict(class.IAtomType, class.UAtomUnion)),

	meta_get=Mfn(class.Context, class.IAtomType):Ret(class.UAtomUnion),
	meta_set=Mfn(class.Context, class.IAtomType, class.UAtomUnion),
}

class.IAtomType = Intersect(class.IType, class.IAssumeRelationBase, class.IMetaNative, Interface {
	bits=Number,
	isReference=Mfn():Ret(False),
	linkNamedReference=Mfn(class.TypeReferCom),
	checkAtomUnion=Mfn():Ret(class.IAtomType),

	isSingleton=Mfn():Ret(Boolean),
	isUnion=Mfn():Ret(False),
	isStrNumLiteral=Mfn():Ret(Boolean),

	checkBaseObjectType=Mfn():Ret(OrFalse(class.MetaObject)),

	meta_call=Mfn(class.Context, class.UTypeTuple):Ret(class.RetTuples),

	meta_pairs=Mfn(class.Context):Ret(OrFalse(class.TypeTuple)),
	meta_ipairs=Mfn(class.Context):Ret(OrFalse(class.TypeTuple)),
	meta_len=Mfn(class.Context):Ret(class.UAtomUnion),
	meta_uop_some=Mfn(class.Context, String):Ret(class.UAtomUnion),
	meta_bop_func=Mfn(class.Context, String):Ret(True, class.IAtomType):Ret(False, Union(class.IAtomType, Nil)),

	meta_set_override=Mfn(class.Context, class.IAtomType, class.UAtomUnion),
	meta_get_invoke=Mfn(class.Context, class.IAtomType):Ret(class.UAtomUnion),

	native_getmetatable=Mfn(class.Context):Ret(class.UAtomUnion),
	native_setmetatable=Mfn(class.Context, class.LuaTable),

	native_tostring=Mfn():Ret(class.String),
	native_type=Mfn():Ret(class.UAtomUnion),
})

class.IUnionType = Intersect(class.IType, class.IAssumeRelationBase, Interface {
	bits=Number,
	isReference=Mfn():Ret(False),
	checkAtomUnion=Mfn():Ret(class.IUnionType),

	initTypeId=Mfn(Integer),

	isUnion=Mfn():Ret(True),

	putAwait=Mfn(class.IAtomType),
})


end)

const OPER_ENUM = require "thlua.type.OPER_ENUM"
const function.open TypeClass()
	const t = {}
	t.__index=t
	function t.__tostring(self)
		return self:detailString({}, false)
	end
	function t:foreachAwait?(vFunc)
		self:foreach(vFunc)
	end
	function.pass t.is?(v):Ret(Boolean)
		return getmetatable(v) == t
	end
	function t:isReference?()
		return false
	end
	function t:checkAtomUnion?()
		return self
	end
	function t:isNilable?()
		return false
	end
	function t:intersectAtom?(vRight)
		return self:assumeIntersectAtom(nil, vRight)
	end
	function t:containAtom?(vRight)
		return self:assumeContainAtom(nil, vRight)
	end
	function t:assumeContainAtom?(vAssumeSet, vRight)
		error(tostring(self).."assumeContainAtom not implement")
	end
	function t:assumeIntersectAtom?(vAssumeSet, vRight)
		error(tostring(self).."assumeIntersectAtom TODO")
	end
	function t:assumeIntersectAny?(vAssumeSet, vRight)
		local nAnyIntersect:Boolean = false
		vRight:foreachAwait(function(vSubType)
			if not nAnyIntersect and self:assumeIntersectAtom(vAssumeSet, vSubType) then
				nAnyIntersect = true
			end
		end)
		return nAnyIntersect
	end
	function t:assumeContainAll?(vAssumeSet, vRight)
		local nAllContain:Boolean = true
		vRight:foreachAwait(function(vSubType)
			if nAllContain and not self:assumeContainAtom(vAssumeSet, vSubType) then
				nAllContain = false
			end
		end)
		return nAllContain
	end
	function t:intersectAny(vRight)
		return self:assumeIntersectAny(nil, vRight)
	end
	function t:containAll(vRight)
		return self:assumeContainAll(nil, vRight)
	end
	function t:safeIntersect(vRight)
		const nLeft = self:isReference() and self:checkAtomUnion() or self
		const nRight = vRight:isReference() and vRight:checkAtomUnion() or vRight
		if not nRight:isUnion() then
			const nIntersect = nLeft:assumeIntersectAtom(nil, nRight)
			if nIntersect == true then
				return false
			else
				return nIntersect or self._manager.type.Never
			end
		else
			const nCollection = self._manager:TypeCollection()
			nRight:foreach(function(vSubType)
				local nIntersect = nLeft:assumeIntersectAtom(nil, vSubType)
				if nIntersect then
					if nIntersect == true then
						return false
					else
						nCollection:put(nIntersect)
					end
				end
			end)
			return nCollection:mergeToAtomUnion()
		end
	end
	function t.__band(vLeft, vRight)
		const nTypeOrFalse = vLeft:safeIntersect(vRight)
		if nTypeOrFalse then
			return nTypeOrFalse
		else
			error("unexpected intersect")
		end
	end
	function t:isUnion?()
		return false
	end
	function t:foreach?(vFunc)
		error("foreach TODO")
	end
	function t:unionSign?()
		return tostring(self.id)
	end
	function t.__bor(vLeft:class.UAllType, vRight:class.UAllType):Ret(class.UAtomUnion)
		return vLeft._manager:checkedUnion(vLeft, vRight)
	end
	function t:isNever?()
			return false
	end
	function t:notnilType?()
		return self:checkAtomUnion()
	end
	function t:trueType?()
			return self:checkAtomUnion()
	end
	function t:mayRecursive?()
		return false
	end
	function t:objectPartType?()
			return self._manager.type.Never
	end
	function t:fnPartType?()
			return self._manager.type.Never
	end
	function t:falseType?()
			return self._manager.type.Never
	end
	function t:same(vType):Ret(Boolean)
		if vType:isReference() then
			vType = vType:checkAtomUnion()
		end
		if self:isReference() then
			return self:checkAtomUnion() == vType
		else
			return self == vType
		end
	end
	function t:linkNamedReference?(vRefer)
	end
	function t:getCompletion?():Ret(class.LspCompletion)
		return {}
	end
	return t
end

return TypeClass
