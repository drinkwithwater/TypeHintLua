
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const TypeCollection = require "thlua.type.TypeCollection"
const Node = require "thlua.code.Node"
const Exception = require "thlua.Exception"

const Never = require "thlua.type.union.Never"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const String = require "thlua.type.basic.String"
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const Number = require "thlua.type.basic.Number"
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const Integer = require "thlua.type.basic.Integer"
const BooleanLiteral= require "thlua.type.basic.BooleanLiteral"
const Nil = require "thlua.type.basic.Nil"
const Thread = require "thlua.type.basic.Thread"
const SubType = require "thlua.type.basic.SubType"
const LightUserdata = require "thlua.type.basic.LightUserdata"
const Truth = require "thlua.type.basic.Truth"
const TypedObject = require "thlua.type.object.TypedObject"
const Struct = require "thlua.type.object.Struct"
const Interface = require "thlua.type.object.Interface"
const OpenTable = require "thlua.type.object.OpenTable"
const AutoTable = require "thlua.type.object.AutoTable"
const SealTable = require "thlua.type.object.SealTable"
const OpenFunction = require "thlua.type.func.OpenFunction"
const TypedFunction = require "thlua.type.func.TypedFunction"
const TypedPolyFunction = require "thlua.type.func.TypedPolyFunction"
const SealPolyFunction = require "thlua.type.func.SealPolyFunction"
const AnyFunction = require "thlua.type.func.AnyFunction"
const NameReference = require "thlua.space.NameReference"

const TypedMemberFunction = require "thlua.type.func.TypedMemberFunction"

const StringLiteralUnion = require "thlua.type.union.StringLiteralUnion"
const MixingNumberUnion = require "thlua.type.union.MixingNumberUnion"
const ObjectUnion = require "thlua.type.union.ObjectUnion"
const FuncUnion = require "thlua.type.union.FuncUnion"
const FalsableUnion = require "thlua.type.union.FalsableUnion"
const ComplexUnion = require "thlua.type.union.ComplexUnion"

const RetTuples = require "thlua.tuple.RetTuples"
const TypeTuple = require "thlua.tuple.TypeTuple"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"

const BaseReadyType = require "thlua.type.basic.BaseReadyType"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const BaseUnionType = require "thlua.type.union.BaseUnionType"
const MetaEventCom = require "thlua.type.object.MetaEventCom"
const native = require "thlua.type.native"

const TemplateCom = require "thlua.space.TemplateCom"
const AsyncTypeCom = require "thlua.space.AsyncTypeCom"
const AutoHolder = require "thlua.space.AutoHolder"

const TypeRelation = require "thlua.type.TypeRelation"
const TupleBuilder = require "thlua.tuple.TupleBuilder"

const HashableTypeSet = require "thlua.type.HashableTypeSet"
const SpaceValue = require "thlua.space.SpaceValue"

const type = type
const math_type = math.type

(@do
	let.clazz = import("thlua.class").clazz
	let.WaitingInfo = Struct {
		waitSid = Integer,
		dependCo = Thread,
	}
end)

const TypeManager = {}
TypeManager.__index=TypeManager

const function:class(let.BuiltinFunc) makeBuiltinFunc(vManager:clazz.TypeManager)
	const self = {.class
		string=nil@!clazz.IAtomType,
		next=native.make_next(vManager),
		inext=native.make_inext(vManager),
		bop={
			mathematic_notdiv=native.make_mathematic(vManager),
			mathematic_divide=native.make_mathematic(vManager, true),
			comparison=native.make_comparison(vManager),
			bitwise=native.make_bitwise(vManager),
			concat=native.make_concat(vManager),
		},
	}
	return self
end

const function:class(let.BuiltinType) makeBuiltinType(vManager:clazz.TypeManager, vRootNode:clazz.IBaseNode)
	const self = {.class
		Never = vManager:unionUnifyToType(Never.new(vManager)),
		Nil = Nil.new(vManager),
		False = BooleanLiteral.new(vManager, false),
		True = BooleanLiteral.new(vManager, true),
		Thread = Thread.new(vManager),
		Number = Number.new(vManager),
		Integer = Integer.new(vManager),
		String = String.new(vManager),
		Truth = Truth.new(vManager),
		Any = nil @! clazz.AsyncTypeCom,
		LightUserdata = LightUserdata.new(vManager),
		AnyFunction = AnyFunction.new(vManager, vRootNode),
		Boolean = nil @! clazz.AsyncTypeCom,
		AnyObject = nil @! clazz.Interface,
	}
	return self
end

function:class(clazz.TypeManager) TypeManager.new(
	vRuntime:clazz.CodeRuntime,
	vRootNode:clazz.IBaseNode,
	vScheduleManager:clazz.ScheduleManager
)
	const self = setmetatable({.class
		_runtime=vRuntime,
		-- type items
		type=nil @! BuiltinType,
		builtin=nil @! BuiltinFunc,
		generic={} @ Dict(String, clazz.TemplateCom),
		MetaOrNil=nil @! clazz.UAtomUnion,
		_hashToTypeSet={} @ Dict(Integer, clazz.HashableTypeSet),
		_pairToRelation={} @ Dict(Integer, clazz.TypeRelation),
		_floatLiteralDict = {}@Dict(Number, clazz.FloatLiteral),
		_integerLiteralDict = {}@Dict(Integer, clazz.IntegerLiteral),
		_sbLiteralDict={}@Struct {[String]=clazz.StringLiteral, [Boolean]=OrNil(clazz.BooleanLiteral)},
		_typeIdCounter=0@Integer,
		_rootNode=vRootNode,
		_scheduleManager=vScheduleManager,
	}, TypeManager)
	return self
end

function TypeManager:lateInit()
	const vRootNode = self._rootNode
	self.type = makeBuiltinType(self, vRootNode)
	self.type.Boolean = self:buildUnion(vRootNode, self.type.False, self.type.True)
	self.type.Any = self:buildUnion(vRootNode, self.type.Truth, self.type.False, self.type.Nil)
	self.type.AnyObject = self:buildInterface(vRootNode, {})
	self.MetaOrNil = self:buildUnion(vRootNode, self.type.Nil, self.type.Truth):checkAtomUnion() -- TODO use object in the future
	self.generic.Dict = self:buildTemplate(vRootNode, function(vKey:clazz.UMustType,vValue:clazz.UMustType)
		assert(vKey and vValue, "key or value can't be nil when build Dict")
		return self:buildStruct(vRootNode, {[vKey]=vValue}, {__Next=vKey})
	end)
	self.generic.Cond = self:buildTemplate(vRootNode, function(vCond:clazz.UMustType,v1:clazz.UMustType,v2:clazz.UMustType)
		local nType = vCond:checkAtomUnion()
		if nType:isUnion() then
			error("Cond's first value can't be union")
		end
		return (nType == self.type.Nil or nType == self.type.False) and v2 or v1
	end)
	self.generic.IDict = self:buildTemplate(vRootNode, function(vKey:clazz.UMustType,vValue:clazz.UMustType)
		assert(vKey and vValue, "key or value can't be nil when build IDict")
		return self:buildInterface(vRootNode, {[vKey]=vValue}, {__Next=vKey})
	end)
	self.generic.List = self:buildTemplate(vRootNode, function(vValue:clazz.UMustType)
		assert(vValue, "value can't be nil when build List")
		return self:buildStruct(vRootNode, {[self.type.Integer]=vValue}, {__Next=self.type.Integer, __len=self.type.Integer})
	end)
	self.generic.IList = self:buildTemplate(vRootNode, function(vValue:clazz.UMustType)
		assert(vValue, "value can't be nil when build IList")
		return self:buildInterface(vRootNode, {[self.type.Integer]=vValue}, {__len=self.type.Integer})
	end)
	self.generic.KeyOf = self:buildTemplate(vRootNode, function(vOneType:clazz.UMustType):Ret(clazz.UMustType)
		local nObject = vOneType:checkAtomUnion()
		if TypedObject.is(nObject) then
			const nKeyRefer, _ = nObject:getKeyTypes()
			return nKeyRefer
		elseif AutoTable.is(nObject) then
			return nObject:checkKeyTypes()
		else
			error("key of can only worked on object or AutoTable")
		end
	end)
	self.builtin = makeBuiltinFunc(self)
end

function TypeManager:lateInitStringLib(vStringLib:clazz.IAtomType)
	self.builtin.string = vStringLib
end

function TypeManager:isLiteral(vType:clazz.IAtomType):Ret(Boolean)
	if StringLiteral.is(vType) or FloatLiteral.is(vType) or IntegerLiteral.is(vType) or BooleanLiteral.is(vType) then
		return true
	else
		return false
	end
end

function TypeManager:HashableTypeSet():Ret(clazz.HashableTypeSet)
	return HashableTypeSet.new(self)
end

function TypeManager:TypeCollection():Ret(clazz.TypeCollection)
	return TypeCollection.new(self)
end

function TypeManager:AsyncTypeCom(vNode:clazz.IBaseNode):Ret(clazz.AsyncTypeCom)
	return AsyncTypeCom.new(self._runtime:getSpaceManager(), vNode)
end

function TypeManager:_buildCombineObject(vNode:clazz.IBaseNode, vIsInterface:Boolean, vTupleBuilder:clazz.TupleBuilder):Ret(clazz.TypedObject)
	const nNewObject = vIsInterface and Interface.new(self, vNode) or Struct.new(self, vNode)
	nNewObject:buildInKeyAsync(vNode, function()
		const nObjectList = vTupleBuilder:buildPolyArgs()
		if vIsInterface then
			assert(#nObjectList>=1, "Intersect must take at least one arguments")
		else
			assert(#nObjectList >= 2, "StructExtend must take at least one interface after struct")
		end
		const nKeyTypeSet = self:HashableTypeSet()
		const nKeyValuePairList:List(Struct {clazz.IAtomType, clazz.UMustType}) = {}
		const nIntersectSet:Dict(clazz.TypedObject, True) = {}
		const nMetaEventComList:List(clazz.MetaEventCom) = {}
		local nIntersectNextKey:OrFalse(clazz.UMustType) = self:buildUnion(self._rootNode, self.type.False, self.type.Nil, self.type.Truth)
		for i=1,#nObjectList do
			local nTypedObject = nObjectList[i]!
			if not TypedObject.is(nTypedObject) then
				error("Interface or Struct is expected here")
				break
			end
			if i == 1 then
				if vIsInterface then
					assert(Interface.is(nTypedObject), "Intersect must take Interface")
					nIntersectSet[nTypedObject] = true
				else
					assert(not Interface.is(nTypedObject), "StructExtend must take Struct as first argument")
				end
			else
				assert(Interface.is(nTypedObject), vIsInterface
					and "Intersect must take Interface as args"
					or "StructExtend must take Interface after first argument")
				nIntersectSet[nTypedObject] = true
			end
			local nValueDict = nTypedObject:getValueDict()
			const nKeyRefer, nNextKey = nTypedObject:getKeyTypes()
			for _, nKeyType in pairs(nKeyRefer:getSetAwait():getDict()) do
				nKeyTypeSet:putAtom(nKeyType)
				nKeyValuePairList[#nKeyValuePairList + 1] = {nKeyType, nValueDict[nKeyType]!}
			end
			nMetaEventComList[#nMetaEventComList + 1] = nTypedObject:getMetaEventCom() or nil
			if nIntersectNextKey then
				if nNextKey then
					const nTypeOrFalse = nIntersectNextKey:safeIntersect(nNextKey)
					if not nTypeOrFalse then
						error("intersect error")
					else
						nIntersectNextKey = nTypeOrFalse
					end
				else
					nIntersectNextKey = false
				end
			end
		end
		const _, nFinalValueDict = self:typeMapReduce@<clazz.UMustType>(nKeyValuePairList, function(vList)
			return self:intersectReduceType(vNode, vList)
		end)
		return nKeyTypeSet, function(vKeyAtomUnion)
			if #nMetaEventComList > 0 then
				const nNewEventCom = self:makeMetaEventCom(nNewObject)
				nNewEventCom:initByMerge(nMetaEventComList)
				nNewObject:lateInit(nIntersectSet, nFinalValueDict, nIntersectNextKey, nNewEventCom)
			else
				nNewObject:lateInit(nIntersectSet, nFinalValueDict, nIntersectNextKey, false)
			end
			-- TODO check key's count and intersect valid
			nNewObject:lateCheck()
		end
	end)
	return nNewObject
end

function TypeManager:buildExtendStruct(vNode:clazz.IBaseNode, vFirst:clazz.USpaceAny, ...:clazz.USpaceAny):Ret(clazz.TypedObject)
	if type(vFirst) == "table" and not getmetatable(vFirst) then
		vFirst = self:buildStruct(vNode, vFirst)
	end
	const nTupleBuilder = self:getSpaceManager():spacePack(vNode, vFirst, ...)
	return self:_buildCombineObject(vNode, false, nTupleBuilder)
end

function TypeManager:buildExtendInterface(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.TypedObject)
	const nTupleBuilder = self:getSpaceManager():spacePack(vNode, ...)
	return self:_buildCombineObject(vNode, true, nTupleBuilder)
end

function TypeManager:checkedIntersect(vLeft:clazz.UMustType, vRight:clazz.UMustType):Ret(clazz.UAtomUnion)
	const nLeft = vLeft:checkAtomUnion()
	const nTypeOrFalse = nLeft:safeIntersect(vRight)
	if nTypeOrFalse then
		return nTypeOrFalse
	else
		error("unexpected intersect")
	end
end

function TypeManager:checkedUnion(...:clazz.UMustType):Ret(clazz.UAtomUnion)
	const l:List(clazz.UMustType) = {...}
	const nTypeSet = self:HashableTypeSet()
	for i=1, select("#", ...) do
		l[i]!:checkAtomUnion():foreach(function(vAtomType)
			nTypeSet:putAtom(vAtomType)
		end)
	end
	return self:unifyAndBuild(nTypeSet)
end

function TypeManager:buildSubType(vNode:clazz.IBaseNode, vArgType:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	const nAsyncTypeCom = self:AsyncTypeCom(vNode)
	nAsyncTypeCom:setTypeAsync(vNode, function()
		const nType = self:getSpaceManager():spaceToMustType(vNode, vArgType):checkAtomUnion()
		assert(BaseAtomType.is(nType) and not nType:isSingleton(), vNode:toExc("enum's supertype must be non-singleton atom type"))
		if nType ~= self.type.String and nType ~= self.type.Number and nType ~= self.type.Integer then
			error(vNode:toExc("current subtype only support integer, number, string. other type TODO"))
		end
		const nSubType = SubType.new(self, vNode, nType)
		return nSubType
	end)
	return nAsyncTypeCom
end

function TypeManager:buildUnion(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	local l = {...}
	const nLen = select("#", ...)
	local nAsyncTypeCom = self:AsyncTypeCom(vNode)
	nAsyncTypeCom:setSetAsync(vNode, function()
		local nTypeSet = self:HashableTypeSet()
		for i=1, nLen do
			local nItem = self:getSpaceManager():spaceToMustType(vNode, l[i])
			if AsyncTypeCom.is(nItem) then
				nTypeSet:putSet(nItem:getSetAwait())
			else
				nItem:foreachAwait(function(vAtom)
					nTypeSet:putAtom(vAtom)
				end)
			end
		end
		return nTypeSet
	end)
	return nAsyncTypeCom
end

function TypeManager:buildOneOf(vNode:clazz.IBaseNode, vTable:clazz.USpaceAny):Ret(clazz.Struct)
	if type(vTable) == "table" then
		return self:_buildTypedObject@<"oneof">(vNode, vTable @> clazz.USpaceDict, nil, "oneof")
	else
		error(vNode:toExc("oneof must build with a table without meta"))
	end
end

function TypeManager:buildInterface(vNode:clazz.IBaseNode, vTable:clazz.USpaceAny, vMetaEventDict:OrNil(clazz.USpaceAny)):Ret(clazz.Interface)
	if type(vTable) == "table" then
		return self:_buildTypedObject@<"interface">(vNode, vTable @> clazz.USpaceDict, vMetaEventDict @> OrNil(clazz.USpaceDict), "interface")
	else
		error(vNode:toExc("interface must build with a table without meta"))
	end
end

function TypeManager:buildStruct(vNode:clazz.IBaseNode, vTable:clazz.USpaceAny, vMetaEventDict:OrNil(clazz.USpaceAny)):Ret(clazz.Struct)
	if type(vTable) == "table" then
		return self:_buildTypedObject@<"struct">(vNode, vTable @> clazz.USpaceDict, vMetaEventDict @> OrNil(clazz.USpaceDict), "struct")
	else
		error(vNode:toExc("struct must build with a table without meta"))
	end
end

function TypeManager:_buildTypedObject@<TWhat>(vNode:clazz.IBaseNode, vTable:clazz.USpaceAny, vMetaEventDict:OrNil(clazz.USpaceDict), vWhat:TWhat):Ret(Cond($(vWhat == "interface"), clazz.Interface, clazz.Struct))
	-- TODO check vMetaEventDict
	const nIsInterface = vWhat == "interface"
	const nIsOneOf = vWhat == "oneof"
	const nUseSealTable = getmetatable(vTable)
	const nNewObject = nIsInterface and Interface.new(self, vNode) or Struct.new(self, vNode)
	nNewObject:buildInKeyAsync(vNode, function()
		local nIndependentList:List(clazz.UMustType) = {}
		local nFinalKeyTypeSet = self:HashableTypeSet()
		local nFinalValueDict = {} @ Dict(clazz.IAtomType, clazz.UMustType)
		if nUseSealTable then
			const nType = self:getSpaceManager():spaceToMustType(vNode, vTable):checkAtomUnion()
			if not SealTable.is(nType) then
				error(vNode:toExc("struct or interface can only take SealTable or table without metatable as first arg"))
			end
			nType:setLocked()
			const nAutoDict = nType:getValueDict()
			for nKey, nValue in pairs(nAutoDict) do
				nFinalKeyTypeSet:putAtom(nKey)
				if nIsOneOf then
					if not nKey:isSingleton() then
						error(vNode:toExc("OneOf's key must be singleton type"))
					end
					nFinalValueDict[nKey] = nValue:isNilable() and nValue or self:checkedUnion(nValue, self.type.Nil)
				else
					if not nKey:isSingleton() then
						nFinalValueDict[nKey] = nValue:isNilable() and nValue or self:checkedUnion(nValue, self.type.Nil)
					else
						nFinalValueDict[nKey] = nValue
					end
				end
			end
		else
			for nKey, nValue in pairs(vTable @> clazz.USpaceDict) do
				const nValueType = self:getSpaceManager():spaceToMustType(vNode, nValue)
				const nKeyType = self:getSpaceManager():spaceToMustType(vNode, nKey)
				nIndependentList[#nIndependentList + 1] = nKeyType
				nKeyType:checkAtomUnion():foreach(function(vAtomType)
					nFinalKeyTypeSet:putAtom(vAtomType)
					if nIsOneOf then
						if not vAtomType:isSingleton() then
							error(vNode:toExc("OneOf's key must be singleton type"))
						end
						nFinalValueDict[vAtomType] = self:buildUnion(vNode, nValueType, self.type.Nil)
					else
						if not vAtomType:isSingleton() then
							nFinalValueDict[vAtomType] = self:buildUnion(vNode, nValueType, self.type.Nil)
						else
							nFinalValueDict[vAtomType] = nValueType
						end
					end
				end)
			end
		end
		return nFinalKeyTypeSet, function(vKeyAtomUnion)
			const nAutoNextKey = (nUseSealTable or nIsOneOf) and vKeyAtomUnion or false
			if vMetaEventDict then
				const nNewEventCom = self:makeMetaEventCom(nNewObject)
				const nEventToType:Dict(String, clazz.UMustType) = {}
				for k,v in pairs(vMetaEventDict) do
					if type(k) ~= "string" then
						error(vNode:toExc("meta event must be string"))
					end
					nEventToType[k @> String] = self:getSpaceManager():spaceToMustType(vNode, v)
				end
				nNewEventCom:initByEventDict(vNode, nEventToType)
				---------------------------------------------------------
				--- TODO TODO TODO TODO
				-- TODO define __Next as a meta event in somewhere ????
				---------------------------------------------------------
				const nNextKey = nEventToType.__Next or nAutoNextKey or false
				nNewObject:lateInit({}, nFinalValueDict, nNextKey, nNewEventCom)
			else
				nNewObject:lateInit({}, nFinalValueDict, nAutoNextKey, false)
			end
			nNewObject:lateCheck()
			if #nIndependentList > 0 then
				if not self:typeCheckIndependent(nIndependentList, vKeyAtomUnion) then
					error(vNode:toExc("Object's key must be independent"))
				end
			end
		end
	end)
	return nNewObject
end

function TypeManager:buildOrNil(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	return self:buildUnion(vNode, self.type.Nil, ...)
end

function TypeManager:buildOrFalse(vNode:clazz.IBaseNode, ...:clazz.USpaceAny):Ret(clazz.AsyncTypeCom)
	return self:buildUnion(vNode, self.type.False, ...)
end

function TypeManager:unifyAndBuild(vTypeSet:clazz.HashableTypeSet):Ret(clazz.UAtomUnion)
	return self:unifyTypeSet(vTypeSet):_buildType()
end

function TypeManager:unifyTypeSet(vTypeSet:clazz.HashableTypeSet):Ret(clazz.HashableTypeSet)
	const nHashToTypeSet = self._hashToTypeSet
	const nHash = vTypeSet:getHash()
	const nCurTypeSet = nHashToTypeSet[nHash]
	if not nCurTypeSet then
		nHashToTypeSet[nHash] = vTypeSet
		return vTypeSet
	else
		return nCurTypeSet:linkedSearchOrLink(vTypeSet)
	end
end

function TypeManager:unionUnifyToType(vNewUnion:clazz.IUnionType):Ret(clazz.UAtomUnion)
	const nHashValue = HashableTypeSet.hashType(vNewUnion)
	const nCurTypeSet = self._hashToTypeSet[nHashValue]
	if not nCurTypeSet then
		const nHashableTypeSet = self:HashableTypeSet()
		nHashableTypeSet:initFromUnion(vNewUnion)
		self._hashToTypeSet[nHashValue] = nHashableTypeSet
		vNewUnion:initWithTypeId(self:genTypeId(), nHashableTypeSet)
		return vNewUnion
	else
		const nFound, nTypeOrSet = nCurTypeSet:linkedSearchTypeOrAttachSet(vNewUnion)
		if nFound then
			return nTypeOrSet
		else
			vNewUnion:initWithTypeId(self:genTypeId(), nTypeOrSet)
			return vNewUnion
		end
	end
end

function TypeManager:atomUnifyToSet(vNewAtom:clazz.IAtomType):Ret(clazz.HashableTypeSet)
	const nHashableTypeSet = self:HashableTypeSet()
	nHashableTypeSet:initFromAtom(vNewAtom)
	const nTypeSet = self:unifyTypeSet(nHashableTypeSet)
	assert(nTypeSet == nHashableTypeSet, "but atom build type id conflict")
	return nTypeSet
end

function TypeManager:newNativeOpenFunction():Ret(clazz.OpenFunction)
	const nOpenFn = self._runtime:getStackManager():getRootStack():newOpenFunction(self._rootNode)
	return nOpenFn
end

function TypeManager:Literal(vValue:Union(String, Number, Boolean)):Ret(Union(clazz.FloatLiteral, clazz.IntegerLiteral, clazz.StringLiteral, clazz.BooleanLiteral))
	const t = type(vValue)
	if t == "number" then
		if math_type(vValue) == "integer" then
			const nLiteralDict = self._integerLiteralDict
			local nLiteralType = nLiteralDict[vValue]
			if not nLiteralType then
				nLiteralType = IntegerLiteral.new(self, vValue)
				nLiteralDict[vValue] = nLiteralType
			end
			return nLiteralType
		else
			const nLiteralDict = self._floatLiteralDict
			local nLiteralType = nLiteralDict[vValue]
			if not nLiteralType then
				nLiteralType = FloatLiteral.new(self, vValue)
				nLiteralDict[vValue] = nLiteralType
			end
			return nLiteralType
		end
	else
		const nLiteralDict = self._sbLiteralDict
		local nLiteralType = nLiteralDict[vValue]
		if not nLiteralType then
			if t == "string" then
				nLiteralType = StringLiteral.new(self, vValue)
				nLiteralDict[vValue] = nLiteralType
			elseif t == "boolean" then
				if vValue then
					nLiteralType = self.type.True
				else
					nLiteralType = self.type.False
				end
				nLiteralDict[vValue] = nLiteralType
			else
				error("literal must take boolean or number or string value but got:"..tostring(t))
			end
		end
		return nLiteralType
	end
end

function TypeManager:TypeTuple(vNode:clazz.IBaseNode, vTypeList:IList(clazz.UMustType)):Ret(clazz.TypeTuple)
	return TypeTuple.new(self, vNode, vTypeList)
end

function TypeManager:VoidRetTuples(vNode:clazz.IBaseNode, vErrType:OrNil(clazz.UMustType)):Ret(clazz.RetTuples)
	return RetTuples.new(self, vNode, {self:TypeTuple(vNode, {})}, vErrType or false)
end

function TypeManager:SingleRetTuples(vNode:clazz.IBaseNode, vTypeTuple:clazz.UTypeTuple, vErrType:OrNil(clazz.UMustType)):Ret(clazz.RetTuples)
	return RetTuples.new(self, vNode, {vTypeTuple}, vErrType or false)
end

function TypeManager:buildMfn(vNode:clazz.IBaseNode, ...:Truth):Ret(clazz.TypedMemberFunction)
	const nHeadlessFn = self:buildFn(vNode, ...)
	return TypedMemberFunction.new(self, vNode, nHeadlessFn)
end

function TypeManager:buildPfn(vNode:clazz.IBaseNode, vFunc:AnyFunction):Ret(clazz.TypedPolyFunction)
	const nInfo = debug.getinfo(vFunc)
	const nPolyParNum=nInfo.nparams
	if nInfo.isvararg then
		error("poly function can't be vararg")
	end
	return TypedPolyFunction.new(self, vNode, self:convertFunctionToTemplateLambda(vFunc))
end

function TypeManager:buildFn(vNode:clazz.IBaseNode, ...:Any):Ret(clazz.TypedFunction)
	const nFn = TypedFunction.new(self, vNode, false, false)
	nFn:chainParams(vNode, ...)
	return nFn
end

function TypeManager:checkedFn(...:clazz.UMustType):Ret(clazz.TypedFunction)
	local nParTuple = self:TypeTuple(self._rootNode, {...})
	return TypedFunction.new(self, self._rootNode, nParTuple, false)
end

function TypeManager:SealPolyFunction(...):Ret(clazz.SealPolyFunction)
	return SealPolyFunction.new(self, ...)
end

function TypeManager:TypedFunction(vNode:clazz.IBaseNode, vParTuple:clazz.UTypeTuple, vRetTuples:clazz.RetTuples):Ret(clazz.TypedFunction)
	assert(TypeTuple.is(vParTuple) or TypeTupleDots.is(vParTuple))
	assert(RetTuples.is(vRetTuples))
	return TypedFunction.new(self, vNode, vParTuple, vRetTuples)
end

function TypeManager:makeMetaEventCom(vObject:Union(clazz.SealTable, clazz.TypedObject)):Ret(clazz.MetaEventCom)
	return MetaEventCom.new(self, vObject)
end

function TypeManager:convertFunctionToTemplateLambda(vFunc:AnyFunction):Ret(clazz.PolyLambda, clazz.ParamInfo)
	const nInfo = debug.getinfo(vFunc)
	return function(vTupleBuilder)
		const ok, exc = pcall(vFunc, table.unpack(vTupleBuilder:buildNowaitPolyArgs()))
		const nNode = vTupleBuilder:getNode()
		if ok then
			return self:getSpaceManager():spaceToMustType(nNode, exc)
		else
			if Exception.is(exc) then
				error(exc)
			else
				error(nNode:toExc(tostring(exc)))
			end
		end
	end, {
		num=nInfo.nparams,
		dots=nInfo.isvararg,
	}
end

function TypeManager:buildTemplate(vNode:clazz.IBaseNode, vFunc:AnyFunction):Ret(clazz.TemplateCom)
	return TemplateCom.new(self._runtime:getSpaceManager(), vNode, self:convertFunctionToTemplateLambda(vFunc))
end

function TypeManager:buildTemplateWithParNum(vNode:clazz.IBaseNode, vFunc:clazz.PolyLambda, vParInfo:clazz.ParamInfo):Ret(clazz.TemplateCom)
	return TemplateCom.new(self._runtime:getSpaceManager(), vNode, vFunc, vParInfo)
end

function TypeManager:typeCheckIndependent(vList:IList(clazz.UMustType), vFinalType:clazz.UAtomUnion):Ret(Boolean)
	local nLeftCount = 0
	for k,v in ipairs(vList) do
		v:checkAtomUnion():foreach(function(_)
			nLeftCount = nLeftCount + 1
		end)
	end
	local nRightCount = 0
	vFinalType:foreach(function(_)
		nRightCount = nRightCount + 1
	end)
	return nRightCount == nLeftCount
end

function TypeManager:typeMapReduce@<TValue>(
	vTypePairList:IList(Interface {clazz.UAtomUnion, TValue}),
	vReduceFn:Fn(IList(TValue)):Ret(TValue)
):Ret(clazz.UAtomUnion, Dict(clazz.IAtomType, TValue))
	const nTypeSet = self:HashableTypeSet()
	for _, nPair in ipairs(vTypePairList) do
		local nFieldType = nPair[1]
		nTypeSet:putType(nFieldType)
	end
	const nKeyUnion = self:unifyAndBuild(nTypeSet)
	-- step 1: map
	const nTypeToList:Dict(clazz.IAtomType, List(TValue)) = {}
	for _, nPair in ipairs(vTypePairList) do
		local nKey = nPair[1]
		local nValueType = nPair[2]
		nKey:foreach(function(vSubType)
			const nIncludeType = assert(nKeyUnion:includeAtom(vSubType), "merge error")
			const nList = nTypeToList[nIncludeType]
			if not nList then
				nTypeToList[nIncludeType] = {nValueType}
			else
				nList[#nList + 1] = nValueType
			end
		end)
	end
	-- step 2: reduce
	const nTypeDict:Dict(clazz.IAtomType, TValue) = {}
	for k,v in pairs(nTypeToList) do
		nTypeDict[k] = vReduceFn(v)
	end
	return nKeyUnion, nTypeDict
end

function TypeManager:unionReduceType(vList:IList(clazz.UAtomUnion)):Ret(clazz.UAtomUnion)
	if #vList == 1 then
		return vList[1]!
	end
	const nTypeSet = self:HashableTypeSet()
	for _, nType in ipairs(vList) do
		nType:foreach(function(vAtomType)
			nTypeSet:putAtom(vAtomType)
		end)
	end
	return self:unifyAndBuild(nTypeSet)
end

function TypeManager:intersectReduceType(vNode:clazz.IBaseNode, vList:IList(clazz.UMustType)):Ret(clazz.UMustType)
	const nFirst = vList[1]!
	if #vList == 1 then
		return nFirst
	end
	const nAsyncTypeCom = self:AsyncTypeCom(vNode)
	nAsyncTypeCom:setTypeAsync(vNode, function()
		local nFinalType = nFirst:checkAtomUnion()
		for i=2, #vList do
			const nCurType = vList[i]!
			const nInterType = nFinalType:safeIntersect(nCurType)
			if not nInterType then
				error("unexpected intersect")
			else
				nFinalType = nInterType
			end
		end
		if nFinalType:isNever() then
			error("object intersect can't has never field")
		end
		return nFinalType
	end)
	return nAsyncTypeCom
end

function TypeManager:makePair(vLeft:clazz.IAtomType, vRight:clazz.IAtomType):Ret(Integer)
	const nLeftId, nRightId = vLeft.id, vRight.id
	assert(nLeftId ~= 0 and nRightId ~=0, "use id ==0")
	return TypeRelation.shiftPair(nLeftId, nRightId)
end

function TypeManager:makeDuPair(vLeft:clazz.IAtomType, vRight:clazz.IAtomType):Ret(Boolean, Integer, Integer)
	const nLeftId, nRightId = vLeft.id, vRight.id
	if nLeftId < nRightId then
		return false, TypeRelation.shiftPair(nLeftId, nRightId), TypeRelation.shiftPair(nRightId, nLeftId)
	else
		return true, TypeRelation.shiftPair(nRightId, nLeftId), TypeRelation.shiftPair(nLeftId, nRightId)
	end
end

function TypeManager:attachPairRelation(vLeft:clazz.TypedObject, vRight:clazz.TypedObject, vWaitCreate:Boolean):Ret(OrNil(clazz.RelationEnum))
	const nInverse, nLRPair, nRLPair = self:makeDuPair(vLeft, vRight)
	if nInverse then
		vRight, vLeft = vLeft, vRight
	end
	local nRelation = self._pairToRelation[nLRPair]
	local nResult:OrFalse(clazz.RelationEnum) = false
	if vWaitCreate then
		if not nRelation then
			nRelation = TypeRelation.new(self)
			self._pairToRelation[nLRPair] = nRelation
			nRelation:buildByObject(vLeft, vRight)
		end
		nResult = nRelation:getAwait()
	else
		if nRelation then
			nResult = nRelation:getNowait()
		end
	end
	if not nResult then
		return nil
	end
	if nInverse then
		if nResult == ">" then
			return "<"
		elseif nResult == "<" then
			return ">"
		else
			return nResult
		end
	else
		return nResult
	end
end

function TypeManager:getRuntime():Ret(clazz.CodeRuntime)
	return self._runtime
end

function TypeManager:literal2Primitive(vType:clazz.UAtomUnion):Ret(clazz.UAtomUnion)
	if BooleanLiteral.is(vType) then
		return self.type.Boolean:checkAtomUnion()
	elseif FloatLiteral.is(vType) then
		return self.type.Number
	elseif IntegerLiteral.is(vType) then
		return self.type.Integer
	elseif StringLiteral.is(vType) then
		return self.type.String
	else
		return vType
	end
end

function TypeManager:genTypeId():Ret(Integer)
	local nNewId = self._typeIdCounter + 1
	self._typeIdCounter = nNewId
	return nNewId
end

function TypeManager:getScheduleManager():Ret(clazz.ScheduleManager)
	return self._scheduleManager
end

function TypeManager:getStackManager():Ret(clazz.StackManager)
	return self._runtime:getStackManager()
end

function TypeManager:getSpaceManager():Ret(clazz.SpaceManager)
	return self._runtime:getSpaceManager()
end

return TypeManager
