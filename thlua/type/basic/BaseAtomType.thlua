

const Exception = require "thlua.Exception"
const OPER_ENUM = require "thlua.type.OPER_ENUM"

const class = require "thlua.class"
const BaseReadyType = require "thlua.type.basic.BaseReadyType"

(@let.clazz = import($class).clazz)

const BaseAtomType = class@<clazz.BaseAtomType, clazz.IAtomType>(BaseReadyType)

function.open BaseAtomType:ctor(vManager:clazz.TypeManager, ...)
	self.id = vManager:genTypeId()
	self.bits = false @? Integer
	self._typeSet = self._typeManager:atomUnifyToSet(self)
end

function BaseAtomType:foreach(vFunc)
	vFunc(self)
end

function BaseAtomType:isSingleton()
	error(tostring(self).."is singleton TODO")
	return false
end

--- meta method --------------
function BaseAtomType:meta_ipairs(vContext)
	vContext:error(tostring(self).."'s meta_ipairs not implement")
	return false
end

function BaseAtomType:meta_pairs(vContext)
	vContext:error(tostring(self).."'s meta_pairs not implement")
	return false
end

function BaseAtomType:meta_set(vContext, vKeyType, vValueType)
	vContext:error(tostring(self).." can't take set index")
end

function BaseAtomType:meta_get(vContext, vKeyType)
	vContext:error(tostring(self).." can't take get index")
	return false
end

function BaseAtomType:meta_call(vContext, vTypeTuple)
	vContext:error(tostring(self).." can't take call")
	vContext:pushRetTuples(self._typeManager:VoidRetTuples(vContext:getNode()))
end

function BaseAtomType:meta_bop_func(vContext, vOper)
	if OPER_ENUM.mathematic[vOper] then
		if vOper == "/" then
			return false, self._typeManager.builtin.bop.mathematic_divide
		else
			return false, self._typeManager.builtin.bop.mathematic_notdiv
		end
	elseif OPER_ENUM.bitwise[vOper] then
		return false, self._typeManager.builtin.bop.bitwise
	elseif OPER_ENUM.comparison[vOper] then
		return false, self._typeManager.builtin.bop.comparison
	elseif vOper == ".." then
		return false, self._typeManager.builtin.bop.concat
	else
		vContext:error("invalid bop:"..tostring(vOper))
		return false, nil
	end
end

function BaseAtomType:meta_len(vContext)
	vContext:error(tostring(self).." can't take len oper")
	return self._typeManager.type.Integer
end

function BaseAtomType:meta_uop_some(vContext, vOper)
	vContext:error(tostring(self).." can't take uop :"..vOper)
	return self._typeManager.type.Integer
end

--- native method --------------
function.pass BaseAtomType:native_next(vContext, vInitType)
	error(vContext:newException("native_next not implement"))
end

function BaseAtomType:native_tostring()
	return self._typeManager.type.String
end

function BaseAtomType:native_rawget(vContext, vKeyType)
	vContext:error(tostring(self).." rawget not implement")
	return self._typeManager.type.Nil
end

function BaseAtomType:native_rawset(vContext, vKeyType, vValueType)
	vContext:error(tostring(self).." rawset not implement")
end

function BaseAtomType:castPoly(vContext, vPolyTuple)
	vContext:error("poly cast can't work on this type:"..tostring(self))
	return false
end

function BaseAtomType:native_type()
	print("native_type not implement ")
	return self._typeManager.type.String
end

function BaseAtomType:native_getmetatable(vContext)
	return self._typeManager.MetaOrNil
end

function BaseAtomType:native_setmetatable(vContext, vTable)
	vContext:error("this type setmetatable not implement")
end

function BaseAtomType:checkTypedObject()
	return false
end

function BaseAtomType:isUnion()
	return false
end

function BaseAtomType:checkAtomUnion()
	return self
end

function BaseAtomType:isNever()
	return false
end

function BaseAtomType:isNilable()
	return false
end

function BaseAtomType:assumeIncludeAtom(vAssumeSet, vRightType, vSelfType)
	if self == vRightType then
		return self
	else
		return false
	end
end

function BaseAtomType:assumeIntersectAtom(vAssumeSet, vRightType)
	if self == vRightType then
		return self
	elseif vRightType:assumeIncludeAtom(nil, self) then
		return self
	elseif self:assumeIncludeAtom(nil, vRightType) then
		return vRightType
	else
		return false
	end
end

function BaseAtomType:putCompletion(vCompletion)
end

function BaseAtomType:setLocked()
	-- do nothing
end

function BaseAtomType:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	return false
end

return BaseAtomType
