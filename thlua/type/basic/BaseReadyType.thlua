

const Exception = require "thlua.Exception"
const OPER_ENUM = require "thlua.type.OPER_ENUM"

const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const BaseReadyType = class@<clazz.BaseReadyType, clazz.IReadyType>()

function.open BaseReadyType:ctor(vManager:clazz.TypeManager, ...)
	self._manager = vManager
	self._withnilType = false @ OrFalse(clazz.UAtomUnion)
	self.id = 0 @ Integer
end

function BaseReadyType:detailString(_, _)
	return "detailString not implement"
end

function BaseReadyType.__tostring(self)
	return self:detailString({}, false)
end

function BaseReadyType.__bor(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
	return vLeft._manager:checkedUnion(vLeft, vRight)
end

function BaseReadyType.__band(vLeft:clazz.UAllType, vRight:clazz.UAllType):Ret(clazz.UAtomUnion)
	const nTypeOrFalse = vLeft:safeIntersect(vRight)
	if nTypeOrFalse then
		return nTypeOrFalse
	else
		error("unexpected intersect")
	end
end

function BaseReadyType:unionSign()
	return tostring(self.id)
end

function BaseReadyType:mayRecursive()
	return false
end

function BaseReadyType:putCompletion(vCompletion)
end

function BaseReadyType:foreach(vFunc)
	error("foreach not implement")
end

function BaseReadyType:foreachAwait(vFunc)
	self:foreach(vFunc)
end

function BaseReadyType:isReference()
	return false
end

------------------------------------
------------------------------------
-- relation functions --------------
------------------------------------
------------------------------------

function BaseReadyType:intersectAtom(vRight)
	return self:assumeIntersectAtom(nil, vRight)
end

function BaseReadyType:includeAtom(vRight)
	return self:assumeIncludeAtom(nil, vRight)
end

function BaseReadyType:assumeIntersectSome(vAssumeSet, vRight)
	local nSomeIntersect:Boolean = false
	vRight:foreachAwait(function(vSubType)
		if not nSomeIntersect and self:assumeIntersectAtom(vAssumeSet, vSubType) then
			nSomeIntersect = true
		end
	end)
	return nSomeIntersect
end

function BaseReadyType:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	local nAllInclude:Boolean = true
	vRight:foreachAwait(function(vSubType)
		if nAllInclude and not self:assumeIncludeAtom(vAssumeSet, vSubType, vSelfType) then
			nAllInclude = false
		end
	end)
	return nAllInclude
end

function BaseReadyType:intersectSome(vRight)
	return self:assumeIntersectSome(nil, vRight)
end

function BaseReadyType:includeAll(vRight)
	return self:assumeIncludeAll(nil, vRight)
end

function BaseReadyType:safeIntersect(vRight)
	const nLeft = self
	const nRight = vRight:isReference() and vRight:checkAtomUnion() or vRight
	if not nRight:isUnion() then
		const nIntersect = nLeft:assumeIntersectAtom(nil, nRight)
		if nIntersect == true then
			return false
		else
			return nIntersect or self._manager.type.Never
		end
	else
		const nCollection = self._manager:TypeCollection()
		nRight:foreach(function(vSubType)
			local nIntersect = nLeft:assumeIntersectAtom(nil, vSubType)
			if nIntersect then
				if nIntersect == true then
					return
				else
					nCollection:put(nIntersect)
				end
			end
		end)
		return nCollection:mergeToAtomUnion()
	end
end

function BaseReadyType:assumeIncludeAtom(_, _, _)
	error("not implement")
	return false
end

function BaseReadyType:assumeIntersectAtom(_, _)
	error("not implement")
	return false
end

------------------------------------
------------------------------------
-- part type functions -------------
------------------------------------
------------------------------------
function BaseReadyType:isNever()
	return false
end

function.pass BaseReadyType:notnilType()
	return self
end

function BaseReadyType:isNilable()
	return false
end

function BaseReadyType:partTypedObject()
	return self._manager.type.Never
end

function BaseReadyType:partTypedFunction()
	return self._manager.type.Never
end

function BaseReadyType:falseType()
	return self._manager.type.Never
end

function.pass BaseReadyType:trueType()
	return self
end

function BaseReadyType:withnilType()
	local nWithNilType = self._withnilType
	if not nWithNilType then
		const nCollection = self._manager:TypeCollection()
		nCollection:put(self @? clazz.UAtomUnion)
		nCollection:put(self._manager.type.Nil)
		nWithNilType = nCollection:mergeToAtomUnion()
		self._withnilType = nWithNilType
	end
	return nWithNilType
end

function BaseReadyType:setAssigned(vContext)
end

function BaseReadyType:isAsync():Ret(False)
	return false
end

return BaseReadyType
