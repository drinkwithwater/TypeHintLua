

const Exception = require "thlua.Exception"
const OPER_ENUM = require "thlua.type.OPER_ENUM"

const class = require "thlua.class"

(@do

let.node = import("thlua.code.Node").node

let.clazz = import("thlua.class").clazz

clazz.TLongHintInfo = Template(function(vHandler)
	return Struct {
		attrSet = Dict(String, Literal(1)),
		caller = Fn(vHandler):Dots(clazz.USpaceAny),
	}
end)

clazz.IBaseNode = node.IBaseNode
clazz.IAstNode = node.IAstNode
clazz.IVirtualNode = node.IVirtualNode

clazz.UAtomUnion = Union(clazz.IAtomType, clazz.IUnionType)
clazz.UMustType = Union(clazz.UAtomUnion, clazz.AsyncTypeCom)
clazz.USpaceAny = Any
clazz.USpaceDict = IDict(Truth, clazz.USpaceAny)

clazz.USymbol = Union(clazz.ImmutVariable, clazz.LocalSymbol, clazz.AutoHolder)
clazz.UAutoTerm = Union(clazz.AutoHolder, clazz.RefineTerm)

clazz.TypeCasePair = Struct {clazz.UAtomUnion, clazz.VariableCase}
clazz.ParamInfo = Struct {
	dots=Boolean,
	num=Integer,
}

clazz.IType = Interface ({
	id=Integer,
	foreachAwait=Mfn(Fn(clazz.IAtomType)),

	detailString=Mfn(Dict(Truth, String), Boolean):Ret(String),

	intersectSome=Mfn(clazz.UMustType):Ret(Boolean),
	safeIntersect=Mfn(clazz.UMustType):Ret(OrFalse(clazz.UAtomUnion)),
	assumeIntersectSome=Mfn(OrNil(Dict(Integer, Boolean)), clazz.UMustType):Ret(Boolean),
	intersectAtom=Mfn(clazz.IAtomType):Ret(Union(Boolean, clazz.UAtomUnion)),

	includeAll=Mfn(clazz.UMustType):Ret(Boolean),
	assumeIncludeAll=Mfn(OrNil(Dict(Integer, Boolean)), clazz.UMustType, OrNil(clazz.IAtomType)):Ret(Boolean),
	includeAtom=Mfn(clazz.IAtomType):Ret(OrFalse(clazz.IAtomType)),

	mayRecursive=Mfn():Ret(Boolean),
	getManager=Mfn():Ret(clazz.TypeManager),

})

clazz.IReadyType = ExtendInterface(clazz.IType, Interface {
	setAssigned=Mfn(clazz.AssignContext),
	foreach=Mfn(Fn(clazz.IAtomType)),
	isNever=Mfn():Ret(Boolean),
	notnilType=Mfn():Ret(clazz.UAtomUnion),
	withnilType=Mfn():Ret(clazz.UAtomUnion),
	isNilable=Mfn():Ret(Boolean),
	partTypedObject=Mfn():Ret(clazz.UAtomUnion),
	partTypedFunction=Mfn():Ret(clazz.UAtomUnion),
	falseType=Mfn():Ret(clazz.UAtomUnion),
	trueType=Mfn():Ret(clazz.UAtomUnion),
	assumeIncludeAtom=Mfn(OrNil(Dict(Integer, Boolean)), clazz.IAtomType, OrNil(clazz.IAtomType)):Ret(OrFalse(clazz.IAtomType)),
	assumeIntersectAtom=Mfn(OrNil(Dict(Integer, Boolean)), clazz.IAtomType):Ret(Union(Boolean, clazz.UAtomUnion)),
	putCompletion=Mfn(clazz.FieldCompletion),
	getTypeSet=Mfn():Ret(clazz.HashableTypeSet),
})

clazz.IAtomType = ExtendInterface(clazz.IReadyType, Interface {
	bits=Integer,
	checkAtomUnion=Mfn():Ret(clazz.IAtomType),

	isSingleton=Mfn():Ret(Boolean),
	isUnion=Mfn():Ret(False),

	deEnum=Mfn():Ret(clazz.IAtomType),

	checkTypedObject=Mfn():Ret(OrFalse(clazz.TypedObject)),

	castPoly=Mfn(clazz.OperContext, clazz.TupleBuilder):Ret(OrFalse(clazz.TypedFunction, clazz.OpenFunction)),

	meta_call=Mfn(clazz.ApplyContext, clazz.UTermTuple),
	meta_invoke=Mfn(clazz.ApplyContext, clazz.IAtomType, clazz.TupleBuilder, clazz.UTermTuple),
	meta_get=Mfn(clazz.ApplyContext, clazz.IAtomType):Ret(Boolean),
	meta_set=Mfn(clazz.ApplyContext, clazz.IAtomType, clazz.RefineTerm),

	meta_pairs=Mfn(clazz.ApplyContext):Ret(OrFalse(clazz.UTypeTuple)),
	meta_ipairs=Mfn(clazz.OperContext):Ret(OrFalse(clazz.UTypeTuple)),
	meta_len=Mfn(clazz.OperContext):Ret(clazz.UAtomUnion),
	meta_uop_some=Mfn(clazz.OperContext, String):Ret(clazz.UAtomUnion),
	meta_bop_func=Mfn(clazz.OperContext, String):Ret(True, clazz.IAtomType):Ret(False, Union(clazz.IAtomType, Nil)),

	native_rawget=Mfn(clazz.ApplyContext, clazz.IAtomType):Ret(clazz.UAtomUnion),
	native_rawset=Mfn(clazz.ApplyContext, clazz.IAtomType, clazz.RefineTerm),
	native_next=Mfn(clazz.OperContext, clazz.UAtomUnion):Ret(clazz.UAtomUnion, Dict(clazz.IAtomType, clazz.UAtomUnion)),
	native_getmetatable=Mfn(clazz.OperContext):Ret(clazz.UAtomUnion),
	native_setmetatable=Mfn(clazz.ApplyContext, Union(clazz.SealTable, clazz.OpenTable)),

	native_tostring=Mfn():Ret(clazz.String),
	native_type=Mfn():Ret(clazz.UAtomUnion),
})

clazz.IUnionType = ExtendInterface(clazz.IReadyType, Interface {
	bits=Integer,
	checkAtomUnion=Mfn():Ret(clazz.IUnionType),

	initWithTypeId=Mfn(Integer, clazz.HashableTypeSet),

	isUnion=Mfn():Ret(True),

	putAwait=Mfn(clazz.IAtomType),
})

clazz.UOpenReturn = Union(clazz.FixedTermTuple, clazz.RefineTerm)
clazz.OpenCaller = Fn(clazz.OpenStack, clazz.UTermTuple):Ret(clazz.UOpenReturn, OrNil(clazz.UAtomUnion))
clazz.OpenPolyCaller = Fn(clazz.OpenStack, OrFalse(clazz.TupleBuilder), clazz.UTermTuple):Ret(clazz.UOpenReturn, OrNil(clazz.UAtomUnion))

end)

const BaseReadyType = class@<clazz.BaseReadyType, clazz.IReadyType>()

function.open BaseReadyType:ctor(vManager:clazz.TypeManager, ...)
	self._manager = vManager
	self._withnilType = false @ OrFalse(clazz.UAtomUnion)
	self.id = 0 @ Integer
	self._typeSet = false @? clazz.HashableTypeSet
end

function BaseReadyType:detailString(_, _)
	return "detailString not implement"
end

function BaseReadyType:__tostring()
	return self:detailString({}, false)
end

function BaseReadyType:mayRecursive()
	return false
end

function BaseReadyType:putCompletion(vCompletion)
end

function BaseReadyType:foreach(vFunc)
	error("foreach not implement")
end

function BaseReadyType:foreachAwait(vFunc)
	self:foreach(vFunc)
end

------------------------------------
------------------------------------
-- relation functions --------------
------------------------------------
------------------------------------

function BaseReadyType:intersectAtom(vRight)
	return self:assumeIntersectAtom(nil, vRight)
end

function BaseReadyType:includeAtom(vRight)
	return self:assumeIncludeAtom(nil, vRight)
end

function BaseReadyType:assumeIntersectSome(vAssumeSet, vRight)
	local nSomeIntersect:Boolean = false
	vRight:foreachAwait(function(vSubType)
		if not nSomeIntersect and self:assumeIntersectAtom(vAssumeSet, vSubType) then
			nSomeIntersect = true
		end
	end)
	return nSomeIntersect
end

function BaseReadyType:assumeIncludeAll(vAssumeSet, vRight, vSelfType)
	local nAllInclude:Boolean = true
	vRight:foreachAwait(function(vSubType)
		if nAllInclude and not self:assumeIncludeAtom(vAssumeSet, vSubType, vSelfType) then
			nAllInclude = false
		end
	end)
	return nAllInclude
end

function BaseReadyType:intersectSome(vRight)
	return self:assumeIntersectSome(nil, vRight)
end

function BaseReadyType:includeAll(vRight)
	return self:assumeIncludeAll(nil, vRight)
end

function BaseReadyType:safeIntersect(vRight)
	const nLeft = self
	const nRight = vRight:checkAtomUnion()
	if not nRight:isUnion() then
		const nIntersect = nLeft:assumeIntersectAtom(nil, nRight)
		if nIntersect == true then
			return false
		else
			return nIntersect or self._manager.type.Never
		end
	else
		const nTypeSet = self._manager:HashableTypeSet()
		nRight:foreach(function(vSubType)
			local nIntersect = nLeft:assumeIntersectAtom(nil, vSubType)
			if nIntersect then
				if nIntersect == true then
					return
				else
					nTypeSet:putType(nIntersect)
				end
			end
		end)
		return self._manager:unifyAndBuild(nTypeSet)
	end
end

function BaseReadyType:assumeIncludeAtom(_, _, _)
	error("not implement")
	return false
end

function BaseReadyType:assumeIntersectAtom(_, _)
	error("not implement")
	return false
end

------------------------------------
------------------------------------
-- part type functions -------------
------------------------------------
------------------------------------
function BaseReadyType:isNever()
	return false
end

function.pass BaseReadyType:notnilType()
	return self
end

function BaseReadyType:isNilable()
	return false
end

function BaseReadyType:partTypedObject()
	return self._manager.type.Never
end

function BaseReadyType:partTypedFunction()
	return self._manager.type.Never
end

function BaseReadyType:falseType()
	return self._manager.type.Never
end

function.pass BaseReadyType:trueType()
	return self
end

function BaseReadyType:withnilType()
	local nWithNilType = self._withnilType
	if not nWithNilType then
		const nTypeSet = self._manager:HashableTypeSet()
		nTypeSet:putType(self @? clazz.UAtomUnion)
		nTypeSet:putAtom(self._manager.type.Nil)
		nWithNilType = self._manager:unifyAndBuild(nTypeSet)
		self._withnilType = nWithNilType
	end
	return nWithNilType
end

function BaseReadyType:setAssigned(vContext)
end

function BaseReadyType:getTypeSet()
	return self._typeSet
end

function BaseReadyType:getManager()
	return self._manager
end

return BaseReadyType
