
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const class = require "thlua.class"


(@do
    let.clazz = import($class).clazz
    let.AddPair = Struct {
        node=clazz.IBaseNode,
        value=clazz.USpaceAny,
    }
end)

const Enum = class@<clazz.Enum, false>(BaseAtomType)

function.open Enum:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vSuperType:clazz.IAtomType)
    self._superType = vSuperType
    self._set = {} @ Dict(clazz.IAtomType, True)
    self._closed = false @ Boolean
    self._toAddList = {} @ List(AddPair)
    self._addEvent = false @ OrFalse(clazz.ScheduleEvent)
	self.bits = vSuperType.bits
    const nTask = vManager:getScheduleManager():newTask(vNode)
    self._task = nTask
    self._task:runAsync(function()
        while true do
            const nAddList = self._toAddList
            if #nAddList == 0 then
                const nEvent = nTask:makeEvent()
                self._addEvent = nEvent
                nEvent:wait()
                self._addEvent = false
            end
            self._toAddList = {}
            for i, addPair in ipairs(nAddList) do
                const nType = vManager:easyToMustType(addPair.node, addPair.value)
                nType:foreachAwait(function(vAtomType)
                    assert(vSuperType:includeAtom(vAtomType) and vAtomType, vNode:toExc("enum add invalid type"))
                    assert(not self._closed, vNode:toExc("enum is closed"))
                    self._set[vAtomType] = true
                end)
            end
        end
    end)
end

function Enum:getSuperType():Ret(clazz.UAtomUnion)
    return self._superType
end

function Enum:addType(vNode:clazz.IBaseNode, vValue:clazz.USpaceAny)
    const nAddList = self._toAddList
    nAddList[#nAddList + 1] = {
        node=vNode,
        value=vValue,
    }
    const nAddEvent = self._addEvent
    if nAddEvent then
        nAddEvent:wakeup()
    end
end

function Enum:native_type()
    const nSuperType = self._superType
    if nSuperType:isUnion() then
        return self._manager.type.String
    else
        return nSuperType:native_type()
    end
end

function Enum:deEnum():Ret(clazz.IAtomType)
	return self._superType
end

function Enum:assumeIncludeAtom(vAssumetSet, vType, _)
    self._closed = true
    if self._set[vType] then
        return vType
    else
        return false
    end
end

function Enum:detailString(vCache, vVerbose)
    return "Enum("..self._superType:detailString(vCache, vVerbose)..")"
end

function Enum:isSingleton()
	return false
end

return Enum
