
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const class = require "thlua.class"


(@let.clazz = import($class).clazz)

const IntegerLiteral = class@<clazz.IntegerLiteral, false>(BaseAtomType)

function.open IntegerLiteral:ctor(vManager:clazz.TypeManager, vLiteral:Integer)
	self.literal=vLiteral
	self.bits=TYPE_BITS.NUMBER
end

function IntegerLiteral:getLiteral():Ret(Integer)
	return self.literal
end

function IntegerLiteral:native_type()
	return self._manager:Literal("number")
end

function IntegerLiteral:meta_uop_some(vContext, vOper)
	if vOper == "-" then
		return self._manager:Literal(-self.literal)
	elseif vOper == "~" then
		return self._manager:Literal(~self.literal)
	else
		return self._manager.type.Never
	end
end

function IntegerLiteral:detailString(vCache, vVerbose)
	return "Literal("..self.literal..")"
end

function IntegerLiteral:isSingleton()
	return true
end

return IntegerLiteral
