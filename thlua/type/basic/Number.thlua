
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const Integer = require "thlua.type.basic.Integer"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const BasePrimsType = require "thlua.type.basic.BasePrimsType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const Number = class@<clazz.Number, false>(BasePrimsType)

function.open Number:ctor(vManager:clazz.TypeManager)
	self.bits=TYPE_BITS.NUMBER
end

function Number:detailString(vVerbose:Boolean)
	return "Number"
end

function Number:meta_uop_some(vContext, vOper)
	return self
end

function Number:native_getmetatable(vContext)
	return self._typeManager.type.Nil
end

function Number:native_type()
	return self._typeManager:Literal("number")
end

function Number:assumeIncludeAtom(vAssumetSet, vType, _)
	if FloatLiteral.is(vType) then
		return self
	elseif IntegerLiteral.is(vType) then
		return self
	else
		if Integer.is(vType) then
			return self
		elseif self == vType then
			return self
		else
			return false
		end
	end
end

function Number:isSingleton()
	return false
end

return Number
