
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const TypedFunction = require "thlua.type.func.TypedFunction"
const SealPolyFunction = require "thlua.type.func.SealPolyFunction"
const AutoFunction = require "thlua.type.func.AutoFunction"
const MemberFunction = require "thlua.type.func.MemberFunction"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const AutoMemberFunction = class@<clazz.AutoMemberFunction, false>(SealPolyFunction)

function AutoMemberFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return "AutoMemberFunction@"..tostring(self._node)
end

function AutoMemberFunction:needPolyArgs():Ret(Boolean)
	return self._paramInfo.num > 1
end

function AutoMemberFunction:indexAutoFn(vNode:clazz.IBaseNode, vType:clazz.UMustType):Ret(clazz.AutoFunction)
	const nFn = self:noCtxCastPoly(vNode, self._manager:spacePack(vNode, vType))
	if AutoFunction.is(nFn) then
		return nFn
	else
		error("auto function is expected here")
	end
end

function AutoMemberFunction:indexTypeFn(vNode:clazz.IBaseNode, vType:clazz.UMustType):Ret(clazz.TypedFunction)
	const nFn = self:noCtxCastPoly(vNode, self._manager:spacePack(vNode, vType))
	if AutoFunction.is(nFn) then
		return nFn:getFnAwait()
	elseif TypedFunction.is(nFn) then
		return nFn
	else
		error("class factory can't member function")
	end
end

return AutoMemberFunction
