
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const BaseFunction = class@<clazz.BaseFunction, false>(BaseAtomType)

function.open BaseFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, ...)
	self.bits=TYPE_BITS.FUNCTION
	self._node = vNode
	self._useNodeSet = false @ OrFalse(Dict(clazz.IBaseNode, True))
end

function BaseFunction:native_type()
	return self._typeManager:Literal("function")
end

function BaseFunction:detailString(vToStringCache, vVerbose)
	return "BaseFunction"
end

function BaseFunction:meta_call(vContext, vTermTuple)
	error(vContext:newException("function "..tostring(self).." can't apply as call"))
end

function BaseFunction:isSingleton()
	return false
end

function BaseFunction:getNode()
	return self._node
end

function BaseFunction:getUseNodeSet()
	return self._useNodeSet
end

return BaseFunction
