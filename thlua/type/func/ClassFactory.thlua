
const ClassTable = require "thlua.type.object.ClassTable"
const SealFunction = require "thlua.type.func.SealFunction"
const Exception = require "thlua.Exception"
const RecurChain = require "thlua.stack.context.RecurChain"

const class = require@<let.clazz> "thlua.class"

const ClassFactory = class@<clazz.ClassFactory, false>(SealFunction)
function ClassFactory.__tostring(self:clazz.ClassFactory)
	return "class@"..tostring(self._node)
end

function.open ClassFactory:ctor(vManager:clazz.TypeManager, ...)
	const nTask = self._task
	self._classBuildEvent=nTask:makeEvent()

	-- items for class init
	const nClassTask = vManager:getScheduleManager():newHintTask(self._node)
	self._classTask = nClassTask
	self._classTableOrInitEvent = nClassTask:makeEvent() @ Union(clazz.ClassTable, clazz.ScheduleEvent)
end

function ClassFactory:initClassTableAsync(vBaseGetter:Fn():Ret(OrFalse(clazz.ClassTable), clazz.Interface))
	self._classTask:runAsync(function()
		const nInitEvent = self._classTableOrInitEvent
		assert(not ClassTable.is(nInitEvent), "class has been inited")
		self._classTableOrInitEvent = ClassTable.new(self._typeManager, self._node, self._buildStack, self, vBaseGetter())
		nInitEvent:wakeup()
	end)
end

function ClassFactory:waitClassTable():Ret(clazz.ClassTable)
	const nTableOrEvent = self._classTableOrInitEvent
	if ClassTable.is(nTableOrEvent) then
		return nTableOrEvent
	else
		nTableOrEvent:wait()
		return self._classTableOrInitEvent @> clazz.ClassTable
	end
end

function ClassFactory:finishTableBuild()
	if not self._classBuildEvent:isWaken() then
		const nClassTable = self._classTableOrInitEvent
		assert(ClassTable.is(nClassTable), "class is not inited")
		nClassTable:implInterface()
		const nRecurChain = RecurChain.new(self._node)
		nClassTable:memberFunctionFillSelf(nRecurChain, nClassTable)
		self._classBuildEvent:wakeup()
	end
end

function ClassFactory:waitTableBuild()
	self:waitClassTable()
	self:startPreBuild()
	self:startLateBuild()
	-- class的factory不用等，其他的function需要等待build完成
	if coroutine.running() ~= self._task:getSelfCo() then
		self._classBuildEvent:wait()
	end
end

return ClassFactory
