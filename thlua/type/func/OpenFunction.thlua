
const VariableCase = require "thlua.term.VariableCase"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const TermTuple = require "thlua.tuple.TermTuple"
const Exception = require "thlua.Exception"
const ClassTable = require "thlua.type.object.ClassTable"
const SealTable = require "thlua.type.object.SealTable"

const BaseFunction = require "thlua.type.func.BaseFunction"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const OpenFunction = class@<clazz.OpenFunction, false>(BaseFunction)

function.open OpenFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vUpState:OrNil(False, clazz.LexBranchCase))
	self._func=nil@OrNil(clazz.OpenCaller)
	self._polyWrapper=false@OrFalse(Fn(clazz.TupleBuilder):Ret(clazz.OpenFunction))
	self._lexBranchCase = vUpState or false
	self._useNodeSet = {}
end

function OpenFunction:lateInit(vNativeFunc:clazz.OpenCaller, vPolyNativeFunc:OrNil(Fn(clazz.TupleBuilder):Ret(clazz.OpenFunction)))
	self._func = vNativeFunc
	self._polyWrapper = vPolyNativeFunc or false
end

function OpenFunction:castPoly(vContext, vPolyTuple)
	const nPolyWrapper = self._polyWrapper
	if nPolyWrapper then
		return nPolyWrapper(vPolyTuple)
	else
		return self
	end
end

function OpenFunction:lateInitFromBuilder(vPolyParInfo:OrFalse(clazz.ParamInfo), vFunc:Fn(clazz.BaseStack, OrFalse(clazz.TupleBuilder), clazz.UTermTuple):Ret(clazz.FixedTermTuple, clazz.UAtomUnion)):Ret(clazz.OpenFunction)
	self._func = function(vStack, vTermTuple)
		return vFunc(vStack, false, vTermTuple)
	end
	if vPolyParInfo then
		self._polyWrapper = function(vPolyTuple)
			const nOpenFn = OpenFunction.new(self._typeManager, self._node, self._lexBranchCase)
			nOpenFn:lateInit(function(vStack, vTermTuple)
				return vFunc(vStack, vPolyTuple, vTermTuple)
			end)
			return nOpenFn
		end
	end
	return self
end

function OpenFunction:lateInitFromMapGuard(vMapObject:clazz.Interface)
	const nNil = self._typeManager.type.Nil
	const nFalse = self._typeManager.type.False
	const nFn:clazz.OpenCaller = function(vStack, vTermTuple)
		assert(TermTuple.isFixed(vTermTuple), "guard function can't take auto term")
		return vStack:withOnePushContext(vStack:getNode(), function(vContext)
			const nTerm = vTermTuple:get(vContext, 1)
			nTerm:foreach(function(vType, vCase)
				vContext:withCase(vCase, function()
					for nMapType, nGuardType in pairs(vMapObject:getValueDict()) do
						nGuardType = nGuardType:checkAtomUnion():notnilType()
						if vType:intersectSome(nGuardType) then
							const nGuardCase = VariableCase.new()
							nGuardCase:put_and(nTerm:attachImmutVariable(), nGuardType)
							vContext:pushFirstAndTuple(nMapType, nil, nGuardCase)
							if not nGuardType:includeAll(vType) then
								vContext:pushFirstAndTuple(nNil)
							end
						else
							vContext:pushFirstAndTuple(nNil)
						end
					end
				end)
			end)
		end):mergeFirst(), vStack:mergeEndErrType()
	end
	self._func = nFn
	return self
end

function OpenFunction:lateInitFromIsGuard(vType:clazz.USpaceAny)
	const nTrue = self._typeManager.type.True
	const nFalse = self._typeManager.type.False
	const nFn:clazz.OpenCaller = function(vStack, vTermTuple)
		const nGuardType = self._typeManager:easyToMustType(self._node, vType):checkAtomUnion()
		assert(TermTuple.isFixed(vTermTuple), "guard function can't take auto term")
		return vStack:withOnePushContext(vStack:getNode(), function(vContext)
			const nTerm = vTermTuple:get(vContext, 1)
			nTerm:foreach(function(vType, vCase)
				vContext:withCase(vCase, function()
					if vType:intersectSome(nGuardType) then
						const nGuardCase = VariableCase.new()
						nGuardCase:put_and(nTerm:attachImmutVariable(), nGuardType)
						vContext:pushFirstAndTuple(nTrue, nil, nGuardCase)
						if not nGuardType:includeAll(vType) then
							vContext:pushFirstAndTuple(nFalse)
						end
					else
						vContext:pushFirstAndTuple(nFalse)
					end
				end)
			end)
		end):mergeFirst(), vStack:mergeEndErrType()
	end
	self._func = nFn
	return self
end

function OpenFunction:detailString(v, vVerbose)
	return "OpenFunction@"..tostring(self._node)
end

function OpenFunction:newStack(vNode:clazz.IBaseNode, vApplyStack:clazz.BaseStack)
	return self._typeManager:getRuntime():OpenStack(vNode, self._lexBranchCase, self, vApplyStack, false)
end

function OpenFunction:meta_call(vContext, vTermTuple)
	const nRet, nStack = self:meta_open_call(vContext, vTermTuple, false)
	vContext:raiseError(nStack:mergeEndErrType())
	vContext:pushOpenReturn(nRet)
end

function OpenFunction:meta_open_call(vContext:clazz.ApplyContext, vTermTuple:clazz.UTermTuple, vIsRequire:Boolean):Ret(clazz.UOpenReturn, clazz.OpenStack)
	const nNode = vContext:getNode()
	const nNewStack = self._typeManager:getRuntime():OpenStack(nNode, self._lexBranchCase, self, vContext:getStack(), vIsRequire)
	const nSealTask = self._typeManager:getScheduleManager():tryGetSealTask()
	if not nSealTask then
		error(nNode:toExc("open function must be called in an seal stack"))
	end
	return nSealTask:openCall(self._func!, nNewStack, vTermTuple), nNewStack
end

function OpenFunction:findRequireStack():Ret(OrFalse(clazz.OpenStack))
	const nLexBranchCase = self._lexBranchCase
	if not nLexBranchCase then
		return false
	end
	return nLexBranchCase.branch:getStack():findRequireStack()
end

function OpenFunction:isSingleton()
	return true
end

function OpenFunction:mayRecursive()
	return false
end

return OpenFunction
