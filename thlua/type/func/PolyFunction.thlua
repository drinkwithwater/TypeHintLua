
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const SealFunction = require "thlua.type.func.SealFunction"
const TypedFunction = require "thlua.type.func.TypedFunction"
const BaseFunction = require "thlua.type.func.BaseFunction"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const PolyFunction = class@<clazz.PolyFunction, false>(BaseFunction)

function.open PolyFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vFunc:AnyFunction, vPolyParNum:Integer, ...)
	self._polyParNum=vPolyParNum
	self._makerFn=vFunc
end

function PolyFunction:detailString(vToStringCache:Dict(Truth, String), vVerbose:Boolean):Ret(String)
	return "PolyFunction@"..tostring(self._node)
end

function PolyFunction:getPolyParNum():Ret(Integer)
	return self._polyParNum
end

function.pass PolyFunction:makeFn(vTemplateSign:String, vTypeList:List(clazz.UAtomUnion)):Ret(Union(clazz.TypedFunction, clazz.SealFunction))
	error("not implement")
end

function PolyFunction:noCtxCastPoly(vNode:clazz.IBaseNode, vTypeList:List(clazz.UMustType)):Ret(Union(clazz.SealFunction, clazz.TypedFunction))
	assert(#vTypeList == self._polyParNum, vNode:toExc("PolyFunction type args num not match"))
	const nAtomUnionList:List(clazz.UAtomUnion) = {}
	for i=1, #vTypeList do
		nAtomUnionList[i] = vTypeList[i]!:checkAtomUnion()
	end
	const nKey = self._manager:signTemplateArgs(nAtomUnionList)
	return self:makeFn(nKey, nAtomUnionList)
end

function PolyFunction:castPoly(vContext, vPolyTuple)
	const nFn = self:noCtxCastPoly(vContext:getNode(), vPolyTuple:buildPolyArgs())
	return nFn:getFnAwait()
end

function PolyFunction:native_type()
	return self._manager:Literal("function")
end

function PolyFunction:meta_call(vContext, vTypeTuple)
	error("poly function meta_call TODO")
	-- TODO
end

function PolyFunction:mayRecursive()
	return false
end

function PolyFunction:isSingleton()
	return false
end

return PolyFunction
