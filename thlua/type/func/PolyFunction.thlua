
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const Exception = require "thlua.Exception"

const SealFunction = require "thlua.type.func.SealFunction"
const TypedFunction = require "thlua.type.func.TypedFunction"
const BaseFunction = require "thlua.type.func.BaseFunction"
const class = require@<let.clazz> "thlua.class"

const PolyFunction = class@<clazz.PolyFunction, false>(BaseFunction)

function.open PolyFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode, vFunc:clazz.PolyLambda, vPolyParInfo:clazz.ParamInfo, ...)
	self._paramInfo=vPolyParInfo
	self._makerFn=vFunc
end

function PolyFunction:detailString(vVerbose:Boolean):Ret(String)
	return "PolyFunction@"..tostring(self._node)
end

function PolyFunction:getPolyParNum():Ret(Integer)
	return self._paramInfo.num
end

function.nocheck PolyFunction:makeFn(vTupleBuilder:clazz.TupleBuilder):Ret(Union(clazz.TypedFunction, clazz.SealFunction))
	error("not implement")
end

function PolyFunction:noCtxCastPoly(vNode:clazz.IBaseNode, vTupleBuilder:clazz.TupleBuilder):Ret(Union(clazz.SealFunction, clazz.TypedFunction))
	vTupleBuilder:argsMatch(vNode, self._paramInfo)
	return self:makeFn(vTupleBuilder)
end

function PolyFunction:castPoly(vContext, vPolyTuple)
	const nFn = self:noCtxCastPoly(vContext:getNode(), vPolyTuple)
	return nFn:getFnAwait()
end

function PolyFunction:native_type()
	return self._typeManager:Literal("function")
end

function PolyFunction:meta_call(vContext, vTermTuple)
	error("polyfunction meta call not implement")
end

function PolyFunction:mayRecursive()
	return false
end

function PolyFunction:isSingleton()
	return false
end

return PolyFunction
