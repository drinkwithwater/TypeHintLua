
const class = require@<let.clazz> "thlua.class"
const PolyFunction = require "thlua.type.func.PolyFunction"
const SealFunction = require "thlua.type.func.SealFunction"
const BaseAtomType = require "thlua.type.basic.BaseAtomType"

const SealPolyFunction = class@<clazz.SealPolyFunction, false>(PolyFunction)

function.open SealPolyFunction:ctor(_,_,_,_, vLexBranchCase:clazz.LexBranchCase, vDeduceFn:OrNil(Fn(clazz.SealPolyFunction, clazz.UTermTuple):Ret(clazz.TupleBuilder)), vIsMember:OrNil(Boolean))
	self._fnDict = {} @ Dict(String, clazz.SealFunction)
	self._lexBranchCase = vLexBranchCase
	self._useNodeSet = {}
	self._autoDeducePolyArgs = vDeduceFn or false
	self._trivialMember = vIsMember and self._paramInfo.num == 1 or false
end

-- poly function schedule by need, so member function like 'function xxx:xxx(...)'' end need to cast poly manually
function SealPolyFunction:tryMemberTrivialize(vNode:clazz.IBaseNode, vSelfType:clazz.BaseAtomType):Ret(OrFalse(clazz.AutoFunction))
	if self._trivialMember then
		return self:noCtxCastPoly(vNode, self._typeManager:spacePack(vNode, vSelfType)) @> clazz.AutoFunction
	else
		return false
	end
end

function SealPolyFunction:makeFn(vTupleBuilder:clazz.TupleBuilder):Ret(clazz.SealFunction)
	const nHash = vTupleBuilder:calcPolyArgHash()
	const nFn = self._fnDict[nHash]
	if not nFn then
		const nResult = self._makerFn(vTupleBuilder)
		if SealFunction.is(nResult) then
			self._fnDict[nHash] = nResult
            self._lexBranchCase.branch:getStack():getSealStack():scheduleSealType(nResult)
			return nResult
		else
			error("poly function must return mono-function type but got:"..tostring(nResult))
		end
	else
		return nFn
	end
end

function SealPolyFunction:meta_call(vContext, vTermTuple)
	const nAutoDeducePolyArgs = self._autoDeducePolyArgs
	if not nAutoDeducePolyArgs then
		vContext:error("class factory must take poly args")
		return
	end
	const nTupleBuilder = nAutoDeducePolyArgs(self, vTermTuple)
	self:makeFn(nTupleBuilder):meta_call(vContext, vTermTuple)
end

function SealPolyFunction:castToTypedFn(vContext:clazz.OperContext, vTypedFn:clazz.TypedFunction)
	const nAutoDeducePolyArgs = self._autoDeducePolyArgs
	if not nAutoDeducePolyArgs then
		vContext:error("class factory cast to typed function TODO")
		return
	end
	const nTermTuple = vTypedFn:getParTuple():makeTermTuple(vContext)
	const nTupleBuilder = nAutoDeducePolyArgs(self, nTermTuple)
	const nAutoFn = self:makeFn(nTupleBuilder) @> clazz.AutoFunction
	nAutoFn:checkWhenCast(vContext, vTypedFn)
end

function.pass SealPolyFunction:newStack(vNode:clazz.IBaseNode, vApplyStack:clazz.BaseStack):Ret(clazz.OpenStack)
	return self._typeManager:getRuntime():DeduceStack(vNode, self._lexBranchCase, self, vApplyStack)
end

return SealPolyFunction