
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const TypeTupleDots = require "thlua.tuple.TypeTupleDots"
const Exception = require "thlua.Exception"
const TermTuple = require "thlua.tuple.TermTuple"
const RetBuilder = require "thlua.tuple.RetBuilder"
const Node = require "thlua.code.Node"

const BaseFunction = require "thlua.type.func.BaseFunction"
const class = require "thlua.class"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const TypedFunction = class@<clazz.TypedFunction, false>(BaseFunction)

function.open TypedFunction:ctor(vManager:clazz.TypeManager, vNode:clazz.IBaseNode,
	vParTuple:clazz.UTypeTuple, vRetTuples:OrFalse(clazz.RetTuples)
)
	self._dirtyProcessor = vManager:getDirtyProcessor()
	self._retBuilder=false @OrFalse(clazz.RetBuilder) -- RetBuilder.new(vManager, vNode)
	self._parTuple=vParTuple
	self._retTuples=vRetTuples
end

function TypedFunction:attachRetBuilder():Ret(clazz.RetBuilder)
	local nRetBuilder = self._retBuilder
	if not nRetBuilder then
		nRetBuilder = RetBuilder.new(self._manager, self._node)
		self._retBuilder = nRetBuilder
	end
	return nRetBuilder
end

function TypedFunction:chainDots(vDebugNode:clazz.IBaseNode, vType:Any)
	if self._retTuples then
		error(vDebugNode:toExc("fn building is finish, can't call Dots(...)"))
	end
	if self._retBuilder then
		error(vDebugNode:toExc("fn can't call Dots after Ret(...) or RetDots(...)"))
	end
	local nParTuple = self._parTuple
	if TypeTupleDots.is(nParTuple) then
		error(vDebugNode:toExc("use Dots but tuple has dots"))
	end
	const nType = self._dirtyProcessor:easyToType(vDebugNode, vType)
	self._parTuple = nParTuple:Dots(nType)
end

function TypedFunction:Dots(vType:Any):Ret(clazz.TypedFunction)
	const nDebugNode = Node.newDebugNode()
	self:chainDots(nDebugNode, vType)
	return self
end

function TypedFunction:RetDots(...):Ret(clazz.TypedFunction)
	const nDebugNode = Node.newDebugNode()
	-- TODO check ... is type
	assert(not self._retTuples, nDebugNode:toExc("fn building is finish, can't call RetDots"))
	self:attachRetBuilder():chainRetDots(nDebugNode, ...)
	return self
end

function TypedFunction:Ret(...):Ret(clazz.TypedFunction)
	const nDebugNode = Node.newDebugNode()
	assert(not self._retTuples, nDebugNode:toExc("fn building is finish, can't call Ret"))
	self:attachRetBuilder():chainRet(nDebugNode, ...)
	return self
end

function TypedFunction:Err(...):Ret(clazz.TypedFunction)
	const nDebugNode = Node.newDebugNode()
	assert(not self._retTuples, nDebugNode:toExc("fn building is finish, can't call Err"))
	self:attachRetBuilder():chainErr(nDebugNode, ...)
	return self
end

function TypedFunction:finish():Ret(clazz.TypedFunction)
	self:_buildRetTuples()
	return self
end

function TypedFunction:_buildRetTuples():Ret(clazz.RetTuples)
	local nRetTuples = self._retTuples
	if not nRetTuples then
		nRetTuples = self:attachRetBuilder():build()
		self._retTuples = nRetTuples
	end
	return nRetTuples
end

function TypedFunction:native_type()
	return self._manager:Literal("function")
end

function TypedFunction:detailString(vToStringCache, vVerbose)
	const nRetTuples = self:_buildRetTuples()
	local nCache = vToStringCache[self]
	if nCache then
		return nCache
	end
	vToStringCache[self] = "fn-..."
	const nResult = "fn-" .. self._parTuple:detailString(vToStringCache, vVerbose)..
									"->"..nRetTuples:detailString(vToStringCache, vVerbose)
	vToStringCache[self] = nResult
	return nResult
end

function TypedFunction:meta_call(vContext, vTermTuple)
	const nRetTuples = self:_buildRetTuples()
	const nTypeTuple = self._parTuple
	vContext:matchArgsToTypeTuple(vContext:getNode(), vTermTuple, nTypeTuple)
	vContext:pushRetTuples(nRetTuples)
end

function TypedFunction:assumeIncludeFn(vAssumeSet:Dict(Integer, Boolean), vRight:clazz.TypedFunction):Ret(Boolean)
	local nLeftRetTuples = self:_buildRetTuples()
	local nRightRetTuples = vRight:_buildRetTuples()
	if not vRight:getParTuple():assumeIncludeTuple(vAssumeSet, self._parTuple) then
		return false
	end
	if not nLeftRetTuples:assumeIncludeTuples(vAssumeSet, nRightRetTuples) then
		return false
	end
	return true
end

function TypedFunction:assumeIncludeAtom(vAssumeSet, vRight, _)
	if self == vRight then
		return self
	end
	if not TypedFunction.is(vRight) then
		return false
	end
	const nMgr = self._manager
	const nPair = self._manager:makePair(self, vRight)
	if not vAssumeSet then
		return self:assumeIncludeFn({[nPair]=true}, vRight) and self
	end
	const nAssumeResult = vAssumeSet[nPair]
	if nAssumeResult ~= nil then
		return nAssumeResult and self
	end
	vAssumeSet[nPair] = true
	local nAssumeInclude = self:assumeIncludeFn(vAssumeSet, vRight)
	if not nAssumeInclude then
		vAssumeSet[nPair] = false
		return false
	else
		return self
	end
end

function TypedFunction:getParTuple():Ret(clazz.UTypeTuple)
	self:_buildRetTuples()
	return self._parTuple
end

function TypedFunction:getRetTuples():Ret(clazz.RetTuples)
	return self:_buildRetTuples()
end

function TypedFunction:partTypedFunction()
	return self
end

function TypedFunction:mayRecursive()
	return true
end

function TypedFunction:getFnAwait():Ret(clazz.TypedFunction)
	return self
end

return TypedFunction
