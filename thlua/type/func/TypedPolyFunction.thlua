
const class = require@<let.clazz> "thlua.class"
const PolyFunction = require "thlua.type.func.PolyFunction"
const TypedFunction = require "thlua.type.func.TypedFunction"

const TypedPolyFunction = class@<clazz.TypedPolyFunction, false>(PolyFunction)

function.open TypedPolyFunction:ctor(...)
	self._fnDict = {} @ Dict(String, clazz.TypedFunction)
end

function TypedPolyFunction:makeFn(vTupleBuilder:clazz.TupleBuilder):Ret(clazz.TypedFunction)
	const nHash = vTupleBuilder:calcPolyArgHash()
	const nFn = self._fnDict[nHash]
	if not nFn then
		const nResult = self._makerFn(vTupleBuilder)
		if TypedFunction.is(nResult) then
			self._fnDict[nHash] = nResult
			return nResult
		else
			error("poly function must return mono-function type but got:"..tostring(nResult))
		end
	else
		return nFn
	end
end

function TypedPolyFunction:meta_call(vContext, vTermTuple)
	const nTypeTuple = vTermTuple:checkTypeTuple()
	if not nTypeTuple then
		vContext:error("put auto term in poly function")
	else
		const nTupleBuilder = nTypeTuple:makeTupleBuilder()
		self:makeFn(nTupleBuilder):meta_call(vContext, vTermTuple)
	end
end

return TypedPolyFunction