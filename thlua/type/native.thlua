
const BaseReferSpace = require "thlua.space.BaseReferSpace"
const SpaceValue = require "thlua.space.SpaceValue"
const TermTuple = require "thlua.tuple.TermTuple"
const TypedFunction = require "thlua.type.func.TypedFunction"
const SealTable = require "thlua.type.object.SealTable"
const OpenTable = require "thlua.type.object.OpenTable"
const AutoTable = require "thlua.type.object.AutoTable"
const RefineTerm = require "thlua.term.RefineTerm"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const Integer = require "thlua.type.basic.Integer"
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const Number = require "thlua.type.basic.Number"
const Truth = require "thlua.type.basic.Truth"
const Exception = require "thlua.Exception"
const VariableCase = require "thlua.term.VariableCase"

const native = {}

(@do
	let.clazz = import("thlua.class").clazz
	let.StringToAtomUnion = Dict(String, clazz.UAtomUnion)
end)

function native.fixedNativeOpenFunction(vManager:clazz.TypeManager,
	vNativeFunc:Fn(clazz.OperContext, clazz.FixedTermTuple):Ret(Union(clazz.FixedTermTuple, clazz.RefineTerm), OrNil(clazz.UAtomUnion))
):Ret(clazz.OpenFunction)
	const nOpenFn = vManager:newNativeOpenFunction()
	nOpenFn:lateInit(function(vStack, vTermTuple)
		assert(TermTuple.isFixed(vTermTuple), Exception.new("auto term can't be used here", vStack:getNode()))
		return vNativeFunc(vStack:inplaceOper(), vTermTuple)
	end)
	return nOpenFn
end

function native.metaNativeOpenFunction(vManager:clazz.TypeManager,
	vNativeFunc:Fn(clazz.ApplyContext, clazz.IAtomType)
):Ret(clazz.OpenFunction)
	const nOpenFn = vManager:newNativeOpenFunction()
	nOpenFn:lateInit(function(vStack, vTermTuple)
		assert(TermTuple.isFixed(vTermTuple), Exception.new("auto term can't be used here", vStack:getNode()))
		return vStack:withMorePushContextWithCase(vStack:getNode(), vTermTuple, function(vContext, vType, vCase)
			vNativeFunc(vContext, vType)
		end):mergeReturn(), vStack:mergeEndErrType()
	end)
	return nOpenFn
end

function native.stackNativeOpenFunction(vManager:clazz.TypeManager,
	vFn:clazz.OpenCaller
):Ret(clazz.OpenFunction)
	const nOpenFn = vManager:newNativeOpenFunction()
	nOpenFn:lateInit(vFn)
	return nOpenFn
end

function native.polyNativeOpenFunction(vManager:clazz.TypeManager,
	vPolyFn:clazz.OpenPolyCaller
):Ret(clazz.OpenFunction)
	const nOpenFn = vManager:newNativeOpenFunction()
	nOpenFn:lateInit(function(vStack, vTermTuple)
		return vPolyFn(vStack, false, vTermTuple)
	end, function(vTupleBuilder)
		const nOpenFn = vManager:newNativeOpenFunction()
		nOpenFn:lateInit(function(vStack, vTermTuple)
			return vPolyFn(vStack, vTupleBuilder, vTermTuple)
		end)
		return nOpenFn
	end)
	return nOpenFn
end

function native._toTable(vManager:clazz.TypeManager, vTable:StringToAtomUnion):Ret(clazz.AutoTable)
	const nTypeDict:Dict(clazz.IAtomType, clazz.UAtomUnion) = {}
	const nPairList:List(Struct{clazz.UAtomUnion, clazz.UAtomUnion}) = {}
	for k,v in pairs(vTable) do
		const nKeyType = vManager:Literal(k)
		nTypeDict[nKeyType] = v
	end
	const nTable = vManager:getRuntime():getRootStack():newAutoTable(vManager:getRuntime():getRootNode())
	nTable:initByKeyValue(vManager:getRuntime():getRootNode(), nTypeDict)
	return nTable
end

function native.make(vRuntime:clazz.BaseRuntime):Ret(clazz.AutoTable)
	const nManager = vRuntime:getTypeManager()
	const global:StringToAtomUnion = {
		--- meta_native
		setmetatable=native.stackNativeOpenFunction(nManager, function(vStack, vTermTuple)
			return vStack:withOnePushContext(vStack:getNode(), function(vContext)
				const nTerm1 = vTermTuple:checkFixed(vContext, 1)
				local nType1 = nTerm1:getType()
				local nType2 = vTermTuple:checkFixed(vContext, 2):getType()
				if nType1:isUnion() or nType2:isUnion() then
					vContext:error("setmetatable can't take union type")
				else
					nType1 = nType1:checkAtomUnion()
					nType2 = nType2:checkAtomUnion()
					if SealTable.is(nType2) or OpenTable.is(nType2) then
						nType2:setAssigned(vContext)
						nType1:native_setmetatable(vContext, nType2)
					else
						vContext:error("metatable must be table but get:"..tostring(nType2))
					end
				end
				vContext:nativeOpenReturn(nTerm1)
			end):mergeFirst()
		end),
		getmetatable=native.fixedNativeOpenFunction(nManager, function(vContext, vTermTuple)
			local nTerm1 = vTermTuple:get(vContext, 1)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			nTerm1:foreach(function(vType1, vVariableCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType1:native_getmetatable(vContext),
					vVariableCase,
				}
			end)
			return vContext:mergeToRefineTerm(nTypeCaseList)
		end),
		rawget=native.fixedNativeOpenFunction(nManager, function(vContext, vTermTuple)
			const nTerm1 = vTermTuple:get(vContext, 1)
			const nTerm2 = vTermTuple:get(vContext, 2)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			nTerm1:foreach(function(vType1, vCase1)
				nTerm2:foreach(function(vType2, vCase2)
					nTypeCaseList[#nTypeCaseList + 1] = {
						vType1:native_rawget(vContext, vType2),
						vCase1 & vCase2,
					}
				end)
			end)
			return vContext:mergeToRefineTerm(nTypeCaseList)
		end),
		next=nManager.builtin.next,
		ipairs=native.metaNativeOpenFunction(nManager, function(vContext, vType)
			const nTypeTuple = vType:meta_ipairs(vContext) or nManager:TypeTuple(vContext:getNode(), {nManager.builtin.inext, vType, nManager:Literal(0)})
			vContext:pushFirstAndTuple(nTypeTuple:get(1):checkAtomUnion(), nTypeTuple)
		end),
		pairs=native.metaNativeOpenFunction(nManager, function(vContext, vType)
			const nTypeTuple = vType:meta_pairs(vContext) or nManager:TypeTuple(vContext:getNode(), {nManager.builtin.next, vType, nManager.type.Nil})
			vContext:pushFirstAndTuple(nTypeTuple:get(1):checkAtomUnion(), nTypeTuple)
		end),
		rawequal=native.fixedNativeOpenFunction(nManager, function(vContext, vTermTuple)
			--self:argnum_warn(2, vTermTuple)
			--return self:check_call(vTermTuple)
			print("rawequal TODO")
			return vContext:RefineTerm(nManager.type.Boolean)
		end),
		type=native.fixedNativeOpenFunction(nManager, function(vContext, vTermTuple)
			local nTerm = vTermTuple:get(vContext, 1)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			nTerm:foreach(function(vType, vVariableCase)
				nTypeCaseList[#nTypeCaseList + 1] = {
					vType:native_type(), vVariableCase
				}
			end)
			return vContext:mergeToRefineTerm(nTypeCaseList)
		end),
		--- not meta_native
		select=native.fixedNativeOpenFunction(nManager, function(vContext, vTermTuple)
			const nFirstType = vTermTuple:firstType()
			if nFirstType == nManager:Literal("#") then
				if vTermTuple:getTail() then
					return vContext:RefineTerm(nManager.type.Integer)
				else
					return vContext:RefineTerm(nManager:Literal(#vTermTuple-1))
				end
			else
				if IntegerLiteral.is(nFirstType) then
					local nStart = nFirstType:getLiteral()
					if nStart > 0 then
						return vTermTuple:select(vContext, nStart + 1)
					elseif nStart < 0 then
						vContext:error("select first < 0 TODO")
						return vContext:FixedTermTuple({})
					else
						vContext:error("select's first arguments is zero")
						return vContext:FixedTermTuple({})
					end
				else
					if Integer.is(nFirstType) then
						const nTypeSet = nManager:HashableTypeSet()
						for i=2, #vTermTuple do
							const nType = vTermTuple:get(vContext, i):getType()
							nTypeSet:putType(nType)
						end
						const nRepeatType = vTermTuple:getRepeatType()
						if nRepeatType then
							nTypeSet:putType(nRepeatType:checkAtomUnion())
						end
						const nFinalType = nManager:unifyAndBuild(nTypeSet)
						if nRepeatType then
							return nManager:TypeTuple(vContext:getNode(), {}):withDots(nRepeatType):makeTermTuple(vContext)
						else
							const nReList:List(clazz.UMustType) = {}
							for i=2, #vTermTuple do
								nReList[#nReList + 1] = nFinalType
							end
							return nManager:TypeTuple(vContext:getNode(), nReList):makeTermTuple(vContext)
						end
					else
						vContext:error("select's first value must be integer or integer-literal")
						return vContext:FixedTermTuple({})
					end
				end
			end
		end),
		require=native.polyNativeOpenFunction(nManager, function(vStack, vTupleBuilder, vTermTuple)
			return vStack:withOnePushContext(vStack:getNode(), function(vContext)
				local nFileName = vTermTuple:get(vContext, 1):getType()
				const nFirstArgForName = vTupleBuilder and vTupleBuilder:getArgList()[1] -- first arg for namespace name
				const nSecondArgForReturn = vTupleBuilder and vTupleBuilder:getArgList()[2] -- second arg for namespace return
				local nRetTerm:OrNil(clazz.RefineTerm) = nil
				if StringLiteral.is(nFileName) then
					local nPath = nFileName:getLiteral()
					const nOkay, nRetTermOrException, nOpenFn, nOpenStack = pcall(function()
						return vRuntime:require(vStack:getNode(), nPath)
					end)
					if nOkay then
						const nLetSpace = nOpenStack:getLetSpace()
						if vTupleBuilder then
							const nArgList = vTupleBuilder:getArgList()
							if nFirstArgForName then
								const nRefer = SpaceValue.checkRefer(nFirstArgForName)
								if nRefer then
									nRefer:setAssignAsync(vStack:getNode(), function()
										return nLetSpace:export()[nRefer:getName()]
									end)
								elseif not getmetatable(nFirstArgForName) and type(nFirstArgForName) == "table" then
									for k,v in pairs(nFirstArgForName) do
										if math.type(k) == "integer" then
											const nRefer = SpaceValue.checkRefer(v)
											if nRefer then
												nRefer:setAssignAsync(vStack:getNode(), function()
													return nLetSpace:export()[nRefer:getName()]
												end)
											else
												vContext:error('namespace or letspace expected, use require as a poly function: require @<let.name1> or require @<{let.name1}> or require@<{[let.name3]="name1"}>')
											end
										else
											const nRefer = SpaceValue.checkRefer(k)
											if nRefer and type(v) == "string" then
												nRefer:setAssignAsync(vStack:getNode(), function()
													return nLetSpace:export()[v]
												end)
											else
												vContext:error('namespace or letspace expected, use require as a poly function: require @<let.name1> or require @<{let.name1}> or require@<{[let.name3]="name1"}>')
											end
										end
									end
								else
									vContext:error('namespace or letspace expected, use require as a poly function: require @<let.name1> or require @<{let.name1}> or require@<{[let.name3]="name1"}>')
								end
							end
						end
						vContext:addLookTarget(nOpenFn)
						nRetTerm = nRetTermOrException
					else
						if Exception.is(nRetTermOrException) then
							vRuntime:nodeError(nRetTermOrException.node, nRetTermOrException.msg)
						else
							vContext:error(tostring(nRetTermOrException))
						end
						vContext:error("require error")
					end
				else
					vContext:warn("require take non-const type ")
				end
				if not nRetTerm then
					if nSecondArgForReturn then
						nRetTerm = vContext:RefineTerm(nManager:getSpaceManager():spaceToMustType(vStack:getNode(), nSecondArgForReturn))
					else
						nRetTerm = vContext:RefineTerm(nManager.type.Truth)
					end
				end
				vContext:nativeOpenReturn(nRetTerm)
			end):mergeFirst()
		end),
		-- function take open context, not oper context
		pcall=native.stackNativeOpenFunction(nManager, function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFunc = vTermTuple:get(nHeadContext, 1):checkRefineTerm(nHeadContext)
			const nArgs = vTermTuple:select(nHeadContext, 2)
			const nCallContext = vStack:prepareMetaCall(vStack:getNode(), nFunc, function() return nArgs end)
			return nCallContext:pcallMergeReturn(vStack:mergeEndErrType())
		end),
		xpcall=native.stackNativeOpenFunction(nManager, function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFunc1 = vTermTuple:get(nHeadContext, 1):checkRefineTerm(nHeadContext)
			const nFunc2 = vTermTuple:get(nHeadContext, 2):checkRefineTerm(nHeadContext)
			const nArgs = vTermTuple:select(nHeadContext, 3)
			const nCallContext = vStack:prepareMetaCall(vStack:getNode(), nFunc1, function() return nArgs end)
			const nErrType = vStack:mergeEndErrType()
			const nHandleContext = vStack:prepareMetaCall(vStack:getNode(), nFunc2, function() return nCallContext:FixedTermTuple({nCallContext:RefineTerm(nErrType)}) end)
			const nHandleReturn = nHandleContext:mergeReturn()
			const nType = RefineTerm.is(nHandleReturn) and nHandleReturn:getType() or nHandleReturn:get(nHandleContext, 1):getType()
			return nCallContext:pcallMergeReturn(nType)
		end),
		error=native.stackNativeOpenFunction(nManager, function(vStack, vTermTuple)
			const nOperCtx = vStack:inplaceOper()
			vStack:getApplyStack():nativeError(nOperCtx, vTermTuple:checkFixed(nOperCtx, 1))
			return nOperCtx:FixedTermTuple({})
		end),
		assert=native.stackNativeOpenFunction(nManager, function(vStack, vTermTuple)
			const nHeadContext = vStack:inplaceOper()
			const nFirst = vTermTuple:checkFixed(nHeadContext, 1)
			const nSecond = vTermTuple:rawget(2)
			vStack:getApplyStack():nativeAssert(nHeadContext, nFirst, nSecond and nSecond:checkRefineTerm(nHeadContext))
			const nLogicContext = vStack:newLogicContext(vStack:getNode())
			return vStack:inplaceOper():FixedTermTuple({nLogicContext:logicTrueTerm(nFirst)})
		end),
	}

	const nGlobalTable = native._toTable(vRuntime:getTypeManager(), global)
    nGlobalTable:setName("_G")

	return nGlobalTable
end

function native.make_inext(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	local nInteger = vManager.type.Integer
	local nNil = vManager.type.Nil
	return native.fixedNativeOpenFunction(vManager, function(vContext, vTermTuple)
		const nFirstTerm = vTermTuple:get(vContext, 1)
		--local nNotNilValue = nType1:meta_get(vContext, nNumber):notnilType()
		local nNotNilValue = vContext:getStack():anyNodeMetaGet(vContext:getNode(), nFirstTerm, vContext:RefineTerm(nInteger), true):getType()
		local nValueTerm = vContext:RefineTerm(vManager:checkedUnion(nNotNilValue, nNil))
		local nKeyValue:Dict(clazz.IAtomType, clazz.UAtomUnion) = {
			[nInteger]=nNotNilValue,
			[nNil]=nNil,
		}
		local nTypeCaseList:List(clazz.TypeCasePair) = {}
		for nOneKey, nOneValue in pairs(nKeyValue) do
			local nCase = VariableCase.new()
			nCase:put_and(nValueTerm:attachImmutVariable(), nOneValue)
			nTypeCaseList[#nTypeCaseList + 1] = {
				nOneKey, nCase
			}
		end
		local nKeyTerm = vContext:mergeToRefineTerm(nTypeCaseList)
		return vContext:FixedTermTuple({nKeyTerm, nValueTerm})
	end)
end

function native.make_next(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	return native.fixedNativeOpenFunction(vManager, function(vContext, vTermTuple)
		local nType1 = vTermTuple:get(vContext, 1):getType()
		nType1 = nType1:trueType()
		local nType2 = vTermTuple:get(vContext, 2):getType()
		if nType1:isUnion() then
			if nType1:isNever() then
				vContext:error("next must take table as first type")
			else
				vContext:error("TODO: next Union type")
			end
			return vContext:FixedTermTuple({vContext:NilTerm(), vContext:NilTerm()})
		else
			local nValueType, nKeyValue = nType1:native_next(vContext, nType2)
			local nValueTerm = vContext:RefineTerm(nValueType)
			local nTypeCaseList:List(clazz.TypeCasePair) = {}
			for nOneKey, nOneValue in pairs(nKeyValue) do
				local nCase = VariableCase.new()
				nCase:put_and(nValueTerm:attachImmutVariable(), nOneValue)
				nTypeCaseList[#nTypeCaseList + 1] = {
					nOneKey, nCase
				}
			end
			local nKeyTerm = vContext:mergeToRefineTerm(nTypeCaseList)
			return vContext:FixedTermTuple({nKeyTerm, nValueTerm})
		end
	end)
end

function native.make_mathematic(vManager:clazz.TypeManager, vIsDivide:OrNil(True)):Ret(clazz.IAtomType)
	const nNumber = vManager.type.Number
	if vIsDivide then
		return vManager:checkedFn(nNumber, nNumber):Ret(nNumber)
	end
	const nInteger = vManager.type.Integer
	return native.stackNativeOpenFunction(vManager, function(vStack, vTermTuple)
		const nOperCtx = vStack:inplaceOper()
		const nType1 = vTermTuple:checkFixed(nOperCtx, 1):getType()
		const nType2 = vTermTuple:checkFixed(nOperCtx, 2):getType()
		local nHasFloat = false
		const nEachFn:Fn(clazz.IAtomType) = function(vAtomType)
			if FloatLiteral.is(vAtomType) or Number.is(vAtomType) then
				nHasFloat = true
			elseif not (IntegerLiteral.is(vAtomType) or Integer.is(vAtomType)) then
				nOperCtx:error("math operator must take number")
			end
		end
		nType1:foreach(nEachFn)
		nType2:foreach(nEachFn)
		if nHasFloat then
			return nOperCtx:FixedTermTuple({nOperCtx:RefineTerm(nNumber)})
		else
			return nOperCtx:FixedTermTuple({nOperCtx:RefineTerm(nInteger)})
		end
	end)
end

function native.make_comparison(vManager:clazz.TypeManager):Ret(clazz.IAtomType)
	const nNumber = vManager.type.Number
	const nString = vManager.type.String
	const nNumberCompare = vManager:checkedFn(nNumber, nNumber):Ret(vManager.type.Boolean)
	const nStringCompare = vManager:checkedFn(nString, nString):Ret(vManager.type.Boolean)
	return vManager:buildPfn(vManager:getRuntime():getRootNode(), function(a:clazz.UAtomUnion, b:clazz.UAtomUnion):Ret(clazz.UAtomUnion)
		if nString:includeAll(a) then
			return nStringCompare
		else
			return nNumberCompare
		end
	end)
end

function native.make_bitwise(vManager:clazz.TypeManager):Ret(clazz.TypedFunction)
	local nInteger = vManager.type.Integer
	return vManager:checkedFn(nInteger, nInteger):Ret(nInteger)
end

function native.make_concat(vManager:clazz.TypeManager):Ret(clazz.TypedFunction)
	local nType = vManager:checkedUnion(vManager.type.String, vManager.type.Number)
	return vManager:checkedFn(nType, nType):Ret(vManager.type.String)
end

return native

