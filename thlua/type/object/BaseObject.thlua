
const Exception = require "thlua.Exception"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const Nil = require "thlua.type.basic.Nil"
const TypedFunction = require "thlua.type.func.TypedFunction"

const BaseAtomType = require "thlua.type.basic.BaseAtomType"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const BaseObject = class@<clazz.BaseObject, false>(BaseAtomType)

function.open BaseObject:ctor(vManager:clazz.TypeManager, vNode:clazz.IAstNode, ...)
	self.bits=TYPE_BITS.OBJECT
	self._metaEventCom=false@OrFalse(clazz.MetaEventCom)
	self._node=vNode
end

function BaseObject:getMetaEventCom():Ret(OrFalse(clazz.MetaEventCom))
	return self._metaEventCom
end

function BaseObject:detailString(v, vVerbose)
	return "BaseObject..."
end

function BaseObject:meta_uop_some(vContext, vOper)
	vContext:error("meta uop not implement:")
	return self._manager.type.Never
end

function BaseObject:meta_bop_func(vContext, vOper)
	vContext:error("meta bop not implement:")
	return false, nil
end

function BaseObject:isSingleton()
	return false
end

function BaseObject:native_type()
	return self._manager:Literal("table")
end

function.pass BaseObject:getValueDict():Ret(Dict(clazz.IAtomType, clazz.UAtomUnion))
	error("not implement")
end

function BaseObject:memberFunctionFillSelf(vChain:clazz.RecurChain, vSelfTable:clazz.SealTable)
	error("TODO base object as __index")
end

return BaseObject
