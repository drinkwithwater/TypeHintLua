
const VariableCase = require "thlua.term.VariableCase"
const StringLiteral = require "thlua.type.basic.StringLiteral"
const SealPolyFunction = require "thlua.type.func.SealPolyFunction"
const TypedFunction = require "thlua.type.func.TypedFunction"
const AutoFunction = require "thlua.type.func.AutoFunction"
const BaseFunction = require "thlua.type.func.BaseFunction"
const OPER_ENUM = require "thlua.type.OPER_ENUM"
const RecurChain = require "thlua.stack.context.RecurChain"
const Nil = require "thlua.type.basic.Nil"

const SealTable = require "thlua.type.object.SealTable"
const class = require "thlua.class"

(@do
	let.clazz = import($class).clazz
end)

const ClassTable = class@<clazz.ClassTable, false>(SealTable)

function.open ClassTable:ctor(
	vManager:clazz.TypeManager,
	vNode:clazz.IBaseNode,
	vLexStack:clazz.BaseStack,
	vFactory:clazz.ClassFactory,
	vBaseClass:OrFalse(clazz.ClassTable),
	vInterface:clazz.Interface
)
	self._factory = vFactory
	self._baseClass = vBaseClass
	self._interface = vInterface
	self._buildFinish = false@Boolean
end

function ClassTable:detailString(vVerbose:Boolean)
	return "ClassTable@"..tostring(self._node)
end

function ClassTable:onSetMetaTable(vContext:clazz.ApplyContext)
	self._factory:wakeupTableBuild()
	self:onBuildFinish()
end

function ClassTable:onBuildFinish()
	if not self._buildFinish then
		self._buildFinish = true
		self:implInterface()
		const nRecurChain = RecurChain.new(self._node)
		self:memberFunctionFillSelf(nRecurChain, self)
		self._factory:wakeupTableBuild()
	end
end

function ClassTable:implInterface()
	const nInterfaceKeyValue = self._interface:copyValueDict(self)
	for nKeyAtom, nValue in pairs(nInterfaceKeyValue) do
		const nContext = self._factory:getBuildStack():withOnePushContext(self._factory:getNode(), function(vSubContext)
			vSubContext:withCase(VariableCase.new(), function()
				self:meta_get(vSubContext, nKeyAtom)
			end)
		end)
		const nSelfValue = nContext:mergeFirst():getType()
		if SealPolyFunction.is(nSelfValue) then
			if TypedFunction.is(nValue) then
				const nAutoFn = nSelfValue:tryMemberTrivialize(self._node, self)
				if nAutoFn then
					nAutoFn:checkWhenCast(nContext, nValue)
				end
			end
		else
			if not nValue:includeAll(nSelfValue) then
				nContext:error("interface's field must be supertype for table's field, key="..tostring(nKeyAtom))
			end
		end
	end
end

function ClassTable:ctxWait(vContext:clazz.OperContext)
	self._factory:waitTableBuild()
end

-- TODO, thinking how to design this...
-- setLocked called by buildStruct, so wait for table build, but duplicate with ctxWait
-- how to refactor this?
function ClassTable:setLocked()
	self._factory:waitTableBuild()
end

function ClassTable:getBaseClass()
	return self._baseClass
end

function ClassTable:getInterface()
	return self._interface
end

function ClassTable:checkTypedObject()
	return self._interface
end

function ClassTable:assumeIncludeAtom(vAssumeSet, vType, _)
	if ClassTable.is(vType) then
		local nMatchTable = vType
		while nMatchTable ~= self do
			const nBaseClass = nMatchTable:getBaseClass()
			if not nBaseClass then
				break
			else
				nMatchTable = nBaseClass
			end
		end
		return nMatchTable == self and self or false
	else
		-- TODO check struct
		return false
	end
end

function ClassTable:isLocked():Ret(Boolean)
	return self._buildFinish
end

return ClassTable
