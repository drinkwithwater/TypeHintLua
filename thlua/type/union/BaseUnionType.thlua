
const class = require "thlua.class"
const BaseReadyType = require "thlua.type.basic.BaseReadyType"

(@let.clazz = import("thlua.class").clazz)

const BaseUnionType = class@<clazz.BaseUnionType, clazz.IUnionType>(BaseReadyType)

function.open BaseUnionType:ctor(...)
    self.bits = false @? Integer
end

function BaseUnionType:detailString(vVerbose:Boolean):Ret(String)
    const l:List(clazz.IAtomType) = {}
    self:foreach(function(vType)
        l[#l+1] = vType
    end)
    table.sort(l, function(vLeft:clazz.IAtomType, vRight:clazz.IAtomType)
        return vLeft.id < vRight.id
    end)
    const sl:List(String) = {}
    for i=1, #l do
        sl[i] = l[i]!:detailString(vVerbose)
    end
    return "Union("..table.concat(sl,",")..")"
end

function BaseUnionType:initWithTypeId(vTypeId, vTypeSet)
    assert(self.id == 0, "newunion's id must be 0")
    self.id = vTypeId
    self._typeSet = vTypeSet
end

function BaseUnionType:isUnion()
    return true
end

function BaseUnionType:putAwait(vType)
    error("this union type can't call putAwait to build itself")
end

function BaseUnionType:setAssigned(vContext)
    self:foreach(function(vType)
        vType:setAssigned(vContext)
    end)
end

function BaseUnionType:checkAtomUnion()
	return self
end

function BaseUnionType:putCompletion(v)
    self:foreach(function(vType)
        vType:putCompletion(v)
    end)
end

return BaseUnionType