
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const Integer = require "thlua.type.basic.Integer"
const Number = require "thlua.type.basic.Number"
const Truth = require "thlua.type.basic.Truth"
const TYPE_BITS = require "thlua.type.TYPE_BITS"

const BaseUnionType = require "thlua.type.union.BaseUnionType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const IntegerLiteralUnion = class@<clazz.IntegerLiteralUnion, false>(BaseUnionType)

function.open IntegerLiteralUnion:ctor(vTypeManager:clazz.TypeManager)
	self._literalSet={} @Dict(clazz.IntegerLiteral, True)
	self.bits=TYPE_BITS.NUMBER
end

function IntegerLiteralUnion:putAwait(vType)
	if IntegerLiteral.is(vType) then
		self._literalSet[vType] = true
	else
		error("set put wrong")
	end
end

function IntegerLiteralUnion:assumeIntersectAtom(vAssumeSet, vType)
	if Integer.is(vType) or Number.is(vType) or Truth.is(vType) then
		return self
	else
		return self:assumeIncludeAtom(nil, vType)
	end
end

function IntegerLiteralUnion:assumeIncludeAtom(vAssumeSet, vType, _)
	if IntegerLiteral.is(vType) then
		if self._literalSet[vType] then
			return vType
		else
			return false
		end
	else
		return false
	end
end

function IntegerLiteralUnion:foreach(vFunc)
	for nLiteralType, v in pairs(self._literalSet) do
		vFunc(nLiteralType)
	end
end

return IntegerLiteralUnion
