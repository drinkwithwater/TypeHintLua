
const FloatLiteral = require "thlua.type.basic.FloatLiteral"
const SubType = require "thlua.type.basic.SubType"
const Number = require "thlua.type.basic.Number"
const IntegerLiteral = require "thlua.type.basic.IntegerLiteral"
const IntegerLiteralUnion = require "thlua.type.union.IntegerLiteralUnion"
const Integer = require "thlua.type.basic.Integer"
const Truth = require "thlua.type.basic.Truth"
const TYPE_BITS = require "thlua.type.TYPE_BITS"

const BaseUnionType = require "thlua.type.union.BaseUnionType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const MixingNumberUnion = class@<clazz.MixingNumberUnion, false>(BaseUnionType)

function.open MixingNumberUnion:ctor(
	vTypeManager:clazz.TypeManager,
	vFloatLiteralSet:Dict(clazz.FloatLiteral, True),
	vIntegerPart:OrFalse(clazz.Integer, clazz.IntegerLiteralUnion, clazz.IntegerLiteral)
)
	self._floatLiteralSet=vFloatLiteralSet
	self._integerPart=vIntegerPart
	self.bits=TYPE_BITS.NUMBER
end

function MixingNumberUnion:assumeIntersectAtom(vAssumeSet, vType)
	if Number.is(vType) or Truth.is(vType) then
		return self
	elseif Integer.is(vType) then
		return self._integerPart
	else
		return self:assumeIncludeAtom(nil, vType)
	end
end

function MixingNumberUnion:assumeIncludeAtom(vAssumeSet, vType, _)
	if self._typeSet:findAtom(vType) then
		return vType
	else
		const nIntegerPart = self._integerPart
		return nIntegerPart and nIntegerPart:assumeIncludeAtom(vAssumeSet, vType, _)
	end
end

function MixingNumberUnion:foreach(vFunc)
	for nLiteralType, v in pairs(self._floatLiteralSet) do
		vFunc(nLiteralType)
	end
	const nIntegerPart = self._integerPart
	if nIntegerPart then
		nIntegerPart:foreach(vFunc)
	end
end

return MixingNumberUnion
