
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const BaseUnionType = require "thlua.type.union.BaseUnionType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const Never = class@<clazz.Never, false>(BaseUnionType)

function.open Never:ctor(vManager:clazz.TypeManager)
	self.bits=TYPE_BITS.NEVER
end

function Never:detailString(vStringCache, vVerbose)
	return "Never"
end

function Never:foreach(vFunc)
end

function Never:assumeIncludeAtom(vAssumeSet, vType, _)
	return false
end

function Never:assumeIntersectAtom(vAssumeSet, vType)
	return false
end

function Never:unionSign()
	return ""
end

function Never:isNever()
    return true
end

return Never
