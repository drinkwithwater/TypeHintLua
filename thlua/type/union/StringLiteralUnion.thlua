
const StringLiteral = require "thlua.type.basic.StringLiteral"
const String = require "thlua.type.basic.String"
const Truth = require "thlua.type.basic.Truth"
const TYPE_BITS = require "thlua.type.TYPE_BITS"

const BaseUnionType = require "thlua.type.union.BaseUnionType"
const class = require "thlua.class"

(@let.clazz = import($class).clazz)

const StringLiteralUnion = class@<clazz.StringLiteralUnion, false>(BaseUnionType)

function.open StringLiteralUnion:ctor(vTypeManager:clazz.TypeManager, vStringLiteralSet:Dict(clazz.StringLiteral, True))
	self._literalSet=vStringLiteralSet
	self.bits=TYPE_BITS.STRING
end

function StringLiteralUnion:assumeIntersectAtom(vAssumeSet, vType)
	if String.is(vType) or Truth.is(vType) then
		return self
	else
		return self:assumeIncludeAtom(nil, vType)
	end
end

function StringLiteralUnion:assumeIncludeAtom(vAssumeSet, vType, _)
	if self._typeSet:findAtom(vType) then
		return vType
	else
		return false
	end
end

function StringLiteralUnion:foreach(vFunc)
	for nLiteralType, v in pairs(self._literalSet) do
		vFunc(nLiteralType)
	end
end

return StringLiteralUnion