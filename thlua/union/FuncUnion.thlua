
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const UnionClass = require "thlua.union.UnionClass"
const Truth = require "thlua.type.Truth"
const NativeFunction = require "thlua.func.NativeFunction"
const LuaFunction = require "thlua.func.LuaFunction"
const TypeFunction = require "thlua.func.TypeFunction"

const FuncUnion = UnionClass()

(@let.class = import("thlua.type.TypeClass").class)

function FuncUnion.new(vManager:class.TypeManager):RetClass(class.FuncUnion, class.IUnionType)
	const self = setmetatable({.class
		_manager=vManager,
		_nativeFnDict={} @Dict(class.NativeFunction, True),
		_typeFnDict={} @Dict(class.TypeFunction, True),
		_luaFnDict={} @Dict(class.LuaFunction, True),
		bits=TYPE_BITS.FUNCTION,
		id=0@Integer,
	}, FuncUnion)
	return self
end

function FuncUnion:foreach(vFunc)
	for nType, _ in pairs(self._nativeFnDict) do
		vFunc(nType)
	end
	for nType, _ in pairs(self._typeFnDict) do
		vFunc(nType)
	end
	for nType, _ in pairs(self._luaFnDict) do
		vFunc(nType)
	end
end

function FuncUnion:putAwait(vType)
	if self:containAtom(vType) then
		return
	end
	if NativeFunction.is(vType) then
		self._nativeFnDict[vType] = true
	elseif LuaFunction.is(vType) then
		for nTypeFn, _ in pairs(self._typeFnDict) do
			if nTypeFn:containAtom(vType) then
				return
			end
		end
		self._luaFnDict[vType] = true
	elseif TypeFunction.is(vType) then
		-- delete small struct
		const nDeleteList:List(class.TypeFunction) = {}
		for nTypeFn, _ in pairs(self._typeFnDict) do
			if vType:containAtom(nTypeFn) then
				nDeleteList[#nDeleteList + 1] = nTypeFn
			else
				const nIntersect = vType:intersectAtom(nTypeFn)
				if nIntersect then
					error("unexpected intersect when union function")
				end
			end
		end
		for _, nTypeFn in pairs(nDeleteList) do
			self._typeFnDict[nTypeFn] = nil
		end
		self._typeFnDict[vType] = true
	else
		error("fn-type unexpected")
	end
end

function FuncUnion:assumeIntersectAtom(vAssumeSet, vType)
	if Truth.is(vType) then
		return self
	end
	if self:containAtom(vType) then
		return vType
	end
	if TypeFunction.is(vType) then
		const nCollection = self._manager:TypeCollection()
		self:foreach(function(vSubType)
			if vType:containAtom(vSubType) then
				nCollection:put(vSubType)
			end
		end)
		return nCollection:mergeToAtomUnion()
	end
	return false
end

function FuncUnion:assumeContainAtom(vAssumeSet, vType)
	if NativeFunction.is(vType) then
		if self._nativeFnDict[vType] then
			return vType
		else
			return false
		end
	elseif LuaFunction.is(vType) then
		if self._luaFnDict[vType] then
			return vType
		else
			return false
		end
	end
	for nTypeFn, _ in pairs(self._typeFnDict) do
		if nTypeFn:assumeContainAtom(vAssumeSet, vType) then
			return nTypeFn
		end
	end
	return false
end

function FuncUnion:fnPartType()
	return self
end

function FuncUnion:mayRecursive()
	return true
end

return FuncUnion
