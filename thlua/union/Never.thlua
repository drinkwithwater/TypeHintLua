
local TYPE_BITS = require "thlua.type.TYPE_BITS"
local UnionClass = require "thlua.union.UnionClass"

local Never = UnionClass()

(@let.class = import("thlua.type.TypeClass").class)

function Never.new(vManager:class.TypeManager)::RetClass(class.Never, class.IUnionType)
	local self = setmetatable({::Self()
		_manager=vManager,
		id=vManager:genTypeId(),
		bits=TYPE_BITS.NEVER,
	}, Never)
	return self
end

function Never:detailString(vStringCache)
	return "Never"
end

function Never:foreach(vFunc)
end

function Never:atomContainAssume(vAssumeSet, vType)
	return false
end

function Never:_intersectOneNotRefer(vType)
	return false
end

function Never:unionSign()
	return ""
end

function Never:isNever()
    return true
end

return Never
