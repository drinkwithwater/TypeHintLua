
local NumberLiteral = require "thlua.type.NumberLiteral"
local Number = require "thlua.type.Number"
local Truth = require "thlua.type.Truth"
local TYPE_BITS = require "thlua.type.TYPE_BITS"

local SetComClass = require "thlua.union.SetComClass"
local NumberLiteralSetCom = SetComClass()

(@let.class = import("thlua.type.TypeClass").class)

function NumberLiteralSetCom.new(vTypeManager:class.TypeManager)::RetClass(class.NumberLiteralSetCom, class.ISetCom)
	return setmetatable({::Self()
		_manager=vTypeManager,
		_literalSet={} @Dict(class.NumberLiteral, True),
	}, NumberLiteralSetCom)
end

function NumberLiteralSetCom:_put(vType)
	if NumberLiteral.is(vType) then
		self._literalSet[vType] = true
	else
		error("set put wrong")
	end
end

function NumberLiteralSetCom:_intersectOneNotRefer(vType)
    if Number.is(vType) or Truth.is(vType) then
        return self
    else
        return self:_containOneNotRefer(vType)
    end
end

function NumberLiteralSetCom:_containOneNotRefer(vType)
	if NumberLiteral.is(vType) then
		if self._literalSet[vType] then
			return vType
		else
			return false
		end
	else
		return false
	end
end

function NumberLiteralSetCom:foreach(vFunc)
	for nLiteralType, v in pairs(self._literalSet) do
		vFunc(nLiteralType)
	end
end

return NumberLiteralSetCom
