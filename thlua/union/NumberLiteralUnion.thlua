
const NumberLiteral = require "thlua.type.NumberLiteral"
const Number = require "thlua.type.Number"
const Truth = require "thlua.type.Truth"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const UnionClass = require "thlua.union.UnionClass"

const NumberLiteralUnion = UnionClass()

(@let.class = import("thlua.type.TypeClass").class)

function.class NumberLiteralUnion.new(vTypeManager:class.TypeManager):RetClass(class.NumberLiteralUnion, class.IUnionType)
	return setmetatable({.class
		_manager=vTypeManager,
		_literalSet={} @Dict(class.NumberLiteral, True),
		id=0 @Integer,
		bits=TYPE_BITS.NUMBER,
	}, NumberLiteralUnion)
end

function NumberLiteralUnion:putAwait(vType)
	if NumberLiteral.is(vType) then
		self._literalSet[vType] = true
	else
		error("set put wrong")
	end
end

function NumberLiteralUnion:assumeIntersectAtom(vAssumeSet, vType)
	if Number.is(vType) or Truth.is(vType) then
		return self
	else
		return self:assumeContainAtom(nil, vType)
	end
end

function NumberLiteralUnion:assumeContainAtom(vAssumeSet, vType)
	if NumberLiteral.is(vType) then
		if self._literalSet[vType] then
			return vType
		else
			return false
		end
	else
		return false
	end
end

function NumberLiteralUnion:foreach(vFunc)
	for nLiteralType, v in pairs(self._literalSet) do
		vFunc(nLiteralType)
	end
end

return NumberLiteralUnion
