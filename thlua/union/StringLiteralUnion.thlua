
const StringLiteral = require "thlua.type.StringLiteral"
const String = require "thlua.type.String"
const Truth = require "thlua.type.Truth"
const TYPE_BITS = require "thlua.type.TYPE_BITS"
const UnionClass = require "thlua.union.UnionClass"

const StringLiteralUnion = UnionClass()

(@let.class = import("thlua.type.TypeClass").class)

function StringLiteralUnion.new(vTypeManager:class.TypeManager):RetClass(class.StringLiteralUnion, class.IUnionType)
	return setmetatable({:Self()
		_manager=vTypeManager,
		_literalSet={} @Dict(class.StringLiteral,True), -- literal to true
		id=0 @Number,
		bits=TYPE_BITS.STRING,
	}, StringLiteralUnion)
end

function StringLiteralUnion:putAwait(vType)
	if StringLiteral.is(vType) then
		self._literalSet[vType] = true
	else
		error("set put wrong")
	end
end

function StringLiteralUnion:assumeIntersectAtom(vAssumeSet, vType)
	if String.is(vType) or Truth.is(vType) then
		return self
	else
		return self:assumeContainAtom(nil, vType)
	end
end

function StringLiteralUnion:assumeContainAtom(vAssumeSet, vType)
	if StringLiteral.is(vType) then
		if self._literalSet[vType] then
			return vType
		else
			return false
		end
	else
		return false
	end
end

function StringLiteralUnion:foreach(vFunc)
	for nLiteralType, v in pairs(self._literalSet) do
		vFunc(nLiteralType)
	end
end

return StringLiteralUnion
