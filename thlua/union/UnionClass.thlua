
const ReadyTypeClass = require "thlua.type.ReadyTypeClass"

(@let.clazz = import("thlua.type.TypeClass").clazz)

const function.open UnionClass()
	const t = ReadyTypeClass()
	function t:__len(self)
		error("union clazz len TODO")
		return 0
	end
	function t:initTypeId(vTypeId)
		assert(self.id == 0, "newunion's id must be 0")
		self.id = vTypeId
	end
	function t:detailString(vCache, vVerbose):Ret(String)
		const l:List(clazz.IAtomType) = {}
		self:foreach(function(vType)
			l[#l+1] = vType
		end)
		table.sort(l, function(vLeft:clazz.IAtomType, vRight:clazz.IAtomType)
			return vLeft.id < vRight.id
		end)
		const sl:List(String) = {}
		for i=1, #l do
			sl[i] = l[i]!:detailString(vCache, vVerbose)
		end
		return "Union("..table.concat(sl,",")..")"
	end
	function t:isUnion()
		return true
	end
	function.pass t:unionSign()
		local nSign = self._unionSign
		const l = {}
		if not nSign then
			self:foreach(function(vType)
				l[#l + 1] = vType.id
			end)
			table.sort(l)
			nSign = table.concat(l, "-")
			self._unionSign = nSign
		end
		return nSign
	end
	function t:putAwait(vType)
		error("this union type can't call putAwait to build itself")
	end
	function t:setAssigned()
		self:foreach(function(vType)
			vType:setAssigned()
		end)
	end
	return t
end

return UnionClass
